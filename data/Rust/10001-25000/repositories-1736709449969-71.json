{
  "metadata": {
    "timestamp": 1736709449969,
    "page": 71,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gfx-rs/wgpu",
      "stars": 13120,
      "defaultBranch": "trunk",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".deny.toml",
          "type": "blob",
          "size": 1.240234375,
          "content": "[bans]\nmultiple-versions = \"deny\"\nskip-tree = [\n    # We never enable loom in any of our dependencies but it causes dupes\n    { name = \"loom\", version = \"0.7.2\" },\n    { name = \"windows-sys\", version = \"0.45\" },\n    { name = \"winit\", version = \"0.29\" },\n    { name = \"rustc_version\", version = \"0.2.3\" },\n    { name = \"miniz_oxide\", version = \"0.7.4\" },\n\n    # introduced by Deno, to be investigated\n    { name = \"deno_core\", version = \"0.321.0\" },\n    { name = \"deno_permissions\", version = \"0.39.0\" },\n]\nskip = [\n    # Strum uses an old version\n    { name = \"heck\", version = \"0.4.0\" },\n    # Deno uses an old version\n    { name = \"strum\", version = \"0.25.0\" },\n]\nwildcards = \"deny\"\nallow-wildcard-paths = true\n\n[licenses]\nallow = [\n    \"Apache-2.0\",\n    \"Apache-2.0 WITH LLVM-exception\",\n    \"BSD-2-Clause\",\n    \"BSD-3-Clause\",\n    \"CC0-1.0\",\n    \"ISC\",\n    \"MPL-2.0\",\n    \"MIT\",\n    \"MIT-0\",\n    \"Unicode-DFS-2016\",\n    \"Unicode-3.0\",\n    \"Zlib\",\n]\n\n[sources]\nallow-git = [\n    # Waiting on releases; used in examples only\n    \"https://github.com/Razaekel/noise-rs\",\n\n    \"https://github.com/grovesNL/glow\",\n    \"https://github.com/gfx-rs/metal-rs\",\n]\nunknown-registry = \"deny\"\nunknown-git = \"deny\"\nrequired-git-spec = \"rev\"\n\n[sources.allow-org]\ngithub = [\"gfx-rs\"]\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.0078125,
          "content": "use nix\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0859375,
          "content": "*.mtl binary\n*.obj binary\nwgpu/src/backend/webgpu/webgpu_sys/** linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7060546875,
          "content": "# Generated by Cargo\n# will have compiled files and executables\ntarget/\n# Include the root lockfile but not the others\n*/Cargo.lock\n!xtask/Cargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# Other\n.fuse_hidden*\n.DS_Store\n\n# IDE/Editor configuration files\n.vscode\n.idea\n\n# Output from capture example\nwgpu/red.png\n\n# Output from render_to_texture example\n**/please_don't_git_push_me.png\n\n# Output from invalid comparison tests\n**/*-actual.png\n**/*-difference.png\n\n# Readme says to check out CTS here\ncts/\n\n# Readme says to put angle in working directory\n*.dll\n\n# Cached GPU config\n.gpuconfig\n\n# Temporary clone location for wasm-bindgen mirroring\nwgpu/src/backend/webgpu/webgpu_sys/wasm_bindgen_clone_tmp"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 206.1796875,
          "content": "# Change Log\n\n<!--\nPlease add your PR to the changelog! Choose from a top level and bottom\nlevel category, then write your changes like follows:\n\n- Describe your change in a user friendly format. By @yourslug in [#99999](https://github.com/gfx-rs/wgpu/pull/99999)\n\nYou can add additional user facing information if it's a major breaking change. You can use the following to help:\n\n```diff\n- Old code\n+ New code\n```\n\nTop level categories:\n- Major changes\n- Added/New Features\n- Changes\n- Bug Fixes (that don't change API)\n- Performance\n- Documentation\n- Dependency Updates\n- deno-webgpu\n- Examples\n- Testing/Internal\n\nBottom level categories:\n\n- Naga\n- General\n- DX12\n- Vulkan\n- Metal\n- GLES / OpenGL\n- WebGPU\n- Emscripten\n- Hal\n-->\n\n## Unreleased\n\n### Major changes\n\n#### Refactored Dispatch Between `wgpu-core` and `webgpu`\n\nThe crate `wgpu` has two different \"backends\", one which targets webgpu in the browser, one which targets `wgpu_core` on native platforms and webgl. This was previously very difficult to traverse and add new features to. The entire system was refactored to make it simpler. Additionally the new system has zero overhead if there is only one \"backend\" in use. You can see the new system in action by using go-to-definition on any wgpu functions in your IDE.\n\nBy @cwfitzgerald in [#6619](https://github.com/gfx-rs/wgpu/pull/6619).\n\n#### Render and Compute Passes Now Properly Enforce Their Lifetime\n\nA regression introduced in 23.0.0 caused lifetimes of render and compute passes to be incorrectly enforced. While this is not\na soundness issue, the intent is to move an error from runtime to compile time. This issue has been fixed and restored to the 22.0.0 behavior.\n\n#### Bindless (`binding_array`) Grew More Capabilities\n\n- DX12 now supports `PARTIALLY_BOUND_BINDING_ARRAY` on Resource Binding Tier 3 Hardware. This is most D3D12 hardware [D3D12 Feature Table] for more information on what hardware supports this feature. By @cwfitzgerald in [#6734](https://github.com/gfx-rs/wgpu/pull/6734).\n\n[D3D12 Feature Table]: https://d3d12infodb.boolka.dev/FeatureTable.html\n\n#### `Device::create_shader_module_unchecked` Renamed and Now Has Configuration Options\n\n`create_shader_module_unchecked` became `create_shader_module_trusted`.\n\nThis allows you to customize which exact checks are omitted so that you can get the correct balance of performance and safety for your use case. Calling the function is still unsafe, but now can be used to skip certain checks only on certain builds.\n\nThis also allows users to disable the workarounds in the `msl-out` backend to prevent the compiler from optimizing infinite loops. This can have a big impact on performance, but is not recommended for untrusted shaders.\n\n```diff\nlet desc: ShaderModuleDescriptor = include_wgsl!(...)\n- let module = unsafe { device.create_shader_module_unchecked(desc) };\n+ let module = unsafe { device.create_shader_module_trusted(desc, wgpu::ShaderRuntimeChecks::unchecked()) };\n```\n\nBy @cwfitzgerald and @rudderbucky in [#6662](https://github.com/gfx-rs/wgpu/pull/6662).\n\n#### The `diagnostic(…);` directive is now supported in WGSL\n\nNaga now parses `diagnostic(…);` directives according to the WGSL spec. This allows users to control certain lints, similar to Rust's `allow`, `warn`, and `deny` attributes. For example, in standard WGSL (but, notably, not Naga yet—see <https://github.com/gfx-rs/wgpu/issues/4369>) this snippet would emit a uniformity error:\n\n```wgsl\n@group(0) @binding(0) var s : sampler;\n@group(0) @binding(2) var tex : texture_2d<f32>;\n@group(1) @binding(0) var<storage, read> ro_buffer : array<f32, 4>;\n\n@fragment\nfn main(@builtin(position) p : vec4f) -> @location(0) vec4f {\n  if ro_buffer[0] == 0 {\n    // Emits a derivative uniformity error during validation.\n    return textureSample(tex, s, vec2(0.,0.));\n  }\n\n  return vec4f(0.);\n}\n```\n\n…but we can now silence it with the `off` severity level, like so:\n\n```wgsl\n// Disable the diagnosic with this…\ndiagnostic(off, derivative_uniformity);\n\n@group(0) @binding(0) var s : sampler;\n@group(0) @binding(2) var tex : texture_2d<f32>;\n@group(1) @binding(0) var<storage, read> ro_buffer : array<f32, 4>;\n\n@fragment\nfn main(@builtin(position) p : vec4f) -> @location(0) vec4f {\n  if ro_buffer[0] == 0 {\n    // Look ma, no error!\n    return textureSample(tex, s, vec2(0.,0.));\n  }\n\n  return vec4f(0.);\n}\n```\n\nThere are some limitations to keep in mind with this new functionality:\n\n- We support `@diagnostic(…)` rules as `fn` attributes, but prioritization for rules in statement positions (i.e., `if (…) @diagnostic(…) { … }` is unclear. If you are blocked by not being able to parse `diagnostic(…)` rules in statement positions, please let us know in <https://github.com/gfx-rs/wgpu/issues/5320>, so we can determine how to prioritize it!\n- Standard WGSL specifies `error`, `warning`, `info`, and `off` severity levels. These are all technically usable now! A caveat, though: warning- and info-level are only emitted to `stderr` via the `log` façade, rather than being reported through a `Result::Err` in Naga or the `CompilationInfo` interface in `wgpu{,-core}`. This will require breaking changes in Naga to fix, and is being tracked by <https://github.com/gfx-rs/wgpu/issues/6458>.\n- Not all lints can be controlled with `diagnostic(…)` rules. In fact, only the `derivative_uniformity` triggering rule exists in the WGSL standard. That said, Naga contributors are excited to see how this level of control unlocks a new ecosystem of configurable diagnostics.\n- Finally, `diagnostic(…)` rules are not yet emitted in WGSL output. This means that `wgsl-in` → `wgsl-out` is currently a lossy process. We felt that it was important to unblock users who needed `diagnostic(…)` rules (i.e., <https://github.com/gfx-rs/wgpu/issues/3135>) before we took significant effort to fix this (tracked in <https://github.com/gfx-rs/wgpu/issues/6496>).\n\nBy @ErichDonGubler in [#6456](https://github.com/gfx-rs/wgpu/pull/6456), [#6148](https://github.com/gfx-rs/wgpu/pull/6148), [#6533](https://github.com/gfx-rs/wgpu/pull/6533), [#6353](https://github.com/gfx-rs/wgpu/pull/6353), [#6537](https://github.com/gfx-rs/wgpu/pull/6537).\n\n#### `wgpu::Instance::new` now takes `InstanceDescriptor` by reference\n\nPreviously `wgpu::Instance::new` took `InstanceDescriptor` by value (which is overall fairly uncommon in wgpu).\nFurthermore, `InstanceDescriptor` is now cloneable.\n\n```diff\n- let instance = wgpu::Instance::new(instance_desc);\n+ let instance = wgpu::Instance::new(&instance_desc);\n```\n\nBy @wumpf in [#6849](https://github.com/gfx-rs/wgpu/pull/6849).\n\n#### New Features\n\n##### Naga\n\n- Support atomic operations on fields of global structs in the SPIR-V frontend. By @schell in [#6693](https://github.com/gfx-rs/wgpu/pull/6693).\n- Clean up tests for atomic operations support in SPIR-V frontend. By @schell in [#6692](https://github.com/gfx-rs/wgpu/pull/6692)\n- Fix an issue where `naga` CLI would incorrectly skip the first positional argument when `--stdin-file-path` was specified. By @ErichDonGubler in [#6480](https://github.com/gfx-rs/wgpu/pull/6480).\n- Fix textureNumLevels in the GLSL backend. By @magcius in [#6483](https://github.com/gfx-rs/wgpu/pull/6483).\n- Support 64-bit hex literals and unary operations in constants [#6616](https://github.com/gfx-rs/wgpu/pull/6616).\n- Implement `quantizeToF16()` for WGSL frontend, and WGSL, SPIR-V, HLSL, MSL, and GLSL backends. By @jamienicol in [#6519](https://github.com/gfx-rs/wgpu/pull/6519).\n- Add support for GLSL `usampler*` and `isampler*`. By @DavidPeicho in [#6513](https://github.com/gfx-rs/wgpu/pull/6513).\n- Expose Ray Query flags as constants in WGSL. Implement candidate intersections. By @kvark in [#5429](https://github.com/gfx-rs/wgpu/pull/5429)\n- Add new vertex formats (`{U,S}{int,norm}{8,16}`, `Float16` and `Unorm8x4Bgra`). By @nolanderc in [#6632](https://github.com/gfx-rs/wgpu/pull/6632)\n- Allow for override-expressions in `workgroup_size`. By @KentSlaney in [#6635](https://github.com/gfx-rs/wgpu/pull/6635).\n- Add support for OpAtomicCompareExchange in SPIR-V frontend. By @schell in [#6590](https://github.com/gfx-rs/wgpu/pull/6590).\n- Implement type inference for abstract arguments to user-defined functions. By @jamienicol in [#6577](https://github.com/gfx-rs/wgpu/pull/6577).\n- Allow for override-expressions in array sizes. By @KentSlaney in [#6654](https://github.com/gfx-rs/wgpu/pull/6654).\n\n##### General\n\n- Add unified documentation for ray-tracing. By @Vecvec in [#6747](https://github.com/gfx-rs/wgpu/pull/6747)\n- Return submission index in `map_async` and `on_submitted_work_done` to track down completion of async callbacks. By @eliemichel in [#6360](https://github.com/gfx-rs/wgpu/pull/6360).\n- Move raytracing alignments into HAL instead of in core. By @Vecvec in [#6563](https://github.com/gfx-rs/wgpu/pull/6563).\n- Allow for statically linking DXC rather than including separate `.dll` files. By @DouglasDwyer in [#6574](https://github.com/gfx-rs/wgpu/pull/6574).\n- `DeviceType` and `AdapterInfo` now impl `Hash` by @cwfitzgerald in [#6868](https://github.com/gfx-rs/wgpu/pull/6868)\n- Add build support for Apple Vision Pro. By @guusw in [#6611](https://github.com/gfx-rs/wgpu/pull/6611).\n- Add `wgsl_language_features` for obtaining available WGSL language feature by @sagudev in [#6814](https://github.com/gfx-rs/wgpu/pull/6814)\n- Add `no_std` support to `wgpu-types`. By @bushrat011899 in [#6892](https://github.com/gfx-rs/wgpu/pull/6892).\n\n##### Vulkan\n\n- Allow using some 32-bit floating-point atomic operations (load, store, add, sub, exchange) in shaders. It requires the extension `VK_EXT_shader_atomic_float`. By @AsherJingkongChen in [#6234](https://github.com/gfx-rs/wgpu/pull/6234).\n\n##### Metal\n\n- Allow using some 32-bit floating-point atomic operations (load, store, add, sub, exchange) in shaders. It requires Metal 3.0+ with Apple 7, 8, 9 or Mac 2. By @AsherJingkongChen in [#6234](https://github.com/gfx-rs/wgpu/pull/6234).\n- Add build support for Apple Vision Pro. By @guusw in [#6611](https://github.com/gfx-rs/wgpu/pull/6611).\n- Add `raw_handle` method to access raw Metal textures in [#6894](https://github.com/gfx-rs/wgpu/pull/6894).\n\n#### Changes\n\n##### Naga\n\n- Show types of LHS and RHS in binary operation type mismatch errors. By @ErichDonGubler in [#6450](https://github.com/gfx-rs/wgpu/pull/6450).\n- The GLSL parser now uses less expressions for function calls. By @magcius in [#6604](https://github.com/gfx-rs/wgpu/pull/6604).\n- Add a note to help with a common syntax error case for global diagnostic filter directives. By @e-hat in [#6718](https://github.com/gfx-rs/wgpu/pull/6718)\n- Change arithmetic operations between two i32 variables to wrap on overflow to match WGSL spec. By @matthew-wong1 in [#6835](https://github.com/gfx-rs/wgpu/pull/6835).\n- Add directives to suggestions in error message for parsing global items. By @e-hat in [#6723](https://github.com/gfx-rs/wgpu/pull/6723).\n\n##### General\n\n- Align Storage Access enums to the webgpu spec. By @atlv24 in [#6642](https://github.com/gfx-rs/wgpu/pull/6642)\n- Make `Surface::as_hal` take an immutable reference to the surface. By @jerzywilczek in [#9999](https://github.com/gfx-rs/wgpu/pull/9999)\n- Add actual sample type to `CreateBindGroupError::InvalidTextureSampleType` error message. By @ErichDonGubler in [#6530](https://github.com/gfx-rs/wgpu/pull/6530).\n- Improve binding error to give a clearer message when there is a mismatch between resource binding as it is in the shader and as it is in the binding layout. By @eliemichel in [#6553](https://github.com/gfx-rs/wgpu/pull/6553).\n- `Surface::configure` and `Surface::get_current_texture` are no longer fatal. By @alokedesai in [#6253](https://github.com/gfx-rs/wgpu/pull/6253)\n\n##### D3D12\n\n- Avoid using FXC as fallback when the DXC container was passed at instance creation. Paths to `dxcompiler.dll` & `dxil.dll` are also now required. By @teoxoy in [#6643](https://github.com/gfx-rs/wgpu/pull/6643).\n\n##### Vulkan\n\n- Add a cache for samplers, deduplicating any samplers, allowing more programs to stay within the global sampler limit. By @cwfitzgerald in [#6847](https://github.com/gfx-rs/wgpu/pull/6847)\n\n##### HAL\n\n- Replace `usage: Range<T>`, for `BufferUses`, `TextureUses`, and `AccelerationStructureBarrier` with a new `StateTransition<T>`. By @atlv24 in [#6703](https://github.com/gfx-rs/wgpu/pull/6703)\n- Change the `DropCallback` API to use `FnOnce` instead of `FnMut`. By @jerzywilczek in [#6482](https://github.com/gfx-rs/wgpu/pull/6482)\n\n### Bug Fixes\n\n#### General\n\n- Handle query set creation failure as an internal error that loses the `Device`, rather than panicking. By @ErichDonGubler in [#6505](https://github.com/gfx-rs/wgpu/pull/6505).\n- Ensure that `Features::TIMESTAMP_QUERY` is set when using timestamp writes in render and compute passes. By @ErichDonGubler in [#6497](https://github.com/gfx-rs/wgpu/pull/6497).\n- Check for device mismatches when beginning render and compute passes. By @ErichDonGubler in [#6497](https://github.com/gfx-rs/wgpu/pull/6497).\n- Lower `QUERY_SET_MAX_QUERIES` (and enforced limits) from 8192 to 4096 to match WebGPU spec. By @ErichDonGubler in [#6525](https://github.com/gfx-rs/wgpu/pull/6525).\n- Allow non-filterable float on texture bindings never used with samplers when using a derived bind group layout. By @ErichDonGubler in [#6531](https://github.com/gfx-rs/wgpu/pull/6531/).\n- Replace potentially unsound usage of `PreHashedMap` with `FastHashMap`. By @jamienicol in [#6541](https://github.com/gfx-rs/wgpu/pull/6541).\n- Add missing validation for timestamp writes in compute and render passes. By @ErichDonGubler in [#6578](https://github.com/gfx-rs/wgpu/pull/6578), [#6583](https://github.com/gfx-rs/wgpu/pull/6583).\n  - Check the status of the `TIMESTAMP_QUERY` feature before other validation.\n  - Check that indices are in-bounds for the query set.\n  - Check that begin and end indices are not equal.\n  - Check that at least one index is specified.\n- Reject destroyed buffers in query set resolution. By @ErichDonGubler in [#6579](https://github.com/gfx-rs/wgpu/pull/6579).\n- Fix panic when dropping `Device` on some environments. By @Dinnerbone in [#6681](https://github.com/gfx-rs/wgpu/pull/6681).\n- Reduced the overhead of command buffer validation. By @nical in [#6721](https://github.com/gfx-rs/wgpu/pull/6721).\n- Set index type to NONE in `get_acceleration_structure_build_sizes`. By @Vecvec in [#6802](https://github.com/gfx-rs/wgpu/pull/6802).\n- Fix `wgpu-info` not showing dx12 adapters. By @wumpf in [#6844](https://github.com/gfx-rs/wgpu/pull/6844).\n- Use `transform_buffer_offset` when initialising `transform_buffer`. By @Vecvec in [#6864](https://github.com/gfx-rs/wgpu/pull/6864).\n\n#### Naga\n\n- Fix crash when a texture argument is missing. By @aedm in [#6486](https://github.com/gfx-rs/wgpu/pull/6486)\n- Emit an error in constant evaluation, rather than crash, in certain cases where `vecN` constructors have less than N arguments. By @ErichDonGubler in [#6508](https://github.com/gfx-rs/wgpu/pull/6508).\n\n#### Vulkan\n\n- Allocate descriptors for acceleration structures. By @Vecvec in [#6861](https://github.com/gfx-rs/wgpu/pull/6861).\n- `max_color_attachment_bytes_per_sample` is now correctly set to 128. By @cwfitzgerald in [#6866](https://github.com/gfx-rs/wgpu/pull/6866)\n\n#### D3D12\n\n- Fix no longer showing software rasterizer adapters. By @wumpf in [#6843](https://github.com/gfx-rs/wgpu/pull/6843).\n- `max_color_attachment_bytes_per_sample` is now correctly set to 128. By @cwfitzgerald in [#6866](https://github.com/gfx-rs/wgpu/pull/6866)\n\n### Examples\n\n- Add multiple render targets example. By @kaphula in [#5297](https://github.com/gfx-rs/wgpu/pull/5313)\n\n\n### Testing\n\n- Tests the early returns in the acceleration structure build calls with empty calls. By @Vecvec in [#6651](https://github.com/gfx-rs/wgpu/pull/6651).\n\n## 23.0.1 (2024-11-25)\n\nThis release includes patches for `wgpu`, `wgpu-core` and `wgpu-hal`. All other crates remain at [23.0.0](https://github.com/gfx-rs/wgpu/releases/tag/v23.0.0).\nBelow changes were cherry-picked from 24.0.0 development line.\n\n### Bug fixes\n\n#### General\n\n- Fix Texture view leaks regression. By @xiaopengli89 in [#6576](https://github.com/gfx-rs/wgpu/pull/6576)\n\n#### Metal\n\n- Fix surface creation crashing on iOS. By @mockersf in [#6535](https://github.com/gfx-rs/wgpu/pull/6535)\n\n#### Vulkan\n\n- Fix surface capabilities being advertised when its query failed. By @wumpf in [#6510](https://github.com/gfx-rs/wgpu/pull/6510)\n\n## 23.0.0 (2024-10-25)\n\n### Themes of this release\n\nThis release's theme is one that is likely to repeat for a few releases: convergence with the WebGPU specification! WGPU's design and base functionality are actually determined by two specifications: one for WebGPU, and one for the WebGPU Shading Language.\n\nThis may not sound exciting, but let us convince you otherwise! All major web browsers have committed to offering WebGPU in their environment. Even JS runtimes like [Node][nodejs-webgpu-interest] and [Deno][deno_webgpu-crate-manifest] have communities that are very interested in providing WebGPU! WebGPU is slowly [eating the world][eat-the-world-meaning], as it were. 😀 It's really important, then, that WebGPU implementations behave in ways that one would expect across all platforms. For example, if Firefox's WebGPU implementation were to break when running scripts and shaders that worked just fine in Chrome, that would mean sad users for both application authors _and_ browser authors.\n\n[nodejs-webgpu-interest]: https://github.com/orgs/nodejs/discussions/41994\n[deno_webgpu-crate-manifest]: https://github.com/gfx-rs/wgpu/tree/64a61ee5c69569bbb3db03563997e88a229eba17/deno_webgpu#deno_webgpu\n[eat-the-world-meaning]: https://www.quora.com/What-did-Marc-Andreessen-mean-when-he-said-that-software-is-eating-the-world\n\nWGPU also benefits from standard, portable behavior in the same way as web browsers. Because of this behavior, it's generally fairly easy to port over usage of WebGPU in JavaScript to WGPU. It is also what lets WGPU go full circle: WGPU can be an implementation of WebGPU on native targets, but _also_ it can use _other implementations of WebGPU_ as a backend in JavaScript when compiled to WASM. Therefore, the same dynamic applies: if WGPU's own behavior were significantly different, then WGPU and end users would be _sad, sad humans_ as soon as they discover places where their nice apps are breaking, right?\n\nThe answer is: yes, we _do_ have sad, sad humans that really want their WGPU code to work _everywhere_. As Firefox and others use WGPU to implement WebGPU, the above example of Firefox diverging from standard is, unfortunately, today's reality. It _mostly_ behaves the same as a standards-compliant WebGPU, but it still doesn't in many important ways. Of particular note is Naga, its implementation of the WebGPU Shader Language. Shaders are pretty much a black-and-white point of failure in GPU programming; if they don't compile, then you can't use the rest of the API! And yet, it's extremely easy to run into a case like that from <https://github.com/gfx-rs/wgpu/issues/4400>:\n\n```wgsl\nfn gimme_a_float() -> f32 {\n  return 42; // fails in Naga, but standard WGSL happily converts to `f32`\n}\n```\n\nWe intend to continue making visible strides in converging with specifications for WebGPU and WGSL, as this release has. This is, unfortunately, one of the major reasons that WGPU has no plans to work hard at keeping a SemVer-stable interface for the foreseeable future; we have an entire platform of GPU programming functionality we have to catch up with, and SemVer stability is unfortunately in tension with that. So, for now, you're going to keep seeing major releases and breaking changes. Where possible, we'll try to make that painless, but compromises to do so don't always make sense with our limited resources.\n\nThis is also the last planned major version release of 2024; the next milestone is set for January 1st, 2025, according to our regular 12-week cadence (offset from the originally planned date of 2024-10-09 for _this_ release 😅). We'll see you next year!\n\n### Contributor spotlight: @sagudev\n\nThis release, we'd like to spotlight the work of @sagudev, who has made significant contributions to the WGPU ecosystem this release. Among other things, they contributed a particularly notable feature where runtime-known indices are finally allowed for use with `const` array values. For example, this WGSL shader previously wasn't allowed:\n\n```wgsl\nconst arr: array<u32, 4> = array(1, 2, 3, 4);\n\nfn what_number_should_i_use(idx: u32) -> u32 {\n  return arr[idx];\n}\n```\n\n…but now it works! This is significant because this sort of shader rejection was one of the most impactful issues we are aware of for converging with the WGSL specification. There are more still to go—some of which we expect to even more drastically change how folks author shaders—but we suspect that many more will come in the next few releases, including with @sagudev's help.\n\nWe're excited for more of @sagudev's contributions via the Servo community. Oh, did we forget to mention that these contributions were motivated by their work on Servo? That's right, a _third_ well-known JavaScript runtime is now using WGPU to implement its WebGPU implementation. We're excited to support Servo to becoming another fully fledged browsing environment this way.\n\n### Major Changes\n\nIn addition to the above spotlight, we have the following particularly interesting items to call out for this release:\n\n#### `wgpu-core` is no longer generic over `wgpu-hal` backends\n\nDynamic dispatch between different backends has been moved from the user facing `wgpu` crate, to a new dynamic dispatch mechanism inside the backend abstraction layer `wgpu-hal`.\n\nWhenever targeting more than a single backend (default on Windows & Linux) this leads to faster compile times and smaller binaries! This also solves a long standing issue with `cargo doc` failing to run for `wgpu-core`.\n\nBenchmarking indicated that compute pass recording is slower as a consequence, whereas on render passes speed improvements have been observed. However, this effort simplifies many of the internals of the wgpu family of crates which we're hoping to build performance improvements upon in the future.\n\nBy @wumpf in [#6069](https://github.com/gfx-rs/wgpu/pull/6069), [#6099](https://github.com/gfx-rs/wgpu/pull/6099), [#6100](https://github.com/gfx-rs/wgpu/pull/6100).\n\n#### `wgpu`'s resources no longer have `.global_id()` getters\n\n`wgpu-core`'s internals no longer use nor need IDs and we are moving towards removing IDs completely. This is a step in that direction.\n\nCurrent users of `.global_id()` are encouraged to make use of the `PartialEq`, `Eq`, `Hash`, `PartialOrd` and `Ord` traits that have now been implemented for `wgpu` resources.\n\nBy @teoxoy in [#6134](https://github.com/gfx-rs/wgpu/pull/6134).\n\n#### `set_bind_group` now takes an `Option` for the bind group argument.\n\nhttps://gpuweb.github.io/gpuweb/#programmable-passes-bind-groups specifies that bindGroup is nullable. This change is the start of implementing this part of the spec. Callers that specify a `Some()` value should have unchanged behavior. Handling of `None` values still needs to be implemented by backends.\n\nFor convenience, the `set_bind_group` on compute/render passes & encoders takes `impl Into<Option<&BindGroup>>`, so most code should still work the same.\n\nBy @bradwerth in [#6216](https://github.com/gfx-rs/wgpu/pull/6216).\n\n#### `entry_point`s are now `Option`al\n\nOne of the changes in the WebGPU spec. (from [about this time last year][optional-entrypoint-in-spec] 😅) was to allow optional entry points in `GPUProgrammableStage`. In `wgpu`, this corresponds to a subset of fields in `FragmentState`, `VertexState`, and `ComputeState` as the `entry_point` member:\n\n```wgsl\nlet render_pipeline = device.createRenderPipeline(wgpu::RenderPipelineDescriptor {\n    module,\n    entry_point: Some(\"cs_main\"), // This is now `Option`al.\n    // …\n});\n\nlet compute_pipeline = device.createComputePipeline(wgpu::ComputePipelineDescriptor {\n    module,\n    entry_point: None, // This is now `Option`al.\n    // …\n});\n```\n\nWhen set to `None`, it's assumed that the shader only has a single entry point associated with the pipeline stage (i.e., `@compute`, `@fragment`, or `@vertex`). If there is not one and only one candidate entry point, then a validation error is returned. To continue the example, we might have written the above API usage with the following shader module:\n\n```wgsl\n// We can't use `entry_point: None` for compute pipelines with this module,\n// because there are two `@compute` entry points.\n\n@compute\nfn cs_main() { /* … */ }\n\n@compute\nfn other_cs_main() { /* … */ }\n\n// The following entry points _can_ be inferred from `entry_point: None` in a\n// render pipeline, because they're the only `@vertex` and `@fragment` entry\n// points:\n\n@vertex\nfn vs_main() { /* … */ }\n\n@fragment\nfn fs_main() { /* … */ }\n```\n\n[optional-entrypoint-in-spec]: https://github.com/gpuweb/gpuweb/issues/4342\n\n#### WGPU's DX12 backend is now based on the `windows` crate ecosystem, instead of the `d3d12` crate\n\nWGPU has retired the `d3d12` crate (based on `winapi`), and now uses the `windows` crate for interfacing with Windows. For many, this may not be a change that affects day-to-day work. However, for users who need to vet their dependencies, or who may vendor in dependencies, this may be a nontrivial migration.\n\nBy @MarijnS95 in [#6006](https://github.com/gfx-rs/wgpu/pull/6006).\n\n### New Features\n\n#### Wgpu\n\n- Added initial acceleration structure and ray query support into wgpu. By @expenses @daniel-keitel @Vecvec @JMS55 @atlv24 in [#6291](https://github.com/gfx-rs/wgpu/pull/6291)\n\n#### Naga\n\n- Support constant evaluation for `firstLeadingBit` and `firstTrailingBit` numeric built-ins in WGSL. Front-ends that translate to these built-ins also benefit from constant evaluation. By @ErichDonGubler in [#5101](https://github.com/gfx-rs/wgpu/pull/5101).\n- Add `first` and `either` sampling types for `@interpolate(flat, …)` in WGSL. By @ErichDonGubler in [#6181](https://github.com/gfx-rs/wgpu/pull/6181).\n- Support for more atomic ops in the SPIR-V frontend. By @schell in [#5824](https://github.com/gfx-rs/wgpu/pull/5824).\n- Support local `const` declarations in WGSL. By @sagudev in [#6156](https://github.com/gfx-rs/wgpu/pull/6156).\n- Implemented `const_assert` in WGSL. By @sagudev in [#6198](https://github.com/gfx-rs/wgpu/pull/6198).\n- Support polyfilling `inverse` in WGSL. By @chyyran in [#6385](https://github.com/gfx-rs/wgpu/pull/6385).\n- Add base support for parsing `requires`, `enable`, and `diagnostic` directives. No extensions or diagnostic filters are yet supported, but diagnostics have improved dramatically. By @ErichDonGubler in [#6352](https://github.com/gfx-rs/wgpu/pull/6352), [#6424](https://github.com/gfx-rs/wgpu/pull/6424), [#6437](https://github.com/gfx-rs/wgpu/pull/6437).\n- Include error chain information as a message and notes in shader compilation messages. By @ErichDonGubler in [#6436](https://github.com/gfx-rs/wgpu/pull/6436).\n- Unify Naga CLI error output with the format of shader compilation messages. By @ErichDonGubler in [#6436](https://github.com/gfx-rs/wgpu/pull/6436).\n\n#### General\n\n- Add `VideoFrame` to `ExternalImageSource` enum. By @jprochazk in [#6170](https://github.com/gfx-rs/wgpu/pull/6170).\n- Add `wgpu::util::new_instance_with_webgpu_detection` & `wgpu::util::is_browser_webgpu_supported` to make it easier to support WebGPU & WebGL in the same binary. By @wumpf in [#6371](https://github.com/gfx-rs/wgpu/pull/6371).\n\n#### Vulkan\n\n- Allow using [VK_GOOGLE_display_timing](https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_GOOGLE_display_timing.html) unsafely with the `VULKAN_GOOGLE_DISPLAY_TIMING` feature. By @DJMcNab in [#6149](https://github.com/gfx-rs/wgpu/pull/6149).\n\n#### Metal\n\n- Implement `atomicCompareExchangeWeak`. By @AsherJingkongChen in [#6265](https://github.com/gfx-rs/wgpu/pull/6265).\n- Unless an explicit `CAMetalLayer` is provided, surfaces now render to a sublayer. This improves resizing behavior, fixing glitches during on window resize. By @madsmtm in [#6107](https://github.com/gfx-rs/wgpu/pull/6107).\n\n### Bug Fixes\n\n- Fix incorrect hlsl image output type conversion. By @atlv24 in [#6123](https://github.com/gfx-rs/wgpu/pull/6123).\n\n#### Naga\n\n- SPIR-V frontend splats depth texture sample and load results. Fixes [issue #4551](https://github.com/gfx-rs/wgpu/issues/4551). By @schell in [#6384](https://github.com/gfx-rs/wgpu/pull/6384).\n- Accept only `vec3` (not `vecN`) for the `cross` built-in. By @ErichDonGubler in [#6171](https://github.com/gfx-rs/wgpu/pull/6171).\n- Configure `SourceLanguage` when enabling debug info in SPV-out. By @kvark in [#6256](https://github.com/gfx-rs/wgpu/pull/6256).\n- Do not consider per-polygon and flat inputs subgroup uniform. By @magcius in [#6276](https://github.com/gfx-rs/wgpu/pull/6276).\n- Validate all swizzle components are either color (rgba) or dimension (xyzw) in WGSL. By @sagudev in [#6187](https://github.com/gfx-rs/wgpu/pull/6187).\n- Fix detection of shl overflows to detect arithmetic overflows. By @sagudev in [#6186](https://github.com/gfx-rs/wgpu/pull/6186).\n- Fix type parameters to vec/mat type constructors to also support aliases. By @sagudev in [#6189](https://github.com/gfx-rs/wgpu/pull/6189).\n- Accept global `var`s without explicit type. By @sagudev in [#6199](https://github.com/gfx-rs/wgpu/pull/6199).\n- Fix handling of phony statements, so they are actually emitted. By @sagudev in [#6328](https://github.com/gfx-rs/wgpu/pull/6328).\n- Added `gl_DrawID` to glsl and `DrawIndex` to spv. By @ChosenName in [#6325](https://github.com/gfx-rs/wgpu/pull/6325).\n- Matrices can now be indexed by value (#4337), and indexing arrays by value no longer causes excessive spilling (#6358). By @jimblandy in [#6390](https://github.com/gfx-rs/wgpu/pull/6390).\n- Add support for `textureQueryLevels` to the GLSL parser. By @magcius in [#6325](https://github.com/gfx-rs/wgpu/pull/6415).\n- Fix unescaped identifiers in the Metal backend shader I/O structures causing shader miscompilation. By @ErichDonGubler in [#6438](https://github.com/gfx-rs/wgpu/pull/6438).\n\n#### General\n\n- If GL context creation fails retry with GLES. By @Rapdorian in [#5996](https://github.com/gfx-rs/wgpu/pull/5996).\n- Bump MSRV for `d3d12`/`naga`/`wgpu-core`/`wgpu-hal`/`wgpu-types`' to 1.76. By @wumpf in [#6003](https://github.com/gfx-rs/wgpu/pull/6003).\n- Print requested and supported usages on `UnsupportedUsage` error. By @VladasZ in [#6007](https://github.com/gfx-rs/wgpu/pull/6007).\n- Deduplicate bind group layouts that are created from pipelines with \"auto\" layouts. By @teoxoy [#6049](https://github.com/gfx-rs/wgpu/pull/6049).\n- Document `wgpu_hal` bounds-checking promises, and adapt `wgpu_core`'s lazy initialization logic to the slightly weaker-than-expected guarantees. By @jimblandy in [#6201](https://github.com/gfx-rs/wgpu/pull/6201).\n- Raise validation error instead of panicking in `{Render,Compute}Pipeline::get_bind_group_layout` on native / WebGL. By @bgr360 in [#6280](https://github.com/gfx-rs/wgpu/pull/6280).\n- **BREAKING**: Remove the last exposed C symbols in project, located in `wgpu_core::render::bundle::bundle_ffi`, to allow multiple versions of WGPU to compile together. By @ErichDonGubler in [#6272](https://github.com/gfx-rs/wgpu/pull/6272).\n- Call `flush_mapped_ranges` when unmapping write-mapped buffers. By @teoxoy in [#6089](https://github.com/gfx-rs/wgpu/pull/6089).\n- When mapping buffers for reading, mark buffers as initialized only when they have `MAP_WRITE` usage. By @teoxoy in [#6178](https://github.com/gfx-rs/wgpu/pull/6178).\n- Add a separate pipeline constants error. By @teoxoy in [#6094](https://github.com/gfx-rs/wgpu/pull/6094).\n- Ensure safety of indirect dispatch by injecting a compute shader that validates the content of the indirect buffer. By @teoxoy in [#5714](https://github.com/gfx-rs/wgpu/pull/5714).\n\n#### GLES / OpenGL\n\n- Fix GL debug message callbacks not being properly cleaned up (causing UB). By @Imberflur in [#6114](https://github.com/gfx-rs/wgpu/pull/6114).\n- Fix calling `slice::from_raw_parts` with unaligned pointers in push constant handling. By @Imberflur in [#6341](https://github.com/gfx-rs/wgpu/pull/6341).\n- Optimise fence checking when `Queue::submit` is called many times per frame. By @dinnerbone in [#6427](https://github.com/gfx-rs/wgpu/pull/6427).\n\n#### WebGPU\n\n- Fix JS `TypeError` exception in `Instance::request_adapter` when browser doesn't support WebGPU but `wgpu` not compiled with `webgl` support. By @bgr360 in [#6197](https://github.com/gfx-rs/wgpu/pull/6197).\n\n#### Vulkan\n\n- Avoid undefined behaviour with adversarial debug label. By @DJMcNab in [#6257](https://github.com/gfx-rs/wgpu/pull/6257).\n- Add `.index_type(vk::IndexType::NONE_KHR)` when creating `AccelerationStructureGeometryTrianglesDataKHR` in the raytraced triangle example to prevent a validation error. By @Vecvec in [#6282](https://github.com/gfx-rs/wgpu/pull/6282).\n\n### Changes\n\n- `wgpu_hal::gles::Adapter::new_external` now requires the context to be current when dropping the adapter and related objects. By @Imberflur in [#6114](https://github.com/gfx-rs/wgpu/pull/6114).\n- Reduce the amount of debug and trace logs emitted by wgpu-core and wgpu-hal. By @nical in [#6065](https://github.com/gfx-rs/wgpu/issues/6065).\n- Rename `Rg11b10Float` to `Rg11b10Ufloat`. By @sagudev in [#6108](https://github.com/gfx-rs/wgpu/pull/6108).\n- Invalidate the device when we encounter driver-induced device loss or on unexpected errors. By @teoxoy in [#6229](https://github.com/gfx-rs/wgpu/pull/6229).\n- Make Vulkan error handling more robust. By @teoxoy in [#6119](https://github.com/gfx-rs/wgpu/pull/6119).\n- Add bounds checking to Buffer slice method. By @beholdnec in [#6432](https://github.com/gfx-rs/wgpu/pull/6432).\n- Replace `impl From<StorageFormat> for ScalarKind` with `impl From<StorageFormat> for Scalar` so that byte width is included. By @atlv24 in [#6451](https://github.com/gfx-rs/wgpu/pull/6451).\n\n#### Internal\n\n- Tracker simplifications. By @teoxoy in [#6073](https://github.com/gfx-rs/wgpu/pull/6073) & [#6088](https://github.com/gfx-rs/wgpu/pull/6088).\n- D3D12 cleanup. By @teoxoy in [#6200](https://github.com/gfx-rs/wgpu/pull/6200).\n- Use `ManuallyDrop` in remaining places. By @teoxoy in [#6092](https://github.com/gfx-rs/wgpu/pull/6092).\n- Move out invalidity from the `Registry`. By @teoxoy in [#6243](https://github.com/gfx-rs/wgpu/pull/6243).\n- Remove `backend` from ID. By @teoxoy in [#6263](https://github.com/gfx-rs/wgpu/pull/6263).\n\n#### HAL\n\n- Change the inconsistent `DropGuard` based API on Vulkan and GLES to a consistent, callback-based one. By @jerzywilczek in [#6164](https://github.com/gfx-rs/wgpu/pull/6164).\n\n### Documentation\n\n- Removed some OpenGL and Vulkan references from `wgpu-types` documentation. Fixed Storage texel types in examples. By @Nelarius in [#6271](https://github.com/gfx-rs/wgpu/pull/6271).\n- Used `wgpu::include_wgsl!(…)` more in examples and tests. By @ErichDonGubler in [#6326](https://github.com/gfx-rs/wgpu/pull/6326).\n\n### Dependency Updates\n\n#### GLES\n\n- Replace `winapi` code in WGL wrapper to use the `windows` crate. By @MarijnS95 in [#6006](https://github.com/gfx-rs/wgpu/pull/6006).\n- Update `glutin` to `0.31` with `glutin-winit` crate. By @MarijnS95 in [#6150](https://github.com/gfx-rs/wgpu/pull/6150) and [#6176](https://github.com/gfx-rs/wgpu/pull/6176).\n- Implement `Adapter::new_external()` for WGL (just like EGL) to import an external OpenGL ES context. By @MarijnS95 in [#6152](https://github.com/gfx-rs/wgpu/pull/6152).\n\n#### DX12\n\n- Replace `winapi` code to use the `windows` crate. By @MarijnS95 in [#5956](https://github.com/gfx-rs/wgpu/pull/5956) and [#6173](https://github.com/gfx-rs/wgpu/pull/6173).\n- Get `num_workgroups` builtin working for indirect dispatches. By @teoxoy in [#5730](https://github.com/gfx-rs/wgpu/pull/5730).\n\n#### HAL\n\n- Update `parking_lot` to `0.12`. By @mahkoh in [#6287](https://github.com/gfx-rs/wgpu/pull/6287).\n\n## v22.1.0 (2024-07-17)\n\nThis release includes `wgpu`, `wgpu-core` and `naga`. All other crates remain at 22.0.0.\n\n### Added\n\n#### Naga\n\n- Added back implementations of PartialEq for more IR types. By @teoxoy in [#6045](https://github.com/gfx-rs/wgpu/pull/6045)\n\n### Bug Fixes\n\n#### General\n\n- Fix profiling with `tracy`. By @waywardmonkeys in [#5988](https://github.com/gfx-rs/wgpu/pull/5988)\n- Fix function for checking bind compatibility to error instead of panic. By @sagudev [#6012](https://github.com/gfx-rs/wgpu/pull/6012)\n- Fix crash when dropping the surface after the device. By @wumpf in [#6052](https://github.com/gfx-rs/wgpu/pull/6052)\n- Fix length of copy in `queue_write_texture`. By @teoxoy in [#6009](https://github.com/gfx-rs/wgpu/pull/6009)\n- Fix error message that is thrown in create_render_pass to no longer say `compute_pass`. By @matthew-wong1 [#6041](https://github.com/gfx-rs/wgpu/pull/6041)\n- As a workaround for [issue #4905](https://github.com/gfx-rs/wgpu/issues/4905), `wgpu-core` is undocumented unless `--cfg wgpu_core_doc` feature is enabled. By @kpreid in [#5987](https://github.com/gfx-rs/wgpu/pull/5987)\n\n## 22.0.0 (2024-07-17)\n\n### Overview\n\n### Our first major version release!\n\nFor the first time ever, WGPU is being released with a major version (i.e., 22.* instead of 0.22.*)! Maintainership has decided to fully adhere to [Semantic Versioning](https://semver.org/)'s recommendations for versioning production software. According to [SemVer 2.0.0's Q&A about when to use 1.0.0 versions (and beyond)](https://semver.org/spec/v2.0.0.html#how-do-i-know-when-to-release-100):\n\n> ### How do I know when to release 1.0.0?\n>\n> If your software is being used in production, it should probably already be 1.0.0. If you have a stable API on which users have come to depend, you should be 1.0.0. If you’re worrying a lot about backward compatibility, you should probably already be 1.0.0.\n\nIt is a well-known fact that WGPU has been used for applications and platforms already in production for years, at this point. We are often concerned with tracking breaking changes, and affecting these consumers' ability to ship. By releasing our first major version, we publicly acknowledge that this is the case. We encourage other projects in the Rust ecosystem to follow suit.\n\nNote that while we start to use the major version number, WGPU is _not_ \"going stable\", as many Rust projects do. We anticipate many breaking changes before we fully comply with the WebGPU spec., which we expect to take a small number of years.\n\n### Overview\n\nA major ([pun intended](#our-first-major-version-release)) theme of this release is incremental improvement. Among the typically large set of bug fixes, new features, and other adjustments to WGPU by the many contributors listed below, @wumpf and @teoxoy have merged a series of many simplifications to WGPU's internals and, in one case, to the render and compute pass recording APIs. Many of these change WGPU to use atomically reference-counted resource tracking (i.e., `Arc<…>`), rather than using IDs to manage the lifetimes of platform-specific graphics resources in a registry of separate reference counts. This has led us to diagnose and fix many long-standing bugs, and net some neat performance improvements on the order of 40% or more of some workloads.\n\nWhile the above is exciting, we acknowledge already finding and fixing some (easy-to-fix) regressions from the above work. If you migrate to WGPU 22 and encounter such bugs, please engage us in the issue tracker right away!\n\n### Major Changes\n\n#### Lifetime bounds on `wgpu::RenderPass` & `wgpu::ComputePass`\n\n`wgpu::RenderPass` & `wgpu::ComputePass` recording methods (e.g. `wgpu::RenderPass:set_render_pipeline`) no longer impose a lifetime constraint to objects passed to a pass (like pipelines/buffers/bindgroups/query-sets etc.).\n\nThis means the following pattern works now as expected:\n\n```rust\nlet mut pipelines: Vec<wgpu::RenderPipeline> = ...;\n// ...\nlet mut cpass = encoder.begin_compute_pass(&wgpu::ComputePassDescriptor::default());\ncpass.set_pipeline(&pipelines[123]);\n// Change pipeline container - this requires mutable access to `pipelines` while one of the pipelines is in use.\npipelines.push(/* ... */);\n// Continue pass recording.\ncpass.set_bindgroup(...);\n```\nPreviously, a set pipeline (or other resource) had to outlive pass recording which often affected wider systems,\nmeaning that users needed to prove to the borrow checker that `Vec<wgpu::RenderPipeline>` (or similar constructs)\naren't accessed mutably for the duration of pass recording.\n\n\nFurthermore, you can now opt out of `wgpu::RenderPass`/`wgpu::ComputePass`'s lifetime dependency on its parent `wgpu::CommandEncoder` using `wgpu::RenderPass::forget_lifetime`/`wgpu::ComputePass::forget_lifetime`:\n```rust\nfn independent_cpass<'enc>(encoder: &'enc mut wgpu::CommandEncoder) -> wgpu::ComputePass<'static> {\n    let cpass: wgpu::ComputePass<'enc> = encoder.begin_compute_pass(&wgpu::ComputePassDescriptor::default());\n    cpass.forget_lifetime()\n}\n```\n⚠️ As long as a `wgpu::RenderPass`/`wgpu::ComputePass` is pending for a given `wgpu::CommandEncoder`, creation of a compute or render pass is an error and invalidates the `wgpu::CommandEncoder`.\n`forget_lifetime` can be very useful for library authors, but opens up an easy way for incorrect use, so use with care.\nThis method doesn't add any additional overhead and has no side effects on pass recording.\n\nBy @wumpf in [#5569](https://github.com/gfx-rs/wgpu/pull/5569), [#5575](https://github.com/gfx-rs/wgpu/pull/5575), [#5620](https://github.com/gfx-rs/wgpu/pull/5620), [#5768](https://github.com/gfx-rs/wgpu/pull/5768) (together with @kpreid), [#5671](https://github.com/gfx-rs/wgpu/pull/5671), [#5794](https://github.com/gfx-rs/wgpu/pull/5794), [#5884](https://github.com/gfx-rs/wgpu/pull/5884).\n\n#### Querying shader compilation errors\n\nWgpu now supports querying [shader compilation info](https://www.w3.org/TR/webgpu/#dom-gpushadermodule-getcompilationinfo).\n\nThis allows you to get more structured information about compilation errors, warnings and info:\n\n```rust\n...\nlet lighting_shader = ctx.device.create_shader_module(include_wgsl!(\"lighting.wgsl\"));\nlet compilation_info = lighting_shader.get_compilation_info().await;\nfor message in compilation_info\n    .messages\n    .iter()\n    .filter(|m| m.message_type == wgpu::CompilationMessageType::Error)\n{\n    let line = message.location.map(|l| l.line_number).unwrap_or(1);\n    println!(\"Compile error at line {line}\");\n}\n```\n\nBy @stefnotch in [#5410](https://github.com/gfx-rs/wgpu/pull/5410)\n\n#### 64 bit integer atomic support in shaders.\n\nAdd support for 64 bit integer atomic operations in shaders.\n\nAdd the following flags to `wgpu_types::Features`:\n\n- `SHADER_INT64_ATOMIC_ALL_OPS` enables all atomic operations on `atomic<i64>` and\n  `atomic<u64>` values.\n\n- `SHADER_INT64_ATOMIC_MIN_MAX` is a subset of the above, enabling only\n  `AtomicFunction::Min` and `AtomicFunction::Max` operations on `atomic<i64>` and\n  `atomic<u64>` values in the `Storage` address space. These are the only 64-bit\n  atomic operations available on Metal as of 3.1.\n\nAdd corresponding flags to `naga::valid::Capabilities`. These are supported by the\nWGSL front end, and all Naga backends.\n\nPlatform support:\n\n- On Direct3d 12, in `D3D12_FEATURE_DATA_D3D12_OPTIONS9`, if\n  `AtomicInt64OnTypedResourceSupported` and `AtomicInt64OnGroupSharedSupported` are\n  both available, then both wgpu features described above are available.\n\n- On Metal, `SHADER_INT64_ATOMIC_MIN_MAX` is available on Apple9 hardware, and on\n  hardware that advertises both Apple8 and Mac2 support. This also requires Metal\n  Shading Language 2.4 or later. Metal does not yet support the more general\n  `SHADER_INT64_ATOMIC_ALL_OPS`.\n\n- On Vulkan, if the `VK_KHR_shader_atomic_int64` extension is available with both the\n  `shader_buffer_int64_atomics` and `shader_shared_int64_atomics` features, then both\n  wgpu features described above are available.\n\nBy @atlv24 in [#5383](https://github.com/gfx-rs/wgpu/pull/5383)\n\n#### A compatible surface is now required for `request_adapter()` on WebGL2 + `enumerate_adapters()` is now native only.\n\nWhen targeting WebGL2, it has always been the case that a surface had to be created before calling `request_adapter()`.\nWe now make this requirement explicit.\n\nValidation was also added to prevent configuring the surface with a device that doesn't share the same underlying\nWebGL2 context since this has never worked.\n\nCalling `enumerate_adapters()` when targeting WebGPU used to return an empty `Vec` and since we now require users\nto pass a compatible surface when targeting WebGL2, having `enumerate_adapters()` doesn't make sense.\n\nBy @teoxoy in [#5901](https://github.com/gfx-rs/wgpu/pull/5901)\n\n### New features\n\n#### General\n\n- Added `as_hal` for `Buffer` to access wgpu created buffers form wgpu-hal. By @JasondeWolff in [#5724](https://github.com/gfx-rs/wgpu/pull/5724)\n- `include_wgsl!` is now callable in const contexts by @9SMTM6 in [#5872](https://github.com/gfx-rs/wgpu/pull/5872)\n- Added memory allocation hints to `DeviceDescriptor` by @nical in [#5875](https://github.com/gfx-rs/wgpu/pull/5875)\n    - `MemoryHints::Performance`, the default, favors performance over memory usage and will likely cause large amounts of VRAM to be allocated up-front. This hint is typically good for games.\n    - `MemoryHints::MemoryUsage` favors memory usage over performance. This hint is typically useful for smaller applications or UI libraries.\n    - `MemoryHints::Manual` allows the user to specify parameters for the underlying GPU memory allocator. These parameters are subject to change.\n    - These hints may be ignored by some backends. Currently only the Vulkan and D3D12 backends take them into account.\n- Add `HTMLImageElement` and `ImageData` as external source for copying images. By @Valaphee in [#5668](https://github.com/gfx-rs/wgpu/pull/5668)\n\n#### Naga\n\n- Added -D, --defines option to naga CLI to define preprocessor macros by @theomonnom in [#5859](https://github.com/gfx-rs/wgpu/pull/5859)\n- Added type upgrades to SPIR-V atomic support. Added related infrastructure. Tracking issue is [here](https://github.com/gfx-rs/wgpu/issues/4489). By @schell in [#5775](https://github.com/gfx-rs/wgpu/pull/5775).\n- Implement `WGSL`'s `unpack4xI8`,`unpack4xU8`,`pack4xI8` and `pack4xU8`. By @VlaDexa in [#5424](https://github.com/gfx-rs/wgpu/pull/5424)\n- Began work adding support for atomics to the SPIR-V frontend. Tracking issue is [here](https://github.com/gfx-rs/wgpu/issues/4489). By @schell in [#5702](https://github.com/gfx-rs/wgpu/pull/5702).\n- In hlsl-out, allow passing information about the fragment entry point to omit vertex outputs that are not in the fragment inputs. By @Imberflur in [#5531](https://github.com/gfx-rs/wgpu/pull/5531)\n- In spv-out, allow passing `acceleration_structure` as a function argument. By @kvark in [#5961](https://github.com/gfx-rs/wgpu/pull/5961)\n\n  ```diff\n  let writer: naga::back::hlsl::Writer = /* ... */;\n  -writer.write(&module, &module_info);\n  +writer.write(&module, &module_info, None);\n  ```\n- HLSL & MSL output can now be added conditionally on the target via the `msl-out-if-target-apple` and `hlsl-out-if-target-windows` features. This is used in wgpu-hal to no longer compile with MSL output when `metal` is enabled & MacOS isn't targeted and no longer compile with HLSL output when `dx12` is enabled & Windows isn't targeted. By @wumpf in [#5919](https://github.com/gfx-rs/wgpu/pull/5919)\n\n#### Vulkan\n\n- Added a `PipelineCache` resource to allow using Vulkan pipeline caches. By @DJMcNab in [#5319](https://github.com/gfx-rs/wgpu/pull/5319)\n\n#### WebGPU\n\n- Added support for pipeline-overridable constants to the WebGPU backend by @DouglasDwyer in [#5688](https://github.com/gfx-rs/wgpu/pull/5688)\n\n### Changes\n\n#### General\n\n- Unconsumed vertex outputs are now always allowed. Removed `StageError::InputNotConsumed`, `Features::SHADER_UNUSED_VERTEX_OUTPUT`, and associated validation. By @Imberflur in [#5531](https://github.com/gfx-rs/wgpu/pull/5531)\n- Avoid introducing spurious features for optional dependencies. By @bjorn3 in [#5691](https://github.com/gfx-rs/wgpu/pull/5691)\n- `wgpu::Error` is now `Sync`, making it possible to be wrapped in `anyhow::Error` or `eyre::Report`. By @nolanderc in [#5820](https://github.com/gfx-rs/wgpu/pull/5820)\n- Added benchmark suite. By @cwfitzgerald in [#5694](https://github.com/gfx-rs/wgpu/pull/5694), compute passes by @wumpf in [#5767](https://github.com/gfx-rs/wgpu/pull/5767)\n- Improve performance of `.submit()` by 39-64% (`.submit()` + `.poll()` by 22-32%). By @teoxoy in [#5910](https://github.com/gfx-rs/wgpu/pull/5910)\n- The `trace` wgpu feature has been temporarily removed. By @teoxoy in [#5975](https://github.com/gfx-rs/wgpu/pull/5975)\n\n#### Metal\n- Removed the `link` Cargo feature.\n\n  This was used to allow weakly linking frameworks. This can be achieved with putting something like the following in your `.cargo/config.toml` instead:\n  ```toml\n  [target.'cfg(target_vendor = \"apple\")']\n  rustflags = [\"-C\", \"link-args=-weak_framework Metal -weak_framework QuartzCore -weak_framework CoreGraphics\"]\n  ```\n  By @madsmtm in [#5752](https://github.com/gfx-rs/wgpu/pull/5752)\n\n### Bug Fixes\n\n#### General\n\n- Ensure render pipelines have at least 1 target. By @ErichDonGubler in [#5715](https://github.com/gfx-rs/wgpu/pull/5715)\n- `wgpu::ComputePass` now internally takes ownership of `QuerySet` for both `wgpu::ComputePassTimestampWrites` as well as timestamp writes and statistics query, fixing crashes when destroying `QuerySet` before ending the pass. By @wumpf in [#5671](https://github.com/gfx-rs/wgpu/pull/5671)\n- Validate resources passed during compute pass recording for mismatching device. By @wumpf in [#5779](https://github.com/gfx-rs/wgpu/pull/5779)\n- Fix staging buffers being destroyed too early. By @teoxoy in [#5910](https://github.com/gfx-rs/wgpu/pull/5910)\n- Fix attachment byte cost validation panicking with native only formats. By @teoxoy in [#5934](https://github.com/gfx-rs/wgpu/pull/5934)\n- [wgpu] Fix leaks from auto layout pipelines. By @teoxoy in [#5971](https://github.com/gfx-rs/wgpu/pull/5971)\n- [wgpu-core] Fix length of copy in `queue_write_texture` (causing UB). By @teoxoy in [#5973](https://github.com/gfx-rs/wgpu/pull/5973)\n- Add missing same device checks. By @teoxoy in [#5980](https://github.com/gfx-rs/wgpu/pull/5980)\n\n#### GLES / OpenGL\n\n- Fix `ClearColorF`, `ClearColorU` and `ClearColorI` commands being issued before `SetDrawColorBuffers` [#5666](https://github.com/gfx-rs/wgpu/pull/5666)\n- Replace `glClear` with `glClearBufferF` because `glDrawBuffers` requires that the ith buffer must be `COLOR_ATTACHMENTi` or `NONE` [#5666](https://github.com/gfx-rs/wgpu/pull/5666)\n- Return the unmodified version in driver_info. By @Valaphee in [#5753](https://github.com/gfx-rs/wgpu/pull/5753)\n\n#### Naga\n\n- In spv-out don't decorate a `BindingArray`'s type with `Block` if the type is a struct with a runtime array by @Vecvec in [#5776](https://github.com/gfx-rs/wgpu/pull/5776)\n- Add `packed` as a keyword for GLSL by @kjarosh in [#5855](https://github.com/gfx-rs/wgpu/pull/5855)\n\n## v0.20.2 (2024-06-12)\n\nThis release force-bumps transitive dependencies of `wgpu` on `wgpu-core` and `wgpu-hal` to 0.21.1, to resolve some undefined behavior observable in the DX12 backend after upgrading to Rust 1.79 or later.\n\n### Bug Fixes\n\n#### General\n\n* Fix a `CommandBuffer` leak. By @cwfitzgerald and @nical in [#5141](https://github.com/gfx-rs/wgpu/pull/5141)\n\n#### DX12\n\n* Do not feed `&\"\"` to `D3DCompile`, by @workingjubilee in [#5812](https://github.com/gfx-rs/wgpu/issues/5812).\n\n## v0.20.1 (2024-06-12)\n\nThis release included v0.21.0 of `wgpu-core` and `wgpu-hal`, due to breaking changes needed to solve vulkan validation issues.\n\n### Bug Fixes\n\nThis release fixes the validation errors whenever a surface is used with the vulkan backend. By @cwfitzgerald in [#5681](https://github.com/gfx-rs/wgpu/pull/5681).\n\n#### General\n\n- Clean up weak references to texture views and bind groups to prevent memory leaks. By @xiaopengli89 in [#5595](https://github.com/gfx-rs/wgpu/pull/5595).\n- Fix segfault on exit is queue & device are dropped before surface. By @sagudev in [#5640](https://github.com/gfx-rs/wgpu/pull/5640).\n\n#### Metal\n\n- Fix unrecognized selector crash on iOS 12. By @vladasz in [#5744](https://github.com/gfx-rs/wgpu/pull/5744).\n\n#### Vulkan\n\n- Fix enablement of subgroup ops extension on Vulkan devices that don't support Vulkan 1.3. By @cwfitzgerald in [#5624](https://github.com/gfx-rs/wgpu/pull/5624).\n\n\n#### GLES / OpenGL\n\n-  Fix regression on OpenGL (EGL) where non-sRGB still used sRGB [#5642](https://github.com/gfx-rs/wgpu/pull/5642)\n\n#### Naga\n\n- Work around shader consumers that have bugs handling `switch` statements with a single body for all cases. These are now written as `do {} while(false);` loops in hlsl-out and glsl-out. By @Imberflur in [#5654](https://github.com/gfx-rs/wgpu/pull/5654)\n- In hlsl-out, defer `continue` statements in switches by setting a flag and breaking from the switch. This allows such constructs to work with FXC which does not support `continue` within a switch. By @Imberflur in [#5654](https://github.com/gfx-rs/wgpu/pull/5654)\n\n## v0.20.0 (2024-04-28)\n\n### Major Changes\n\n#### Pipeline overridable constants\n\nWgpu supports now [pipeline-overridable constants](https://www.w3.org/TR/webgpu/#dom-gpuprogrammablestage-constants)\n\nThis allows you to define constants in wgsl like this:\n```rust\noverride some_factor: f32 = 42.1337; // Specifies a default of 42.1337 if it's not set.\n```\nAnd then set them at runtime like so on your pipeline consuming this shader:\n```rust\n// ...\nfragment: Some(wgpu::FragmentState {\n    compilation_options: wgpu::PipelineCompilationOptions {\n        constants: &[(\"some_factor\".to_owned(), 0.1234)].into(), // Sets `some_factor` to 0.1234.\n        ..Default::default()\n    },\n    // ...\n}),\n// ...\n```\n\nBy @teoxoy & @jimblandy in [#5500](https://github.com/gfx-rs/wgpu/pull/5500)\n\n#### Changed feature requirements for timestamps\n\nDue to a specification change `write_timestamp` is no longer supported on WebGPU.\n`wgpu::CommandEncoder::write_timestamp` requires now the new `wgpu::Features::TIMESTAMP_QUERY_INSIDE_ENCODERS` feature which is available on all native backends but not on WebGPU.\n\nBy @wumpf in [#5188](https://github.com/gfx-rs/wgpu/pull/5188)\n\n\n#### Wgsl const evaluation for many more built-ins\n\nMany numeric built-ins have had a constant evaluation implementation added for them, which allows them to be used in a `const` context:\n\n`abs`, `acos`, `acosh`, `asin`, `asinh`, `atan`, `atanh`, `cos`, `cosh`, `round`, `saturate`, `sin`, `sinh`, `sqrt`, `step`, `tan`, `tanh`, `ceil`, `countLeadingZeros`, `countOneBits`, `countTrailingZeros`, `degrees`, `exp`, `exp2`, `floor`, `fract`, `fma`, `inverseSqrt`, `log`, `log2`, `max`, `min`, `radians`, `reverseBits`, `sign`, `trunc`\n\nBy @ErichDonGubler in [#4879](https://github.com/gfx-rs/wgpu/pull/4879), [#5098](https://github.com/gfx-rs/wgpu/pull/5098)\n\n#### New **native-only** wgsl features\n\n##### Subgroup operations\n\nThe following subgroup operations are available in wgsl now:\n\n`subgroupBallot`, `subgroupAll`, `subgroupAny`, `subgroupAdd`, `subgroupMul`, `subgroupMin`, `subgroupMax`, `subgroupAnd`, `subgroupOr`, `subgroupXor`, `subgroupExclusiveAdd`, `subgroupExclusiveMul`, `subgroupInclusiveAdd`, `subgroupInclusiveMul`, `subgroupBroadcastFirst`, `subgroupBroadcast`, `subgroupShuffle`, `subgroupShuffleDown`, `subgroupShuffleUp`, `subgroupShuffleXor`\n\n\nAvailability is governed by the following feature flags:\n* `wgpu::Features::SUBGROUP` for all operations except `subgroupBarrier` in fragment & compute, supported on Vulkan, DX12 and Metal.\n* `wgpu::Features::SUBGROUP_VERTEX`, for all operations except `subgroupBarrier` general operations in  vertex shaders, supported on Vulkan\n* `wgpu::Features::SUBGROUP_BARRIER`, for support of the `subgroupBarrier` operation, supported on Vulkan & Metal\n\nNote that there currently [some differences](https://github.com/gfx-rs/wgpu/issues/5555) between wgpu's native-only implementation and the [open WebGPU proposal](https://github.com/gpuweb/gpuweb/blob/main/proposals/subgroups.md).\n\nBy @exrook and @lichtso in [#5301](https://github.com/gfx-rs/wgpu/pull/5301)\n\n##### Signed and unsigned 64 bit integer support in shaders.\n\n`wgpu::Features::SHADER_INT64` enables 64 bit integer signed and unsigned integer variables in wgsl (`i64` and `u64` respectively).\nSupported on Vulkan, DX12 (requires DXC) and Metal (with MSL 2.3+ support).\n\nBy @atlv24 and @cwfitzgerald in [#5154](https://github.com/gfx-rs/wgpu/pull/5154)\n\n### New features\n\n#### General\n\n- Implemented the `Unorm10_10_10_2` VertexFormat by @McMackety in [#5477](https://github.com/gfx-rs/wgpu/pull/5477)\n- `wgpu-types`'s `trace` and `replay` features have been replaced by the `serde` feature. By @KirmesBude in [#5149](https://github.com/gfx-rs/wgpu/pull/5149)\n- `wgpu-core`'s `serial-pass` feature has been removed. Use `serde` instead. By @KirmesBude in [#5149](https://github.com/gfx-rs/wgpu/pull/5149)\n- Added `InstanceFlags::GPU_BASED_VALIDATION`, which enables GPU-based validation for shaders. This is currently only supported on the DX12 and Vulkan backends; other platforms ignore this flag, for now. By @ErichDonGubler in [#5146](https://github.com/gfx-rs/wgpu/pull/5146), [#5046](https://github.com/gfx-rs/wgpu/pull/5046).\n  - When set, this flag implies `InstanceFlags::VALIDATION`.\n  - This has been added to the set of flags set by `InstanceFlags::advanced_debugging`. Since the overhead is potentially very large, the flag is not enabled by default in debug builds when using `InstanceFlags::from_build_config`.\n  - As with other instance flags, this flag can be changed in calls to `InstanceFlags::with_env` with the new `WGPU_GPU_BASED_VALIDATION` environment variable.\n- `wgpu::Instance` can now report which `wgpu::Backends` are available based on the build configuration. By @wumpf [#5167](https://github.com/gfx-rs/wgpu/pull/5167)\n  ```diff\n  -wgpu::Instance::any_backend_feature_enabled()\n  +!wgpu::Instance::enabled_backend_features().is_empty()\n  ```\n- Breaking change: [`wgpu_core::pipeline::ProgrammableStageDescriptor`](https://docs.rs/wgpu-core/latest/wgpu_core/pipeline/struct.ProgrammableStageDescriptor.html#structfield.entry_point) is now optional. By @ErichDonGubler in [#5305](https://github.com/gfx-rs/wgpu/pull/5305).\n- `Features::downlevel{_webgl2,}_features` was made const by @MultisampledNight in [#5343](https://github.com/gfx-rs/wgpu/pull/5343)\n- Breaking change: [`wgpu_core::pipeline::ShaderError`](https://docs.rs/wgpu-core/latest/wgpu_core/pipeline/struct.ShaderError.html) has been moved to `naga`. By @stefnotch in [#5410](https://github.com/gfx-rs/wgpu/pull/5410)\n- More as_hal methods and improvements by @JMS55 in [#5452](https://github.com/gfx-rs/wgpu/pull/5452)\n  - Added `wgpu::CommandEncoder::as_hal_mut`\n  - Added `wgpu::TextureView::as_hal`\n  - `wgpu::Texture::as_hal` now returns a user-defined type to match the other as_hal functions\n\n#### Naga\n\n- Allow user to select which MSL version to use via `--metal-version` with Naga CLI. By @pcleavelin in [#5392](https://github.com/gfx-rs/wgpu/pull/5392)\n- Support `arrayLength` for runtime-sized arrays inside binding arrays (for WGSL input and SPIR-V output). By @kvark in [#5428](https://github.com/gfx-rs/wgpu/pull/5428)\n- Added `--shader-stage` and `--input-kind` options to naga-cli for specifying vertex/fragment/compute shaders, and frontend. by @ratmice in [#5411](https://github.com/gfx-rs/wgpu/pull/5411)\n- Added a `create_validator` function to wgpu_core `Device` to create naga `Validator`s. By @atlv24 [#5606](https://github.com/gfx-rs/wgpu/pull/5606)\n\n#### WebGPU\n\n- Implement the `device_set_device_lost_callback` method for `ContextWebGpu`. By @suti in [#5438](https://github.com/gfx-rs/wgpu/pull/5438)\n- Add support for storage texture access modes `ReadOnly` and `ReadWrite`. By @JolifantoBambla in [#5434](https://github.com/gfx-rs/wgpu/pull/5434)\n\n#### GLES / OpenGL\n\n- Log an error when GLES texture format heuristics fail. By @PolyMeilex in [#5266](https://github.com/gfx-rs/wgpu/issues/5266)\n- Cache the sample count to keep `get_texture_format_features` cheap. By @Dinnerbone in [#5346](https://github.com/gfx-rs/wgpu/pull/5346)\n- Mark `DEPTH32FLOAT_STENCIL8` as supported in GLES. By @Dinnerbone in [#5370](https://github.com/gfx-rs/wgpu/pull/5370)\n- Desktop GL now also supports `TEXTURE_COMPRESSION_ETC2`. By @Valaphee in [#5568](https://github.com/gfx-rs/wgpu/pull/5568)\n- Don't create a program for shader-clearing if that workaround isn't required. By @Dinnerbone in [#5348](https://github.com/gfx-rs/wgpu/pull/5348).\n- OpenGL will now be preferred over OpenGL ES on EGL, making it consistent with WGL. By @valaphee in [#5482](https://github.com/gfx-rs/wgpu/pull/5482)\n- Fill out `driver` and `driver_info`, with the OpenGL flavor and version, similar to Vulkan. By @valaphee in [#5482](https://github.com/gfx-rs/wgpu/pull/5482)\n\n#### Metal\n\n- Metal 3.0 and 3.1 detection. By @atlv24 in [#5497](https://github.com/gfx-rs/wgpu/pull/5497)\n\n#### DX12\n\n- Shader Model 6.1-6.7 detection. By @atlv24 in [#5498](https://github.com/gfx-rs/wgpu/pull/5498)\n\n### Other performance improvements\n\n- Simplify and speed up the allocation of internal IDs. By @nical in [#5229](https://github.com/gfx-rs/wgpu/pull/5229)\n- Use memory pooling for UsageScopes to avoid frequent large allocations. by @robtfm in [#5414](https://github.com/gfx-rs/wgpu/pull/5414)\n- Eager release of GPU resources comes from device.trackers. By @bradwerth in [#5075](https://github.com/gfx-rs/wgpu/pull/5075)\n- Support disabling zero-initialization of workgroup local memory in compute shaders. By @DJMcNab in [#5508](https://github.com/gfx-rs/wgpu/pull/5508)\n\n### Documentation\n\n- Improved `wgpu_hal` documentation. By @jimblandy in [#5516](https://github.com/gfx-rs/wgpu/pull/5516), [#5524](https://github.com/gfx-rs/wgpu/pull/5524), [#5562](https://github.com/gfx-rs/wgpu/pull/5562), [#5563](https://github.com/gfx-rs/wgpu/pull/5563), [#5566](https://github.com/gfx-rs/wgpu/pull/5566), [#5617](https://github.com/gfx-rs/wgpu/pull/5617), [#5618](https://github.com/gfx-rs/wgpu/pull/5618)\n- Add mention of primitive restart in the description of `PrimitiveState::strip_index_format`. By @cpsdqs in [#5350](https://github.com/gfx-rs/wgpu/pull/5350)\n- Document and tweak precise behaviour of `SourceLocation`. By @stefnotch in [#5386](https://github.com/gfx-rs/wgpu/pull/5386) and [#5410](https://github.com/gfx-rs/wgpu/pull/5410)\n- Give short example of WGSL `push_constant` syntax. By @waywardmonkeys in [#5393](https://github.com/gfx-rs/wgpu/pull/5393)\n- Fix incorrect documentation of `Limits::max_compute_workgroup_storage_size` default value. By @atlv24 in [#5601](https://github.com/gfx-rs/wgpu/pull/5601)\n\n### Bug Fixes\n\n#### General\n- Fix `serde` feature not compiling for `wgpu-types`. By @KirmesBude in [#5149](https://github.com/gfx-rs/wgpu/pull/5149)\n- Fix the validation of vertex and index ranges. By @nical in [#5144](https://github.com/gfx-rs/wgpu/pull/5144) and [#5156](https://github.com/gfx-rs/wgpu/pull/5156)\n- Fix panic when creating a surface while no backend is available. By @wumpf [#5166](https://github.com/gfx-rs/wgpu/pull/5166)\n- Correctly compute minimum buffer size for array-typed `storage` and `uniform` vars. By @jimblandy [#5222](https://github.com/gfx-rs/wgpu/pull/5222)\n- Fix timeout when presenting a surface where no work has been done. By @waywardmonkeys in [#5200](https://github.com/gfx-rs/wgpu/pull/5200)\n- Fix registry leaks with de-duplicated resources. By @nical in [#5244](https://github.com/gfx-rs/wgpu/pull/5244)\n- Fix linking when targeting android. By @ashdnazg in [#5326](https://github.com/gfx-rs/wgpu/pull/5326).\n- Failing to set the device lost closure will call the closure before returning. By @bradwerth in [#5358](https://github.com/gfx-rs/wgpu/pull/5358).\n- Fix deadlocks caused by recursive read-write lock acquisitions [#5426](https://github.com/gfx-rs/wgpu/pull/5426).\n- Remove exposed C symbols (`extern \"C\"` + [no_mangle]) from RenderPass & ComputePass recording. By @wumpf in [#5409](https://github.com/gfx-rs/wgpu/pull/5409).\n- Fix surfaces being only compatible with first backend enabled on an instance, causing failures when manually specifying an adapter. By @Wumpf in [#5535](https://github.com/gfx-rs/wgpu/pull/5535).\n\n#### Naga\n\n- In spv-in, remove unnecessary \"gl_PerVertex\" name check so unused builtins will always be skipped. Prevents validation errors caused by capability requirements of these builtins [#4915](https://github.com/gfx-rs/wgpu/issues/4915). By @Imberflur in [#5227](https://github.com/gfx-rs/wgpu/pull/5227).\n- In spv-out, check for acceleration and ray-query types when enabling ray-query extension to prevent validation error. By @Vecvec in [#5463](https://github.com/gfx-rs/wgpu/pull/5463)\n- Add a limit for curly brace nesting in WGSL parsing, plus a note about stack size requirements. By @ErichDonGubler in [#5447](https://github.com/gfx-rs/wgpu/pull/5447).\n- In hlsl-out, fix accesses on zero value expressions by generating helper functions for `Expression::ZeroValue`. By @Imberflur in [#5587](https://github.com/gfx-rs/wgpu/pull/5587).\n- Fix behavior of `extractBits` and `insertBits` when `offset + count` overflows the bit width. By @cwfitzgerald in [#5305](https://github.com/gfx-rs/wgpu/pull/5305)\n- Fix behavior of integer `clamp` when `min` argument > `max` argument. By @cwfitzgerald in [#5300](https://github.com/gfx-rs/wgpu/pull/5300).\n- Fix `TypeInner::scalar_width` to be consistent with the rest of the codebase and return values in bytes not bits. By @atlv24 in [#5532](https://github.com/gfx-rs/wgpu/pull/5532).\n\n#### GLES / OpenGL\n\n- GLSL 410 does not support layout(binding = ...), enable only for GLSL 420. By @bes in [#5357](https://github.com/gfx-rs/wgpu/pull/5357)\n- Fixes for being able to use an OpenGL 4.1 core context provided by macOS with wgpu. By @bes in [#5331](https://github.com/gfx-rs/wgpu/pull/5331).\n- Fix crash when holding multiple devices on wayland/surfaceless. By @ashdnazg in [#5351](https://github.com/gfx-rs/wgpu/pull/5351).\n- Fix `first_instance` getting ignored in draw indexed when `ARB_shader_draw_parameters` feature is present and `base_vertex` is 0. By @valaphee in [#5482](https://github.com/gfx-rs/wgpu/pull/5482)\n\n#### Vulkan\n\n- Set object labels when the DEBUG flag is set, even if the VALIDATION flag is disabled. By @DJMcNab in [#5345](https://github.com/gfx-rs/wgpu/pull/5345).\n- Add safety check to `wgpu_hal::vulkan::CommandEncoder` to make sure `discard_encoding` is not called in the closed state. By @villuna in [#5557](https://github.com/gfx-rs/wgpu/pull/5557)\n- Fix SPIR-V type capability requests to not depend on `LocalType` caching. By @atlv24 in [#5590](https://github.com/gfx-rs/wgpu/pull/5590)\n- Upgrade `ash` to `0.38`. By @MarijnS95 in [#5504](https://github.com/gfx-rs/wgpu/pull/5504).\n\n#### Tests\n\n- Fix intermittent crashes on Linux in the `multithreaded_compute` test. By @jimblandy in [#5129](https://github.com/gfx-rs/wgpu/pull/5129).\n- Refactor tests to read feature flags by name instead of a hardcoded hexadecimal u64. By @atlv24 in [#5155](https://github.com/gfx-rs/wgpu/pull/5155).\n- Add test that verifies that we can drop the queue before using the device to create a command encoder. By @Davidster in [#5211](https://github.com/gfx-rs/wgpu/pull/5211)\n\n## 0.19.5 (2024-07-16)\n\nThis release only releases `wgpu-hal` 0.19.5, which contains an important fix\nfor DX12.\n\n### Bug Fixes\n\n#### DX12\n\n- Do not feed `&\"\"` to `D3DCompile`, by @workingjubilee in [#5812](https://github.com/gfx-rs/wgpu/issues/5812), backported by @Elabajaba in [#5833](https://github.com/gfx-rs/wgpu/pull/5833).\n\n## v0.19.4 (2024-04-17)\n\n### Bug Fixes\n\n#### General\n\n- Don't depend on bind group and bind group layout entry order in backends. This caused incorrect severely incorrect command execution and, in some cases, crashes. By @ErichDonGubler in [#5421](https://github.com/gfx-rs/wgpu/pull/5421).\n- Properly clean up all write_buffer/texture temporary resources. By @robtfm in [#5413](https://github.com/gfx-rs/wgpu/pull/5413).\n- Fix deadlock in certain situations when mapping buffers using `wgpu-profiler`. By @cwfitzgerald in [#5517](https://github.com/gfx-rs/wgpu/pull/5517)\n\n#### WebGPU\n- Correctly pass through timestamp queries to WebGPU. By @cwfitzgerald in [#5527](https://github.com/gfx-rs/wgpu/pull/5527).\n\n## v0.19.3 (2024-03-01)\n\nThis release includes `wgpu`, `wgpu-core`, and `wgpu-hal`. All other crates are unchanged.\n\n### Major Changes\n\n#### Vendored WebGPU Bindings from `web_sys`\n\n**`--cfg=web_sys_unstable_apis` is no longer needed in your `RUSTFLAGS` to compile for WebGPU!!!**\n\nWhile WebGPU's javascript api is stable in the browsers, the `web_sys` bindings for WebGPU are still improving. As such they are hidden behind the special cfg `--cfg=web_sys_unstable_apis` and are not available by default. Everyone who wanted to use our WebGPU backend needed to enable this cfg in their `RUSTFLAGS`. This was very inconvenient and made it hard to use WebGPU, especially when WebGPU is enabled by default. Additionally, the unstable APIs don't adhere to semver, so there were repeated breakages.\n\nTo combat this problem we have decided to vendor the `web_sys` bindings for WebGPU within the crate. Notably we are not forking the bindings, merely vendoring, so any improvements we make to the bindings will be contributed directly to upstream `web_sys`.\n\nBy @cwfitzgerald in [#5325](https://github.com/gfx-rs/wgpu/pull/5325).\n\n### Bug Fixes\n\n#### General\n\n- Fix an issue where command encoders weren't properly freed if an error occurred during command encoding. By @ErichDonGubler in [#5251](https://github.com/gfx-rs/wgpu/pull/5251).\n- Fix incorrect validation causing all indexed draws on render bundles to fail. By @wumpf in [#5430](https://github.com/gfx-rs/wgpu/pull/5340).\n\n#### Android\n- Fix linking error when targeting android without `winit`. By @ashdnazg in [#5326](https://github.com/gfx-rs/wgpu/pull/5326).\n\n\n## v0.19.2 (2024-02-29)\n\nThis release includes `wgpu`, `wgpu-core`, `wgpu-hal`, `wgpu-types`, and `naga`. All other crates are unchanged.\n\n### Added/New Features\n\n#### General\n- `wgpu::Id` now implements `PartialOrd`/`Ord` allowing it to be put in `BTreeMap`s. By @cwfitzgerald and @9291Sam in [#5176](https://github.com/gfx-rs/wgpu/pull/5176)\n\n#### OpenGL\n- Log an error when OpenGL texture format heuristics fail. By @PolyMeilex in [#5266](https://github.com/gfx-rs/wgpu/issues/5266)\n\n#### `wgsl-out`\n- Learned to generate acceleration structure types. By @JMS55 in [#5261](https://github.com/gfx-rs/wgpu/pull/5261)\n\n### Documentation\n- Fix link in `wgpu::Instance::create_surface` documentation. By @HexoKnight in [#5280](https://github.com/gfx-rs/wgpu/pull/5280).\n- Fix typo in `wgpu::CommandEncoder::clear_buffer` documentation. By @PWhiddy in [#5281](https://github.com/gfx-rs/wgpu/pull/5281).\n- `Surface` configuration incorrectly claimed that `wgpu::Instance::create_surface` was unsafe. By @hackaugusto in [#5265](https://github.com/gfx-rs/wgpu/pull/5265).\n\n### Bug Fixes\n\n#### General\n- Device lost callbacks are invoked when replaced and when global is dropped. By @bradwerth in [#5168](https://github.com/gfx-rs/wgpu/pull/5168)\n- Fix performance regression when allocating a large amount of resources of the same type. By @nical in [#5229](https://github.com/gfx-rs/wgpu/pull/5229)\n- Fix docs.rs wasm32 builds. By @cwfitzgerald in [#5310](https://github.com/gfx-rs/wgpu/pull/5310)\n- Improve error message when binding count limit hit. By @hackaugusto in [#5298](https://github.com/gfx-rs/wgpu/pull/5298)\n- Remove an unnecessary `clone` during GLSL shader ingestion. By @a1phyr in [#5118](https://github.com/gfx-rs/wgpu/pull/5118).\n- Fix missing validation for `Device::clear_buffer` where `offset + size > buffer.size` was not checked when `size` was omitted. By @ErichDonGubler in [#5282](https://github.com/gfx-rs/wgpu/pull/5282).\n\n#### DX12\n- Fix `panic!` when dropping `Instance` without `InstanceFlags::VALIDATION`. By @hakolao in [#5134](https://github.com/gfx-rs/wgpu/pull/5134)\n\n#### OpenGL\n- Fix internal format for the `Etc2Rgba8Unorm` format. By @andristarr in [#5178](https://github.com/gfx-rs/wgpu/pull/5178)\n- Try to load `libX11.so.6` in addition to `libX11.so` on linux. [#5307](https://github.com/gfx-rs/wgpu/pull/5307)\n- Make use of `GL_EXT_texture_shadow_lod` to support sampling a cube depth texture with an explicit LOD. By @cmrschwarz in #[5171](https://github.com/gfx-rs/wgpu/pull/5171).\n\n#### `glsl-in`\n\n- Fix code generation from nested loops. By @cwfitzgerald and @teoxoy in [#5311](https://github.com/gfx-rs/wgpu/pull/5311)\n\n\n## v0.19.1 (2024-01-22)\n\nThis release includes `wgpu` and `wgpu-hal`. The rest of the crates are unchanged since 0.19.0.\n\n### Bug Fixes\n\n#### DX12\n\n- Properly register all swapchain buffers to prevent error on surface present. By @dtzxporter in [#5091](https://github.com/gfx-rs/wgpu/pull/5091)\n- Check for extra null states when creating resources. By @nical in [#5096](https://github.com/gfx-rs/wgpu/pull/5096)\n- Fix depth-only and stencil-only views causing crashes. By @teoxoy in [#5100](https://github.com/gfx-rs/wgpu/pull/5100)\n\n#### OpenGL\n\n- In Surface::configure and Surface::present on Windows, fix the current GL context not being unset when releasing the lock that guards access to making the context current. This was causing other threads to panic when trying to make the context current. By @Imberflur in [#5087](https://github.com/gfx-rs/wgpu/pull/5087).\n\n#### WebGPU\n\n- Improve error message when compiling WebGPU backend on wasm without the `web_sys_unstable_apis` set. By @rukai in [#5104](https://github.com/gfx-rs/wgpu/pull/5104)\n\n### Documentation\n\n- Document Wayland specific behavior related to `SurfaceTexture::present`. By @i509VCB in [#5093](https://github.com/gfx-rs/wgpu/pull/5093).\n\n\n## v0.19.0 (2024-01-17)\n\nThis release includes:\n- `wgpu`\n- `wgpu-core`\n- `wgpu-hal`\n- `wgpu-types`\n- `wgpu-info`\n- `naga` (skipped from 0.14 to 0.19)\n- `naga-cli` (skipped from 0.14 to 0.19)\n- `d3d12` (skipped from 0.7 to 0.19)\n\n### Improved Multithreading through internal use of Reference Counting\n\nLarge refactoring of wgpu’s internals aiming at reducing lock contention, and providing better performance when using wgpu on multiple threads.\n\n[Check the blog post!](https://gfx-rs.github.io/2023/11/24/arcanization.html)\n\nBy @gents83 in [#3626](https://github.com/gfx-rs/wgpu/pull/3626) and thanks also to @jimblandy, @nical, @Wumpf, @Elabajaba & @cwfitzgerald\n\n### All Public Dependencies are Re-Exported\n\nAll of wgpu's public dependencies are now re-exported at the top level so that users don't need to take their own dependencies.\nThis includes:\n- wgpu-core\n- wgpu-hal\n- naga\n- raw_window_handle\n- web_sys\n\n### Feature Flag Changes\n\n#### WebGPU & WebGL in the same Binary\n\nEnabling `webgl` no longer removes the `webgpu` backend.\n\nInstead, there's a new (default enabled) `webgpu` feature that allows to explicitly opt-out of `webgpu` if so desired.\nIf both `webgl` & `webgpu` are enabled, `wgpu::Instance` decides upon creation whether to target wgpu-core/WebGL or WebGPU.\nThis means that adapter selection is not handled as with regular adapters, but still allows to decide at runtime whether\n`webgpu` or the `webgl` backend should be used using a single wasm binary.\nBy @wumpf in [#5044](https://github.com/gfx-rs/wgpu/pull/5044)\n\n#### `naga-ir` Dedicated Feature\n\nThe `naga-ir` feature has been added to allow you to add naga module shaders without guessing about what other features needed to be enabled to get access to it.\nBy @cwfitzgerald in [#5063](https://github.com/gfx-rs/wgpu/pull/5063).\n\n#### `expose-ids` Feature available unconditionally\n\nThis feature allowed you to call `global_id` on any wgpu opaque handle to get a unique hashable identity for the given resource. This is now available without the feature flag.\nBy @cwfitzgerald in [#4841](https://github.com/gfx-rs/wgpu/pull/4841).\n\n#### `dx12` and `metal` Backend Crate Features\n\nwgpu now exposes backend feature for the Direct3D 12 (`dx12`) and Metal (`metal`) backend. These are enabled by default, but don't do anything when not targeting the corresponding OS.\nBy @daxpedda in [#4815](https://github.com/gfx-rs/wgpu/pull/4815).\n\n### Direct3D 11 Backend Removal\n\nThis backend had no functionality, and with the recent support for GL on Desktop, which allows wgpu to run on older devices, there was no need to keep this backend.\nBy @valaphee in [#4828](https://github.com/gfx-rs/wgpu/pull/4828).\n\n### `WGPU_ALLOW_UNDERLYING_NONCOMPLIANT_ADAPTER` Environment Variable\n\nThis adds a way to allow a Vulkan driver which is non-compliant per `VK_KHR_driver_properties` to be enumerated. This is intended for testing new Vulkan drivers which are not Vulkan compliant yet.\nBy @i509VCB in [#4754](https://github.com/gfx-rs/wgpu/pull/4754).\n\n### `DeviceExt::create_texture_with_data` allows Mip-Major Data\n\nPreviously, `DeviceExt::create_texture_with_data` only allowed data to be provided in layer major order. There is now a `order` parameter which allows you to specify if the data is in layer major or mip major order.\n```diff\n    let tex = ctx.device.create_texture_with_data(\n        &queue,\n        &descriptor,\n+       wgpu::util::TextureDataOrder::LayerMajor,\n        src_data,\n    );\n```\n\nBy @cwfitzgerald in [#4780](https://github.com/gfx-rs/wgpu/pull/4780).\n\n### Safe & unified Surface Creation\n\nIt is now possible to safely create a `wgpu::Surface` with `wgpu::Instance::create_surface()` by letting `wgpu::Surface` hold a lifetime to `window`.\nPassing an owned value `window` to `Surface` will return a `wgpu::Surface<'static>`.\n\nAll possible safe variants (owned windows and web canvases) are grouped using `wgpu::SurfaceTarget`.\nConversion to `wgpu::SurfaceTarget` is automatic for any type implementing `raw-window-handle`'s `HasWindowHandle` & `HasDisplayHandle` traits, i.e. most window types.\nFor web canvas types this has to be done explicitly:\n```rust\nlet surface: wgpu::Surface<'static> = instance.create_surface(wgpu::SurfaceTarget::Canvas(my_canvas))?;\n```\n\nAll unsafe variants are now grouped under `wgpu::Instance::create_surface_unsafe` which takes the\n`wgpu::SurfaceTargetUnsafe` enum and always returns `wgpu::Surface<'static>`.\n\nIn order to create a `wgpu::Surface<'static>` without passing ownership of the window use\n`wgpu::SurfaceTargetUnsafe::from_window`:\n```rust\nlet surface = unsafe {\n  instance.create_surface_unsafe(wgpu::SurfaceTargetUnsafe::from_window(&my_window))?\n};\n```\nThe easiest way to make this code safe is to use shared ownership:\n```rust\nlet window: Arc<winit::Window>;\n// ...\nlet surface = instance.create_surface(window.clone())?;\n```\n\nAll platform specific surface creation using points have moved into `SurfaceTargetUnsafe` as well.\nFor example:\n\nSafety by @daxpedda in [#4597](https://github.com/gfx-rs/wgpu/pull/4597)\nUnification by @wumpf in [#4984](https://github.com/gfx-rs/wgpu/pull/4984)\n\n### Add partial Support for WGSL Abstract Types\n\nAbstract types make numeric literals easier to use, by\nautomatically converting literals and other constant expressions\nfrom abstract numeric types to concrete types when safe and\nnecessary. For example, to build a vector of floating-point\nnumbers, Naga previously made you write:\n```rust\nvec3<f32>(1.0, 2.0, 3.0)\n```\nWith this change, you can now simply write:\n```rust\nvec3<f32>(1, 2, 3)\n```\nEven though the literals are abstract integers, Naga recognizes\nthat it is safe and necessary to convert them to `f32` values in\norder to build the vector. You can also use abstract values as\ninitializers for global constants and global and local variables,\nlike this:\n```rust\nvar unit_x: vec2<f32> = vec2(1, 0);\n```\nThe literals `1` and `0` are abstract integers, and the expression\n`vec2(1, 0)` is an abstract vector. However, Naga recognizes that\nit can convert that to the concrete type `vec2<f32>` to satisfy\nthe given type of `unit_x`.\nThe WGSL specification permits abstract integers and\nfloating-point values in almost all contexts, but Naga's support\nfor this is still incomplete. Many WGSL operators and builtin\nfunctions are specified to produce abstract results when applied\nto abstract inputs, but for now Naga simply concretizes them all\nbefore applying the operation. We will expand Naga's abstract type\nsupport in subsequent pull requests.\nAs part of this work, the public types `naga::ScalarKind` and\n`naga::Literal` now have new variants, `AbstractInt` and `AbstractFloat`.\n\nBy @jimblandy in [#4743](https://github.com/gfx-rs/wgpu/pull/4743), [#4755](https://github.com/gfx-rs/wgpu/pull/4755).\n\n### `Instance::enumerate_adapters` now returns `Vec<Adapter>` instead of an `ExactSizeIterator`\n\nThis allows us to support WebGPU and WebGL in the same binary.\n\n```diff\n- let adapters: Vec<Adapter> = instance.enumerate_adapters(wgpu::Backends::all()).collect();\n+ let adapters: Vec<Adapter> = instance.enumerate_adapters(wgpu::Backends::all());\n```\n\nBy @wumpf in [#5044](https://github.com/gfx-rs/wgpu/pull/5044)\n\n### `device.poll()` now returns a `MaintainResult` instead of a `bool`\n\nThis is a forward looking change, as we plan to add more information to the `MaintainResult` in the future.\nThis enum has the same data as the boolean, but with some useful helper functions.\n\n```diff\n- let queue_finished: bool = device.poll(wgpu::Maintain::Wait);\n+ let queue_finished: bool = device.poll(wgpu::Maintain::Wait).is_queue_empty();\n```\n\nBy @cwfitzgerald in [#5053](https://github.com/gfx-rs/wgpu/pull/5053)\n\n### New Features\n\n#### General\n- Added `DownlevelFlags::VERTEX_AND_INSTANCE_INDEX_RESPECTS_RESPECTIVE_FIRST_VALUE_IN_INDIRECT_DRAW` to know if `@builtin(vertex_index)` and `@builtin(instance_index)` will respect the `first_vertex` / `first_instance` in indirect calls. If this is not present, both will always start counting from 0. Currently enabled on all backends except DX12. By @cwfitzgerald in [#4722](https://github.com/gfx-rs/wgpu/pull/4722).\n- Added support for the `FLOAT32_FILTERABLE` feature (web and native, corresponds to WebGPU's `float32-filterable`). By @almarklein in [#4759](https://github.com/gfx-rs/wgpu/pull/4759).\n- GPU buffer memory is released during \"lose the device\". By @bradwerth in [#4851](https://github.com/gfx-rs/wgpu/pull/4851).\n- wgpu and wgpu-core cargo feature flags are now documented on docs.rs. By @wumpf in [#4886](https://github.com/gfx-rs/wgpu/pull/4886).\n- DeviceLostClosure is guaranteed to be invoked exactly once. By @bradwerth in [#4862](https://github.com/gfx-rs/wgpu/pull/4862).\n- Log vulkan validation layer messages during instance creation and destruction: By @exrook in [#4586](https://github.com/gfx-rs/wgpu/pull/4586).\n- `TextureFormat::block_size` is deprecated, use `TextureFormat::block_copy_size` instead: By @wumpf in [#4647](https://github.com/gfx-rs/wgpu/pull/4647).\n- Rename of `DispatchIndirect`, `DrawIndexedIndirect`, and `DrawIndirect` types in the `wgpu::util` module to `DispatchIndirectArgs`, `DrawIndexedIndirectArgs`, and `DrawIndirectArgs`. By @cwfitzgerald in [#4723](https://github.com/gfx-rs/wgpu/pull/4723).\n- Make the size parameter of `encoder.clear_buffer` an `Option<u64>` instead of `Option<NonZero<u64>>`. By @nical in [#4737](https://github.com/gfx-rs/wgpu/pull/4737).\n- Reduce the `info` log level noise. By @nical in [#4769](https://github.com/gfx-rs/wgpu/pull/4769), [#4711](https://github.com/gfx-rs/wgpu/pull/4711) and [#4772](https://github.com/gfx-rs/wgpu/pull/4772)\n- Rename `features` & `limits` fields of `DeviceDescriptor` to `required_features` & `required_limits`. By @teoxoy in [#4803](https://github.com/gfx-rs/wgpu/pull/4803).\n- `SurfaceConfiguration` now exposes `desired_maximum_frame_latency` which was previously hard-coded to 2. By setting it to 1 you can reduce latency under the risk of making GPU & CPU work sequential. Currently, on DX12 this affects the `MaximumFrameLatency`, on all other backends except OpenGL the size of the swapchain (on OpenGL this has no effect). By @emilk & @wumpf in [#4899](https://github.com/gfx-rs/wgpu/pull/4899)\n\n#### OpenGL\n- `@builtin(instance_index)` now properly reflects the range provided in the draw call instead of always counting from 0. By @cwfitzgerald in [#4722](https://github.com/gfx-rs/wgpu/pull/4722).\n- Desktop GL now supports `POLYGON_MODE_LINE` and `POLYGON_MODE_POINT`. By @valaphee in [#4836](https://github.com/gfx-rs/wgpu/pull/4836).\n\n#### Naga\n\n- Naga's WGSL front end now allows operators to produce values with abstract types, rather than concretizing their operands. By @jimblandy in [#4850](https://github.com/gfx-rs/wgpu/pull/4850) and [#4870](https://github.com/gfx-rs/wgpu/pull/4870).\n- Naga's WGSL front and back ends now have experimental support for 64-bit floating-point literals: `1.0lf` denotes an `f64` value. There has been experimental support for an `f64` type for a while, but until now there was no syntax for writing literals with that type. As before, Naga module validation rejects `f64` values unless `naga::valid::Capabilities::FLOAT64` is requested. By @jimblandy in [#4747](https://github.com/gfx-rs/wgpu/pull/4747).\n- Naga constant evaluation can now process binary operators whose operands are both vectors. By @jimblandy in [#4861](https://github.com/gfx-rs/wgpu/pull/4861).\n- Add `--bulk-validate` option to Naga CLI. By @jimblandy in [#4871](https://github.com/gfx-rs/wgpu/pull/4871).\n- Naga's `cargo xtask validate` now runs validation jobs in parallel, using the [jobserver](https://crates.io/crates/jobserver) protocol to limit concurrency, and offers a `validate all` subcommand, which runs all available validation types. By @jimblandy in [#4902](https://github.com/gfx-rs/wgpu/pull/4902).\n- Remove `span` and `validate` features. Always fully validate shader modules, and always track source positions for use in error messages. By @teoxoy in [#4706](https://github.com/gfx-rs/wgpu/pull/4706).\n- Introduce a new `Scalar` struct type for use in Naga's IR, and update all frontend, middle, and backend code appropriately. By @jimblandy in [#4673](https://github.com/gfx-rs/wgpu/pull/4673).\n- Add more metal keywords. By @fornwall in [#4707](https://github.com/gfx-rs/wgpu/pull/4707).\n- Add a new `naga::Literal` variant, `I64`, for signed 64-bit literals. [#4711](https://github.com/gfx-rs/wgpu/pull/4711).\n- Emit and init `struct` member padding always. By @ErichDonGubler in [#4701](https://github.com/gfx-rs/wgpu/pull/4701).\n- In WGSL output, always include the `i` suffix on `i32` literals. By @jimblandy in [#4863](https://github.com/gfx-rs/wgpu/pull/4863).\n- In WGSL output, always include the `f` suffix on `f32` literals. By @jimblandy in [#4869](https://github.com/gfx-rs/wgpu/pull/4869).\n\n### Bug Fixes\n\n#### General\n\n- `BufferMappedRange` trait is now `WasmNotSendSync`, i.e. it is `Send`/`Sync` if not on wasm or `fragile-send-sync-non-atomic-wasm` is enabled. By @wumpf in [#4818](https://github.com/gfx-rs/wgpu/pull/4818).\n- Align `wgpu_types::CompositeAlphaMode` serde serialization to spec. By @littledivy in [#4940](https://github.com/gfx-rs/wgpu/pull/4940).\n- Fix error message of `ConfigureSurfaceError::TooLarge`. By @Dinnerbone in [#4960](https://github.com/gfx-rs/wgpu/pull/4960).\n- Fix dropping of `DeviceLostCallbackC` params. By @bradwerth in [#5032](https://github.com/gfx-rs/wgpu/pull/5032).\n- Fixed a number of panics. By @nical in [#4999](https://github.com/gfx-rs/wgpu/pull/4999), [#5014](https://github.com/gfx-rs/wgpu/pull/5014), [#5024](https://github.com/gfx-rs/wgpu/pull/5024), [#5025](https://github.com/gfx-rs/wgpu/pull/5025), [#5026](https://github.com/gfx-rs/wgpu/pull/5026), [#5027](https://github.com/gfx-rs/wgpu/pull/5027), [#5028](https://github.com/gfx-rs/wgpu/pull/5028) and [#5042](https://github.com/gfx-rs/wgpu/pull/5042).\n- No longer validate surfaces against their allowed extent range on configure. This caused warnings that were almost impossible to avoid. As before, the resulting behavior depends on the compositor. By @wumpf in [#4796](https://github.com/gfx-rs/wgpu/pull/4796).\n\n#### DX12\n\n- Fixed D3D12_SUBRESOURCE_FOOTPRINT calculation for block compressed textures which caused a crash with `Queue::write_texture` on DX12. By @DTZxPorter in [#4990](https://github.com/gfx-rs/wgpu/pull/4990).\n\n#### Vulkan\n\n- Use `VK_EXT_robustness2` only when not using an outdated intel iGPU driver. By @TheoDulka in [#4602](https://github.com/gfx-rs/wgpu/pull/4602).\n\n#### WebGPU\n\n- Allow calling `BufferSlice::get_mapped_range` multiple times on the same buffer slice (instead of throwing a Javascript exception). By @DouglasDwyer in [#4726](https://github.com/gfx-rs/wgpu/pull/4726).\n\n#### WGL\n\n- Create a hidden window per `wgpu::Instance` instead of sharing a global one. By @Zoxc in [#4603](https://github.com/gfx-rs/wgpu/issues/4603)\n\n#### Naga\n\n- Make module compaction preserve the module's named types, even if they are unused. By @jimblandy in [#4734](https://github.com/gfx-rs/wgpu/pull/4734).\n- Improve algorithm used by module compaction. By @jimblandy in [#4662](https://github.com/gfx-rs/wgpu/pull/4662).\n- When reading GLSL, fix the argument types of the double-precision floating-point overloads of the `dot`, `reflect`, `distance`, and `ldexp` builtin functions. Correct the WGSL generated for constructing 64-bit floating-point matrices. Add tests for all the above. By @jimblandy in [#4684](https://github.com/gfx-rs/wgpu/pull/4684).\n- Allow Naga's IR types to represent matrices with elements elements of any scalar kind. This makes it possible for Naga IR types to represent WGSL abstract matrices. By @jimblandy in [#4735](https://github.com/gfx-rs/wgpu/pull/4735).\n- Preserve the source spans for constants and expressions correctly across module compaction. By @jimblandy in [#4696](https://github.com/gfx-rs/wgpu/pull/4696).\n- Record the names of WGSL `alias` declarations in Naga IR `Type`s. By @jimblandy in [#4733](https://github.com/gfx-rs/wgpu/pull/4733).\n\n#### Metal\n\n- Allow the `COPY_SRC` usage flag in surface configuration. By @Toqozz in [#4852](https://github.com/gfx-rs/wgpu/pull/4852).\n\n### Examples\n\n- remove winit dependency from hello-compute example. By @psvri in [#4699](https://github.com/gfx-rs/wgpu/pull/4699)\n- hello-compute example fix failure with `wgpu error: Validation Error` if arguments are missing. By @vilcans in [#4939](https://github.com/gfx-rs/wgpu/pull/4939).\n- Made the examples page not crash on Chrome on Android, and responsive to screen sizes. By @Dinnerbone in [#4958](https://github.com/gfx-rs/wgpu/pull/4958).\n\n## v0.18.2 (2023-12-06)\n\nThis release includes `naga` version 0.14.2. The crates `wgpu-core`, `wgpu-hal` are still at `0.18.1` and the crates `wgpu` and `wgpu-types` are still at `0.18.0`.\n\n### Bug Fixes\n\n#### Naga\n- When evaluating const-expressions and generating SPIR-V, properly handle `Compose` expressions whose operands are `Splat` expressions. Such expressions are created and marked as constant by the constant evaluator. By @jimblandy in [#4695](https://github.com/gfx-rs/wgpu/pull/4695).\n\n## v0.18.1 (2023-11-15)\n\n(naga version 0.14.1)\n\n### Bug Fixes\n\n#### General\n- Fix panic in `Surface::configure` in debug builds. By @cwfitzgerald in [#4635](https://github.com/gfx-rs/wgpu/pull/4635)\n- Fix crash when all the following are true: By @teoxoy in #[#4642](https://github.com/gfx-rs/wgpu/pull/4642)\n  - Passing a naga module directly to `Device::create_shader_module`.\n  - `InstanceFlags::DEBUG` is enabled.\n\n#### DX12\n- Always use HLSL 2018 when using DXC to compile HLSL shaders. By @daxpedda in [#4629](https://github.com/gfx-rs/wgpu/pull/4629)\n\n#### Metal\n- In Metal Shading Language output, fix issue where local variables were sometimes using variable names from previous functions. By @DJMcNab in [#4594](https://github.com/gfx-rs/wgpu/pull/4594)\n\n## v0.18.0 (2023-10-25)\n\nFor naga changelogs at or before v0.14.0. See [naga's changelog](naga/CHANGELOG.md).\n\n### Desktop OpenGL 3.3+ Support on Windows\n\nWe now support OpenGL on Windows! This brings support for a vast majority of the hardware that used to be covered by our DX11 backend. As of this writing we support OpenGL 3.3+, though there are efforts to reduce that further.\n\nThis allows us to cover the last 12 years of Intel GPUs (starting with Ivy Bridge; aka 3xxx), and the last 16 years of AMD (starting with Terascale; aka HD 2000) / NVidia GPUs (starting with Tesla; aka GeForce 8xxx).\n\nBy @Zoxc in [#4248](https://github.com/gfx-rs/wgpu/pull/4248)\n\n### Timestamp Queries Supported on Metal and OpenGL\n\nTimestamp queries are now supported on both Metal and Desktop OpenGL. On Apple chips on Metal, they only support timestamp queries in command buffers or in the renderpass descriptor,\nthey do not support them inside a pass.\n\nMetal: By @Wumpf in [#4008](https://github.com/gfx-rs/wgpu/pull/4008)\nOpenGL: By @Zoxc in [#4267](https://github.com/gfx-rs/wgpu/pull/4267)\n\n### Render/Compute Pass Query Writes\n\nAddition of the `TimestampWrites` type to compute and render pass descriptors to allow profiling on tilers which do not support timestamps inside passes.\n\nAdded [an example](https://github.com/gfx-rs/wgpu/tree/trunk/examples/timestamp-queries) to demonstrate the various kinds of timestamps.\n\nAdditionally, metal now supports timestamp queries!\n\nBy @FL33TW00D & @wumpf in [#3636](https://github.com/gfx-rs/wgpu/pull/3636).\n\n### Occlusion Queries\n\nWe now support binary occlusion queries! This allows you to determine if any of the draw calls within the query drew any pixels.\n\nUse the new `occlusion_query_set` field on `RenderPassDescriptor` to give a query set that occlusion queries will write to.\n\n```diff\nlet mut rpass = encoder.begin_render_pass(&wgpu::RenderPassDescriptor {\n    // ...\n+   occlusion_query_set: Some(&my_occlusion_query_set),\n});\n```\n\nWithin the renderpass do the following to write the occlusion query results to the query set at the given index:\n\n```rust\nrpass.begin_occlusion_query(index);\nrpass.draw(...);\nrpass.draw(...);\nrpass.end_occlusion_query();\n```\n\nThese are binary occlusion queries, so the result will be either 0 or an unspecified non-zero value.\n\nBy @Valaphee in [#3402](https://github.com/gfx-rs/wgpu/pull/3402)\n\n### Shader Improvements\n\n```rust\n// WGSL constant expressions are now supported!\nconst BLAH: u32 = 1u + 1u;\n\n// `rgb10a2uint` and `bgra8unorm` can now be used as a storage image format.\nvar image: texture_storage_2d<rgb10a2uint, write>;\nvar image: texture_storage_2d<bgra8unorm, write>;\n\n// You can now use dual source blending!\nstruct FragmentOutput{\n    @location(0) source1: vec4<f32>,\n    @location(0) @second_blend_source source2: vec4<f32>,\n}\n\n// `modf`/`frexp` now return structures\nlet result = modf(1.5);\nresult.fract == 0.5;\nresult.whole == 1.0;\n\nlet result = frexp(1.5);\nresult.fract == 0.75;\nresult.exponent == 2i;\n\n// `modf`/`frexp` are currently disabled on GLSL and SPIR-V input.\n```\n\n### Shader Validation Improvements\n\n```rust\n// Cannot get pointer to a workgroup variable\nfn func(p: ptr<workgroup, u32>); // ERROR\n\n// Cannot create Inf/NaN through constant expressions\nconst INF: f32 = 3.40282347e+38 + 1.0; // ERROR\nconst NAN: f32 = 0.0 / 0.0; // ERROR\n\n// `outerProduct` function removed\n\n// Error on repeated or missing `@workgroup_size()`\n@workgroup_size(1) @workgroup_size(2) // ERROR\nfn compute_main() {}\n\n// Error on repeated attributes.\nfn fragment_main(@location(0) @location(0) location_0: f32) // ERROR\n```\n\n### RenderPass `StoreOp` is now Enumeration\n\n`wgpu::Operations::store` used to be an underdocumented boolean value,\ncausing misunderstandings of the effect of setting it to `false`.\n\nThe API now more closely resembles WebGPU which distinguishes between `store` and `discard`,\nsee [WebGPU spec on GPUStoreOp](https://gpuweb.github.io/gpuweb/#enumdef-gpustoreop).\n\n```diff\n// ...\ndepth_ops: Some(wgpu::Operations {\n    load: wgpu::LoadOp::Clear(1.0),\n-   store: false,\n+   store: wgpu::StoreOp::Discard,\n}),\n// ...\n```\n\nBy @wumpf in [#4147](https://github.com/gfx-rs/wgpu/pull/4147)\n\n### Instance Descriptor Settings\n\nThe instance descriptor grew two more fields: `flags` and `gles_minor_version`.\n\n`flags` allow you to toggle the underlying api validation layers, debug information about shaders and objects in capture programs, and the ability to discard labels\n\n`gles_minor_version` is a rather niche feature that allows you to force the GLES backend to use a specific minor version, this is useful to get ANGLE to enable more than GLES 3.0.\n\n```diff\nlet instance = wgpu::Instance::new(InstanceDescriptor {\n    ...\n+   flags: wgpu::InstanceFlags::default()\n+   gles_minor_version: wgpu::Gles3MinorVersion::Automatic,\n});\n```\n\n`gles_minor_version`: By @PJB3005 in [#3998](https://github.com/gfx-rs/wgpu/pull/3998)\n`flags`: By @nical in [#4230](https://github.com/gfx-rs/wgpu/pull/4230)\n\n### Many New Examples!\n\n- Added the following examples: By @JustAnotherCodemonkey in [#3885](https://github.com/gfx-rs/wgpu/pull/3885).\n  - [repeated-compute](https://github.com/gfx-rs/wgpu/tree/trunk/examples/repeated-compute)\n  - [storage-texture](https://github.com/gfx-rs/wgpu/tree/trunk/examples/storage-texture)\n  - [render-to-texture](https://github.com/gfx-rs/wgpu/tree/trunk/examples/render-to-texture)\n  - [uniform-values](https://github.com/gfx-rs/wgpu/tree/trunk/examples/uniform-values)\n  - [hello-workgroups](https://github.com/gfx-rs/wgpu/tree/trunk/examples/hello-workgroups)\n  - [hello-synchronization](https://github.com/gfx-rs/wgpu/tree/trunk/examples/hello-synchronization)\n\n### Revamped Testing Suite\n\nOur testing harness was completely revamped and now automatically runs against all gpus in the system, shows the expected status of every test, and is tolerant to flakes.\n\nAdditionally, we have filled out our CI to now run the latest versions of WARP and Mesa. This means we can test even more features on CI than before.\n\nBy @cwfitzgerald in [#3873](https://github.com/gfx-rs/wgpu/pull/3873)\n\n### The GLES backend is now optional on macOS\n\nThe `angle` feature flag has to be set for the GLES backend to be enabled on Windows & macOS.\n\nBy @teoxoy in [#4185](https://github.com/gfx-rs/wgpu/pull/4185)\n\n### Added/New Features\n\n- Re-export Naga. By @exrook in [#4172](https://github.com/gfx-rs/wgpu/pull/4172)\n- Add WinUI 3 SwapChainPanel support. By @ddrboxman in [#4191](https://github.com/gfx-rs/wgpu/pull/4191)\n\n### Changes\n\n#### General\n\n- Omit texture store bound checks since they are no-ops if out of bounds on all APIs. By @teoxoy in [#3975](https://github.com/gfx-rs/wgpu/pull/3975)\n- Validate `DownlevelFlags::READ_ONLY_DEPTH_STENCIL`. By @teoxoy in [#4031](https://github.com/gfx-rs/wgpu/pull/4031)\n- Add validation in accordance with WebGPU `setViewport` valid usage for `x`, `y` and `this.[[attachment_size]]`. By @James2022-rgb in [#4058](https://github.com/gfx-rs/wgpu/pull/4058)\n- `wgpu::CreateSurfaceError` and `wgpu::RequestDeviceError` now give details of the failure, but no longer implement `PartialEq` and cannot be constructed. By @kpreid in [#4066](https://github.com/gfx-rs/wgpu/pull/4066) and [#4145](https://github.com/gfx-rs/wgpu/pull/4145)\n- Make `WGPU_POWER_PREF=none` a valid value. By @fornwall in [4076](https://github.com/gfx-rs/wgpu/pull/4076)\n- Support dual source blending in OpenGL ES, Metal, Vulkan & DX12. By @freqmod in [4022](https://github.com/gfx-rs/wgpu/pull/4022)\n- Add stub support for device destroy and device validity. By @bradwerth in [4163](https://github.com/gfx-rs/wgpu/pull/4163) and in [4212](https://github.com/gfx-rs/wgpu/pull/4212)\n- Add trace-level logging for most entry points in wgpu-core By @nical in [4183](https://github.com/gfx-rs/wgpu/pull/4183)\n- Add `Rgb10a2Uint` format. By @teoxoy in [4199](https://github.com/gfx-rs/wgpu/pull/4199)\n- Validate that resources are used on the right device. By @nical in [4207](https://github.com/gfx-rs/wgpu/pull/4207)\n- Expose instance flags.\n- Add support for the bgra8unorm-storage feature. By @jinleili and @nical in [#4228](https://github.com/gfx-rs/wgpu/pull/4228)\n- Calls to lost devices now return `DeviceError::Lost` instead of `DeviceError::Invalid`. By @bradwerth in [#4238]([https://github.com/gfx-rs/wgpu/pull/4238])\n- Let the `\"strict_asserts\"` feature enable check that wgpu-core's lock-ordering tokens are unique per thread. By @jimblandy in [#4258]([https://github.com/gfx-rs/wgpu/pull/4258])\n- Allow filtering labels out before they are passed to GPU drivers by @nical in [https://github.com/gfx-rs/wgpu/pull/4246](4246)\n- `DeviceLostClosure` callback mechanism provided so user agents can resolve `GPUDevice.lost` Promises at the appropriate time by @bradwerth in [#4645](https://github.com/gfx-rs/wgpu/pull/4645)\n\n\n#### Vulkan\n\n- Rename `wgpu_hal::vulkan::Instance::required_extensions` to `desired_extensions`. By @jimblandy in [#4115](https://github.com/gfx-rs/wgpu/pull/4115)\n- Don't bother calling `vkFreeCommandBuffers` when `vkDestroyCommandPool` will take care of that for us. By @jimblandy in [#4059](https://github.com/gfx-rs/wgpu/pull/4059)\n\n#### DX12\n\n- Bump `gpu-allocator` to 0.23. By @Elabajaba in [#4198](https://github.com/gfx-rs/wgpu/pull/4198)\n\n### Documentation\n\n- Use WGSL for VertexFormat example types. By @ScanMountGoat in [#4035](https://github.com/gfx-rs/wgpu/pull/4035)\n- Fix description of `Features::TEXTURE_COMPRESSION_ASTC_HDR` in [#4157](https://github.com/gfx-rs/wgpu/pull/4157)\n\n### Bug Fixes\n\n#### General\n\n- Derive storage bindings via `naga::StorageAccess` instead of `naga::GlobalUse`. By @teoxoy in [#3985](https://github.com/gfx-rs/wgpu/pull/3985).\n- `Queue::on_submitted_work_done` callbacks will now always be called after all previous `BufferSlice::map_async` callbacks, even when there are no active submissions. By @cwfitzgerald in [#4036](https://github.com/gfx-rs/wgpu/pull/4036).\n- Fix `clear` texture views being leaked when `wgpu::SurfaceTexture` is dropped before it is presented. By @rajveermalviya in [#4057](https://github.com/gfx-rs/wgpu/pull/4057).\n- Add `Feature::SHADER_UNUSED_VERTEX_OUTPUT` to allow unused vertex shader outputs. By @Aaron1011 in [#4116](https://github.com/gfx-rs/wgpu/pull/4116).\n- Fix a panic in `surface_configure`. By @nical in [#4220](https://github.com/gfx-rs/wgpu/pull/4220) and [#4227](https://github.com/gfx-rs/wgpu/pull/4227)\n- Pipelines register their implicit layouts in error cases. By @bradwerth in [#4624](https://github.com/gfx-rs/wgpu/pull/4624)\n- Better handle explicit destruction of textures and buffers. By @nical in [#4657](https://github.com/gfx-rs/wgpu/pull/4657)\n\n#### Vulkan\n\n- Fix enabling `wgpu::Features::PARTIALLY_BOUND_BINDING_ARRAY` not being actually enabled in vulkan backend. By @39ali in[#3772](https://github.com/gfx-rs/wgpu/pull/3772).\n- Don't pass `vk::InstanceCreateFlags::ENUMERATE_PORTABILITY_KHR` unless the `VK_KHR_portability_enumeration` extension is available. By @jimblandy in[#4038](https://github.com/gfx-rs/wgpu/pull/4038).\n- Enhancement of [#4038], using ash's definition instead of hard-coded c_str. By @hybcloud in[#4044](https://github.com/gfx-rs/wgpu/pull/4044).\n- Enable vulkan presentation on (Linux) Intel Mesa >= v21.2. By @flukejones in[#4110](https://github.com/gfx-rs/wgpu/pull/4110)\n\n#### DX12\n\n- DX12 doesn't support `Features::POLYGON_MODE_POINT``. By @teoxoy in [#4032](https://github.com/gfx-rs/wgpu/pull/4032).\n- Set `Features::VERTEX_WRITABLE_STORAGE` based on the right feature level. By @teoxoy in [#4033](https://github.com/gfx-rs/wgpu/pull/4033).\n\n#### Metal\n\n- Ensure that MTLCommandEncoder calls endEncoding before it is deallocated. By @bradwerth in [#4023](https://github.com/gfx-rs/wgpu/pull/4023)\n\n#### WebGPU\n\n- Ensure that limit requests and reporting is done correctly. By @OptimisticPeach in [#4107](https://github.com/gfx-rs/wgpu/pull/4107)\n- Validate usage of polygon mode. By @teoxoy in [#4196](https://github.com/gfx-rs/wgpu/pull/4196)\n\n#### GLES\n\n- enable/disable blending per attachment only when available (on ES 3.2 or higher). By @teoxoy in [#4234](https://github.com/gfx-rs/wgpu/pull/4234)\n\n### Documentation\n\n- Add an overview of `RenderPass` and how render state works. By @kpreid in [#4055](https://github.com/gfx-rs/wgpu/pull/4055)\n\n### Examples\n\n- Created `wgpu-example::utils` module to contain misc functions and such that are common code but aren't part of the example framework. Add to it the functions `output_image_wasm` and `output_image_native`, both for outputting `Vec<u8>` RGBA images either to the disc or the web page. By @JustAnotherCodemonkey in [#3885](https://github.com/gfx-rs/wgpu/pull/3885).\n- Removed `capture` example as it had issues (did not run on wasm) and has been replaced by `render-to-texture` (see above). By @JustAnotherCodemonkey in [#3885](https://github.com/gfx-rs/wgpu/pull/3885).\n\n## v0.17.2 (2023-10-03)\n\n### Bug Fixes\n\n#### Vulkan\n\n- Fix x11 hang while resizing on vulkan. @Azorlogh in [#4184](https://github.com/gfx-rs/wgpu/pull/4184).\n\n## v0.17.1 (2023-09-27)\n\n### Added/New Features\n\n- Add `get_mapped_range_as_array_buffer` for faster buffer read-backs in wasm builds. By @ryankaplan in [#4042] (https://github.com/gfx-rs/wgpu/pull/4042).\n\n### Bug Fixes\n\n#### DX12\n\n- Fix panic on resize when using DX12. By @cwfitzgerald in [#4106](https://github.com/gfx-rs/wgpu/pull/4106)\n\n#### Vulkan\n\n- Suppress validation error caused by OBS layer. This was also fixed upstream. By @cwfitzgerald in [#4002](https://github.com/gfx-rs/wgpu/pull/4002)\n- Work around bug in nvidia's vkCmdFillBuffer implementation. By @cwfitzgerald in [#4132](https://github.com/gfx-rs/wgpu/pull/4132).\n\n## v0.17.0 (2023-07-20)\n\nThis is the first release that featured `wgpu-info` as a binary crate for getting information about what devices wgpu sees in your system. It can dump the information in both human readable format and json.\n\n### Major Changes\n\nThis release was fairly minor as breaking changes go.\n\n#### `wgpu` types now `!Send` `!Sync` on wasm\n\nUp until this point, wgpu has made the assumption that threads do not exist on wasm. With the rise of libraries like [`wasm_thread`](https://crates.io/crates/wasm_thread) making it easier and easier to do wasm multithreading this assumption is no longer sound. As all wgpu objects contain references into the JS heap, they cannot leave the thread they started on.\n\nAs we understand that this change might be very inconvenient for users who don't care about wasm threading, there is a crate feature which re-enables the old behavior: `fragile-send-sync-non-atomic-wasm`. So long as you don't compile your code with `-Ctarget-feature=+atomics`, `Send` and `Sync` will be implemented again on wgpu types on wasm. As the name implies, especially for libraries, this is very fragile, as you don't know if a user will want to compile with atomics (and therefore threads) or not.\n\nBy @daxpedda in [#3691](https://github.com/gfx-rs/wgpu/pull/3691)\n\n#### Power Preference is now optional\n\nThe `power_preference` field of `RequestAdapterOptions` is now optional. If it is `PowerPreference::None`, we will choose the first available adapter, preferring GPU adapters over CPU adapters.\n\nBy @Aaron1011 in [#3903](https://github.com/gfx-rs/wgpu/pull/3903)\n\n#### `initialize_adapter_from_env` argument changes\n\nRemoved the backend_bits parameter from `initialize_adapter_from_env` and `initialize_adapter_from_env_or_default`. If you want to limit the backends used by this function, only enable the wanted backends in the instance.\n\nAdded a compatible surface parameter, to ensure the given device is able to be presented onto the given surface.\n\n```diff\n- wgpu::util::initialize_adapter_from_env(instance, backend_bits);\n+ wgpu::util::initialize_adapter_from_env(instance, Some(&compatible_surface));\n```\n\nBy @fornwall in [#3904](https://github.com/gfx-rs/wgpu/pull/3904) and [#3905](https://github.com/gfx-rs/wgpu/pull/3905)\n\n#### Misc Breaking Changes\n\n- Change `AdapterInfo::{device,vendor}` to be `u32` instead of `usize`. By @ameknite in [#3760](https://github.com/gfx-rs/wgpu/pull/3760)\n\n### Changes\n\n- Added support for importing external buffers using `buffer_from_raw` (Dx12, Metal, Vulkan) and `create_buffer_from_hal`. By @AdrianEddy in [#3355](https://github.com/gfx-rs/wgpu/pull/3355)\n\n\n#### Vulkan\n\n- Work around [Vulkan-ValidationLayers#5671](https://github.com/KhronosGroup/Vulkan-ValidationLayers/issues/5671) by ignoring reports of violations of [VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912](https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912). By @jimblandy in [#3809](https://github.com/gfx-rs/wgpu/pull/3809).\n\n### Added/New Features\n\n#### General\n\n- Empty scissor rects are allowed now, matching the specification. by @PJB3005 in [#3863](https://github.com/gfx-rs/wgpu/pull/3863).\n- Add back components info to `TextureFormat`s. By @teoxoy in [#3843](https://github.com/gfx-rs/wgpu/pull/3843).\n- Add `get_mapped_range_as_array_buffer` for faster buffer read-backs in wasm builds. By @ryankaplan in [#4042] (https://github.com/gfx-rs/wgpu/pull/4042).\n\n### Documentation\n\n- Better documentation for draw, draw_indexed, set_viewport and set_scissor_rect. By @genusistimelord in [#3860](https://github.com/gfx-rs/wgpu/pull/3860)\n- Fix link to `GPUVertexBufferLayout`. By @fornwall in [#3906](https://github.com/gfx-rs/wgpu/pull/3906)\n- Document feature requirements for `DEPTH32FLOAT_STENCIL8` by @ErichDonGubler in [#3734](https://github.com/gfx-rs/wgpu/pull/3734).\n- Flesh out docs. for `AdapterInfo::{device,vendor}` by @ErichDonGubler in [#3763](https://github.com/gfx-rs/wgpu/pull/3763).\n- Spell out which sizes are in bytes. By @jimblandy in [#3773](https://github.com/gfx-rs/wgpu/pull/3773).\n- Validate that `descriptor.usage` is not empty in `create_buffer` by @nical in [#3928](https://github.com/gfx-rs/wgpu/pull/3928)\n- Update `max_bindings_per_bind_group` limit to reflect spec changes by @ErichDonGubler and @nical in [#3943](https://github.com/gfx-rs/wgpu/pull/3943) [#3942](https://github.com/gfx-rs/wgpu/pull/3942)\n- Add better docs for `Limits`, listing the actual limits returned by `downlevel_defaults` and `downlevel_webgl2_defaults` by @JustAnotherCodemonkey in [#3988](https://github.com/gfx-rs/wgpu/pull/3988)\n\n### Bug Fixes\n\n#### General\n\n- Fix order of arguments to glPolygonOffset by @komadori in [#3783](https://github.com/gfx-rs/wgpu/pull/3783).\n- Fix OpenGL/EGL backend not respecting non-sRGB texture formats in `SurfaceConfiguration`. by @liquidev in [#3817](https://github.com/gfx-rs/wgpu/pull/3817)\n- Make write- and read-only marked buffers match non-readonly layouts. by @fornwall in [#3893](https://github.com/gfx-rs/wgpu/pull/3893)\n- Fix leaking X11 connections. by @wez in [#3924](https://github.com/gfx-rs/wgpu/pull/3924)\n- Fix ASTC feature selection in the webgl backend. by @expenses in [#3934](https://github.com/gfx-rs/wgpu/pull/3934)\n- Fix Multiview to disable validation of TextureViewDimension and ArrayLayerCount. By @MalekiRe in [#3779](https://github.com/gfx-rs/wgpu/pull/3779#issue-1713269437).\n\n#### Vulkan\n\n- Fix incorrect aspect in barriers when using emulated Stencil8 textures. By @cwfitzgerald in [#3833](https://github.com/gfx-rs/wgpu/pull/3833).\n- Implement depth-clip-control using depthClamp instead of VK_EXT_depth_clip_enable. By @AlbinBernhardssonARM [#3892](https://github.com/gfx-rs/wgpu/pull/3892).\n- Fix enabling `wgpu::Features::PARTIALLY_BOUND_BINDING_ARRAY` not being actually enabled in vulkan backend. By @39ali in[#3772](https://github.com/gfx-rs/wgpu/pull/3772).\n\n#### Metal\n\n- Fix renderpasses being used inside of renderpasses. By @cwfitzgerald in [#3828](https://github.com/gfx-rs/wgpu/pull/3828)\n- Support (simulated) visionOS. By @jinleili in [#3883](https://github.com/gfx-rs/wgpu/pull/3883)\n\n#### DX12\n\n- Disable suballocation on Intel Iris(R) Xe. By @xiaopengli89 in [#3668](https://github.com/gfx-rs/wgpu/pull/3668)\n- Change the `max_buffer_size` limit from `u64::MAX` to `i32::MAX`. By @nical in [#4020](https://github.com/gfx-rs/wgpu/pull/4020)\n\n#### WebGPU\n\n- Use `get_preferred_canvas_format()` to fill `formats` of `SurfaceCapabilities`. By @jinleili in [#3744](https://github.com/gfx-rs/wgpu/pull/3744)\n\n### Examples\n\n- Publish examples to wgpu.rs on updates to trunk branch instead of gecko. By @paul-hansen in [#3750](https://github.com/gfx-rs/wgpu/pull/3750)\n- Ignore the exception values generated by the winit resize event. By @jinleili in [#3916](https://github.com/gfx-rs/wgpu/pull/3916)\n\n## v0.16.3 (2023-07-19)\n\n### Changes\n\n#### General\n\n- Make the `Id` type that is exposed when using the `expose-ids` feature implement `Send` and `Sync` again. This was unintentionally changed by the v0.16.0 release and is now fixed.\n\n## v0.16.2 (2023-07-09)\n\n### Changes\n\n#### DX12\n\n- Increase the `max_storage_buffers_per_shader_stage` and `max_storage_textures_per_shader_stage` limits based on what the hardware supports. by @Elabajaba in [#3798]https://github.com/gfx-rs/wgpu/pull/3798\n\n## v0.16.1 (2023-05-24)\n\n### Bug Fixes\n\n- Fix missing 4X MSAA support on some OpenGL backends. By @emilk in [#3780](https://github.com/gfx-rs/wgpu/pull/3780)\n\n#### General\n\n- Fix crash on dropping `wgpu::CommandBuffer`. By @wumpf in [#3726](https://github.com/gfx-rs/wgpu/pull/3726).\n- Use `u32`s internally for bind group indices, rather than `u8`. By @ErichDonGubler in [#3743](https://github.com/gfx-rs/wgpu/pull/3743).\n\n#### WebGPU\n\n* Fix crash when calling `create_surface_from_canvas`. By @grovesNL in [#3718](https://github.com/gfx-rs/wgpu/pull/3718)\n\n## v0.16.0 (2023-04-19)\n\n### Major changes\n\n#### Shader Changes\n\n`type` has been replaced with `alias` to match with upstream WebGPU.\n\n```diff\n- type MyType = vec4<u32>;\n+ alias MyType = vec4<u32>;\n```\n\n#### TextureFormat info API\n\nThe `TextureFormat::describe` function was removed in favor of separate functions: `block_dimensions`, `is_compressed`, `is_srgb`, `required_features`, `guaranteed_format_features`, `sample_type` and `block_size`.\n\n\n```diff\n- let block_dimensions = format.describe().block_dimensions;\n+ let block_dimensions = format.block_dimensions();\n- let is_compressed = format.describe().is_compressed();\n+ let is_compressed = format.is_compressed();\n- let is_srgb = format.describe().srgb;\n+ let is_srgb = format.is_srgb();\n- let required_features = format.describe().required_features;\n+ let required_features = format.required_features();\n```\n\nAdditionally `guaranteed_format_features` now takes a set of features to assume are enabled.\n\n```diff\n- let guaranteed_format_features = format.describe().guaranteed_format_features;\n+ let guaranteed_format_features = format.guaranteed_format_features(device.features());\n```\n\nAdditionally `sample_type` and `block_size` now take an optional `TextureAspect` and return `Option`s.\n\n```diff\n- let sample_type = format.describe().sample_type;\n+ let sample_type = format.sample_type(None).expect(\"combined depth-stencil format requires specifying a TextureAspect\");\n- let block_size = format.describe().block_size;\n+ let block_size = format.block_size(None).expect(\"combined depth-stencil format requires specifying a TextureAspect\");\n```\n\nBy @teoxoy in [#3436](https://github.com/gfx-rs/wgpu/pull/3436)\n\n#### BufferUsages::QUERY_RESOLVE\n\nBuffers used as the `destination` argument of `CommandEncoder::resolve_query_set` now have to contain the `QUERY_RESOLVE` usage instead of the `COPY_DST` usage.\n\n```diff\n  let destination = device.create_buffer(&wgpu::BufferDescriptor {\n      // ...\n-     usage: wgpu::BufferUsages::COPY_DST | wgpu::BufferUsages::MAP_READ,\n+     usage: wgpu::BufferUsages::QUERY_RESOLVE | wgpu::BufferUsages::MAP_READ,\n      mapped_at_creation: false,\n  });\n  command_encoder.resolve_query_set(&query_set, query_range, &destination, destination_offset);\n```\n\nBy @JolifantoBambla in [#3489](https://github.com/gfx-rs/wgpu/pull/3489)\n\n#### Renamed features\n\nThe following `Features` have been renamed.\n\n- `SHADER_FLOAT16` -> `SHADER_F16`\n- `SHADER_FLOAT64` -> `SHADER_F64`\n- `SHADER_INT16` -> `SHADER_I16`\n- `TEXTURE_COMPRESSION_ASTC_LDR` -> `TEXTURE_COMPRESSION_ASTC`\n- `WRITE_TIMESTAMP_INSIDE_PASSES` -> `TIMESTAMP_QUERY_INSIDE_PASSES`\n\nBy @teoxoy in [#3534](https://github.com/gfx-rs/wgpu/pull/3534)\n\n#### Anisotropic Filtering\n\nAnisotropic filtering has been brought in line with the spec. The anisotropic clamp is now a `u16` (was a `Option<u8>`) which must be at least 1.\n\nIf the anisotropy clamp is not 1, all the filters in a sampler must be `Linear`.\n\n```diff\nSamplerDescriptor {\n-    anisotropic_clamp: None,\n+    anisotropic_clamp: 1,\n}\n```\n\nBy @cwfitzgerald in [#3610](https://github.com/gfx-rs/wgpu/pull/3610).\n\n#### TextureFormat Names\n\nSome texture format names have changed to get back in line with the spec.\n\n```diff\n- TextureFormat::Bc6hRgbSfloat\n+ TextureFormat::Bc6hRgbFloat\n```\n\nBy @cwfitzgerald in [#3671](https://github.com/gfx-rs/wgpu/pull/3671).\n\n#### Misc Breaking Changes\n\n- Change type of `mip_level_count` and `array_layer_count` (members of `TextureViewDescriptor` and `ImageSubresourceRange`) from `Option<NonZeroU32>` to `Option<u32>`. By @teoxoy in [#3445](https://github.com/gfx-rs/wgpu/pull/3445)\n- Change type of `bytes_per_row` and `rows_per_image` (members of `ImageDataLayout`) from `Option<NonZeroU32>` to `Option<u32>`. By @teoxoy in [#3529](https://github.com/gfx-rs/wgpu/pull/3529)\n- On Web, `Instance::create_surface_from_canvas()` and `create_surface_from_offscreen_canvas()` now take the canvas by value. By @daxpedda in [#3690](https://github.com/gfx-rs/wgpu/pull/3690)\n\n### Added/New Features\n\n#### General\n- Added feature flags for ray-tracing (currently only hal): `RAY_QUERY` and `RAY_TRACING` @daniel-keitel (started by @expenses) in [#3507](https://github.com/gfx-rs/wgpu/pull/3507)\n\n#### Vulkan\n\n- Implemented basic ray-tracing api for acceleration structures, and ray-queries @daniel-keitel (started by @expenses) in [#3507](https://github.com/gfx-rs/wgpu/pull/3507)\n\n#### Hal\n\n- Added basic ray-tracing api for acceleration structures, and ray-queries @daniel-keitel (started by @expenses) in [#3507](https://github.com/gfx-rs/wgpu/pull/3507)\n\n\n### Changes\n\n#### General\n\n- Added `TextureFormatFeatureFlags::MULTISAMPLE_X16`. By @Dinnerbone in [#3454](https://github.com/gfx-rs/wgpu/pull/3454)\n- Added `BufferUsages::QUERY_RESOLVE`. By @JolifantoBambla in [#3489](https://github.com/gfx-rs/wgpu/pull/3489)\n- Support stencil-only views and copying to/from combined depth-stencil textures. By @teoxoy in [#3436](https://github.com/gfx-rs/wgpu/pull/3436)\n- Added `Features::SHADER_EARLY_DEPTH_TEST`. By @teoxoy in [#3494](https://github.com/gfx-rs/wgpu/pull/3494)\n- All `fxhash` dependencies have been replaced with `rustc-hash`. By @james7132 in [#3502](https://github.com/gfx-rs/wgpu/pull/3502)\n- Allow copying of textures with copy-compatible formats. By @teoxoy in [#3528](https://github.com/gfx-rs/wgpu/pull/3528)\n- Improve attachment related errors. By @cwfitzgerald in [#3549](https://github.com/gfx-rs/wgpu/pull/3549)\n- Make error descriptions all upper case. By @cwfitzgerald in [#3549](https://github.com/gfx-rs/wgpu/pull/3549)\n- Don't include ANSI terminal color escape sequences in shader module validation error messages. By @jimblandy in [#3591](https://github.com/gfx-rs/wgpu/pull/3591)\n- Report error messages from DXC compile. By @Davidster in [#3632](https://github.com/gfx-rs/wgpu/pull/3632)\n- Error in native when using a filterable `TextureSampleType::Float` on a multisample `BindingType::Texture`. By @mockersf in [#3686](https://github.com/gfx-rs/wgpu/pull/3686)\n- On Web, the size of the canvas is adjusted when using `Surface::configure()`. If the canvas was given an explicit size (via CSS), this will not affect the visual size of the canvas. By @daxpedda in [#3690](https://github.com/gfx-rs/wgpu/pull/3690)\n- Added `Global::create_render_bundle_error`. By @jimblandy in [#3746](https://github.com/gfx-rs/wgpu/pull/3746)\n\n#### WebGPU\n\n- Implement the new checks for readonly stencils. By @JCapucho in [#3443](https://github.com/gfx-rs/wgpu/pull/3443)\n- Reimplement `adapter|device_features`. By @jinleili in [#3428](https://github.com/gfx-rs/wgpu/pull/3428)\n- Implement `command_encoder_resolve_query_set`. By @JolifantoBambla in [#3489](https://github.com/gfx-rs/wgpu/pull/3489)\n- Add support for `Features::RG11B10UFLOAT_RENDERABLE`. By @mockersf in [#3689](https://github.com/gfx-rs/wgpu/pull/3689)\n\n#### Vulkan\n- Set `max_memory_allocation_size` via `PhysicalDeviceMaintenance3Properties`. By @jinleili in [#3567](https://github.com/gfx-rs/wgpu/pull/3567)\n- Silence false-positive validation error about surface resizing. By @seabassjh in [#3627](https://github.com/gfx-rs/wgpu/pull/3627)\n\n### Bug Fixes\n\n#### General\n- `copyTextureToTexture` src/dst aspects must both refer to all aspects of src/dst format. By @teoxoy in [#3431](https://github.com/gfx-rs/wgpu/pull/3431)\n- Validate before extracting texture selectors. By @teoxoy in [#3487](https://github.com/gfx-rs/wgpu/pull/3487)\n- Fix fatal errors (those which panic even if an error handler is set) not including all of the details. By @kpreid in [#3563](https://github.com/gfx-rs/wgpu/pull/3563)\n- Validate shader location clashes. By @emilk in [#3613](https://github.com/gfx-rs/wgpu/pull/3613)\n- Fix surfaces not being dropped until exit. By @benjaminschaaf in [#3647](https://github.com/gfx-rs/wgpu/pull/3647)\n\n#### WebGPU\n- Fix handling of `None` values for `depth_ops` and `stencil_ops` in `RenderPassDescriptor::depth_stencil_attachment`. By @niklaskorz in [#3660](https://github.com/gfx-rs/wgpu/pull/3660)\n- Avoid using `WasmAbi` functions for WebGPU backend. By @grovesNL in [#3657](https://github.com/gfx-rs/wgpu/pull/3657)\n\n#### DX12\n- Use typeless formats for textures that might be viewed as srgb or non-srgb. By @teoxoy in [#3555](https://github.com/gfx-rs/wgpu/pull/3555)\n\n#### GLES\n- Set FORCE_POINT_SIZE if it is vertex shader with mesh consist of point list. By @REASY in [3440](https://github.com/gfx-rs/wgpu/pull/3440)\n- Remove unwraps inside `surface.configure`. By @cwfitzgerald in [#3585](https://github.com/gfx-rs/wgpu/pull/3585)\n- Fix `copy_external_image_to_texture`, `copy_texture_to_texture` and `copy_buffer_to_texture` not taking the specified index into account if the target texture is a cube map, 2D texture array or cube map array. By @daxpedda [#3641](https://github.com/gfx-rs/wgpu/pull/3641)\n- Fix disabling of vertex attributes with non-consecutive locations. By @Azorlogh in [#3706](https://github.com/gfx-rs/wgpu/pull/3706)\n\n#### Metal\n- Fix metal erroring on an `array_stride` of 0. By @teoxoy in [#3538](https://github.com/gfx-rs/wgpu/pull/3538)\n- `create_texture` returns an error if `new_texture` returns NULL. By @jinleili in [#3554](https://github.com/gfx-rs/wgpu/pull/3554)\n- Fix shader bounds checking being ignored. By @FL33TW00D in [#3603](https://github.com/gfx-rs/wgpu/pull/3603)\n\n#### Vulkan\n- Treat `VK_SUBOPTIMAL_KHR` as `VK_SUCCESS` on Android due to rotation issues. By @James2022-rgb in [#3525](https://github.com/gfx-rs/wgpu/pull/3525)\n\n### Examples\n- Use `BufferUsages::QUERY_RESOLVE` instead of `BufferUsages::COPY_DST` for buffers used in `CommandEncoder::resolve_query_set` calls in `mipmap` example. By @JolifantoBambla in [#3489](https://github.com/gfx-rs/wgpu/pull/3489)\n\n## v0.15.3 (2023-03-22)\n\n### Bug Fixes\n\n#### Metal\n- Fix incorrect mipmap being sampled when using `MinLod <= 0.0` and `MaxLod >= 32.0` or when the fragment shader samples different Lods in the same quad. By @cwfitzgerald in [#3610](https://github.com/gfx-rs/wgpu/pull/3610).\n\n#### GLES\n- Fix `Vertex buffer is not big enough for the draw call.` for ANGLE/Web when rendering with instance attributes on a single instance. By @wumpf in [#3596](https://github.com/gfx-rs/wgpu/pull/3596)\n- Reset all queue state between command buffers in a submit. By @jleibs [#3589](https://github.com/gfx-rs/wgpu/pull/3589)\n- Reset the state of `SAMPLE_ALPHA_TO_COVERAGE` on queue reset. By @jleibs [#3589](https://github.com/gfx-rs/wgpu/pull/3589)\n\n\n## wgpu-0.15.2 (2023-03-08)\n\n### Bug Fixes\n\n#### Metal\n- Fix definition of `NSOperatingSystemVersion` to avoid potential crashes. By @grovesNL in [#3557](https://github.com/gfx-rs/wgpu/pull/3557)\n\n#### GLES\n- Enable `WEBGL_debug_renderer_info` before querying unmasked vendor/renderer to avoid crashing on emscripten in [#3519](https://github.com/gfx-rs/wgpu/pull/3519)\n\n## wgpu-0.15.1 (2023-02-09)\n\n### Changes\n\n#### General\n- Fix for some minor issues in comments on some features. By @Wumpf in [#3455](https://github.com/gfx-rs/wgpu/pull/3455)\n\n#### Vulkan\n- Improve format MSAA capabilities detection. By @jinleili in [#3429](https://github.com/gfx-rs/wgpu/pull/3429)\n\n#### DX12\n- Update gpu allocator to 0.22. By @Elabajaba in [#3447](https://github.com/gfx-rs/wgpu/pull/3447)\n\n#### WebGPU\n- Implement `CommandEncoder::clear_buffer`. By @raphlinus in [#3426](https://github.com/gfx-rs/wgpu/pull/3426)\n\n### Bug Fixes\n\n#### General\n- Re-sort supported surface formats based on srgb-ness. By @cwfitzgerald in [#3444](https://github.com/gfx-rs/wgpu/pull/3444)\n\n#### Vulkan\n- Fix surface view formats validation error. By @jinleili in [#3432](https://github.com/gfx-rs/wgpu/pull/3432)\n\n#### DX12\n- Fix DXC validation issues when using a custom `dxil_path`. By @Elabajaba in [#3434](https://github.com/gfx-rs/wgpu/pull/3434)\n\n#### GLES\n- Unbind vertex buffers at end of renderpass. By @cwfitzgerald in [#3459](https://github.com/gfx-rs/wgpu/pull/3459)\n\n#### WebGPU\n\n- Reimplement `{adapter|device}_features`. By @jinleili in [#3428](https://github.com/gfx-rs/wgpu/pull/3428)\n\n### Documentation\n\n#### General\n- Build for Wasm on docs.rs. By @daxpedda in [#3462](https://github.com/gfx-rs/wgpu/pull/3428)\n\n\n## wgpu-0.15.0 (2023-01-25)\n\n### Major Changes\n\n\n#### WGSL Top-Level `let` is now `const`\n\nAll top level constants are now declared with `const`, catching up with the wgsl spec.\n\n`let` is no longer allowed at the global scope, only within functions.\n\n```diff\n-let SOME_CONSTANT = 12.0;\n+const SOME_CONSTANT = 12.0;\n```\n\nSee https://github.com/gfx-rs/naga/blob/master/CHANGELOG.md#v011-2023-01-25 for smaller shader improvements.\n\n#### Surface Capabilities API\n\nThe various surface capability functions were combined into a single call that gives you all the capabilities.\n\n```diff\n- let formats = surface.get_supported_formats(&adapter);\n- let present_modes = surface.get_supported_present_modes(&adapter);\n- let alpha_modes = surface.get_supported_alpha_modes(&adapter);\n+ let caps = surface.get_capabilities(&adapter);\n+ let formats = caps.formats;\n+ let present_modes = caps.present_modes;\n+ let alpha_modes = caps.alpha_modes;\n```\n\nAdditionally `Surface::get_default_config` now returns an Option and returns None if the surface isn't supported by the adapter.\n\n```diff\n- let config = surface.get_default_config(&adapter);\n+ let config = surface.get_default_config(&adapter).expect(\"Surface unsupported by adapter\");\n```\n\n#### Fallible surface creation\n\n`Instance::create_surface()` now returns `Result<Surface, CreateSurfaceError>` instead of `Surface`. This allows an error to be returned if the given window is a HTML canvas and obtaining a WebGPU or WebGL 2 context fails. (No other platforms currently report any errors through this path.) By @kpreid in [#3052](https://github.com/gfx-rs/wgpu/pull/3052/)\n\n#### `Queue::copy_external_image_to_texture` on WebAssembly\n\nA new api, `Queue::copy_external_image_to_texture`, allows you to create wgpu textures from various web image primitives. Specifically from `HtmlVideoElement`, `HtmlCanvasElement`, `OffscreenCanvas`, and `ImageBitmap`. This provides multiple low-copy ways of interacting with the browser. WebGL is also supported, though WebGL has some additional restrictions, represented by the `UNRESTRICTED_EXTERNAL_IMAGE_COPIES` downlevel flag. By @cwfitzgerald in [#3288](https://github.com/gfx-rs/wgpu/pull/3288)\n\n#### Instance creation now takes `InstanceDescriptor` instead of `Backends`\n\n`Instance::new()` and `hub::Global::new()` now take an `InstanceDescriptor` struct which contains both the existing `Backends` selection as well as a new `Dx12Compiler` field for selecting which Dx12 shader compiler to use.\n\n```diff\n- let instance = Instance::new(wgpu::Backends::all());\n+ let instance = Instance::new(wgpu::InstanceDescriptor {\n+     backends: wgpu::Backends::all(),\n+     dx12_shader_compiler: wgpu::Dx12Compiler::Fxc,\n+ });\n```\n\n`Instance` now also also implements `Default`, which uses `wgpu::Backends::all()` and `wgpu::Dx12Compiler::Fxc` for `InstanceDescriptor`\n\n```diff\n- let instance = Instance::new(wgpu::InstanceDescriptor {\n-     backends: wgpu::Backends::all(),\n-     dx12_shader_compiler: wgpu::Dx12Compiler::Fxc,\n- });\n+ let instance = Instance::default();\n```\n\nBy @Elabajaba in [#3356](https://github.com/gfx-rs/wgpu/pull/3356)\n\n#### Texture Format Reinterpretation\n\nThe new `view_formats` field in the `TextureDescriptor` is used to specify a list of formats the texture can be re-interpreted to in a texture view. Currently only changing srgb-ness is allowed (ex. `Rgba8Unorm` <=> `Rgba8UnormSrgb`).\n\n```diff\nlet texture = device.create_texture(&wgpu::TextureDescriptor {\n  // ...\n  format: TextureFormat::Rgba8UnormSrgb,\n+ view_formats: &[TextureFormat::Rgba8Unorm],\n});\n```\n\n```diff\nlet config = wgpu::SurfaceConfiguration {\n  // ...\n  format: TextureFormat::Rgba8Unorm,\n+ view_formats: vec![wgpu::TextureFormat::Rgba8UnormSrgb],\n};\nsurface.configure(&device, &config);\n```\n\n#### MSAA x2 and x8 Support\n\nVia the `TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` feature, MSAA x2 and x8 are now supported on textures. To query for x2 or x8 support, enable the feature and look at the texture format flags for the texture format of your choice.\n\nBy @39ali in [3140](https://github.com/gfx-rs/wgpu/pull/3140)\n\n#### DXC Shader Compiler Support for DX12\n\nYou can now choose to use the DXC compiler for DX12 instead of FXC. The DXC compiler is faster, less buggy, and allows for new features compared to the old, unmaintained FXC compiler.\n\nYou can choose which compiler to use at `Instance` creation using the `dx12_shader_compiler` field in the `InstanceDescriptor` struct. Note that DXC requires both `dxcompiler.dll` and `dxil.dll`, which can be downloaded from https://github.com/microsoft/DirectXShaderCompiler/releases. Both .dlls need to be shipped with your application when targeting DX12 and using the `DXC` compiler. If the .dlls can't be loaded, then it will fall back to the FXC compiler. By @39ali and @Elabajaba in [#3356](https://github.com/gfx-rs/wgpu/pull/3356)\n\n#### Suballocate DX12 buffers and textures\n\nThe DX12 backend can now suballocate buffers and textures from larger chunks of memory, which can give a significant increase in performance (in testing a 100x improvement has been seen in a simple scene with 200 `write_buffer` calls per frame, and a 1.4x improvement in [Bistro using Bevy](https://github.com/vleue/bevy_bistro_playground)).\n\nPreviously `wgpu-hal`'s DX12 backend created a new heap on the GPU every time you called `write_buffer` (by calling `CreateCommittedResource`), whereas now it uses [`gpu_allocator`](https://crates.io/crates/gpu-allocator) to manage GPU memory (and calls `CreatePlacedResource` with a suballocated heap). By @Elabajaba in [#3163](https://github.com/gfx-rs/wgpu/pull/3163)\n\n#### Backend selection by features in wgpu-core\n\nWhereas `wgpu-core` used to automatically select backends to enable\nbased on the target OS and architecture, it now has separate features\nto enable each backend:\n\n- \"metal\", for the Metal API on macOS and iOS\n- \"vulkan\", for the Vulkan API (Linux, some Android, and occasionally Windows)\n- \"dx12\", for Microsoft's Direct3D 12 API\n- \"gles\", OpenGL ES, available on many systems\n- \"dx11\", for Microsoft's Direct3D 11 API\n\nNone are enabled by default, but the `wgpu` crate automatically\nselects these features based on the target operating system and\narchitecture, using the same rules that `wgpu-core` used to, so users\nof `wgpu` should be unaffected by this change. However, other crates\nusing `wgpu-core` directly will need to copy `wgpu`'s logic or write\ntheir own. See the `[target]` section of `wgpu/Cargo.toml` for\ndetails.\n\nSimilarly, `wgpu-core` now has `emscripten` and `renderdoc` features\nthat `wgpu` enables on appropriate platforms.\n\nIn previous releases, the `wgpu-core` crate decided which backends to\nsupport. However, this left `wgpu-core`'s users with no way to\noverride those choices. (Firefox doesn't want the GLES back end, for\nexample.) There doesn't seem to be any way to have a crate select\nbackends based on target OS and architecture that users of that crate\ncan still override. Default features can't be selected based on the\ntarget, for example. That implies that we should do the selection as\nlate in the dependency DAG as feasible. Having `wgpu` (and\n`wgpu-core`'s other dependents) choose backends seems like the best\noption.\n\nBy @jimblandy in [#3254](https://github.com/gfx-rs/wgpu/pull/3254).\n\n### Changes\n\n#### General\n\n- Convert all `Default` Implementations on Enums to `derive(Default)`\n- Implement `Default` for `CompositeAlphaMode`\n- New downlevel feature `UNRESTRICTED_INDEX_BUFFER` to indicate support for using `INDEX` together with other non-copy/map usages (unsupported on WebGL). By @Wumpf in [#3157](https://github.com/gfx-rs/wgpu/pull/3157)\n- Add missing `DEPTH_BIAS_CLAMP` and `FULL_DRAW_INDEX_UINT32` downlevel flags. By @teoxoy in [#3316](https://github.com/gfx-rs/wgpu/pull/3316)\n- Combine `Surface::get_supported_formats`, `Surface::get_supported_present_modes`, and `Surface::get_supported_alpha_modes` into `Surface::get_capabilities` and `SurfaceCapabilities`. By @cwfitzgerald in [#3157](https://github.com/gfx-rs/wgpu/pull/3157)\n- Make `Surface::get_default_config` return an Option to prevent panics. By @cwfitzgerald in [#3157](https://github.com/gfx-rs/wgpu/pull/3157)\n- Lower the `max_buffer_size` limit value for compatibility with Apple2 and WebGPU compliance. By @jinleili in [#3255](https://github.com/gfx-rs/wgpu/pull/3255)\n- Limits `min_uniform_buffer_offset_alignment` and `min_storage_buffer_offset_alignment` is now always at least 32. By @wumpf [#3262](https://github.com/gfx-rs/wgpu/pull/3262)\n- Dereferencing a buffer view is now marked inline. By @Wumpf in [#3307](https://github.com/gfx-rs/wgpu/pull/3307)\n- The `strict_assert` family of macros was moved to `wgpu-types`. By @i509VCB in [#3051](https://github.com/gfx-rs/wgpu/pull/3051)\n- Make `ObjectId` structure and invariants idiomatic. By @teoxoy in [#3347](https://github.com/gfx-rs/wgpu/pull/3347)\n- Add validation in accordance with WebGPU `GPUSamplerDescriptor` valid usage for `lodMinClamp` and `lodMaxClamp`. By @James2022-rgb in [#3353](https://github.com/gfx-rs/wgpu/pull/3353)\n- Remove panics in `Deref` implementations for `QueueWriteBufferView` and `BufferViewMut`. Instead, warnings are logged, since reading from these types is not recommended. By @botahamec in [#3336]\n- Implement `view_formats` in the TextureDescriptor to match the WebGPU spec. By @jinleili in [#3237](https://github.com/gfx-rs/wgpu/pull/3237)\n- Show more information in error message for non-aligned buffer bindings in WebGL [#3414](https://github.com/gfx-rs/wgpu/pull/3414)\n- Update `TextureView` validation according to the WebGPU spec. By @teoxoy in [#3410](https://github.com/gfx-rs/wgpu/pull/3410)\n- Implement `view_formats` in the SurfaceConfiguration to match the WebGPU spec. By @jinleili in [#3409](https://github.com/gfx-rs/wgpu/pull/3409)\n\n#### Vulkan\n\n- Set `WEBGPU_TEXTURE_FORMAT_SUPPORT` downlevel flag depending on the proper format support by @teoxoy in [#3367](https://github.com/gfx-rs/wgpu/pull/3367).\n- Set `COPY_SRC`/`COPY_DST` only based on Vulkan's `TRANSFER_SRC`/`TRANSFER_DST` by @teoxoy in [#3366](https://github.com/gfx-rs/wgpu/pull/3366).\n\n#### GLES\n\n- Browsers that support `OVR_multiview2` now report the `MULTIVIEW` feature by @expenses in [#3121](https://github.com/gfx-rs/wgpu/pull/3121).\n- `Limits::max_push_constant_size` on GLES is now 256 by @Dinnerbone in [#3374](https://github.com/gfx-rs/wgpu/pull/3374).\n- Creating multiple pipelines with the same shaders will now be faster, by @Dinnerbone in [#3380](https://github.com/gfx-rs/wgpu/pull/3380).\n\n#### WebGPU\n\n- Implement `queue_validate_write_buffer` by @jinleili in [#3098](https://github.com/gfx-rs/wgpu/pull/3098)\n- Sync depth/stencil copy restrictions with the spec by @teoxoy in [#3314](https://github.com/gfx-rs/wgpu/pull/3314)\n\n\n### Added/New Features\n\n#### General\n\n- Implement `Hash` for `DepthStencilState` and `DepthBiasState`\n- Add the `\"wgsl\"` feature, to enable WGSL shaders in `wgpu-core` and `wgpu`. Enabled by default in `wgpu`. By @daxpedda in [#2890](https://github.com/gfx-rs/wgpu/pull/2890).\n- Implement `Clone` for `ShaderSource` and `ShaderModuleDescriptor` in `wgpu`. By @daxpedda in [#3086](https://github.com/gfx-rs/wgpu/pull/3086).\n- Add `get_default_config` for `Surface` to simplify user creation of `SurfaceConfiguration`. By @jinleili in [#3034](https://github.com/gfx-rs/wgpu/pull/3034)\n- Improve compute shader validation error message. By @haraldreingruber in [#3139](https://github.com/gfx-rs/wgpu/pull/3139)\n- Native adapters can now use MSAA x2 and x8 if it's supported , previously only x1 and x4 were supported . By @39ali in [3140](https://github.com/gfx-rs/wgpu/pull/3140)\n- Implemented correleation between user timestamps and platform specific presentation timestamps via [`Adapter::get_presentation_timestamp`]. By @cwfitzgerald in [#3240](https://github.com/gfx-rs/wgpu/pull/3240)\n- Added support for `Features::SHADER_PRIMITIVE_INDEX` on all backends. By @cwfitzgerald in [#3272](https://github.com/gfx-rs/wgpu/pull/3272)\n- Implemented `TextureFormat::Stencil8`, allowing for stencil testing without depth components. By @Dinnerbone in [#3343](https://github.com/gfx-rs/wgpu/pull/3343)\n- Implemented `add_srgb_suffix()` for `TextureFormat` for converting linear formats to sRGB. By @Elabajaba in [#3419](https://github.com/gfx-rs/wgpu/pull/3419)\n- Zero-initialize workgroup memory. By @teoxoy in [#3174](https://github.com/gfx-rs/wgpu/pull/3174)\n\n#### GLES\n\n- Surfaces support now `TextureFormat::Rgba8Unorm` and (non-web only) `TextureFormat::Bgra8Unorm`. By @Wumpf in [#3070](https://github.com/gfx-rs/wgpu/pull/3070)\n- Support alpha to coverage. By @Wumpf in [#3156](https://github.com/gfx-rs/wgpu/pull/3156)\n- Support filtering f32 textures. By @expenses in [#3261](https://github.com/gfx-rs/wgpu/pull/3261)\n\n#### Vulkan\n\n- Add `SHADER_INT16` feature to enable the `shaderInt16` VkPhysicalDeviceFeature. By @Elabajaba in [#3401](https://github.com/gfx-rs/wgpu/pull/3401)\n\n#### WebGPU\n\n- Add `MULTISAMPLE_X2`, `MULTISAMPLE_X4` and `MULTISAMPLE_X8` to `TextureFormatFeatureFlags`. By @39ali in [3140](https://github.com/gfx-rs/wgpu/pull/3140)\n- Sync `TextureFormat.describe` with the spec. By @teoxoy in [3312](https://github.com/gfx-rs/wgpu/pull/3312)\n\n#### Metal\n- Add a way to create `Device` and `Queue` from raw Metal resources in wgpu-hal. By @AdrianEddy in [#3338](https://github.com/gfx-rs/wgpu/pull/3338)\n\n### Bug Fixes\n\n#### General\n\n- Update ndk-sys to v0.4.1+23.1.7779620, to fix checksum failures. By @jimblandy in [#3232](https://github.com/gfx-rs/wgpu/pull/3232).\n- Bother to free the `hal::Api::CommandBuffer` when a `wgpu_core::command::CommandEncoder` is dropped. By @jimblandy in [#3069](https://github.com/gfx-rs/wgpu/pull/3069).\n- Fixed the mipmap example by adding the missing WRITE_TIMESTAMP_INSIDE_PASSES feature. By @Olaroll in [#3081](https://github.com/gfx-rs/wgpu/pull/3081).\n- Avoid panicking in some interactions with invalid resources by @nical in (#3094)[https://github.com/gfx-rs/wgpu/pull/3094]\n- Fixed an integer overflow in `copy_texture_to_texture` by @nical [#3090](https://github.com/gfx-rs/wgpu/pull/3090)\n- Remove `wgpu_types::Features::DEPTH24PLUS_STENCIL8`, making `wgpu::TextureFormat::Depth24PlusStencil8` available on all backends. By @Healthire in (#3151)[https://github.com/gfx-rs/wgpu/pull/3151]\n- Fix an integer overflow in `queue_write_texture` by @nical in (#3146)[https://github.com/gfx-rs/wgpu/pull/3146]\n- Make `RenderPassCompatibilityError` and `CreateShaderModuleError` not so huge. By @jimblandy in (#3226)[https://github.com/gfx-rs/wgpu/pull/3226]\n- Check for invalid bitflag bits in wgpu-core and allow them to be captured/replayed by @nical in (#3229)[https://github.com/gfx-rs/wgpu/pull/3229]\n- Evaluate `gfx_select!`'s `#[cfg]` conditions at the right time. By @jimblandy in [#3253](https://github.com/gfx-rs/wgpu/pull/3253)\n- Improve error messages when binding bind group with dynamic offsets. By @cwfitzgerald in [#3294](https://github.com/gfx-rs/wgpu/pull/3294)\n- Allow non-filtering sampling of integer textures. By @JMS55 in [#3362](https://github.com/gfx-rs/wgpu/pull/3362).\n- Validate texture ids in `Global::queue_texture_write`. By @jimblandy in [#3378](https://github.com/gfx-rs/wgpu/pull/3378).\n- Don't panic on mapped buffer in queue_submit. By @crowlKats in [#3364](https://github.com/gfx-rs/wgpu/pull/3364).\n- Fix being able to sample a depth texture with a filtering sampler. By @teoxoy in [#3394](https://github.com/gfx-rs/wgpu/pull/3394).\n- Make `make_spirv_raw` and `make_spirv` handle big-endian binaries. By @1e1001 in [#3411](https://github.com/gfx-rs/wgpu/pull/3411).\n\n#### Vulkan\n- Update ash to 0.37.1+1.3.235 to fix CI breaking by changing a call to the deprecated `debug_utils_set_object_name()` function to `set_debug_utils_object_name()` by @elabajaba in [#3273](https://github.com/gfx-rs/wgpu/pull/3273)\n- Document and improve extension detection. By @teoxoy in [#3327](https://github.com/gfx-rs/wgpu/pull/3327)\n- Don't use a pointer to a local copy of a `PhysicalDeviceDriverProperties` struct after it has gone out of scope. In fact, don't make a local copy at all. Introduce a helper function for building `CStr`s from C character arrays, and remove some `unsafe` blocks. By @jimblandy in [#3076](https://github.com/gfx-rs/wgpu/pull/3076).\n\n#### DX12\n\n- Fix `depth16Unorm` formats by @teoxoy in [#3313](https://github.com/gfx-rs/wgpu/pull/3313)\n- Don't re-use `GraphicsCommandList` when `close` or `reset` fails. By @xiaopengli89 in [#3204](https://github.com/gfx-rs/wgpu/pull/3204)\n\n#### Metal\n- Fix texture view creation with full-resource views when using an explicit `mip_level_count` or `array_layer_count`. By @cwfitzgerald in [#3323](https://github.com/gfx-rs/wgpu/pull/3323)\n\n#### GLES\n\n- Fixed WebGL not displaying srgb targets correctly if a non-screen filling viewport was previously set. By @Wumpf in [#3093](https://github.com/gfx-rs/wgpu/pull/3093)\n- Fix disallowing multisampling for float textures if otherwise supported. By @Wumpf in [#3183](https://github.com/gfx-rs/wgpu/pull/3183)\n- Fix a panic when creating a pipeline with opaque types other than samplers (images and atomic counters). By @James2022-rgb in [#3361](https://github.com/gfx-rs/wgpu/pull/3361)\n- Fix uniform buffers being empty on some vendors. By @Dinnerbone in [#3391](https://github.com/gfx-rs/wgpu/pull/3391)\n- Fix a panic allocating a new buffer on webgl. By @Dinnerbone in [#3396](https://github.com/gfx-rs/wgpu/pull/3396)\n\n#### WebGPU\n\n- Use `log` instead of `println` in hello example by @JolifantoBambla in [#2858](https://github.com/gfx-rs/wgpu/pull/2858)\n\n#### deno-webgpu\n\n- Let `setVertexBuffer` and `setIndexBuffer` calls on\n  `GPURenderBundleEncoder` throw an error if the `size` argument is\n  zero, rather than treating that as \"until the end of the buffer\".\n  By @jimblandy in [#3171](https://github.com/gfx-rs/wgpu/pull/3171)\n\n#### Emscripten\n\n- Let the wgpu examples `framework.rs` compile again under Emscripten. By @jimblandy in [#3246](https://github.com/gfx-rs/wgpu/pull/3246)\n\n### Examples\n\n- Log adapter info in hello example on wasm target by @JolifantoBambla in [#2858](https://github.com/gfx-rs/wgpu/pull/2858)\n- Added new example `stencil-triangles` to show basic use of stencil testing. By @Dinnerbone in [#3343](https://github.com/gfx-rs/wgpu/pull/3343)\n\n### Testing/Internal\n\n- Update the `minimum supported rust version` to 1.64\n- Move `ResourceMetadata` into its own module. By @jimblandy in [#3213](https://github.com/gfx-rs/wgpu/pull/3213)\n- Add WebAssembly testing infrastructure. By @haraldreingruber in [#3238](https://github.com/gfx-rs/wgpu/pull/3238)\n- Error message when you forget to use cargo-nextest. By @cwfitzgerald in [#3293](https://github.com/gfx-rs/wgpu/pull/3293)\n- Fix all suggestions from `cargo clippy`\n\n## wgpu-0.14.2 (2022-11-28)\n\n### Bug Fixes\n\n- Fix incorrect offset in `get_mapped_range` by @nical in [#3233](https://github.com/gfx-rs/wgpu/pull/3233)\n\n## wgpu-0.14.1 (2022-11-02)\n\n### Bug Fixes\n\n- Make `wgpu::TextureFormat::Depth24PlusStencil8` available on all backends by making the feature unconditionally available and the feature unneeded to use the format. By @Healthire and @cwfitzgerald in [#3165](https://github.com/gfx-rs/wgpu/pull/3165)\n\n## wgpu-0.14.0 (2022-10-05)\n\n### Major Changes\n\n#### @invariant Warning\n\nWhen using CompareFunction::Equal or CompareFunction::NotEqual on a pipeline, there is now a warning logged if the vertex\nshader does not have a @invariant tag on it. On some machines, rendering the same triangles multiple times without an\n@invariant tag will result in slightly different depths for every pixel. Because the \\*Equal functions rely on depth being\nthe same every time it is rendered, we now warn if it is missing.\n\n```diff\n-@vertex\n-fn vert_main(v_in: VertexInput) -> @builtin(position) vec4<f32> {...}\n+@vertex\n+fn vert_main(v_in: VertexInput) -> @builtin(position) @invariant vec4<f32> {...}\n```\n\n#### Surface Alpha and PresentModes\n\nSurface supports `alpha_mode` now. When alpha_mode is equal to `PreMultiplied` or `PostMultiplied`,\nthe alpha channel of framebuffer is respected in the compositing process, but which mode is available depends on\nthe different API and `Device`. If don't care about alpha_mode, you can set it to `Auto`.\n\n```diff\nSurfaceConfiguration {\n// ...\n+ alpha_mode: surface.get_supported_alpha_modes(&adapter)[0],\n}\n```\n\nThe function to enumerate supported presentation modes changed:\n\n```diff\n- pub fn wgpu::Surface::get_supported_modes(&self, adapter: &wgpu::Adapter) -> Vec<PresentMode>\n+ pub fn wgpu::Surface::get_supported_present_modes(&self, adapter: &wgpu::Adapter) -> Vec<PresentMode>\n```\n\n#### Updated raw-window-handle to 0.5\n\nThis will allow use of the latest version of winit. As such the bound on create_surface is now RWH 0.5 and requires\nboth `raw_window_handle::HasRawWindowHandle` and `raw_window_handle::HasRawDisplayHandle`.\n\n### Added/New Features\n\n- Add `Buffer::size()` and `Buffer::usage()`; by @kpreid in [#2923](https://github.com/gfx-rs/wgpu/pull/2923)\n- Split Blendability and Filterability into Two Different TextureFormatFeatureFlags; by @stakka in [#3012](https://github.com/gfx-rs/wgpu/pull/3012)\n- Expose `alpha_mode` on SurfaceConfiguration, by @jinleili in [#2836](https://github.com/gfx-rs/wgpu/pull/2836)\n- Introduce fields for driver name and info in `AdapterInfo`, by @i509VCB in [#3037](https://github.com/gfx-rs/wgpu/pull/3037)\n- Add way to create gles hal textures from raw gl names to allow externally managed textures. By @i509VCB [#3046](https://github.com/gfx-rs/wgpu/pull/3046)\n- Implemented `copy_external_image_to_texture` on WebGPU, by @ybiletskyi in [#2781](https://github.com/gfx-rs/wgpu/pull/2781)\n\n### Bug Fixes\n\n#### General\n\n- Free `StagingBuffers` even when an error occurs in the operation that consumes them. By @jimblandy in [#2961](https://github.com/gfx-rs/wgpu/pull/2961)\n- Avoid overflow when checking that texture copies fall within bounds. By @jimblandy in [#2963](https://github.com/gfx-rs/wgpu/pull/2963)\n- Improve the validation and error reporting of buffer mappings by @nical in [#2848](https://github.com/gfx-rs/wgpu/pull/2848)\n- Fix compilation errors when using wgpu-core in isolation while targeting `wasm32-unknown-unknown` by @Seamooo in [#2922](https://github.com/gfx-rs/wgpu/pull/2922)\n- Fixed opening of RenderDoc library by @abuffseagull in [#2930](https://github.com/gfx-rs/wgpu/pull/2930)\n- Added missing validation for `BufferUsages` mismatches when `Features::MAPPABLE_PRIMARY_BUFFERS` is not\n  enabled. By @imberflur in [#3023](https://github.com/gfx-rs/wgpu/pull/3023)\n- Fixed `CommandEncoder` not being `Send` and `Sync` on web by @i509VCB in [#3025](https://github.com/gfx-rs/wgpu/pull/3025)\n- Document meaning of `vendor` in `AdapterInfo` if the vendor has no PCI id.\n- Fix missing resource labels from some Errors by @scoopr in [#3066](https://github.com/gfx-rs/wgpu/pull/3066)\n\n#### Metal\n\n- Add the missing `msg_send![view, retain]` call within `from_view` by @jinleili in [#2976](https://github.com/gfx-rs/wgpu/pull/2976)\n- Fix `max_buffer` `max_texture` and `max_vertex_buffers` limits by @jinleili in [#2978](https://github.com/gfx-rs/wgpu/pull/2978)\n- Remove PrivateCapabilities's `format_rgb10a2_unorm_surface` field by @jinleili in [#2981](https://github.com/gfx-rs/wgpu/pull/2981)\n- Fix validation error when copying into a subset of a single-layer texture by @nical in [#3063](https://github.com/gfx-rs/wgpu/pull/3063)\n- Fix `_buffer_sizes` encoding by @dtiselice in [#3047](https://github.com/gfx-rs/wgpu/pull/3047)\n\n#### Vulkan\n\n- Fix `astc_hdr` formats support by @jinleili in [#2971]](https://github.com/gfx-rs/wgpu/pull/2971)\n- Update to Naga b209d911 (2022-9-1) to avoid generating SPIR-V that\n  violates Vulkan valid usage rules `VUID-StandaloneSpirv-Flat-06202`\n  and `VUID-StandaloneSpirv-Flat-04744`. By @jimblandy in\n  [#3008](https://github.com/gfx-rs/wgpu/pull/3008)\n- Fix bug where the Vulkan backend would panic when using a supported window and display handle but the\n  dependent extensions are not available by @i509VCB in [#3054](https://github.com/gfx-rs/wgpu/pull/3054).\n\n#### GLES\n\n- Report vendor id for Mesa and Apple GPUs. By @i509VCB [#3036](https://github.com/gfx-rs/wgpu/pull/3036)\n- Report Apple M2 gpu as integrated. By @i509VCB [#3036](https://github.com/gfx-rs/wgpu/pull/3036)\n\n#### WebGPU\n\n- When called in a web worker, `Context::init()` now uses `web_sys::WorkerGlobalContext` to create a `wgpu::Instance` instead of trying to access the unavailable `web_sys::Window` by @JolifantoBambla in [#2858](https://github.com/gfx-rs/wgpu/pull/2858)\n\n### Changes\n\n#### General\n\n- Changed wgpu-hal and wgpu-core implementation to pass RawDisplayHandle and RawWindowHandle as separate\n  parameters instead of passing an impl trait over both HasRawDisplayHandle and HasRawWindowHandle. By @i509VCB in [#3022](https://github.com/gfx-rs/wgpu/pull/3022)\n- Changed `Instance::as_hal<A>` to just return an `Option<&A::Instance>` rather than taking a callback. By @jimb in [#2991](https://github.com/gfx-rs/wgpu/pull/2991)\n- Added downlevel restriction error message for `InvalidFormatUsages` error by @Seamooo in [#2886](https://github.com/gfx-rs/wgpu/pull/2886)\n- Add warning when using CompareFunction::\\*Equal with vertex shader that is missing @invariant tag by @cwfitzgerald in [#2887](https://github.com/gfx-rs/wgpu/pull/2887)\n- Update Winit to version 0.27 and raw-window-handle to 0.5 by @wyatt-herkamp in [#2918](https://github.com/gfx-rs/wgpu/pull/2918)\n- Address Clippy 0.1.63 complaints. By @jimblandy in [#2977](https://github.com/gfx-rs/wgpu/pull/2977)\n- Don't use `PhantomData` for `IdentityManager`'s `Input` type. By @jimblandy in [#2972](https://github.com/gfx-rs/wgpu/pull/2972)\n- Changed Naga variant in ShaderSource to `Cow<'static, Module>`, to allow loading global variables by @daxpedda in [#2903](https://github.com/gfx-rs/wgpu/pull/2903)\n- Updated the maximum binding index to match the WebGPU specification by @nical in [#2957](https://github.com/gfx-rs/wgpu/pull/2957)\n- Add `unsafe_op_in_unsafe_fn` to Clippy lints in the entire workspace. By @ErichDonGubler in [#3044](https://github.com/gfx-rs/wgpu/pull/3044).\n\n#### Metal\n\n- Extract the generic code into `get_metal_layer` by @jinleili in [#2826](https://github.com/gfx-rs/wgpu/pull/2826)\n\n#### Vulkan\n\n- Remove use of Vulkan12Features/Properties types. By @i509VCB in [#2936](https://github.com/gfx-rs/wgpu/pull/2936)\n- Provide a means for `wgpu` users to access `vk::Queue` and the queue index. By @anlumo in [#2950](https://github.com/gfx-rs/wgpu/pull/2950)\n- Use the use effective api version for determining device features instead of wrongly assuming `VkPhysicalDeviceProperties.apiVersion`\n  is the actual version of the device. By @i509VCB in [#3011](https://github.com/gfx-rs/wgpu/pull/3011)\n- `DropGuard` has been moved to the root of the wgpu-hal crate. By @i509VCB [#3046](https://github.com/gfx-rs/wgpu/pull/3046)\n\n#### GLES\n\n- Add `Rgba16Float` format support for color attachments. By @jinleili in [#3045](https://github.com/gfx-rs/wgpu/pull/3045)\n- `TEXTURE_COMPRESSION_ASTC_HDR` feature detection by @jinleili in [#3042](https://github.com/gfx-rs/wgpu/pull/3042)\n\n### Performance\n\n- Made `StagingBelt::write_buffer()` check more thoroughly for reusable memory; by @kpreid in [#2906](https://github.com/gfx-rs/wgpu/pull/2906)\n\n### Documentation\n\n- Add WGSL examples to complement existing examples written in GLSL by @norepimorphism in [#2888](https://github.com/gfx-rs/wgpu/pull/2888)\n- Document `wgpu_core` resource allocation. @jimblandy in [#2973](https://github.com/gfx-rs/wgpu/pull/2973)\n- Expanded `StagingBelt` documentation by @kpreid in [#2905](https://github.com/gfx-rs/wgpu/pull/2905)\n- Fixed documentation for `Instance::create_surface_from_canvas` and\n  `Instance::create_surface_from_offscreen_canvas` regarding their\n  safety contract. These functions are not unsafe. By @jimblandy [#2990](https://github.com/gfx-rs/wgpu/pull/2990)\n- Document that `write_buffer_with()` is sound but unwise to read from by @kpreid in [#3006](https://github.com/gfx-rs/wgpu/pull/3006)\n- Explain why `Adapter::as_hal` and `Device::as_hal` have to take callback functions. By @jimblandy in [#2992](https://github.com/gfx-rs/wgpu/pull/2992)\n\n### Dependency Updates\n\n#### WebGPU\n\n- Update wasm32 dependencies, set `alpha_mode` on web target by @jinleili in [#3040](https://github.com/gfx-rs/wgpu/pull/3040)\n\n### Build Configuration\n\n- Add the `\"strict_asserts\"` feature, to enable additional internal\n  run-time validation in `wgpu-core`. By @jimblandy in\n  [#2872](https://github.com/gfx-rs/wgpu/pull/2872).\n\n### Full API Diff\n\nManual concatenation of `cargo public-api --diff-git-checkouts v0.13.2 v0.14.0 -p wgpu` and `cargo public-api --diff-git-checkouts v0.13.2 v0.14.0 -p wgpu-types`\n\n```diff\nRemoved items from the public API\n=================================\n-pub fn wgpu::Surface::get_supported_modes(&self, adapter: &wgpu::Adapter) -> Vec<PresentMode>\n-pub const wgpu::Features::DEPTH24UNORM_STENCIL8: Self\n-pub enum variant wgpu::TextureFormat::Depth24UnormStencil8\n\nChanged items in the public API\n===============================\n-pub unsafe fn wgpu::Instance::as_hal<A: wgc::hub::HalApi, F: FnOnce(Option<&<A as >::Instance>) -> R, R>(&self, hal_instance_callback: F) -> R\n+pub unsafe fn wgpu::Instance::as_hal<A: wgc::hub::HalApi>(&self) -> Option<&<A as >::Instance>\n-pub unsafe fn wgpu::Instance::create_surface<W: raw_window_handle::HasRawWindowHandle>(&self, window: &W) -> wgpu::Surface\n+pub unsafe fn wgpu::Instance::create_surface<W: raw_window_handle::HasRawWindowHandle + raw_window_handle::HasRawDisplayHandle>(&self, window: &W) -> wgpu::Surface\n\nAdded items to the public API\n=============================\n+pub fn wgpu::Buffer::size(&self) -> wgt::BufferAddress\n+pub fn wgpu::Buffer::usage(&self) -> BufferUsages\n+pub fn wgpu::Surface::get_supported_alpha_modes(&self, adapter: &wgpu::Adapter) -> Vec<CompositeAlphaMode>\n+pub fn wgpu::Surface::get_supported_present_modes(&self, adapter: &wgpu::Adapter) -> Vec<PresentMode>\n+#[repr(C)] pub enum wgpu::CompositeAlphaMode\n+impl RefUnwindSafe for wgpu::CompositeAlphaMode\n+impl Send for wgpu::CompositeAlphaMode\n+impl Sync for wgpu::CompositeAlphaMode\n+impl Unpin for wgpu::CompositeAlphaMode\n+impl UnwindSafe for wgpu::CompositeAlphaMode\n+pub const wgpu::Features::DEPTH24PLUS_STENCIL8: Self\n+pub const wgpu::TextureFormatFeatureFlags::BLENDABLE: Self\n+pub enum variant wgpu::CompositeAlphaMode::Auto = 0\n+pub enum variant wgpu::CompositeAlphaMode::Inherit = 4\n+pub enum variant wgpu::CompositeAlphaMode::Opaque = 1\n+pub enum variant wgpu::CompositeAlphaMode::PostMultiplied = 3\n+pub enum variant wgpu::CompositeAlphaMode::PreMultiplied = 2\n+pub enum variant wgpu::TextureFormat::Depth16Unorm\n+pub fn wgpu::CompositeAlphaMode::clone(&self) -> wgpu::CompositeAlphaMode\n+pub fn wgpu::CompositeAlphaMode::eq(&self, other: &wgpu::CompositeAlphaMode) -> bool\n+pub fn wgpu::CompositeAlphaMode::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result\n+pub fn wgpu::CompositeAlphaMode::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()\n+pub struct field wgpu::AdapterInfo::driver: String\n+pub struct field wgpu::AdapterInfo::driver_info: String\n+pub struct field wgpu::SurfaceConfiguration::alpha_mode: wgpu_types::CompositeAlphaMode\n```\n\n## wgpu-0.13.2 (2022-07-13)\n\n### Bug Fixes\n\n#### General\n\n- Prefer `DeviceType::DiscreteGpu` over `DeviceType::Other` for `PowerPreference::LowPower` so Vulkan is preferred over OpenGL again by @Craig-Macomber in [#2853](https://github.com/gfx-rs/wgpu/pull/2853)\n- Allow running `get_texture_format_features` on unsupported texture formats (returning no flags) by @cwfitzgerald in [#2856](https://github.com/gfx-rs/wgpu/pull/2856)\n- Allow multi-sampled textures that are supported by the device but not WebGPU if `TEXTURE_ADAPTER_SPECIFIC_FORMAT_FEATURES` is enabled by @cwfitzgerald in [#2856](https://github.com/gfx-rs/wgpu/pull/2856)\n- `get_texture_format_features` only lists the COPY\\_\\* usages if the adapter actually supports that usage by @cwfitzgerald in [#2856](https://github.com/gfx-rs/wgpu/pull/2856)\n- Fix bind group / pipeline deduplication not taking into account RenderBundle execution resetting these values by @shoebe [#2867](https://github.com/gfx-rs/wgpu/pull/2867)\n- Fix panics that occur when using `as_hal` functions when the hal generic type does not match the hub being looked up in by @i509VCB [#2871](https://github.com/gfx-rs/wgpu/pull/2871)\n- Add some validation in map_async by @nical in [#2876](https://github.com/gfx-rs/wgpu/pull/2876)\n- Fix bugs when mapping/unmapping zero-sized buffers and ranges by @nical in [#2877](https://github.com/gfx-rs/wgpu/pull/2877)\n- Fix out-of-bound write in `map_buffer` with non-zero offset by @nical in [#2916](https://github.com/gfx-rs/wgpu/pull/2916)\n- Validate the number of color attachments in `create_render_pipeline` by @nical in [#2913](https://github.com/gfx-rs/wgpu/pull/2913)\n- Validate against the maximum binding index in `create_bind_group_layout` by @nical in [#2892](https://github.com/gfx-rs/wgpu/pull/2892)\n- Validate that map_async's range is not negative by @nical in [#2938](https://github.com/gfx-rs/wgpu/pull/2938)\n- Fix calculation/validation of layer/mip ranges in create_texture_view by @nical in [#2955](https://github.com/gfx-rs/wgpu/pull/2955)\n- Validate the sample count and mip level in `copy_texture_to_buffer` by @nical in [#2958](https://github.com/gfx-rs/wgpu/pull/2958)\n- Expose the cause of the error in the `map_async` callback in [#2939](https://github.com/gfx-rs/wgpu/pull/2939)\n\n#### DX12\n\n- `DownlevelCapabilities::default()` now returns the `ANISOTROPIC_FILTERING` flag set to true so DX12 lists `ANISOTROPIC_FILTERING` as true again by @cwfitzgerald in [#2851](https://github.com/gfx-rs/wgpu/pull/2851)\n- Properly query format features for UAV/SRV usages of depth formats by @cwfitzgerald in [#2856](https://github.com/gfx-rs/wgpu/pull/2856)\n\n#### Vulkan\n\n- Vulkan 1.0 drivers that support `VK_KHR_multiview` now properly report the `MULTIVIEW` feature as supported by @i509VCB in [#2934](https://github.com/gfx-rs/wgpu/pull/2934).\n- Stop using `VkPhysicalDevice11Features` in Vulkan 1.1 which is confusingly provided in Vulkan 1.2 by @i509VCB in [#2934](https://github.com/gfx-rs/wgpu/pull/2934).\n\n#### GLES\n\n- Fix depth stencil texture format capability by @jinleili in [#2854](https://github.com/gfx-rs/wgpu/pull/2854)\n- `get_texture_format_features` now only returns usages for formats it actually supports by @cwfitzgerald in [#2856](https://github.com/gfx-rs/wgpu/pull/2856)\n\n#### Hal\n\n- Allow access to queue family index in Vulkan hal by @i509VCB in [#2859](https://github.com/gfx-rs/wgpu/pull/2859)\n- Allow access to the EGLDisplay and EGLContext pointer in Gles hal Adapter and Device by @i509VCB in [#2860](https://github.com/gfx-rs/wgpu/pull/2860)\n\n### Documentation\n\n- Update present_mode docs as most of them don't automatically fall back to Fifo anymore. by @Elabajaba in [#2855](https://github.com/gfx-rs/wgpu/pull/2855)\n\n#### Hal\n\n- Document safety requirements for `Adapter::from_external` in gles hal by @i509VCB in [#2863](https://github.com/gfx-rs/wgpu/pull/2863)\n- Make `AdapterContext` a publicly accessible type in the gles hal by @i509VCB in [#2870](https://github.com/gfx-rs/wgpu/pull/2870)\n\n## wgpu-0.13.1 (2022-07-02)\n\n### Bug Fixes\n\n#### General\n\n- Fix out of bounds access when surface texture is written to by multiple command buffers by @cwfitzgerald in [#2843](https://github.com/gfx-rs/wgpu/pull/2843)\n\n#### GLES\n\n- AutoNoVSync now correctly falls back to Fifo by @simbleau in [#2842](https://github.com/gfx-rs/wgpu/pull/2842)\n- Fix GL_EXT_color_buffer_float detection on native by @cwfitzgerald in [#2843](https://github.com/gfx-rs/wgpu/pull/2843)\n\n## wgpu-0.13 (2022-06-30)\n\n### Major Changes\n\n#### WGSL Syntax\n\nWGSL syntax has changed in a couple ways. The new syntax is easier to read and work with.\n\nAttribute declarations are written differently:\n\n```diff\n- [[group(1), binding(0)]]\n+ @group(1) @binding(0)\n```\n\nStage declarations are now separate attributes rather than part of the `stage` attribute:\n\n```diff\n- [[stage(vertex)]]\n+ @vertex\n```\n\nStructs now use `,` as field separator and no longer need semicolons after the declaration:\n\n```diff\n- struct MyStruct {\n-     my_member: u32;\n- };\n+ struct MyStruct {\n+     my_member: u32,\n+ }\n```\n\n#### Surface API\n\nThe method of getting the preferred swapchain format has changed to allow viewing all formats supported by the surface.\n\n```diff\n- let format = surface.get_preferred_format(&adapter).unwrap();\n+ let format = surface.get_supported_formats(&adapter)[0];\n```\n\nPresentation modes now need to match exactly what the surface supports. `FIFO` is _always_ supported,\nbut all other modes vary from API to API and `Device` to `Device`. To get a list of all supported modes,\ncall the following. The order does not indicate preference.\n\n```rust\nlet modes = surface.get_supported_present_modes(&adapter);\n```\n\n#### Timestamp Queries\n\nTimestamp queries are now restricted behind multiple features to allow implementation on TBDR (Tile-Based Deferred Rendering)\nbased GPUs, such as mobile devices and Apple's M chips.\n\n`Features::TIMESTAMP_QUERIES` now allows for calling `write_timestamp` only on `CommandEncoder`s.\n\n`Features::WRITE_TIMESTAMP_INSIDE_PASSES` is needed to call `write_timestamp` on `RenderPassEncoder`s or `ComputePassEncoder`s.\n\n#### map_async\n\nThe function for mapping buffers no longer returns a future, and instead calls a callback when the buffer is mapped.\n\nThis aligns with the use of the API more clearly - you aren't supposed to block and wait on the future to resolve,\nyou are supposed to keep rendering and wait until the buffer maps on its own. Mapping and the flow of mapping\nis an under-documented area that we hope to improve in the future.\n\n```diff\n- let future = buffer.slice(..).map_async(MapMode::Read);\n+ buffer.slice(..).map_async(MapMode::Read, || {\n+     // Called when buffer is mapped.\n+ })\n```\n\n#### Submission Indexes\n\nCalling `queue.submit` now returns an opaque submission index that can be used as an argument to\n`device.poll` to say which submission to wait to complete.\n\n### Other Breaking Changes\n\n`Device::create_shader_module` now takes the shader descriptor by value:\n\n```diff\n- device.create_shader_module(&shader_module_descriptor)\n+ device.create_shader_module(shader_module_descriptor)\n```\n\nColor attachments can be sparse, so they are now optional:\n\n```diff\nFragmentState {\n-  targets: &[color_target_state]\n+  targets: &[Some(color_target_state)]\n  // ..\n}\n```\n\n```diff\nRenderPassDescriptor {\n-  color_attachments: &[render_pass_color_attachment]\n+  color_attachments: &[Some(render_pass_color_attachment)]\n  // ..\n}\n```\n\n```diff\nRenderBundleEncoderDescriptor {\n-  color_formats: &[texture_format]\n+  color_formats: &[Some(texture_format)]\n  // ..\n}\n```\n\n`Extent3d::max_mips` now requires you to pass a TextureDimension to specify whether or not depth_or_array_layers should be ignored:\n\n```diff\nExtent3d {\n  width: 1920,\n  height: 1080,\n  depth_or_array_layers: 6,\n- }.max_mips()\n+ }.max_mips(wgpu::TextureDimension::D3)\n```\n\n`Limits` has a new field, [`max_buffer_size`](https://docs.rs/wgpu/0.13.0/wgpu/struct.Limits.html#structfield.max_buffer_size) (not an issue if you don't define limits manually):\n\n```diff\nLimits {\n  // ...\n+ max_buffer_size: 256 * 1024 * 1024, // adjust as you see fit\n}\n```\n\n`Features::CLEAR_COMMANDS` is now unnecessary and no longer exists. The feature to clear buffers and textures is now part of upstream WebGPU.\n\n```diff\nDeviceDescriptor {\n  // ...\n  features: wgpu::Features::VERTEX_WRITABLE_STORAGE\n    | wgpu::Features::MAPPABLE_PRIMARY_BUFFERS\n    | wgpu::Features::TEXTURE_BINDING_ARRAY\n    | wgpu::Features::BUFFER_BINDING_ARRAY\n    | wgpu::Features::STORAGE_RESOURCE_BINDING_ARRAY\n-    | wgpu::Features::CLEAR_COMMANDS\n  ,\n}\n```\n\n`ComputePass::dispatch` has been renamed to `ComputePass::dispatch_workgroups`\n\n```diff\n- cpass.dispatch(self.work_group_count, 1, 1)\n+ cpass.dispatch_workgroups(self.work_group_count, 1, 1)\n```\n\n### Added/New Features\n\n#### General\n\n- Add `util::indirect::*` helper structs by @IcanDivideBy0 in [#2365](https://github.com/gfx-rs/wgpu/pull/2365)\n- Add `AddressMode::ClampToZero` by @laptou in [#2364](https://github.com/gfx-rs/wgpu/pull/2364)\n- Add MULTISAMPLED_SHADING downlevel flag by @jinleili in [#2425](https://github.com/gfx-rs/wgpu/pull/2425)\n- Allow non struct buffers in wgsl by @IcanDivideBy0 in [#2451](https://github.com/gfx-rs/wgpu/pull/2451)\n- Prefix every wgpu-generated label with `(wgpu)`. by @kpreid in [#2590](https://github.com/gfx-rs/wgpu/pull/2590)\n- Permit non-struct, non-array types as buffers. by @jimblandy in [#2584](https://github.com/gfx-rs/wgpu/pull/2584)\n- Return `queue_empty` for Device::poll by @xiaopengli89 in [#2643](https://github.com/gfx-rs/wgpu/pull/2643)\n- Add `SHADER_FLOAT16` feature by @jinleili in [#2646](https://github.com/gfx-rs/wgpu/pull/2646)\n- Add DEPTH32FLOAT_STENCIL8 feature by @jinleili in [#2664](https://github.com/gfx-rs/wgpu/pull/2664)\n- Add DEPTH24UNORM_STENCIL8 feature by @jinleili in [#2689](https://github.com/gfx-rs/wgpu/pull/2689)\n- Implement submission indexes by @cwfitzgerald in [#2700](https://github.com/gfx-rs/wgpu/pull/2700)\n- [WebGL] Add a downlevel capability for rendering to floating point textures by @expenses in [#2729](https://github.com/gfx-rs/wgpu/pull/2729)\n- allow creating wgpu::Instance from wgpu_core::Instance by @i509VCB in [#2763](https://github.com/gfx-rs/wgpu/pull/2763)\n- Force binding sizes to be multiples of 16 on webgl by @cwfitzgerald in [#2808](https://github.com/gfx-rs/wgpu/pull/2808)\n- Add Naga variant to ShaderSource by @rttad in [#2801](https://github.com/gfx-rs/wgpu/pull/2801)\n- Implement Queue::write_buffer_with by @teoxoy in [#2777](https://github.com/gfx-rs/wgpu/pull/2777)\n\n#### Vulkan\n\n- Re-allow vk backend on Apple platforms via `vulkan-portability` feature by @jinleili in [#2488](https://github.com/gfx-rs/wgpu/pull/2488)\n- vulkan: HDR ASTC formats support by @jinleili in [#2496](https://github.com/gfx-rs/wgpu/pull/2496)\n\n#### Metal\n\n- Implement push constants for metal backend by @TheOnlyMrCat in [#2314](https://github.com/gfx-rs/wgpu/pull/2314)\n- Metal backend ASTC HDR formats support by @jinleili in [#2477](https://github.com/gfx-rs/wgpu/pull/2477)\n- Add COPY_DST to Metal's surface usage bits by @vl4dimir in [#2491](https://github.com/gfx-rs/wgpu/pull/2491)\n- Add `Features::MULTI_DRAW_INDIRECT` to Metal by @expenses in [#2737](https://github.com/gfx-rs/wgpu/pull/2737)\n\n#### GLES\n\n- Support externally initialized contexts by @kvark in [#2350](https://github.com/gfx-rs/wgpu/pull/2350)\n- Angle support on macOS by @jinleili in [#2461](https://github.com/gfx-rs/wgpu/pull/2461)\n- Use EGL surfaceless platform when windowing system is not found by @sh7dm in [#2339](https://github.com/gfx-rs/wgpu/pull/2339)\n- Do a downlevel check for anisotrophy and enable it in the webgl backend by @expenses in [#2616](https://github.com/gfx-rs/wgpu/pull/2616)\n- OffscreenCanvas Support for WebGL Backend by @haraldreingruber-dedalus in [#2603](https://github.com/gfx-rs/wgpu/pull/2603)\n\n#### DX12\n\n- Support to create surface from visual on Windows by @xiaopengli89 in [#2434](https://github.com/gfx-rs/wgpu/pull/2434)\n- Add raw_queue for d3d12 device by @xiaopengli89 in [#2600](https://github.com/gfx-rs/wgpu/pull/2600)\n\n#### DX11\n\n- Skeleton of a DX11 backend - not working yet by @cwfitzgerald in [#2443](https://github.com/gfx-rs/wgpu/pull/2443)\n\n#### Hal\n\n- Adapter and Instance as_hal functions by @i509VCB in [#2663](https://github.com/gfx-rs/wgpu/pull/2663)\n- expose some underlying types in Vulkan hal by @i509VCB in [#2667](https://github.com/gfx-rs/wgpu/pull/2667)\n- Add raw_device method for dx12, vulkan hal by @xiaopengli89 in [#2360](https://github.com/gfx-rs/wgpu/pull/2360)\n- expose egl display in gles Instance hal by @i509VCB in [#2670](https://github.com/gfx-rs/wgpu/pull/2670)\n- Add raw_adapter method for dx12 hal adapter by @xiaopengli89 in [#2714](https://github.com/gfx-rs/wgpu/pull/2714)\n- Acquire texture: `Option<std::time::Duration>` timeouts by @rib in [#2724](https://github.com/gfx-rs/wgpu/pull/2724)\n- expose vulkan physical device capabilities, enabled device extensions by @i509VCB in [#2688](https://github.com/gfx-rs/wgpu/pull/2688)\n\n#### Emscripten\n\n- feature: emscripten by @caiiiycuk in [#2422](https://github.com/gfx-rs/wgpu/pull/2422)\n- feature = emscripten, compatibility fixes for wgpu-native by @caiiiycuk in [#2450](https://github.com/gfx-rs/wgpu/pull/2450)\n\n### Changes\n\n#### General\n\n- Make ShaderSource #[non_exhaustive] by @fintelia in [#2312](https://github.com/gfx-rs/wgpu/pull/2312)\n- Make `execute_bundles()` receive IntoIterator by @maku693 in [#2410](https://github.com/gfx-rs/wgpu/pull/2410)\n- Raise `wgpu_hal::MAX_COLOR_TARGETS` to 8. by @jimblandy in [#2640](https://github.com/gfx-rs/wgpu/pull/2640)\n- Rename dispatch -> dispatch_workgroups by @jinleili in [#2619](https://github.com/gfx-rs/wgpu/pull/2619)\n- Update texture_create_view logic to match spec by @jinleili in [#2621](https://github.com/gfx-rs/wgpu/pull/2621)\n- Move TEXTURE_COMPRESSION_ETC2 | ASTC_LDR to web section to match spec by @jinleili in [#2671](https://github.com/gfx-rs/wgpu/pull/2671)\n- Check that all vertex outputs are consumed by the fragment shader by @cwfitzgerald in [#2704](https://github.com/gfx-rs/wgpu/pull/2704)\n- Convert map_async from being async to being callback based by @cwfitzgerald in [#2698](https://github.com/gfx-rs/wgpu/pull/2698)\n- Align the validation of Device::create_texture with the WebGPU spec by @nical in [#2759](https://github.com/gfx-rs/wgpu/pull/2759)\n- Add InvalidGroupIndex validation at create_shader_module by @jinleili in [#2775](https://github.com/gfx-rs/wgpu/pull/2775)\n- Rename MAX_COLOR_TARGETS to MAX_COLOR_ATTACHMENTS to match spec by @jinleili in [#2780](https://github.com/gfx-rs/wgpu/pull/2780)\n- Change get_preferred_format to get_supported_formats by @stevenhuyn in [#2783](https://github.com/gfx-rs/wgpu/pull/2783)\n- Restrict WriteTimestamp Inside Passes by @cwfitzgerald in [#2802](https://github.com/gfx-rs/wgpu/pull/2802)\n- Flip span labels to work better with tools by @cwfitzgerald in [#2820](https://github.com/gfx-rs/wgpu/pull/2820)\n\n#### Gles\n\n- Make GLES DeviceType unknown by default by @PolyMeilex in [#2647](https://github.com/gfx-rs/wgpu/pull/2647)\n\n#### Metal\n\n- metal: check if in the main thread when calling `create_surface` by @jinleili in [#2736](https://github.com/gfx-rs/wgpu/pull/2736)\n\n#### Hal\n\n- limit binding sizes to i32 by @kvark in [#2363](https://github.com/gfx-rs/wgpu/pull/2363)\n\n### Bug Fixes\n\n#### General\n\n- Fix trac(y/ing) compile issue by @cwfitzgerald in [#2333](https://github.com/gfx-rs/wgpu/pull/2333)\n- Improve detection and validation of cubemap views by @kvark in [#2331](https://github.com/gfx-rs/wgpu/pull/2331)\n- Don't create array layer trackers for 3D textures. by @ElectronicRU in [#2348](https://github.com/gfx-rs/wgpu/pull/2348)\n- Limit 1D texture mips to 1 by @kvark in [#2374](https://github.com/gfx-rs/wgpu/pull/2374)\n- Texture format MSAA capabilities by @kvark in [#2377](https://github.com/gfx-rs/wgpu/pull/2377)\n- Fix write_buffer to surface texture @kvark in [#2385](https://github.com/gfx-rs/wgpu/pull/2385)\n- Improve some error messages by @cwfitzgerald in [#2446](https://github.com/gfx-rs/wgpu/pull/2446)\n- Don't recycle indices that reach EOL by @kvark in [#2462](https://github.com/gfx-rs/wgpu/pull/2462)\n- Validated render usages for 3D textures by @kvark in [#2482](https://github.com/gfx-rs/wgpu/pull/2482)\n- Wrap all validation logs with catch_unwinds by @cwfitzgerald in [#2511](https://github.com/gfx-rs/wgpu/pull/2511)\n- Fix clippy lints by @a1phyr in [#2560](https://github.com/gfx-rs/wgpu/pull/2560)\n- Free the raw device when `wgpu::Device` is dropped. by @jimblandy in [#2567](https://github.com/gfx-rs/wgpu/pull/2567)\n- wgpu-core: Register new pipelines with device's tracker. by @jimblandy in [#2565](https://github.com/gfx-rs/wgpu/pull/2565)\n- impl Debug for StagingBelt by @kpreid in [#2572](https://github.com/gfx-rs/wgpu/pull/2572)\n- Use fully qualified syntax for some calls. by @jimblandy in [#2655](https://github.com/gfx-rs/wgpu/pull/2655)\n- fix: panic in `Storage::get` by @SparkyPotato in [#2657](https://github.com/gfx-rs/wgpu/pull/2657)\n- Report invalid pipelines in render bundles as errors, not panics. by @jimblandy in [#2666](https://github.com/gfx-rs/wgpu/pull/2666)\n- Perform \"valid to use with\" checks when recording render bundles. by @jimblandy in [#2690](https://github.com/gfx-rs/wgpu/pull/2690)\n- Stop using storage usage for sampling by @cwfitzgerald in [#2703](https://github.com/gfx-rs/wgpu/pull/2703)\n- Track depth and stencil writability separately. by @jimblandy in [#2693](https://github.com/gfx-rs/wgpu/pull/2693)\n- Improve InvalidScissorRect error message by @jinleili in [#2713](https://github.com/gfx-rs/wgpu/pull/2713)\n- Improve InvalidViewport error message by @jinleili in [#2723](https://github.com/gfx-rs/wgpu/pull/2723)\n- Don't dirty the vertex buffer for stride/rate changes on bundles. by @jimblandy in [#2744](https://github.com/gfx-rs/wgpu/pull/2744)\n- Clean up render bundle index buffer tracking. by @jimblandy in [#2743](https://github.com/gfx-rs/wgpu/pull/2743)\n- Improve read-write and read-only texture storage error message by @jinleili in [#2745](https://github.com/gfx-rs/wgpu/pull/2745)\n- Change `WEBGPU_TEXTURE_FORMAT_SUPPORT` to `1 << 14` instead of `1 << 15` by @expenses in [#2772](https://github.com/gfx-rs/wgpu/pull/2772)\n- fix BufferMapCallbackC & SubmittedWorkDoneClosureC by @rajveermalviya in [#2787](https://github.com/gfx-rs/wgpu/pull/2787)\n- Fix formatting of `TextureDimensionError::LimitExceeded`. by @kpreid in [#2799](https://github.com/gfx-rs/wgpu/pull/2799)\n- Remove redundant `#[cfg]` conditions from `backend/direct.rs`. by @jimblandy in [#2811](https://github.com/gfx-rs/wgpu/pull/2811)\n- Replace android-properties with android_system_properties. by @nical in [#2815](https://github.com/gfx-rs/wgpu/pull/2815)\n- Relax render pass color_attachments validation by @jinleili in [#2778](https://github.com/gfx-rs/wgpu/pull/2778)\n- Properly Barrier Compute Indirect Buffers by @cwfitzgerald in [#2810](https://github.com/gfx-rs/wgpu/pull/2810)\n- Use numeric constants to define `wgpu_types::Features` values. by @jimblandy in [#2817](https://github.com/gfx-rs/wgpu/pull/2817)\n\n#### Metal\n\n- Fix surface texture clear view by @kvark in [#2341](https://github.com/gfx-rs/wgpu/pull/2341)\n- Set preserveInvariance for shader options by @scoopr in [#2372](https://github.com/gfx-rs/wgpu/pull/2372)\n- Properly set msl version to 2.3 if supported by @cwfitzgerald in [#2418](https://github.com/gfx-rs/wgpu/pull/2418)\n- Identify Apple M1 GPU as integrated by @superdump in [#2429](https://github.com/gfx-rs/wgpu/pull/2429)\n- Fix M1 in macOS incorrectly reports supported compressed texture formats by @superdump in [#2453](https://github.com/gfx-rs/wgpu/pull/2453)\n- Msl: support unsized array not in structures by @kvark in [#2459](https://github.com/gfx-rs/wgpu/pull/2459)\n- Fix `Surface::from_uiview` can not guarantee set correct `contentScaleFactor` by @jinleili in [#2470](https://github.com/gfx-rs/wgpu/pull/2470)\n- Set `max_buffer_size` by the correct physical device restriction by @jinleili in [#2502](https://github.com/gfx-rs/wgpu/pull/2502)\n- Refactor `PrivateCapabilities` creation by @jinleili in [#2509](https://github.com/gfx-rs/wgpu/pull/2509)\n- Refactor texture_format_capabilities function by @jinleili in [#2522](https://github.com/gfx-rs/wgpu/pull/2522)\n- Improve `push | pop_debug_marker` by @jinleili in [#2537](https://github.com/gfx-rs/wgpu/pull/2537)\n- Fix some supported limits by @jinleili in [#2608](https://github.com/gfx-rs/wgpu/pull/2608)\n- Don't skip incomplete binding resources. by @dragostis in [#2622](https://github.com/gfx-rs/wgpu/pull/2622)\n- Fix `Rgb9e5Ufloat` capabilities and `sampler_lod_average` support by @jinleili in [#2656](https://github.com/gfx-rs/wgpu/pull/2656)\n- Fix Depth24Plus | Depth24PlusStencil8 capabilities by @jinleili in [#2686](https://github.com/gfx-rs/wgpu/pull/2686)\n- Get_supported_formats: sort like the old get_preferred_format and simplify return type by @victorvde in [#2786](https://github.com/gfx-rs/wgpu/pull/2786)\n- Restrict hal::TextureUses::COLOR_TARGET condition within create_texture by @jinleili in [#2818](https://github.com/gfx-rs/wgpu/pull/2818)\n\n#### DX12\n\n- Fix UMA check by @kvark in [#2305](https://github.com/gfx-rs/wgpu/pull/2305)\n- Fix partial texture barrier not affecting stencil aspect by @Wumpf in [#2308](https://github.com/gfx-rs/wgpu/pull/2308)\n- Improve RowPitch computation by @kvark in [#2409](https://github.com/gfx-rs/wgpu/pull/2409)\n\n#### Vulkan\n\n- Explicitly set Vulkan debug message types instead of !empty() by @victorvde in [#2321](https://github.com/gfx-rs/wgpu/pull/2321)\n- Use stencil read/write masks by @kvark in [#2382](https://github.com/gfx-rs/wgpu/pull/2382)\n- Vulkan: correctly set INDEPENDENT_BLEND，make runable on Android 8.x by @jinleili in [#2498](https://github.com/gfx-rs/wgpu/pull/2498)\n- Fix ASTC format mapping by @kvark in [#2476](https://github.com/gfx-rs/wgpu/pull/2476)\n- Support flipped Y on VK 1.1 devices by @cwfitzgerald in [#2512](https://github.com/gfx-rs/wgpu/pull/2512)\n- Fixed builtin(primitive_index) for vulkan backend by @kwillemsen in [#2716](https://github.com/gfx-rs/wgpu/pull/2716)\n- Fix PIPELINE_STATISTICS_QUERY feature support by @jinleili in [#2750](https://github.com/gfx-rs/wgpu/pull/2750)\n- Add a vulkan workaround for large buffers. by @nical in [#2796](https://github.com/gfx-rs/wgpu/pull/2796)\n\n#### GLES\n\n- Fix index buffer state not being reset in reset_state by @rparrett in [#2391](https://github.com/gfx-rs/wgpu/pull/2391)\n- Allow push constants trough emulation by @JCapucho in [#2400](https://github.com/gfx-rs/wgpu/pull/2400)\n- Hal/gles: fix dirty vertex buffers that are unused by @kvark in [#2427](https://github.com/gfx-rs/wgpu/pull/2427)\n- Fix texture description for bgra formats by @JCapucho in [#2520](https://github.com/gfx-rs/wgpu/pull/2520)\n- Remove a `log::error!` debugging statement from the gles queue by @expenses in [#2630](https://github.com/gfx-rs/wgpu/pull/2630)\n- Fix clearing depth and stencil at the same time by @expenses in [#2675](https://github.com/gfx-rs/wgpu/pull/2675)\n- Handle cubemap copies by @expenses in [#2725](https://github.com/gfx-rs/wgpu/pull/2725)\n- Allow clearing index buffers by @grovesNL in [#2740](https://github.com/gfx-rs/wgpu/pull/2740)\n- Fix buffer-texture copy for 2d arrays by @tuchs in [#2809](https://github.com/gfx-rs/wgpu/pull/2809)\n\n#### Wayland\n\n- Search for different versions of libwayland by @sh7dm in [#2336](https://github.com/gfx-rs/wgpu/pull/2336)\n\n#### WebGPU\n\n- Fix compilation on wasm32-unknown-unknown without `webgl` feature by @jakobhellermann in [#2355](https://github.com/gfx-rs/wgpu/pull/2355)\n- Solve crash on WebGPU by @cwfitzgerald in [#2807](https://github.com/gfx-rs/wgpu/pull/2807)\n\n#### Emscripten\n\n- Fix emscripten by @cwfitzgerald in [#2494](https://github.com/gfx-rs/wgpu/pull/2494)\n\n### Performance\n\n- Do texture init via clear passes when possible by @Wumpf in [#2307](https://github.com/gfx-rs/wgpu/pull/2307)\n- Bind group deduplication by @cwfitzgerald in [#2623](https://github.com/gfx-rs/wgpu/pull/2623)\n- Tracking Optimization and Rewrite by @cwfitzgerald in [#2662](https://github.com/gfx-rs/wgpu/pull/2662)\n\n### Documentation\n\n- Add defaults to new limits and correct older ones by @MultisampledNight in [#/2303](https://github.com/gfx-rs/wgpu/pull/2303)\n- Improve shader source documentation by @grovesNL in [#2315](https://github.com/gfx-rs/wgpu/pull/2315)\n- Fix typo by @rustui in [#2393](https://github.com/gfx-rs/wgpu/pull/2393)\n- Add a :star: to the feature matrix of examples README by @yutannihilation in [#2457](https://github.com/gfx-rs/wgpu/pull/2457)\n- Fix get_timestamp_period type in docs by @superdump in [#2478](https://github.com/gfx-rs/wgpu/pull/2478)\n- Fix mistake in Access doc comment by @nical in [#2479](https://github.com/gfx-rs/wgpu/pull/2479)\n- Improve shader support documentation by @cwfitzgerald in [#2501](https://github.com/gfx-rs/wgpu/pull/2501)\n- Document the gfx_select! macro. by @jimblandy in [#2555](https://github.com/gfx-rs/wgpu/pull/2555)\n- Add Windows 11 to section about DX12 by @HeavyRain266 in [#2552](https://github.com/gfx-rs/wgpu/pull/2552)\n- Document some aspects of resource tracking. by @jimblandy in [#2558](https://github.com/gfx-rs/wgpu/pull/2558)\n- Documentation for various things. by @jimblandy in [#2566](https://github.com/gfx-rs/wgpu/pull/2566)\n- Fix doc links. by @jimblandy in [#2579](https://github.com/gfx-rs/wgpu/pull/2579)\n- Fixed misspelling in documentation by @zenitopires in [#2634](https://github.com/gfx-rs/wgpu/pull/2634)\n- Update push constant docs to reflect the API by @Noxime in [#2637](https://github.com/gfx-rs/wgpu/pull/2637)\n- Exclude dependencies from documentation by @yutannihilation in [#2642](https://github.com/gfx-rs/wgpu/pull/2642)\n- Document `GpuFuture`. by @jimblandy in [#2644](https://github.com/gfx-rs/wgpu/pull/2644)\n- Document random bits and pieces. by @jimblandy in [#2651](https://github.com/gfx-rs/wgpu/pull/2651)\n- Add cross-references to each wgpu type's documentation. by @kpreid in [#2653](https://github.com/gfx-rs/wgpu/pull/2653)\n- RenderPassDescriptor: make label lifetime match doc, and make names descriptive. by @kpreid in [#2654](https://github.com/gfx-rs/wgpu/pull/2654)\n- Document `VertexStepMode`. by @jimblandy in [#2685](https://github.com/gfx-rs/wgpu/pull/2685)\n- Add links for SpirV documents. by @huandzh in [#2697](https://github.com/gfx-rs/wgpu/pull/2697)\n- Add symlink LICENSE files into crates. by @dskkato in [#2604](https://github.com/gfx-rs/wgpu/pull/2604)\n- Fix documentation links. by @jimblandy in [#2756](https://github.com/gfx-rs/wgpu/pull/2756)\n- Improve push constant documentation, including internal docs. by @jimblandy in [#2764](https://github.com/gfx-rs/wgpu/pull/2764)\n- Clarify docs for `wgpu_core`'s `Id` and `gfx_select!`. by @jimblandy in [#2766](https://github.com/gfx-rs/wgpu/pull/2766)\n- Update the Supported Platforms table in README by @jinleili in [#2770](https://github.com/gfx-rs/wgpu/pull/2770)\n- Remove depth image from readme - we don't dictate direction of depth by @cwfitzgerald in [#2812](https://github.com/gfx-rs/wgpu/pull/2812)\n\n### Dependency Updates\n\n- Update `ash` to `0.37` by @a1phyr in [#2557](https://github.com/gfx-rs/wgpu/pull/2557)\n- Update parking_lot to 0.12. by @emilio in [#2639](https://github.com/gfx-rs/wgpu/pull/2639)\n- Accept both parking-lot 0.11 and 0.12, to avoid windows-rs. by @jimblandy in [#2660](https://github.com/gfx-rs/wgpu/pull/2660)\n- Update web-sys to 0.3.58, sparse attachments support by @jinleili in [#2813](https://github.com/gfx-rs/wgpu/pull/2813)\n- Remove use of inplace_it by @mockersf in [#2889](https://github.com/gfx-rs/wgpu/pull/2889)\n\n### deno-webgpu\n\n- Clean up features in deno by @crowlKats in [#2445](https://github.com/gfx-rs/wgpu/pull/2445)\n- Dont panic when submitting same commandbuffer multiple times by @crowlKats in [#2449](https://github.com/gfx-rs/wgpu/pull/2449)\n- Handle error sources to display full errors by @crowlKats in [#2454](https://github.com/gfx-rs/wgpu/pull/2454)\n- Pull changes from deno repo by @crowlKats in [#2455](https://github.com/gfx-rs/wgpu/pull/2455)\n- Fix cts_runner by @crowlKats in [#2456](https://github.com/gfx-rs/wgpu/pull/2456)\n- Update deno_webgpu by @crowlKats in [#2539](https://github.com/gfx-rs/wgpu/pull/2539)\n- Custom op arity by @crowlKats in [#2542](https://github.com/gfx-rs/wgpu/pull/2542)\n\n### Examples\n\n- Fix conserative-raster low res target getting zero sized on resize by @Wumpf in [#2318](https://github.com/gfx-rs/wgpu/pull/2318)\n- Replace run-wasm-example.sh with aliased rust crate (xtask) by @rukai in [#2346](https://github.com/gfx-rs/wgpu/pull/2346)\n- Get cargo-run-wasm from crates.io by @rukai in [#2415](https://github.com/gfx-rs/wgpu/pull/2415)\n- Fix msaa-line example's unnecessary MSAA data store by @jinleili in [#2421](https://github.com/gfx-rs/wgpu/pull/2421)\n- Make shadow example runnable on iOS Android devices by @jinleili in [#2433](https://github.com/gfx-rs/wgpu/pull/2433)\n- Blit should only draw one triangle by @CurryPseudo in [#2474](https://github.com/gfx-rs/wgpu/pull/2474)\n- Fix wasm examples failing to compile by @Liamolucko in [#2524](https://github.com/gfx-rs/wgpu/pull/2524)\n- Fix incorrect filtering used in mipmap generation by @LaylBongers in [#2525](https://github.com/gfx-rs/wgpu/pull/2525)\n- Correct program output (\"Steps\", not \"Times\") by @skierpage in [#2535](https://github.com/gfx-rs/wgpu/pull/2535)\n- Fix resizing behaviour of hello-triangle example by @FrankenApps in [#2543](https://github.com/gfx-rs/wgpu/pull/2543)\n- Switch from `cgmath` to `glam` in examples by @a1phyr in [#2544](https://github.com/gfx-rs/wgpu/pull/2544)\n- Generate 1x1 mip level by @davidar in [#2551](https://github.com/gfx-rs/wgpu/pull/2551)\n- Wgpu/examples/shadow: Don't run on llvmpipe. by @jimblandy in [#2595](https://github.com/gfx-rs/wgpu/pull/2595)\n- Avoid new WGSL reserved words in wgpu examples. by @jimblandy in [#2606](https://github.com/gfx-rs/wgpu/pull/2606)\n- Move texture-array example over to wgsl by @cwfitzgerald in [#2618](https://github.com/gfx-rs/wgpu/pull/2618)\n- Remove the default features from wgpu-info by @jinleili in [#2753](https://github.com/gfx-rs/wgpu/pull/2753)\n- Fix bunnymark test screenshot and replace rand with nanorand by @stevenhuyn in [#2746](https://github.com/gfx-rs/wgpu/pull/2746)\n- Use FIFO swapchain in examples by @cwfitzgerald in [#2790](https://github.com/gfx-rs/wgpu/pull/2790)\n\n### Testing/Internal\n\n- Test WebGPU backend with extra features by @kvark in [#2362](https://github.com/gfx-rs/wgpu/pull/2362)\n- Lint deno_webgpu & wgpu-core by @AaronO in [#2403](https://github.com/gfx-rs/wgpu/pull/2403)\n- IdentityManager: `from_index` method is unneeded. by @jimblandy in [#2424](https://github.com/gfx-rs/wgpu/pull/2424)\n- Added id32 feature by @caiiiycuk in [#2464](https://github.com/gfx-rs/wgpu/pull/2464)\n- Update dev deps by @rukai in [#2493](https://github.com/gfx-rs/wgpu/pull/2493)\n- Use cargo nextest for running our tests by @cwfitzgerald in [#2495](https://github.com/gfx-rs/wgpu/pull/2495)\n- Many Steps Towards GL Testing Working by @cwfitzgerald in [#2504](https://github.com/gfx-rs/wgpu/pull/2504)\n- Rename ci.txt to ci.yml by @simon446 in [#2510](https://github.com/gfx-rs/wgpu/pull/2510)\n- Re-enable GL testing in CI by @cwfitzgerald in [#2508](https://github.com/gfx-rs/wgpu/pull/2508)\n- Expect shadow example to pass on GL by @kvark in [#2541](https://github.com/gfx-rs/wgpu/pull/2541)\n- Simplify implementation of RefCount and MultiRefCount. by @jimblandy in [#2548](https://github.com/gfx-rs/wgpu/pull/2548)\n- Provide a proper `new` method for `RefCount`. by @jimblandy in [#2570](https://github.com/gfx-rs/wgpu/pull/2570)\n- Add logging to LifetimeTracker::triage_suspected. by @jimblandy in [#2569](https://github.com/gfx-rs/wgpu/pull/2569)\n- wgpu-hal: Work around cbindgen bug: ignore `gles::egl` module. by @jimblandy in [#2576](https://github.com/gfx-rs/wgpu/pull/2576)\n- Specify an exact wasm-bindgen-cli version in publish.yml. by @jimblandy in [#2624](https://github.com/gfx-rs/wgpu/pull/2624)\n- Rename `timeout_us` to `timeout_ns`, to match actual units. by @jimblandy in [#2645](https://github.com/gfx-rs/wgpu/pull/2645)\n- Move set_index_buffer FFI functions back into wgpu. by @jimblandy in [#2661](https://github.com/gfx-rs/wgpu/pull/2661)\n- New function: `Global::create_buffer_error`. by @jimblandy in [#2673](https://github.com/gfx-rs/wgpu/pull/2673)\n- Actually use RenderBundleEncoder::set_bind_group in tests. by @jimblandy in [#2678](https://github.com/gfx-rs/wgpu/pull/2678)\n- Eliminate wgpu_core::commands::bundle::State::raw_dynamic_offsets. by @jimblandy in [#2684](https://github.com/gfx-rs/wgpu/pull/2684)\n- Move RenderBundleEncoder::finish's pipeline layout id into the state. by @jimblandy in [#2755](https://github.com/gfx-rs/wgpu/pull/2755)\n- Expect shader_primitive_index tests to fail on AMD RADV POLARIS12. by @jimblandy in [#2754](https://github.com/gfx-rs/wgpu/pull/2754)\n- Introduce `VertexStep`: a stride and a step mode. by @jimblandy in [#2768](https://github.com/gfx-rs/wgpu/pull/2768)\n- Increase max_outliers on wgpu water example reftest. by @jimblandy in [#2767](https://github.com/gfx-rs/wgpu/pull/2767)\n- wgpu_core::command::bundle: Consolidate pipeline and vertex state. by @jimblandy in [#2769](https://github.com/gfx-rs/wgpu/pull/2769)\n- Add type annotation to render pass code, for rust-analyzer. by @jimblandy in [#2773](https://github.com/gfx-rs/wgpu/pull/2773)\n- Expose naga span location helpers by @nical in [#2752](https://github.com/gfx-rs/wgpu/pull/2752)\n- Add create_texture_error by @nical in [#2800](https://github.com/gfx-rs/wgpu/pull/2800)\n\n## wgpu-hal 0.12.5 (2022-04-19)\n\n- fix crashes when logging in debug message callbacks\n- fix program termination when dx12 or gles error messages happen.\n- implement validation canary\n- DX12:\n  - Ignore erroneous validation error from DXGI debug layer.\n\n## wgpu-hal-0.12.4 (2022-01-24)\n\n- Metal:\n  - check for MSL-2.3\n\n## wgpu-hal-0.12.3, deno-webgpu-? (2022-01-20)\n\n- Metal:\n  - preserve vertex invariance\n- Vulkan\n  - fix stencil read/write masks\n- Gles:\n  - reset index binding properly\n- DX12:\n  - fix copies into 1D textures\n\n## wgpu-core-0.12.2, wgpu-hal-0.12.2 (2022-01-10)\n\n- fix tracy compile error\n- fix buffer binding limits beyond 2Gb\n- fix zero initialization of 3D textures\n- Metal:\n  - fix surface texture views\n- Gles:\n  - extend `libwayland` search paths\n\n## wgpu-core-0.12.1, wgpu-hal-0.12.1 (2021-12-29)\n\n- zero initialization uses now render target clears when possible (faster and doesn't enforce COPY_DST internally if not necessary)\n  - fix use of MSAA targets in WebGL\n  - fix not providing `COPY_DST` flag for textures causing assertions in some cases\n  - fix surface textures not getting zero initialized\n  - clear_texture supports now depth/stencil targets\n- error message on creating depth/stencil volume texture\n- Vulkan:\n  - fix validation error on debug message types\n- DX12:\n  - fix check for integrated GPUs\n  - fix stencil subresource transitions\n- Metal:\n  - implement push constants\n\n## wgpu-0.12 (2021-12-18)\n\n- API:\n  - `MULTIVIEW` feature\n  - `DEPTH_CLIP_CONTROL` feature to replace the old `DEPTH_CLAMP`\n  - `TEXTURE_FORMAT_16BIT_NORM` feature\n  - push/pop error scopes on the device\n  - more limits for compute shaders\n  - `SamplerBindingType` instead of booleans\n  - sampler arrays are supported by `TEXTURE_BINDING_ARRAY` feature\n  - \"glsl\" cargo feature for accepting GLSL shader code\n  - enforced MSRV-1.53\n- correctness:\n  - textures are zero-initialized\n  - lots and lots of fixes\n- validation:\n  - match texture-sampler pairs\n  - check `min_binding_size` late at draw\n  - check formats to match in `copy_texture_to_texture`\n  - allow `strip_index_format` to be none if unused\n  - check workgroup sizes and counts\n- shaders:\n  - please refer to [naga-0.8 changelog](https://github.com/gfx-rs/naga/pull/1610/files)\n  - nice error messages\n\n### wgpu-core-0.11.3, wgpu-hal-0.11.5, wgpu-0.11.1 (2021-12-01)\n\n- Core:\n  - validate device descriptor before actually creating it\n  - fix validation of texture-sampler pairs\n- Vulkan:\n  - fix running on Vulkan-1.1 instance\n  - improve detection of workaround for Intel+Nvidia on Linux\n  - fix resource limits on Vulkan-1.2\n  - fix the check for storage buffer requirement\n  - change internal semaphore logic to work around Linux+Intel bugs\n  - fix enabling extension-provided features\n- GLES:\n  - fix running on old and bogus drivers\n  - fix stale samplers on bindings change\n  - fix integer textures\n  - fix querying work group parameters\n  - fix stale PBO bindings caused by resource copies\n  - fix rendering to cubemap faces\n  - fix `Rgba16Float` format\n  - fix stale vertex attributes when changing the pipeline\n- Metal:\n  - fix window resizing for running in multiple processes\n- Web:\n  - fix `set_index_buffer` and `set_vertex_buffer` to have optional sizes\n\n### wgpu-core-0.11.2, wgpu-hal-0.11.4 (2021-10-22)\n\n- fix buffer transition barriers\n- Metal:\n  - disable RW buffers on macOS 10.11\n  - fix memory leaks in render pass descriptor\n- WebGL:\n  - fix surface reconfiguration\n- GLES:\n  - fix mapping when persistent mapping isn't supported\n  - allow presentation in Android emulator\n  - fix sRGB attributes on EGL-1.4 contexts\n\n### wgpu-hal-0.11.3 (2021-10-16)\n\n- GL:\n  - fix mapping flags and buffer initialization\n  - fix context creation when sRGB is available\n\n### wgpu-core-0.11.1 (2021-10-15)\n\n- fix bind group layout lifetime with regard to bind groups\n\n### wgpu-hal-0.11.2 (2021-10-12)\n\n- GL/WebGL: fix vertex buffer bindings with non-zero first instance\n- DX12: fix cube array view construction\n\n### wgpu-hal-0.11.1 (2021-10-09)\n\n- Vulkan: fix NV optimus detection on Linux\n- GL:\n  - fix indirect dispatch buffers\n- WebGL:\n  - fix querying storage-related limits\n  - work around a browser bug in the clear shader\n\n## wgpu-0.11 (2021-10-07)\n\n- Infrastructure:\n  - Deno WebGPU plugin is a part of the repository\n  - WebGPU CTS is ran on CI via Deno\n- API:\n  - initial WebGL support\n  - `SwapchainFrame` is removed. `SurfaceTexture::present()` needs to be called instead of dropping.\n  - better SPIR-V control flow processing\n  - ability to request a software (fallback) adapter\n  - new limits for `min_uniform_buffer_offset_alignment` and `min_storage_buffer_offset_alignment`\n  - features:\n    - new `PARTIALLY_BOUND_BINDING_ARRAY`\n    - `NON_FILL_POLYGON_MODE` is split into `POLYGON_MODE_LINE` and `POLYGON_MODE_POINT`\n- fixes:\n  - many shader-related fixes in Naga-0.7\n  - fix a panic in resource cleanup happening when they are dropped on another thread\n  - Vulkan:\n    - create SPIR-V per entry point to work around driver bugs\n    - expose higher descriptor limits based on descriptor indexing capabilities\n  - GL and Vulkan:\n    - Fix renderdoc device pointers\n- optimization:\n  - on Vulkan, bounds checks are omitted if the platform can do them natively\n\n### wgpu-core-0.10.4, wgpu-0.10.2 (2021-09-23)\n\n- fix `write_texture` for array textures\n- fix closing an encoder on validation error\n- expose Metal surface creation\n- panic with an actual error message in the default handler\n\n### wgpu-hal-0.10.7 (2021-09-14)\n\n- Metal:\n  - fix stencil back-face state\n  - fix the limit on command buffer count\n\n### wgpu-hal-0.10.6 (2021-09-12)\n\n- Metal:\n  - fix stencil operations\n  - fix memory leak on M1 when out of focus\n  - fix depth clamping checks\n  - fix unsized storage buffers beyond the first\n\n### wgpu-core-0.10.3, wgpu-hal-0.10.4 (2021-09-08)\n\n- Vulkan:\n  - fix read access barriers for writable storage buffers\n  - fix shaders using cube array textures\n  - work around Linux Intel+Nvidia driver conflicts\n  - work around Adreno bug with `OpName`\n- DX12:\n  - fix storage binding offsets\n- Metal:\n  - fix compressed texture copies\n\n### wgpu-core-0.10.2, wgpu-hal-0.10.3 (2021-09-01)\n\n- All:\n  - fix querying the size of storage textures\n- Vulkan:\n  - use render pass labels\n- Metal:\n  - fix moving the surface between displays\n- DX12:\n  - enable BC compressed textures\n- GL:\n  - fix vertex-buffer and storage related limits\n\n### wgpu-core-0.10.1, wgpu-hal-0.10.2 (2021-08-24)\n\n- All:\n  - expose more formats via adapter-specific feature\n  - fix creation of depth+stencil views\n  - validate cube textures to not be used as storage\n  - fix mip level count check for storage textures\n- Metal:\n  - fix usage of work group memory\n- DX12:\n  - critical fix of pipeline layout\n\n## v0.10 (2021-08-18)\n\n- Infrastructure:\n  - `gfx-hal` is replaced by the in-house graphics abstraction `wgpu-hal`. Backends: Vulkan, Metal, D3D-12, and OpenGL ES-3.\n  - examples are tested automatically for image snapshots.\n- API:\n  - `cross` feature is removed entirely. Only Rust code from now on.\n  - processing SPIR-V inputs for later translation now requires `spirv` compile feature enabled\n  - new `Features::SPIRV_SHADER_PASSTHROUGH` run-time feature allows providing pass-through SPIR-V (orthogonal to the compile feature)\n  - several bitflag names are renamed to plural: `TextureUsage`, `BufferUsage`, `ColorWrite`.\n  - the `SwapChain` is merged into `Surface`. Returned frames are `Texture` instead of `TextureView`.\n  - renamed `TextureUsage` bits: `SAMPLED` -> `TEXTURE_BINDING`, `STORAGE` -> `STORAGE_BINDING`.\n  - renamed `InputStepMode` to `VertexStepMode`.\n  - readable storage textures are no longer a part of the base API. Only exposed via format-specific features, non-portably.\n  - implemented `Rgb9e5Ufloat` format.\n  - added limits for binding sizes, vertex data, per-stage bindings, and others.\n  - reworked downlevel flags, added downlevel limits.\n  - `resolver = \"2\"` is now required in top-level cargo manifests\n- Fixed:\n  - `Device::create_query_set` would return an error when creating exactly `QUERY_SET_MAX_QUERIES` (8192) queries. Now it only returns an error when trying to create _more_ than `QUERY_SET_MAX_QUERIES` queries.\n\n### wgpu-core-0.9.2\n\n- fix `Features::TEXTURE_SPECIFIC_FORMAT_FEATURES` not being supported for rendertargets\n\n### wgpu-core-0.9.1 (2021-07-13)\n\n- fix buffer inits delayed by a frame\n- fix query resolves to initialize buffers\n- fix pipeline statistics stride\n- fix the check for maximum query count\n\n## v0.9 (2021-06-18)\n\n- Updated:\n  - naga to `v0.5`.\n- Added:\n  - `Features::VERTEX_WRITABLE_STORAGE`.\n  - `Features::CLEAR_COMMANDS` which allows you to use `cmd_buf.clear_texture` and `cmd_buf.clear_buffer`.\n- Changed:\n  - Updated default storage buffer/image limit to `8` from `4`.\n- Fixed:\n  - `Buffer::get_mapped_range` can now have a range of zero.\n  - Fixed output spirv requiring the \"kernel\" capability.\n  - Fixed segfault due to improper drop order.\n  - Fixed incorrect dynamic stencil reference for Replace ops.\n  - Fixed tracking of temporary resources.\n  - Stopped unconditionally adding cubemap flags when the backend doesn't support cubemaps.\n- Validation:\n  - Ensure that if resources are viewed from the vertex stage, they are read only unless `Features::VERTEX_WRITABLE_STORAGE` is true.\n  - Ensure storage class (i.e. storage vs uniform) is consistent between the shader and the pipeline layout.\n  - Error when a color texture is used as a depth/stencil texture.\n  - Check that pipeline output formats are logical\n  - Added shader label to log messages if validation fails.\n- Tracing:\n  - Make renderpasses show up in the trace before they are run.\n- Docs:\n  - Fix typo in `PowerPreference::LowPower` description.\n- Player:\n  - Automatically start and stop RenderDoc captures.\n- Examples:\n  - Handle winit's unconditional exception.\n- Internal:\n  - Merged wgpu-rs and wgpu back into a single repository.\n  - The tracker was split into two different stateful/stateless trackers to reduce overhead.\n  - Added code coverage testing\n  - CI can now test on lavapipe\n  - Add missing extern \"C\" in wgpu-core on `wgpu_render_pass_execute_bundles`\n  - Fix incorrect function name `wgpu_render_pass_bundle_indexed_indirect` to `wgpu_render_bundle_draw_indexed_indirect`.\n\n### wgpu-types-0.8.1 (2021-06-08)\n\n- fix dynamic stencil reference for Replace ops\n\n### v0.8.1 (2021-05-06)\n\n- fix SPIR-V generation from WGSL, which was broken due to \"Kernel\" capability\n- validate buffer storage classes\n- Added support for storage texture arrays for Vulkan and Metal.\n\n## v0.8 (2021-04-29)\n\n- Naga is used by default to translate shaders, SPIRV-Cross is optional behind `cross` feature\n- Features:\n  - buffers are zero-initialized\n  - downlevel limits for DX11/OpenGL support\n  - conservative rasterization (native-only)\n  - buffer resource indexing (native-only)\n- API adjustments to the spec:\n  - Renamed `RenderPassColorAttachmentDescriptor` to `RenderPassColorAttachment`:\n    - Renamed the `attachment` member to `view`\n  - Renamed `RenderPassDepthStencilAttachmentDescriptor` to `RenderPassDepthStencilAttachment`:\n    - Renamed the `attachment` member to `view`\n  - Renamed `VertexFormat` values\n    - Examples: `Float3` -> `Float32x3`, `Ushort2` -> `Uint16x2`\n  - Renamed the `depth` value of `Extent3d` to `depth_or_array_layers`\n  - Updated blending options in `ColorTargetState`:\n    - Renamed `BlendState` to `BlendComponent`\n    - Added `BlendState` struct to hold color and alpha blend state\n    - Moved `color_blend` and `alpha_blend` members into `blend` member\n  - Moved `clamp_depth` from `RastizerState` to `PrimitiveState`\n  - Updated `PrimitiveState`:\n    - Added `conservative` member for enabling conservative rasterization\n  - Updated copy view structs:\n    - Renamed `TextureCopyView` to `ImageCopyTexture`\n    - Renamed `TextureDataLayout` to `ImageDataLayout`\n    - Changed `bytes_per_row` and `rows_per_image` members of `ImageDataLayout` from `u32` to `Option<NonZeroU32>` <!-- wgpu-rs only -->\n  - Changed `BindingResource::Binding` from containing fields directly to containing a `BufferBinding`\n  - Added `BindingResource::BufferArray`\n- Infrastructure:\n  - switch from `tracing` to `profiling`\n  - more concrete and detailed errors\n  - API traces include the command that crashed/panicked\n  - Vulkan Portability support is removed from Apple platforms\n- Validation:\n  - texture bindings\n  - filtering of textures by samplers\n  - interpolation qualifiers\n  - allow vertex components to be underspecified\n\n### wgpu-core-0.7.1 (2021-02-25)\n\n- expose `wgc::device::queue` sub-module in public\n- fix the indexed buffer check\n- fix command allocator race condition\n\n## v0.7 (2021-01-31)\n\n- Major API changes:\n  - `RenderPipelineDescriptor`\n  - `BindingType`\n  - new `ShaderModuleDescriptor`\n  - new `RenderEncoder`\n- Features:\n  - (beta) WGSL support, including the ability to bypass SPIR-V entirely\n  - (beta) implicit bind group layout support\n  - better error messages\n  - timestamp and pipeline statistics queries\n  - ETC2 and ASTC compressed textures\n  - (beta) targeting Wasm with WebGL backend\n  - reduced dependencies\n  - Native-only:\n    - clamp-to-border addressing\n    - polygon fill modes\n    - query a format for extra capabilities\n    - `f64` support in shaders\n- Validation:\n  - shader interface\n  - render pipeline descriptor\n  - vertex buffers\n\n### wgpu-0.6.2 (2020-11-24)\n\n- don't panic in the staging belt if the channel is dropped\n\n## v0.6 (2020-08-17)\n\n- Crates:\n  - C API is moved to [another repository](https://github.com/gfx-rs/wgpu-native)\n  - `player`: standalone API replayer and tester\n- Features:\n  - Proper error handling with all functions returning `Result`\n  - Graceful handling of \"error\" objects\n  - API tracing [infrastructure](http://kvark.github.io/wgpu/debug/test/ron/2020/07/18/wgpu-api-tracing.html)\n  - uploading data with `write_buffer`/`write_texture` queue operations\n  - reusable render bundles\n  - read-only depth/stencil attachments\n  - bind group layout deduplication\n  - Cows, cows everywhere\n  - Web+Native features:\n    - Depth clamping (feature)\n    - BC texture compression\n  - Native-only features:\n    - mappable primary buffers\n    - texture array bindings\n    - push constants\n    - multi-draw indirect\n- Validation:\n  - all transfer operations\n  - all resource creation\n  - bind group matching to the layout\n  - experimental shader interface matching with Naga\n\n### wgpu-core-0.5.6 (2020-07-09)\n\n- add debug markers support\n\n### wgpu-core-0.5.5 (2020-05-20)\n\n- fix destruction of adapters, swap chains, and bind group layouts\n- fix command pool leak with temporary threads\n- improve assertion messages\n- implement `From<TextureFormat>` for `TextureComponentType`\n\n### wgpu-core-0.5.4 (2020-04-24)\n\n- fix memory management of staging buffers\n\n### wgpu-core-0.5.3 (2020-04-18)\n\n- fix reading access to storage textures\n- another fix to layout transitions for swapchain images\n\n### wgpu-core-0.5.2 (2020-04-15)\n\n- fix read-only storage flags\n- fix pipeline layout life time\n- improve various assert messages\n\n### wgpu-core-0.5.1 (2020-04-10)\n\n- fix tracking of swapchain images that are used multiple times in a command buffer\n- fix tracking of initial usage of a resource across a command buffer\n\n## v0.5 (2020-04-06)\n\n- Crates:\n  - `wgpu-types`: common types between native and web targets\n  - `wgpu-core`: internal API for the native and remote wrappers\n- Features:\n  - based on gfx-hal-0.5\n  - moved from Rendy to the new `gfx-memory` and `gfx-descriptor` crates\n  - passes are now recorded on the client side. The user is also responsible to keep all resources referenced in the pass up until it ends recording.\n  - coordinate system is changed to have Y up in the rendering space\n  - revised GPU lifetime tracking of all resources\n  - revised usage tracking logic\n  - all IDs are now non-zero\n  - Mailbox present mode\n- Validation:\n  - active pipeline\n- Fixes:\n  - lots of small API changes to closely match upstream WebGPU\n  - true read-only storage bindings\n  - unmapping dropped buffers\n  - better error messages on misused swapchain frames\n\n### wgpu-core-0.4.3 (2020-01-20)\n\n- improved swap chain error handling\n\n### wgpu-core-0.4.2 (2019-12-15)\n\n- fixed render pass transitions\n\n### wgpu-core-0.4.1 (2019-11-28)\n\n- fixed depth/stencil transitions\n- fixed dynamic offset iteration\n\n## v0.4 (2019-11-03)\n\n- Platforms: removed OpenGL/WebGL support temporarily\n- Features:\n  - based on gfx-hal-0.4 with the new swapchain model\n  - exposing adapters from all available backends on a system\n  - tracking of samplers\n  - cube map support with an example\n- Validation:\n  - buffer and texture usage\n\n### wgpu-core-0.3.3 (2019-08-22)\n\n- fixed instance creation on Windows\n\n### wgpu-core-0.3.1 (2019-08-21)\n\n- fixed pipeline barriers that aren't transitions\n\n## v0.3 (2019-08-21)\n\n- Platforms: experimental OpenGL/WebGL\n- Crates:\n  - Rust API is moved out to [another repository](https://github.com/gfx-rs/wgpu-rs)\n- Features:\n  - based on gfx-hal-0.3 with help of `rendy-memory` and `rendy-descriptor`\n  - type-system-assisted deadlock prevention (for locking internal structures)\n  - texture sub-resource tracking\n  - `raw-window-handle` integration instead of `winit`\n  - multisampling with an example\n  - indirect draws and dispatches\n  - stencil masks and reference values\n  - native \"compute\" example\n  - everything implements `Debug`\n- Validation\n  - vertex/index/instance ranges at draw calls\n  - bing groups vs their expected layouts\n  - bind group buffer ranges\n  - required stencil reference, blend color\n\n### wgpu-core-0.2.6 (2019-04-04)\n\n- fixed frame acquisition GPU waits\n\n### wgpu-core-0.2.5 (2019-03-31)\n\n- fixed submission tracking\n- added support for blend colors\n- fixed bind group compatibility at the gfx-hal level\n- validating the bind groups and blend colors\n\n### wgpu-core-0.2.3 (2019-03-20)\n\n- fixed vertex format mapping\n- fixed building with \"empty\" backend on Windows\n- bumped the default descriptor pool size\n- fixed host mapping alignments\n- validating the uniform buffer offset\n\n## v0.2 (2019-03-06)\n\n- Platforms: iOS/Metal, D3D11\n- Crates:\n  - `wgpu-remote`: remoting layer for the cross-process boundary\n  - `gfx-examples`: selected gfx pre-ll examples ported over\n- Features:\n  - native example for compute\n  - \"gfx-cube\" and \"gfx-shadow\" examples\n  - copies between buffers and textures\n  - separate object identity for the remote client\n  - texture view tracking\n  - native swapchain resize support\n  - buffer mapping\n  - object index epochs\n  - comprehensive list of vertex and texture formats\n  - validation of pipeline compatibility with the pass\n- Fixes\n  - fixed resource destruction\n\n## v0.1 (2019-01-24)\n\n- Platforms: Linux/Vulkan, Windows/Vulkan, D3D12, macOS/Metal\n- Crates:\n  - `wgpu-native`: C API implementation of WebGPU, based on gfx-hal\n  - `wgpu-bindings`: auto-generated C headers\n  - `wgpu`: idiomatic Rust wrapper\n  - `examples`: native C examples\n- Features:\n- native examples for triangle rendering\n- basic native swapchain integration\n- concept of the storage hub\n- basic recording of passes and command buffers\n- submission-based lifetime tracking and command buffer recycling\n- automatic resource transitions\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 4.978515625,
          "content": "# Code of Conduct\n\n_This Code of Conduct is based on the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct), which is adapted from the [Node.js Policy on Trolling](http://blog.izs.me/post/30036893703/policy-on-trolling) and the [Contributor Covenant](https://www.contributor-covenant.org)._\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nIn this community we strive to go the extra step to look out for each other. Don’t just aim to be technically unimpeachable, try to be your best self. In particular, avoid flirting with offensive or sensitive issues, particularly if they’re off-topic; this all too often leads to unnecessary fights, hurt feelings, and damaged trust; worse, it can drive people away from the community entirely.\n\nAnd if someone takes issue with something you said or did, resist the urge to be defensive. Just stop doing what it was they complained about and apologize. Even if you feel you were misinterpreted or unfairly accused, chances are good there was something you could’ve communicated better — remember that it’s your responsibility to make your fellow Rustaceans comfortable. Everyone wants to get along and we are all here first and foremost because we want to talk about cool technology. You will find that people will be eager to assume good intent and forgive as long as you earn their trust.\n\n* Please avoid using overtly sexual aliases or other nicknames that might detract from a friendly, safe and welcoming environment for all.\n* Please be kind and courteous. There’s no need to be mean or rude.\n* Respect that people have differences of opinion and that every design or implementation choice carries a trade-off and numerous costs. There is seldom a right answer.\n* Please keep unstructured critique to a minimum. If you have solid ideas you want to experiment with, make a fork and see how it works.\n* We will exclude you from interaction if you insult, demean or harass anyone. That is not welcome behavior. We interpret the term “harassment” as including the definition in the [Citizen Code of Conduct](https://github.com/stumpsyn/policies/blob/master/citizen_code_of_conduct.md); if you have any lack of clarity about what might be included in that concept, please read their definition. In particular, we don’t tolerate behavior that excludes people in socially marginalized groups.\n* Private harassment is also unacceptable. No matter who you are, if you feel you have been or are being harassed or made uncomfortable by a community member, please contact the maintainers immediately. Whether you’re a regular contributor or a newcomer, we care about making this community a safe place for you and we’ve got your back.\n* Do not make casual mention of slavery or indentured servitude and/or false comparisons of one's occupation or situation to slavery. Please consider using or asking about alternate terminology when referring to such metaphors in technology.\n* Likewise any spamming, trolling, flaming, baiting or other attention-stealing behavior is not welcome.\n\n## Moderation\n\nThese are the policies for upholding [our community’s standards of conduct](#our-standards). If you feel that a thread needs moderation, please contact the maintainers.\n\n1. Remarks that violate the community standards of conduct, including hateful, hurtful, oppressive, or exclusionary remarks, are not allowed. (Cursing is allowed, but never targeting another user, and never in a hateful manner).\n2. Remarks that maintainers find inappropriate, whether listed in the code of conduct or not, are also not allowed.\n3. Maintainers will first respond to such remarks with a warning.\n4. If the warning is unheeded, the user will be “kicked,” i.e., kicked out of the communication channel to cool off.\n5. If the user comes back and continues to make trouble, they will be banned, i.e., indefinitely excluded.\n6. Maintainers may choose at their discretion to un-ban the user if it was a first offense and they offer the offended party a genuine apology.\n7. If a maintainer bans someone and you think it was unjustified, please take it up with that maintainer, or with a different maintainer, in private. Complaints about bans in-channel are not allowed.\n8. Maintainers are held to a higher standard than other community members. If a maintainer creates an inappropriate situation, they should expect less leeway than others.\n\nThe enforcement policies in the code of conduct apply to all official venues, including Discord channels, GitHub repositories, the Twitter/Mastodon/Bluesky community and all other forums.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.7265625,
          "content": "This document is a guide for contributions to the WGPU project.\n\n## Welcome!\n\nFirst of all, welcome to the WGPU community! 👋 We're glad you want to\ncontribute. If you are unfamiliar with the WGPU project, we recommend you read\n[`GOVERNANCE.md`] for an overview of its goals, and how it's governed.\n\n[`GOVERNANCE.md`]: ./GOVERNANCE.md\n\n## Talking to other humans in the WGPU project\n\nThe WGPU project has multiple official platforms for community engagement:\n\n- The Matrix channel [`wgpu:matrix.org`](https://matrix.to/#/#wgpu:matrix.org)\n  is dedicated to informal chat about contributions the project. It is\n  particularly useful for:\n\n  - Saying hello, and introducing yourself.\n  - Validating contributions (i.e., determining if they'll be accepted,\n    ensuring your approach is correct, making sure you aren't wasting effort,\n    etc.).\n  - Setting expectations for contributions.\n\n  Notification in Matrix can sometimes be unreliable. Feel free to explicitly\n  tag people from whom you would like attention, esp. to follow-up after a day\n  or so if you do not get a response to your contributions.\n\n- [GitHub issues] are used to discuss open development questions and track work\n  the community intends to complete; this might include:\n\n  - Work that needs resolution via pull requests (see below)\n    - Bug reports\n    - Feature requests\n    - Creating new releases of crates\n  - Recording project decisions formally.\n    - Architectural discussion\n    - ???\n  - Compiling sets of other issues needed for a specific feature or use case\n    (AKA `[meta]` issues).\n\n- [GitHub pull requests]: Modifications to the contents of this repository are\n  done through pull requests.\n- `wgpu` Maintainership Meetings: Every week, the maintainership of the wgpu\n  project meets to discuss the project's direction and review ongoing work.\n  These meetings are open to the public, and you are welcome to attend. They\n  happen on Google Meet and happen on Wednesday at 16:00 UTC and last approximately\n  an hour. Remember to obey the [`CODE_OF_CONDUCT.md`] in the meeting.\n  - [Meeting Notes]\n  - [Meeting Link]\n- [GitHub discussions]: TODO: Experimentally used by some enthusiastic members\n  of our community. Not supported officially.\n  \n\n[GitHub discussions]: https://github.com/gfx-rs/wgpu/discussions\n[GitHub issues]: https://github.com/gfx-rs/wgpu/issues\n[GitHub pull requests]: https://github.com/gfx-rs/wgpu/pulls\n[Meeting Notes]: https://docs.google.com/document/d/1Z3qjy3m7eAYaTsh2n-iKxLV4Hjc6wZxgukzdQOgVH1c/edit?usp=sharing\n[Meeting Link]: https://meet.google.com/ubo-ztcw-gwf\n[`CODE_OF_CONDUCT.md`]: ./CODE_OF_CONDUCT.md\n\n## Contributing to WGPU\n\nCommunity response to contributions are, in general, prioritized based on their\nrelevance to WGPU's mission and decision-making groups' interest (see\n[`GOVERNANCE.md`]).\n\n### \"What can I work on?\" as a new contributor\n\nTODO\n\nWe discourage new contributors from submitting large changes or opinionated\nrefactors unless they have been specifically validated by WGPU maintainership.\nThese are likely to be rejected on basis of needing discussion before a formal\nreview.\n\n### Setting up a WGPU development environment\n\nWe use the following components in a WGPU development environment:\n\n- [The version of the Rust toolchain with the `cargo` command][install-rust],\n  pointed to by `rust-toolchain.toml` at the root of the repository, to compile\n  WGPU's code.\n- [Taplo](https://taplo.tamasfe.dev/) to keep TOML files formatted.\n\nOnce these are done, you should be ready to hack on WGPU! Drop into your\nfavorite editor, make some changes to the repository's code, and test that WGPU\nhas been changed the way you expect. We recommend\n[using a `path` dependency][path-deps] in Cargo for local testing of changes,\nand a [`git` dependency][git-deps] pointing to your own fork to share changes\nwith other contributors.\n\nOnce you are ready to request a review of your changes so they become part of\nWGPU public history, create a pull request with your changes committed to a\nbranch in your own fork of WGPU in GitHub. See documentation for that\n[here](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork).\n\n[install-rust]: https://www.rust-lang.org/tools/install\n[path-deps]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies\n[git-deps]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\n\n### What to expect when you file an issue\n\nTODO\n\n- Describe the filing process\n  - Link to new issue page\n  - Describe how to socialize the issue effectively\n  - Feel free to ping us if it's a blocker!\n  - Suggesting tags is helpful.\n  - Describe how the project will handle the issue\n    - Our ability to respond to an issue depends entirely on whether it is\n      _actionable_ (viz., that there is a course of action that is reasonable\n      for a volunteer to take the time to do). If it's not actionable, we\n      reserve the right to close it.\n      - Being responsive to requests for further information is important.\n      - Understanding what point in the repository's history an issue began is\n        also important. Maybe link to `git bisect` or something similar?\n      - In particular, expecting others to fix something hardware- or\n        driver-specific that current maintainership (1) can't mentor you\n        into fixing and (2) otherwise isn't being prioritized are likely to\n        be closed.\n\n### What to expect when you submit a PR\n\nTODO: It is strongly recommended that you validate your contributions before\nyou make significant efforts…\n\nThe \"Assigned\" field on a PR indicates who has taken responsibility\nfor reviewing the PR, not who is responsible for the content of the\nPR.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 115.119140625,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"ab_glyph\"\nversion = \"0.2.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec3672c180e71eeaaac3a541fbbc5f5ad4def8b747c595ad30d674e43049f7b0\"\ndependencies = [\n \"ab_glyph_rasterizer\",\n \"owned_ttf_parser\",\n]\n\n[[package]]\nname = \"ab_glyph_rasterizer\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c71b1793ee61086797f5c80b6efa2b8ffa6d5dd703f118545808a7f2e27f7046\"\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.24.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfbe277e56a376000877090da837660b4427aad530e3028d44e0bffe4f89a1c1\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"adler2\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"512761e0bb2578dd7380c6baaa0f4ce03e84f95e960231d1dec8bf4d7d6e2627\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-activity\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee91c0c2905bae44f84bfa4e044536541df26b7703fd0888deeb9060fcc44289\"\ndependencies = [\n \"android-properties\",\n \"bitflags 2.6.0\",\n \"cc\",\n \"cesu8\",\n \"jni\",\n \"jni-sys\",\n \"libc\",\n \"log\",\n \"ndk\",\n \"ndk-context\",\n \"ndk-sys\",\n \"num_enum\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"android-properties\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc7eb209b1518d6bb87b283c20095f5228ecda460da70b44f0802523dea6da04\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anes\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b46cbb362ab8752921c97e041f5e366ee6297bd428a31275b9fcf1e380f7299\"\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acc5369981196006228e28809f761875c0327210a891e941f4c683b3a99529b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55cc3b69f167a1ef2e161439aa98aed94e6028e5f9a59be9a6ffb47aef1651f9\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b2d16507662817a6a20a9ea92df6652ee4f94f914589377d69f3b21bc5798a9\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79947af37f4177cfead1110013d678905c37501914fba0efea834c3fe9a8d60c\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2109dbce0e72be3ec00bed26e6a7479ca384ad226efdd66db8fa2e3a38c83125\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ac096ce696dc2fcabef30516bb13c0a68a11d30131d3df6f04711467681b04\"\n\n[[package]]\nname = \"arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dde20b3d026af13f561bdd0f15edf01fc734f0dafcedbaf42bba506a9517f223\"\ndependencies = [\n \"derive_arbitrary\",\n]\n\n[[package]]\nname = \"argh\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ff18325c8a36b82f992e533ece1ec9f9a9db446bd1c14d4f936bac88fcd240\"\ndependencies = [\n \"argh_derive\",\n \"argh_shared\",\n \"rust-fuzzy-search\",\n]\n\n[[package]]\nname = \"argh_derive\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb7b2b83a50d329d5d8ccc620f5c7064028828538bdf5646acd60dc1f767803\"\ndependencies = [\n \"argh_shared\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"argh_shared\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a464143cc82dedcdc3928737445362466b7674b5db4e2eb8e869846d6d84f4f6\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76a2e8124351fda1ef8aaaa3bbd7ebbcb486bbcd4225aca0aa0d84bb2db8fecb\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c02d123df017efcdfbd739ef81735b36c5ba83ec3c59c80a9d7ecc718f92e50\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"as-raw-xcb-connection\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"175571dd1d178ced59193a6fc02dde1b972eb0bc56c892cde9beeceac5bf0f6b\"\n\n[[package]]\nname = \"ash\"\nversion = \"0.38.0+1.3.281\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bb44936d800fea8f016d7f2311c6a4f97aebd5dc86f09906139ec848cf3a46f\"\ndependencies = [\n \"libloading\",\n]\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f934833b4b7233644e5848f235df3f57ed8c80f1528a26c3dfa13d2147fa056\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"atomic-waker\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ace50bade8e6234aa140d9a2f552bbee1db4d353f69b8217bc503490fc1a9f26\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d82cb332cdfaed17ae235a638438ac4d4839913cc2af585c3c6746e8f8bee1a\"\ndependencies = [\n \"addr2line\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide 0.8.2\",\n \"object\",\n \"rustc-demangle\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.21.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d297deb1925b89f2ccc13d7635fa0714f12c87adce1c75356b39ca9b7178567\"\n\n[[package]]\nname = \"base64-simd\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"781dd20c3aff0bd194fe7d2a977dd92f21c173891f3a03b677359e5fa457e5d5\"\ndependencies = [\n \"simd-abstraction\",\n]\n\n[[package]]\nname = \"base64-simd\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"339abbe78e73178762e23bea9dfd08e697eb3f3301cd4be981c0f78ba5859195\"\ndependencies = [\n \"outref 0.5.1\",\n \"vsimd\",\n]\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f49d8fed880d473ea71efb9bf597651e77201bdd4893efe54c9e5d65ae04ce6f\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cexpr\",\n \"clang-sys\",\n \"itertools 0.13.0\",\n \"log\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"syn\",\n]\n\n[[package]]\nname = \"bit-set\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0700ddab506f33b20a03b13996eccd309a48e5ff77d0d95926aa0210fb4e95f1\"\ndependencies = [\n \"bit-vec 0.6.3\",\n]\n\n[[package]]\nname = \"bit-set\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08807e080ed7f9d5433fa9b275196cfc35414f66a0c79d864dc51a0d825231a3\"\ndependencies = [\n \"bit-vec 0.8.0\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e764a1d40d510daf35e07be9eb06e75770908c27d411ee6c92109c9840eaaf7\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b048fb63fd8b5923fc5aa7b340d8e156aec7ec02f0c78fa8a6ddc2613f6f71de\"\ndependencies = [\n \"arbitrary\",\n \"serde\",\n]\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"block\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d8c1fef690941d3e7788d328517591fecc684c084084702d6ff1641e993699a\"\n\n[[package]]\nname = \"block-sys\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae85a0696e7ea3b835a453750bf002770776609115e6d25c6d2ff28a8200f7e7\"\ndependencies = [\n \"objc-sys\",\n]\n\n[[package]]\nname = \"block2\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15b55663a85f33501257357e6421bb33e769d5c9ffb5ba0921c975a123e35e68\"\ndependencies = [\n \"block-sys\",\n \"objc2\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef657dfab802224e671f5818e9a4935f9b1957ed18e58292690cc39e7a4092a3\"\ndependencies = [\n \"bytemuck_derive\",\n]\n\n[[package]]\nname = \"bytemuck_derive\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fa76293b4f7bb636ab88fd78228235b5248b4d05cc589aed610f954af5d7c7a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"325918d6fe32f23b19878fe4b34794ae41fc19ddbe53b10571a4874d44ffd39b\"\n\n[[package]]\nname = \"calloop\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fba7adb4dd5aa98e5553510223000e7148f621165ec5f9acd7113f6ca4995298\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"log\",\n \"polling\",\n \"rustix\",\n \"slab\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"calloop-wayland-source\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f0ea9b9476c7fad82841a8dbb380e2eae480c21910feba80725b46931ed8f02\"\ndependencies = [\n \"calloop\",\n \"rustix\",\n \"wayland-backend\",\n \"wayland-client\",\n]\n\n[[package]]\nname = \"cast\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37b2a672a2cb129a2e41c10b1224bb368f9f37a2b16b612598138befd7b37eb5\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a012a0df96dd6d06ba9a1b29d6402d1a5d77c6befd2566afdc26e10603dc93d7\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cesu8\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d43a04d8753f35258c91f8ec639f792891f748a1edbd759cf1dcea3382ad83c\"\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd16c4719339c4530435d38e511904438d07cce7950afa3718a84ac36c10e89e\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"cgl\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ced0551234e87afee12411d535648dd89d2e7f34c78b753395567aff3d447ff\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"ciborium\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42e69ffd6f0917f5c029256a24d0161db17cea3997d185db0d35926308770f0e\"\ndependencies = [\n \"ciborium-io\",\n \"ciborium-ll\",\n \"serde\",\n]\n\n[[package]]\nname = \"ciborium-io\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05afea1e0a06c9be33d539b876f1ce3692f4afea2cb41f740e7743225ed1c757\"\n\n[[package]]\nname = \"ciborium-ll\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57663b653d948a338bfb3eeba9bb2fd5fcfaecb9e199e87e1eda4d9e8b240fd9\"\ndependencies = [\n \"ciborium-io\",\n \"half\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9560b07a799281c7e0958b9296854d6fafd4c5f31444a7e5bb1ad6dde5ccf1bd\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"874e0dd3eb68bf99058751ac9712f622e61e6f393a94f7128fa26e3f02f5c7cd\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54b755194d6389280185988721fffba69495eed5ee9feeee9a599b53db80318c\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"\ndependencies = [\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"color_quant\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d7b894f5411737b7867f4827955924d7c254fc9f4d91a6aad6b097804b1018b\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b63caa9aa9397e2d9480a9b13673856c78d8ac123288526c37d7839f2a86990\"\n\n[[package]]\nname = \"combine\"\nversion = \"4.6.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba5a308b75df32fe02788e748662718f03fde005016435c444eea572398219fd\"\ndependencies = [\n \"bytes\",\n \"memchr\",\n]\n\n[[package]]\nname = \"concurrent-queue\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ca0197aee26d1ae37445ee532fefce43251d24cc7c166799f4d46817f1d3973\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"console_error_panic_hook\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"console_log\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be8aed40e4edbf4d3b4431ab260b63fdc40f5780a4766824329ea0f1eefe3c0f\"\ndependencies = [\n \"log\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"const_panic\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53857514f72ee4a2b583de67401e3ff63a5472ca4acf289d09a9ea7636dfec17\"\n\n[[package]]\nname = \"cooked-waker\"\nversion = \"5.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147be55d677052dabc6b22252d5dd0fd4c29c8c27aa4f2fbef0f94aa003b406f\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"773648b94d0e5d620f64f280777445740e61fe701025087ec8b57f45c791888b\"\n\n[[package]]\nname = \"core-graphics\"\nversion = \"0.23.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c07782be35f9e1140080c6b96f0d44b739e2278479f64e02fdab4e32dfd8b081\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"core-graphics-types\",\n \"foreign-types\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-graphics-types\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"45390e6114f68f718cc7a830514a96f903cccd70d02a8f6d9f643ac4ba45afaf\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a97769d94ddab943e4510d138150169a2758b5ef3eb191a9ee688de3e23ef7b3\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"criterion\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2b12d017a929603d80db1831cd3a24082f8137ce19c69e6447f54f5fc8d692f\"\ndependencies = [\n \"anes\",\n \"cast\",\n \"ciborium\",\n \"clap\",\n \"criterion-plot\",\n \"is-terminal\",\n \"itertools 0.10.5\",\n \"num-traits\",\n \"once_cell\",\n \"oorandom\",\n \"plotters\",\n \"rayon\",\n \"regex\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"tinytemplate\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"criterion-plot\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b50826342786a51a89e2da3a28f1c32b06e387201bc2d19791f622c673706b1\"\ndependencies = [\n \"cast\",\n \"itertools 0.10.5\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dd111b7b7f7d55b72c0a6ae361660ee5853c9af73f70c3c2ef6858b950e2e51\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d0a5c400df2834b80a4c3327b3aad3a4c4cd4de0629063962b03235697506a28\"\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"ctor\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a2785755761f3ddc1492979ce1e48d2c00d09311c39e4466429188f3dd6501\"\ndependencies = [\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"cts_runner\"\nversion = \"0.1.0\"\ndependencies = [\n \"deno_console\",\n \"deno_core\",\n \"deno_url\",\n \"deno_web\",\n \"deno_webgpu\",\n \"deno_webidl\",\n \"termcolor\",\n \"tokio\",\n]\n\n[[package]]\nname = \"cursor-icon\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96a6ac251f4a2aca6b3f91340350eab87ae57c3f127ffeb585e92bd336717991\"\n\n[[package]]\nname = \"data-encoding\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8566979429cf69b49a5c740c60791108e86440e8be149bbea4fe54d2c32d6e2\"\n\n[[package]]\nname = \"debugid\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef552e6f588e446098f6ba40d89ac146c8c7b64aade83c051ee00bb5d2bc18d\"\ndependencies = [\n \"serde\",\n \"uuid\",\n]\n\n[[package]]\nname = \"deno_console\"\nversion = \"0.179.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e09f2bbb2d842329b602da25dbab5cd4a342f9a8adcb7c02509fc322f796e79\"\ndependencies = [\n \"deno_core\",\n]\n\n[[package]]\nname = \"deno_core\"\nversion = \"0.321.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd2a54cda74cdc187d5fc2d23370a45cf09f912caf566dd1cd24a50157d809c7\"\ndependencies = [\n \"anyhow\",\n \"bincode\",\n \"bit-set 0.5.3\",\n \"bit-vec 0.6.3\",\n \"bytes\",\n \"cooked-waker\",\n \"deno_core_icudata\",\n \"deno_ops\",\n \"deno_unsync\",\n \"futures\",\n \"indexmap\",\n \"libc\",\n \"memoffset\",\n \"parking_lot\",\n \"percent-encoding\",\n \"pin-project\",\n \"serde\",\n \"serde_json\",\n \"serde_v8\",\n \"smallvec\",\n \"sourcemap\",\n \"static_assertions\",\n \"tokio\",\n \"url\",\n \"v8\",\n \"wasm_dep_analyzer\",\n]\n\n[[package]]\nname = \"deno_core_icudata\"\nversion = \"0.74.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe4dccb6147bb3f3ba0c7a48e993bfeb999d2c2e47a81badee80e2b370c8d695\"\n\n[[package]]\nname = \"deno_ops\"\nversion = \"0.197.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37a8825d92301cf445727c43f17fee2a20fcdf4370004339965156ae7c56c97e\"\ndependencies = [\n \"proc-macro-rules\",\n \"proc-macro2\",\n \"quote\",\n \"stringcase\",\n \"strum 0.25.0\",\n \"strum_macros 0.25.3\",\n \"syn\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"deno_path_util\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff25f6e08e7a0214bbacdd6f7195c7f1ebcd850c87a624e4ff06326b68b42d99\"\ndependencies = [\n \"percent-encoding\",\n \"thiserror 1.0.69\",\n \"url\",\n]\n\n[[package]]\nname = \"deno_permissions\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14e822f98185ab3ddf06104b2407681e0008af52361af32f1cd171b7eda5aa59\"\ndependencies = [\n \"deno_core\",\n \"deno_path_util\",\n \"deno_terminal\",\n \"fqdn\",\n \"libc\",\n \"log\",\n \"once_cell\",\n \"percent-encoding\",\n \"serde\",\n \"thiserror 1.0.69\",\n \"which 4.4.2\",\n \"winapi\",\n]\n\n[[package]]\nname = \"deno_terminal\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daef12499e89ee99e51ad6000a91f600d3937fb028ad4918af76810c5bc9e0d5\"\ndependencies = [\n \"once_cell\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"deno_unsync\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d774fd83f26b24f0805a6ab8b26834a0d06ceac0db517b769b1e4633c96a2057\"\ndependencies = [\n \"futures\",\n \"parking_lot\",\n \"tokio\",\n]\n\n[[package]]\nname = \"deno_url\"\nversion = \"0.179.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad9a108794e505f2b07665e19ff336c1bcba6adcf7182c90c1d3a6c741d7fcd0\"\ndependencies = [\n \"deno_core\",\n \"thiserror 1.0.69\",\n \"urlpattern\",\n]\n\n[[package]]\nname = \"deno_web\"\nversion = \"0.210.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7679087bcc41f7ae3385f8c12d43bc81cfc54cb9b1ef73983d20f5e39fa4e0da\"\ndependencies = [\n \"async-trait\",\n \"base64-simd 0.8.0\",\n \"bytes\",\n \"deno_core\",\n \"deno_permissions\",\n \"encoding_rs\",\n \"flate2\",\n \"futures\",\n \"serde\",\n \"thiserror 1.0.69\",\n \"tokio\",\n \"uuid\",\n]\n\n[[package]]\nname = \"deno_webgpu\"\nversion = \"0.146.0\"\ndependencies = [\n \"deno_core\",\n \"raw-window-handle 0.6.2\",\n \"serde\",\n \"thiserror 2.0.10\",\n \"tokio\",\n \"wgpu-core\",\n \"wgpu-types\",\n]\n\n[[package]]\nname = \"deno_webidl\"\nversion = \"0.179.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b55d845e3d64f8de7eff67aaa4b6fe1b23bbc2efe967c984f8c64c8dd85fad4\"\ndependencies = [\n \"deno_core\",\n]\n\n[[package]]\nname = \"derive_arbitrary\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30542c1ad912e0e3d22a1935c290e12e8a29d704a420177a31faad4a601a0800\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"dispatch\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd0c93bb4b0c6d9b77f4435b0ae98c24d17f1c45b2ff844c6151a07256ca923b\"\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"dlib\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"330c60081dcc4c72131f8eb70510f1ac07223e5d4163db481a04a0befcffa412\"\ndependencies = [\n \"libloading\",\n]\n\n[[package]]\nname = \"document-features\"\nversion = \"0.2.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb6969eaabd2421f8a2775cfd2471a2b634372b4a25d41e3bd647b79912850a0\"\ndependencies = [\n \"litrs\",\n]\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\"\n\n[[package]]\nname = \"either\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60b1af1c220855b6ceac025d3f6ecdd2b7c4894bfe9cd9bda4fbb4bc7c0d4cf0\"\n\n[[package]]\nname = \"encase\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0a05902cf601ed11d564128448097b98ebe3c6574bd7b6a653a3d56d54aa020\"\ndependencies = [\n \"const_panic\",\n \"encase_derive\",\n \"glam\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"encase_derive\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"181d475b694e2dd56ae919ce7699d344d1fd259292d590c723a50d1189a2ea85\"\ndependencies = [\n \"encase_derive_impl\",\n]\n\n[[package]]\nname = \"encase_derive_impl\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f97b51c5cc57ef7c5f7a0c57c250251c49ee4c28f819f87ac32f4aceabc36792\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7268b386296a025e474d5140678f75d6de9493ae55a5d709eeb9dd08149945e1\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"env_filter\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"186e05a59d4c50738528153b83b0b0194d3a29507dfec16eccd4b342903397d0\"\ndependencies = [\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.11.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcaee3d8e3cfc3fd92428d477bc97fc29ec8716d180c0d74c643bb26166660e0\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"env_filter\",\n \"humantime\",\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33d852cb9b869c2a9b3df2f71a3074817f01e1844f839a144f5fcef059a4eb5d\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"escape8259\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5692dd7b5a1978a5aeb0ce83b7655c58ca8efdcb79d21036ea249da95afec2c6\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37909eebbb50d72f9059c3b6d82c0463f2ff062c9e95845c43a6c9c0355411be\"\n\n[[package]]\nname = \"fdeflate\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e6853b52649d4ac5c0bd02320cddc5ba956bdb407c4b75a2c6b75bf51500f8c\"\ndependencies = [\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"fern\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4316185f709b23713e41e3195f90edef7fb00c3ed4adc79769cf09cc762a3b29\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"fixedbitset\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ce7134b9999ecaf8bcd65542e436736ef32ddca1b3e06094cb6ec5755203b80\"\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c936bfdafb507ebbf50b8074c54fa31c5be9a1e7e5f467dd659697041407d07c\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide 0.8.2\",\n]\n\n[[package]]\nname = \"flume\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0e4dd2a88388a1f4ccc7c9ce104604dab68d9f408dc34cd45823d5a9069095\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n \"nanorand\",\n \"spin\",\n]\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0d2fde1f7b3d48b8395d5f2de76c18a528bd6a9cdde438df747bfcba3e05d6f\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d737d9aa519fb7b749cbc3b962edcf310a8dd1f4b67c91c4f83975dbdd17d965\"\ndependencies = [\n \"foreign-types-macros\",\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-macros\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a5c6c585bc94aaf2c7b51dd4c2ba22680844aba4c687be581871a6f518c5742\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa9a19cbb55df58761df49b23516a86d432839add4af60fc256da840f66ed35b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"fqdn\"\nversion = \"0.3.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb540cf7bc4fe6df9d8f7f0c974cfd0dce8ed4e9e8884e73433b503ee78b4e7d\"\n\n[[package]]\nname = \"fslock\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04412b8935272e3a9bae6f48c7bfff74c2911f60525404edfdd28e49884c3bfb\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65bc07b1a8bc7c85c5f2e110c476c7389b4554ba72af57d8445ea63a576b0876\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dff15bf788c671c1934e366d07e30c1814a8ef514e1af724a602e8a2fbe1b10\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f29059c0c2090612e8d742178b0580d2dc940c837851ad723096f87af6663e\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e28d1d997f585e54aebc3f97d39e72338912123a67330d723fdbb564d646c9f\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e5c1b78ca4aae1ac06c48a526a655760685149f0d465d21f37abfe57ce075c6\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cef40d21ae2c515b51041df9ed313ed21e572df340ea58a922a0aefe7e8891a1\"\ndependencies = [\n \"fastrand\",\n \"futures-core\",\n \"futures-io\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"162ee34ebcb7c64a8abebc059ce0fee27c2262618d7b60ed8faf72fef13c3650\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e575fab7d1e0dcb8d0c7bcf9a63ee213816ab51902e6d244a95819acacf1d4f7\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f90f7dce0722e95104fcb095585910c0977252f286e354b5e3bd38902cd99988\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fa08315bb612088cc391249efdc3bc77536f16c91f6cf495e6fbe85b20a4a81\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generator\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cc6bd114ceda131d3b1d665eba35788690ad37f5916457286b32ab6fd3c438dd\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"log\",\n \"rustversion\",\n \"windows\",\n]\n\n[[package]]\nname = \"gethostname\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0176e0459c2e4a1fe232f984bca6890e681076abb9934f6cea7c326f3fc47818\"\ndependencies = [\n \"libc\",\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.31.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07e28edb80900c19c28f1072f2e8aeca7fa06b23cd4169cefe1af5aa3260783f\"\n\n[[package]]\nname = \"gl_generator\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a95dfc23a2b4a9a2f5ab41d194f8bfda3cabec42af4e39f08c339eb2a0c124d\"\ndependencies = [\n \"khronos_api\",\n \"log\",\n \"xml-rs\",\n]\n\n[[package]]\nname = \"glam\"\nversion = \"0.29.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc46dd3ec48fdd8e693a98d2b8bafae273a2d54c1de02a2a7e3d57d501f39677\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8d1add55171497b4705a648c6b583acafb01d58050a51727785f0b2c8e0a2b2\"\n\n[[package]]\nname = \"glow\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5e5ea60d70410161c8bf5da3fdfeaa1c72ed2c15f8bbb9d19fe3a4fad085f08\"\ndependencies = [\n \"js-sys\",\n \"slotmap\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"glutin\"\nversion = \"0.31.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18fcd4ae4e86d991ad1300b8f57166e5be0c95ef1f63f3f5b827f8a164548746\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cfg_aliases 0.1.1\",\n \"cgl\",\n \"core-foundation\",\n \"dispatch\",\n \"glutin_egl_sys\",\n \"glutin_wgl_sys 0.5.0\",\n \"icrate\",\n \"libloading\",\n \"objc2\",\n \"once_cell\",\n \"raw-window-handle 0.5.2\",\n \"wayland-sys\",\n \"windows-sys 0.48.0\",\n \"x11-dl\",\n]\n\n[[package]]\nname = \"glutin-winit\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ebcdfba24f73b8412c5181e56f092b5eff16671c514ce896b258a0a64bd7735\"\ndependencies = [\n \"cfg_aliases 0.1.1\",\n \"glutin\",\n \"raw-window-handle 0.5.2\",\n \"winit\",\n]\n\n[[package]]\nname = \"glutin_egl_sys\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77cc5623f5309ef433c3dd4ca1223195347fe62c413da8e2fdd0eb76db2d9bcd\"\ndependencies = [\n \"gl_generator\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"glutin_wgl_sys\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c8098adac955faa2d31079b65dc48841251f69efd3ac25477903fc424362ead\"\ndependencies = [\n \"gl_generator\",\n]\n\n[[package]]\nname = \"glutin_wgl_sys\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a4e1951bbd9434a81aa496fe59ccc2235af3820d27b85f9314e279609211e2c\"\ndependencies = [\n \"gl_generator\",\n]\n\n[[package]]\nname = \"gpu-alloc\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbcd2dba93594b227a1f57ee09b8b9da8892c34d55aa332e034a228d0fe6a171\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"gpu-alloc-types\",\n]\n\n[[package]]\nname = \"gpu-alloc-types\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98ff03b468aa837d70984d55f5d3f846f6ec31fe34bbb97c4f85219caeee1ca4\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"gpu-allocator\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c151a2a5ef800297b4e79efa4f4bec035c5f51d5ae587287c9b952bdf734cacd\"\ndependencies = [\n \"log\",\n \"presser\",\n \"thiserror 1.0.69\",\n \"windows\",\n]\n\n[[package]]\nname = \"gpu-descriptor\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcf29e94d6d243368b7a56caa16bc213e4f9f8ed38c4d9557069527b5d5281ca\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"gpu-descriptor-types\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"gpu-descriptor-types\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdf242682df893b86f33a73828fb09ca4b2d3bb6cc95249707fc684d27484b91\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"gzip-header\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95cc527b92e6029a62960ad99aa8a6660faa4555fe5f731aab13aa6a921795a2\"\ndependencies = [\n \"crc32fast\",\n]\n\n[[package]]\nname = \"half\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888\"\ndependencies = [\n \"cfg-if\",\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\ndependencies = [\n \"foldhash\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbf6a919d6cf397374f7dfeeea91d974c7c0a7221d0d0f4f20d859d329e53fcc\"\n\n[[package]]\nname = \"hexf-parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfa686283ad6dd069f105e5ab091b04c62850d3e4cf5d67debad1933f55023df\"\n\n[[package]]\nname = \"hlsl-snapshots\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"nanoserde\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589533453244b0995c858700322199b2becb13b627df2851f64a2775d024abcf\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"icrate\"\nversion = \"0.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99d3aaff8a54577104bafdf686ff18565c3b6903ca5782a2026ef06e2c7aa319\"\ndependencies = [\n \"block2\",\n \"dispatch\",\n \"objc2\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"if_chain\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb56e1aa765b4b4f3aadfab769793b7087bb03a4ea4920644a6d238e2df5b9ed\"\n\n[[package]]\nname = \"image\"\nversion = \"0.24.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5690139d2f55868e080017335e4b94cb7414274c74f1669c84fb5feba2c9f69d\"\ndependencies = [\n \"bytemuck\",\n \"byteorder\",\n \"color_quant\",\n \"num-traits\",\n \"png\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"arbitrary\",\n \"equivalent\",\n \"hashbrown\",\n \"serde\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261f68e344040fbd0edea105bef17c66edf46f984ddb1115b775ce31be948f4b\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7943c866cc5cd64cbc25b2e01621d07fa8eb2a1a23160ee81ce38704e97b8ecf\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d75a2a4b1b190afb6f5425f10f6a8f959d2ea0b9c2b1d79553551850539e4674\"\n\n[[package]]\nname = \"jni\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a87aa2bb7d2af34197c04845522473242e1aa17c12f4935d5856491a7fb8c97\"\ndependencies = [\n \"cesu8\",\n \"cfg-if\",\n \"combine\",\n \"jni-sys\",\n \"log\",\n \"thiserror 1.0.69\",\n \"walkdir\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"jni-sys\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eaf4bc02d17cbdd7ff4c7438cafcdf7fb9a4613313ad11b4f8fefe7d3fa0130\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6717b6b5b077764fb5966237269cb3c64edddde4b14ce42647430a78ced9e7b7\"\ndependencies = [\n \"once_cell\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"khronos-egl\"\nversion = \"6.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6aae1df220ece3c0ada96b8153459b67eebe9ae9212258bb0134ae60416fdf76\"\ndependencies = [\n \"libc\",\n \"libloading\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"khronos_api\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2db585e1d738fc771bf08a151420d3ed193d9d895a36df7f6f8a9456b911ddc\"\n\n[[package]]\nname = \"ktx2\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87d65e08a9ec02e409d27a0139eaa6b9756b4d81fe7cde71f6941a83730ce838\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"libfuzzer-sys\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a96cfd5557eb82f2b83fed4955246c988d331975a002961b07c81584d107e7f7\"\ndependencies = [\n \"arbitrary\",\n \"cc\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc2f4eb4bc735547cfed7c0a4922cbd04a4655978c09b54f1f7b228750664c34\"\ndependencies = [\n \"cfg-if\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"libc\",\n \"redox_syscall 0.5.8\",\n]\n\n[[package]]\nname = \"libtest-mimic\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5297962ef19edda4ce33aaa484386e0a5b3d7f2f4e037cbeee00503ef6b29d33\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap\",\n \"escape8259\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d26c52dbd32dccf2d10cac7725f8eae5296885fb5703b261f7d0a0739ec807ab\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ee93343901ab17bd981295f2cf0026d4ad018c7c31ba84549a4ddbb47a45104\"\n\n[[package]]\nname = \"litrs\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4ce301924b7887e9d637144fdade93f9dfff9b60981d4ac161db09720d39aa5\"\n\n[[package]]\nname = \"lock-analyzer\"\nversion = \"23.0.1\"\ndependencies = [\n \"anyhow\",\n \"ron\",\n \"serde\",\n]\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"loom\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"419e0dc8046cb947daa77eb95ae174acfbddb7673b4151f56d1eed8e93fbfaca\"\ndependencies = [\n \"cfg-if\",\n \"generator\",\n \"scoped-tls\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"mach-dxcompiler-rs\"\nversion = \"0.1.4+2024.11.22-df583a3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e3cd67e8ea2ba061339150970542cf1c60ba44c6d17e31279cbc133a4b018f8\"\n\n[[package]]\nname = \"malloc_buf\"\nversion = \"0.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62bb907fe88d54d8d9ce32a3cceab4218ed2f6b7d35617cafe9adf84e43919cb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fd3f7eed9d3848f8b98834af67102b720745c4ec028fcd0aa0239277e7de374f\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"488016bfae457b036d996092f6cb448677611ce4449e970ceaf42695203f218a\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"metal\"\nversion = \"0.30.0\"\nsource = \"git+https://github.com/gfx-rs/metal-rs.git?rev=ef768ff9d7#ef768ff9d742ae6a0f4e83ddc8031264e7d460c4\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"block\",\n \"core-graphics-types\",\n \"foreign-types\",\n \"log\",\n \"objc\",\n \"paste\",\n]\n\n[[package]]\nname = \"minicov\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f27fe9f1cc3c22e1687f9446c2083c4c5fc7f0bcf1c7a86bdbded14985895b4b\"\ndependencies = [\n \"cc\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8a240ddb74feaf34a79a7add65a741f3167852fba007066dcac1ca548d89c08\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ffbe83022cedc1d264172192511ae958937694cd57ce297164951b8b3568394\"\ndependencies = [\n \"adler2\",\n \"simd-adler32\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2886843bf800fba2e3377cff24abf6379b4c4d5c6681eaf9ea5b0d15090450bd\"\ndependencies = [\n \"libc\",\n \"wasi\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"naga\"\nversion = \"23.0.0\"\ndependencies = [\n \"arbitrary\",\n \"arrayvec\",\n \"bit-set 0.8.0\",\n \"bitflags 2.6.0\",\n \"cfg_aliases 0.2.1\",\n \"codespan-reporting\",\n \"diff\",\n \"env_logger\",\n \"hexf-parse\",\n \"hlsl-snapshots\",\n \"indexmap\",\n \"itertools 0.13.0\",\n \"log\",\n \"petgraph\",\n \"pp-rs\",\n \"ron\",\n \"rspirv\",\n \"rustc-hash\",\n \"serde\",\n \"spirv 0.3.0+sdk-1.3.268.0\",\n \"strum 0.26.3\",\n \"termcolor\",\n \"thiserror 2.0.10\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"naga-cli\"\nversion = \"23.0.0\"\ndependencies = [\n \"anyhow\",\n \"argh\",\n \"bincode\",\n \"codespan-reporting\",\n \"env_logger\",\n \"log\",\n \"naga\",\n]\n\n[[package]]\nname = \"naga-fuzz\"\nversion = \"0.0.0\"\ndependencies = [\n \"arbitrary\",\n \"cfg_aliases 0.2.1\",\n \"libfuzzer-sys\",\n \"naga\",\n]\n\n[[package]]\nname = \"nanorand\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a51313c5820b0b02bd422f4b44776fbf47961755c74ce64afc73bfad10226c3\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"nanoserde\"\nversion = \"0.1.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5de9cf844ab1e25a0353525bd74cb889843a6215fa4a0d156fd446f4857a1b99\"\ndependencies = [\n \"nanoserde-derive\",\n]\n\n[[package]]\nname = \"nanoserde-derive\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e943b2c21337b7e3ec6678500687cdc741b7639ad457f234693352075c082204\"\n\n[[package]]\nname = \"ndk\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2076a31b7010b17a38c01907c45b945e8f11495ee4dd588309718901b1f7a5b7\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"jni-sys\",\n \"log\",\n \"ndk-sys\",\n \"num_enum\",\n \"raw-window-handle 0.5.2\",\n \"raw-window-handle 0.6.2\",\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"ndk-context\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27b02d87554356db9e9a873add8782d4ea6e3e58ea071a9adb9a2e8ddb884a8b\"\n\n[[package]]\nname = \"ndk-sys\"\nversion = \"0.5.0+25.2.9519653\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c196769dd60fd4f363e11d948139556a344e79d451aeb2fa2fd040738ef7691\"\ndependencies = [\n \"jni-sys\",\n]\n\n[[package]]\nname = \"noise\"\nversion = \"0.8.2\"\nsource = \"git+https://github.com/Razaekel/noise-rs.git?rev=c6942d4fb70af26db4441edcf41f90fa115333f2#c6942d4fb70af26db4441edcf41f90fa115333f2\"\ndependencies = [\n \"num-traits\",\n \"rand\",\n \"rand_xorshift\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5e44f723f1133c9deac646763579fdb3ac745e418f2a7af9cd0c431da1f20b9\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n \"rand\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_enum\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e613fc340b2220f734a8595782c551f1250e969d87d3be1ae0579e8d4065179\"\ndependencies = [\n \"num_enum_derive\",\n]\n\n[[package]]\nname = \"num_enum_derive\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af1844ef2428cc3e1cb900be36181049ef3d3193c63e43026cfe202983b27a56\"\ndependencies = [\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"nv-flip\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec3c68ac226790270de1d9d0eb5853832d82a34b62199ab2a1a4756df1a1974\"\ndependencies = [\n \"nv-flip-sys\",\n]\n\n[[package]]\nname = \"nv-flip-sys\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"932e1eed40002ba70fccac6dab3b64be3301607c3ee88bd14989c4d4e1c1c993\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"obj\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"059c95245738cdc7b40078cdd51a23200252a4c0a0a6dd005136152b3f467a4a\"\n\n[[package]]\nname = \"objc\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"915b1b472bc21c53464d6c8461c9d3af805ba1ef837e1cac254428f4a77177b1\"\ndependencies = [\n \"malloc_buf\",\n]\n\n[[package]]\nname = \"objc-sys\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb91bdd390c7ce1a8607f35f3ca7151b65afc0ff5ff3b34fa350f7d7c7e4310\"\n\n[[package]]\nname = \"objc2\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"559c5a40fdd30eb5e344fbceacf7595a81e242529fb4e21cf5f43fb4f11ff98d\"\ndependencies = [\n \"objc-sys\",\n \"objc2-encode\",\n]\n\n[[package]]\nname = \"objc2-encode\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d079845b37af429bfe5dfa76e6d087d788031045b25cfc6fd898486fd9847666\"\n\n[[package]]\nname = \"object\"\nversion = \"0.36.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62948e14d923ea95ea2c7c86c71013138b66525b86bdc08d2dcc262bdb497b87\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"oorandom\"\nversion = \"11.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b410bbe7e14ab526a0e86877eb47c6996a2bd7746f027ba551028c925390e4e9\"\n\n[[package]]\nname = \"orbclient\"\nversion = \"0.3.48\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba0b26cec2e24f08ed8bb31519a9333140a6599b867dac464bb150bdb796fd43\"\ndependencies = [\n \"libredox\",\n]\n\n[[package]]\nname = \"ordered-float\"\nversion = \"4.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7bb71e1b3fa6ca1c61f383464aaf2bb0e2f8e772a1f01d486832464de363b951\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"outref\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f222829ae9293e33a9f5e9f440c6760a3d450a64affe1846486b140db81c1f4\"\n\n[[package]]\nname = \"outref\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4030760ffd992bef45b0ae3f10ce1aba99e33464c90d14dd7c039884963ddc7a\"\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"owned_ttf_parser\"\nversion = \"0.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec719bbf3b2a81c109a4e20b1f129b5566b7dce654bc3872f6a05abf82b2c4\"\ndependencies = [\n \"ttf-parser\",\n]\n\n[[package]]\nname = \"parking\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f38d5652c16fde515bb1ecef450ab0f6a219d619a7274976324d5e377f7dceba\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"backtrace\",\n \"cfg-if\",\n \"libc\",\n \"petgraph\",\n \"redox_syscall 0.5.8\",\n \"smallvec\",\n \"thread-id\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"petgraph\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4c5cc86750666a3ed20bdaf5ca2a0344f9c67674cae0515bec2da16fbaa47db\"\ndependencies = [\n \"fixedbitset\",\n \"indexmap\",\n]\n\n[[package]]\nname = \"pico-args\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5be167a7af36ee22fe3115051bc51f6e6c7054c9348e28deb4f49bd6f705a315\"\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e2ec53ad785f4d35dac0adea7f7dc6f1bb277ad84a680c7afefeae05d1f5916\"\ndependencies = [\n \"pin-project-internal\",\n]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d56a66c0c55993aa927429d0f8a0abfd74f084e4d9c192cffed01e418d83eefb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b3cff922bd51709b605d9ead9aa71031d81447142d828eb4a6eba76fe619f9b\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"953ec861398dccce10c670dfeaf3ec4911ca479e9c02154b3a215178c5f566f2\"\n\n[[package]]\nname = \"player\"\nversion = \"23.0.1\"\ndependencies = [\n \"env_logger\",\n \"log\",\n \"raw-window-handle 0.6.2\",\n \"ron\",\n \"serde\",\n \"wgpu-core\",\n \"wgpu-types\",\n \"winit\",\n]\n\n[[package]]\nname = \"plotters\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aeb6f403d7a4911efb1e33402027fc44f29b5bf6def3effcc22d7bb75f2b747\"\ndependencies = [\n \"num-traits\",\n \"plotters-backend\",\n \"plotters-svg\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"plotters-backend\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df42e13c12958a16b3f7f4386b9ab1f3e7933914ecea48da7139435263a4172a\"\n\n[[package]]\nname = \"plotters-svg\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51bae2ac328883f7acdfea3d66a7c35751187f870bc81f94563733a154d7a670\"\ndependencies = [\n \"plotters-backend\",\n]\n\n[[package]]\nname = \"png\"\nversion = \"0.17.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82151a2fc869e011c153adc57cf2789ccb8d9906ce52c0b39a6b5697749d7526\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"crc32fast\",\n \"fdeflate\",\n \"flate2\",\n \"miniz_oxide 0.8.2\",\n]\n\n[[package]]\nname = \"polling\"\nversion = \"3.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a604568c3202727d1507653cb121dbd627a58684eb09a820fd746bee38b4442f\"\ndependencies = [\n \"cfg-if\",\n \"concurrent-queue\",\n \"hermit-abi\",\n \"pin-project-lite\",\n \"rustix\",\n \"tracing\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"pollster\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f3a9f18d041e6d0e102a0a46750538147e5e8992d3b4873aaafee2520b00ce3\"\n\n[[package]]\nname = \"pp-rs\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb458bb7f6e250e6eb79d5026badc10a3ebb8f9a15d1fff0f13d17c71f4d6dee\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"presser\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8cf8e6a8aa66ce33f63993ffc4ea4271eb5b0530a9002db8455ea6050c77bfa\"\n\n[[package]]\nname = \"prettyplease\"\nversion = \"0.2.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"483f8c21f64f3ea09fe0f30f5d48c3e8eefe5dac9129f0075f76593b4c1da705\"\ndependencies = [\n \"proc-macro2\",\n \"syn\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecf48c7ca261d60b74ab1a7b20da18bede46776b2e55535cb958eb595c5fa7b\"\ndependencies = [\n \"toml_edit\",\n]\n\n[[package]]\nname = \"proc-macro-rules\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07c277e4e643ef00c1233393c673f655e3672cf7eb3ba08a00bdd0ea59139b5f\"\ndependencies = [\n \"proc-macro-rules-macros\",\n \"proc-macro2\",\n \"syn\",\n]\n\n[[package]]\nname = \"proc-macro-rules-macros\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"207fffb0fe655d1d47f6af98cc2793405e85929bdbc420d685554ff07be27ac7\"\ndependencies = [\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d3544b3f2748c54e147655edb5025752e2303145b5aefb3c3ea2c78b973bb0\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"profiling\"\nversion = \"1.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"afbdc74edc00b6f6a218ca6a5364d6226a259d4b8ea1af4a0ea063f27e179f4d\"\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.36.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7649a7b4df05aed9ea7ec6f628c67c9953a43869b8bc50929569b2999d443fe\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n\n[[package]]\nname = \"rand_xorshift\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d25bf25ec5ae4a3f1b92f929810509a2f53d7dca2f50b794ff57e3face536c8f\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"range-alloc\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8a99fddc9f0ba0a85884b8d14e3592853e787d581ca1816c91349b10e4eeab\"\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2ff9a1f06a88b01621b7ae906ef0211290d1c8a168a15542486a8f61c0833b9\"\n\n[[package]]\nname = \"raw-window-handle\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20675572f6f24e9e76ef639bc5552774ed45f1c30e2951e1e99c59888861c539\"\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"567664f262709473930a4bf9e51bf2ebf3348f2e748ccc50dea20646858f8f29\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03a862b389f93e68874fbf580b9de08dd02facb9a788ebadaf4a3fd33cf58834\"\ndependencies = [\n \"bitflags 2.6.0\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.9\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"renderdoc-sys\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19b30a45b0cd0bcca8037f3d0dc3421eaf95327a17cad11964fb8179b4fc4832\"\n\n[[package]]\nname = \"ron\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b91f7eff05f748767f183df4320a63d6936e9c6107d97c9e6bdd9784f4289c94\"\ndependencies = [\n \"base64\",\n \"bitflags 2.6.0\",\n \"serde\",\n \"serde_derive\",\n]\n\n[[package]]\nname = \"rspirv\"\nversion = \"0.11.0+sdk-1.2.198\"\nsource = \"git+https://github.com/gfx-rs/rspirv?rev=b969f175d5663258b4891e44b76c1544da9661ab#b969f175d5663258b4891e44b76c1544da9661ab\"\ndependencies = [\n \"rustc-hash\",\n \"spirv 0.2.0+sdk-1.2.198\",\n]\n\n[[package]]\nname = \"rust-fuzzy-search\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a157657054ffe556d8858504af8a672a054a6e0bd9e8ee531059100c0fa11bb2\"\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a78891ee6bf2340288408954ac787aa063d8e8817e9f53abb37c695c6d834ef6\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7c45b9784283f1b2e7fb61b42047c2fd678ef0960d4f6f1eba131594cc369d4\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scoped-tls\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"sctk-adwaita\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70b31447ca297092c5a9916fc3b955203157b37c19ca8edde4f52e9843e602c7\"\ndependencies = [\n \"ab_glyph\",\n \"log\",\n \"memmap2\",\n \"smithay-client-toolkit\",\n \"tiny-skia\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\ndependencies = [\n \"semver-parser\",\n]\n\n[[package]]\nname = \"semver-parser\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.135\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9\"\ndependencies = [\n \"indexmap\",\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87607cb1398ed59d48732e575a4c28a7a8ebf2454b964fe3f224f2afc07909e1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_v8\"\nversion = \"0.230.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5a783242d2af51d6955cc04bf2b64adb643ab588b61e9573c908a69dabf8c2f\"\ndependencies = [\n \"num-bigint\",\n \"serde\",\n \"smallvec\",\n \"thiserror 1.0.69\",\n \"v8\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a9e9e0b4211b72e7b8b6e85c807d36c212bdb33ea8587f7569562a84df5465b1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"simd-abstraction\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9cadb29c57caadc51ff8346233b5cec1d240b68ce55cf1afc764818791876987\"\ndependencies = [\n \"outref 0.1.0\",\n]\n\n[[package]]\nname = \"simd-adler32\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d66dc143e6b11c1eddc06d5c423cfc97062865baf299914ab64caa38182078fe\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"slotmap\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dbff4acf519f630b3a3ddcfaea6c06b42174d9a44bc70c620e9ed1649d58b82a\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"smithay-client-toolkit\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"922fd3eeab3bd820d76537ce8f582b1cf951eceb5475c28500c7457d9d17f53a\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"calloop\",\n \"calloop-wayland-source\",\n \"cursor-icon\",\n \"libc\",\n \"log\",\n \"memmap2\",\n \"rustix\",\n \"thiserror 1.0.69\",\n \"wayland-backend\",\n \"wayland-client\",\n \"wayland-csd-frame\",\n \"wayland-cursor\",\n \"wayland-protocols\",\n \"wayland-protocols-wlr\",\n \"wayland-scanner\",\n \"xkeysym\",\n]\n\n[[package]]\nname = \"smol_str\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd538fb6910ac1099850255cf94a94df6551fbdd602454387d0adb2d1ca6dead\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c970269d99b64e60ec3bd6ad27270092a5394c4e309314b18ae3fe575695fbe8\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"sourcemap\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"208d40b9e8cad9f93613778ea295ed8f3c2b1824217c6cfc7219d3f6f45b96d4\"\ndependencies = [\n \"base64-simd 0.7.0\",\n \"bitvec\",\n \"data-encoding\",\n \"debugid\",\n \"if_chain\",\n \"rustc-hash\",\n \"rustc_version\",\n \"serde\",\n \"serde_json\",\n \"unicode-id-start\",\n \"url\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"spirv\"\nversion = \"0.2.0+sdk-1.2.198\"\nsource = \"git+https://github.com/gfx-rs/rspirv?rev=b969f175d5663258b4891e44b76c1544da9661ab#b969f175d5663258b4891e44b76c1544da9661ab\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"spirv\"\nversion = \"0.3.0+sdk-1.3.268.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eda41003dc44290527a59b13432d4a0379379fa074b70174882adfbdfd917844\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"serde\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strict-num\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6637bab7722d379c8b41ba849228d680cc12d0a45ba1fa2b48f2a30577a06731\"\n\n[[package]]\nname = \"stringcase\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04028eeb851ed08af6aba5caa29f2d59a13ed168cee4d6bd753aeefcf1d636b0\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.25.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"290d54ea6f91c969195bdbcd7442c8c2a2ba87da8bf60a7ee86a235d4bc1e125\"\ndependencies = [\n \"strum_macros 0.25.3\",\n]\n\n[[package]]\nname = \"strum\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\"\ndependencies = [\n \"strum_macros 0.26.4\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.25.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23dc1fa9ac9c169a78ba62f0b841814b7abae11bdd047b9c58f893439e309ea0\"\ndependencies = [\n \"heck 0.4.1\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46f71c0377baf4ef1cc3e3402ded576dccc315800fbc62dfc7fe04b009773b4a\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"target-triple\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42a4d50cdb458045afc8131fd91b64904da29548bcb63c7236e0844936c13078\"\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6aaf5339b578ea85b50e080feb250a3e8ae8cfcdff9a461c9ec2904bc923f52\"\ndependencies = [\n \"thiserror-impl 1.0.69\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3ac7f54ca534db81081ef1c1e7f6ea8a3ef428d2fc069097c079443d24124d3\"\ndependencies = [\n \"thiserror-impl 2.0.10\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fee6c4efc90059e10f81e6d42c60a18f76588c3d74cb83a0b242a2b6c7504c1\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e9465d30713b56a37ede7185763c3492a91be2f5fa68d958c44e41ab9248beb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"thread-id\"\nversion = \"4.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfe8f25bbdd100db7e1d34acf7fd2dc59c4bf8f7483f505eaa7d4f12f76cc0ea\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tiny-skia\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83d13394d44dae3207b52a326c0c85a8bf87f1541f23b0d143811088497b09ab\"\ndependencies = [\n \"arrayref\",\n \"arrayvec\",\n \"bytemuck\",\n \"cfg-if\",\n \"log\",\n \"tiny-skia-path\",\n]\n\n[[package]]\nname = \"tiny-skia-path\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c9e7fc0c2e86a30b117d0462aa261b72b7a99b7ebd7deb3a14ceda95c5bdc93\"\ndependencies = [\n \"arrayref\",\n \"bytemuck\",\n \"strict-num\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tinytemplate\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"tokio\"\nversion = \"1.43.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d61fa4ffa3de412bfea335c6ecff681de2b609ba3c77ef3e00e521813a9ed9e\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2\",\n \"tokio-macros\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e06d43f1345a3bcd39f6a56dbb7dcab2ba47e68e8ac134855e7e2bdbaf8cab8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ae48d6208a266e853d946088ed816055e556cc6028c5e8e2b84d9fa5dd7c7f5\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"tracy-client\"\nversion = \"0.17.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73202d787346a5418f8222eddb5a00f29ea47caf3c7d38a8f2f69f8455fa7c7e\"\ndependencies = [\n \"loom\",\n \"once_cell\",\n \"tracy-client-sys\",\n]\n\n[[package]]\nname = \"tracy-client-sys\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69fff37da548239c3bf9e64a12193d261e8b22b660991c6fd2df057c168f435f\"\ndependencies = [\n \"cc\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"trybuild\"\nversion = \"1.0.101\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8dcd332a5496c026f1e14b7f3d2b7bd98e509660c04239c58b0ba38a12daded4\"\ndependencies = [\n \"glob\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"target-triple\",\n \"termcolor\",\n \"toml\",\n]\n\n[[package]]\nname = \"ttf-parser\"\nversion = \"0.25.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2df906b07856748fa3f6e0ad0cbaa047052d4a7dd609e231c4f72cee8c36f31\"\n\n[[package]]\nname = \"unic-char-property\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221\"\ndependencies = [\n \"unic-char-range\",\n]\n\n[[package]]\nname = \"unic-char-range\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc\"\n\n[[package]]\nname = \"unic-common\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc\"\n\n[[package]]\nname = \"unic-ucd-ident\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e230a37c0381caa9219d67cf063aa3a375ffed5bf541a452db16e744bdab6987\"\ndependencies = [\n \"unic-char-property\",\n \"unic-char-range\",\n \"unic-ucd-version\",\n]\n\n[[package]]\nname = \"unic-ucd-version\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4\"\ndependencies = [\n \"unic-common\",\n]\n\n[[package]]\nname = \"unicode-id-start\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f322b60f6b9736017344fa0635d64be2f458fbc04eef65f6be22976dd1ffd5b\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6ccf251212114b54433ec949fd6a7841275f9ada20dddd2f29e9ceea4501493\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd6e30e90baa6f72411720665d41d89b9a3d039dc45b8faea1ddd07f617f6af\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc1c04c71510c7f702b52b7c350734c9ff1295c464a03335b00bb84fc54f853\"\n\n[[package]]\nname = \"url\"\nversion = \"2.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"urlpattern\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70acd30e3aa1450bc2eece896ce2ad0d178e9c079493819301573dae3c37ba6d\"\ndependencies = [\n \"regex\",\n \"serde\",\n \"unic-ucd-ident\",\n \"url\",\n]\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8c5f0a0af699448548ad1a2fbf920fb4bee257eae39953ba95cb84891a0446a\"\ndependencies = [\n \"getrandom\",\n \"serde\",\n]\n\n[[package]]\nname = \"v8\"\nversion = \"130.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a511192602f7b435b0a241c1947aa743eb7717f20a9195f4b5e8ed1952e01db1\"\ndependencies = [\n \"bindgen\",\n \"bitflags 2.6.0\",\n \"fslock\",\n \"gzip-header\",\n \"home\",\n \"miniz_oxide 0.7.4\",\n \"once_cell\",\n \"paste\",\n \"which 6.0.3\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b928f33d975fc6ad9f86c8f283853ad26bdd5b10b7f1542aa2fa15e2289105a\"\n\n[[package]]\nname = \"vsimd\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c3082ca00d5a5ef149bb8b555a72ae84c9c59f7250f013ac822ac2e49b19c64\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a474f6281d1d70c17ae7aa6a613c87fce69a127e2624002df63dcb39d6cf6396\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5f89bb38646b4f81674e8f5c3fb81b562be1fd936d84320f3264486418519c79\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.49\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38176d9b44ea84e9184eff0bc34cc167ed044f816accfe5922e54d84cf48eca2\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"once_cell\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2cc6181fd9a7492eef6fef1f33961e3695e4579b9872a6f7c83aee556666d4fe\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30d7a95b763d3c45903ed6c81f156801839e5ee968bb07e534c44df0fcd330c2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"943aab3fdaaa029a6e0271b35ea10b72b943135afe9bffca82384098ad0e06a6\"\n\n[[package]]\nname = \"wasm-bindgen-test\"\nversion = \"0.3.49\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d44563646eb934577f2772656c7ad5e9c90fac78aa8013d776fcdaf24625d\"\ndependencies = [\n \"js-sys\",\n \"minicov\",\n \"scoped-tls\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-bindgen-test-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-test-macro\"\nversion = \"0.3.49\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54171416ce73aa0b9c377b51cc3cb542becee1cd678204812e8392e5b0e4a031\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"wasm_dep_analyzer\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f270206a91783fd90625c8bb0d8fbd459d0b1d1bf209b656f713f01ae7c04b8\"\ndependencies = [\n \"thiserror 1.0.69\",\n]\n\n[[package]]\nname = \"wayland-backend\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"056535ced7a150d45159d3a8dc30f91a2e2d588ca0b23f70e56033622b8016f6\"\ndependencies = [\n \"cc\",\n \"downcast-rs\",\n \"rustix\",\n \"scoped-tls\",\n \"smallvec\",\n \"wayland-sys\",\n]\n\n[[package]]\nname = \"wayland-client\"\nversion = \"0.31.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b66249d3fc69f76fd74c82cc319300faa554e9d865dab1f7cd66cc20db10b280\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"rustix\",\n \"wayland-backend\",\n \"wayland-scanner\",\n]\n\n[[package]]\nname = \"wayland-csd-frame\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"625c5029dbd43d25e6aa9615e88b829a5cad13b2819c4ae129fdbb7c31ab4c7e\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"cursor-icon\",\n \"wayland-backend\",\n]\n\n[[package]]\nname = \"wayland-cursor\"\nversion = \"0.31.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32b08bc3aafdb0035e7fe0fdf17ba0c09c268732707dca4ae098f60cb28c9e4c\"\ndependencies = [\n \"rustix\",\n \"wayland-client\",\n \"xcursor\",\n]\n\n[[package]]\nname = \"wayland-protocols\"\nversion = \"0.31.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f81f365b8b4a97f422ac0e8737c438024b5951734506b0e1d775c73030561f4\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"wayland-backend\",\n \"wayland-client\",\n \"wayland-scanner\",\n]\n\n[[package]]\nname = \"wayland-protocols-plasma\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23803551115ff9ea9bce586860c5c5a971e360825a0309264102a9495a5ff479\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"wayland-backend\",\n \"wayland-client\",\n \"wayland-protocols\",\n \"wayland-scanner\",\n]\n\n[[package]]\nname = \"wayland-protocols-wlr\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad1f61b76b6c2d8742e10f9ba5c3737f6530b4c243132c2a2ccc8aa96fe25cd6\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"wayland-backend\",\n \"wayland-client\",\n \"wayland-protocols\",\n \"wayland-scanner\",\n]\n\n[[package]]\nname = \"wayland-scanner\"\nversion = \"0.31.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597f2001b2e5fc1121e3d5b9791d3e78f05ba6bfa4641053846248e3a13661c3\"\ndependencies = [\n \"proc-macro2\",\n \"quick-xml\",\n \"quote\",\n]\n\n[[package]]\nname = \"wayland-sys\"\nversion = \"0.31.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"efa8ac0d8e8ed3e3b5c9fc92c7881406a268e11555abe36493efabe649a29e09\"\ndependencies = [\n \"dlib\",\n \"log\",\n \"once_cell\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.76\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04dd7223427d52553d3702c004d3b2fe07c148165faa56313cb00211e31c12bc\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"web-time\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa30049b1c872b72c89866d458eae9f20380ab280ffd1b1e18df2d3e2d98cfe0\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"wgpu\"\nversion = \"23.0.1\"\ndependencies = [\n \"arrayvec\",\n \"bitflags 2.6.0\",\n \"cfg_aliases 0.2.1\",\n \"document-features\",\n \"js-sys\",\n \"log\",\n \"naga\",\n \"parking_lot\",\n \"profiling\",\n \"raw-window-handle 0.6.2\",\n \"serde\",\n \"smallvec\",\n \"static_assertions\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"web-sys\",\n \"wgpu-core\",\n \"wgpu-hal\",\n \"wgpu-types\",\n]\n\n[[package]]\nname = \"wgpu-benchmark\"\nversion = \"23.0.1\"\ndependencies = [\n \"bincode\",\n \"bytemuck\",\n \"criterion\",\n \"naga\",\n \"nanorand\",\n \"pollster\",\n \"profiling\",\n \"rayon\",\n \"tracy-client\",\n \"wgpu\",\n]\n\n[[package]]\nname = \"wgpu-core\"\nversion = \"23.0.1\"\ndependencies = [\n \"arrayvec\",\n \"bit-vec 0.8.0\",\n \"bitflags 2.6.0\",\n \"bytemuck\",\n \"cfg_aliases 0.2.1\",\n \"document-features\",\n \"indexmap\",\n \"log\",\n \"naga\",\n \"once_cell\",\n \"parking_lot\",\n \"profiling\",\n \"raw-window-handle 0.6.2\",\n \"ron\",\n \"rustc-hash\",\n \"serde\",\n \"smallvec\",\n \"thiserror 2.0.10\",\n \"wgpu-hal\",\n \"wgpu-types\",\n]\n\n[[package]]\nname = \"wgpu-examples\"\nversion = \"23.0.1\"\ndependencies = [\n \"bytemuck\",\n \"cfg-if\",\n \"console_error_panic_hook\",\n \"console_log\",\n \"encase\",\n \"env_logger\",\n \"fern\",\n \"flume\",\n \"getrandom\",\n \"glam\",\n \"ktx2\",\n \"log\",\n \"nanorand\",\n \"noise\",\n \"obj\",\n \"png\",\n \"pollster\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-bindgen-test\",\n \"web-sys\",\n \"web-time\",\n \"wgpu\",\n \"wgpu-test\",\n \"winit\",\n]\n\n[[package]]\nname = \"wgpu-hal\"\nversion = \"23.0.1\"\ndependencies = [\n \"android_system_properties\",\n \"arrayvec\",\n \"ash\",\n \"bit-set 0.8.0\",\n \"bitflags 2.6.0\",\n \"block\",\n \"bytemuck\",\n \"cfg-if\",\n \"cfg_aliases 0.2.1\",\n \"core-graphics-types\",\n \"env_logger\",\n \"glam\",\n \"glow\",\n \"glutin\",\n \"glutin-winit\",\n \"glutin_wgl_sys 0.6.0\",\n \"gpu-alloc\",\n \"gpu-allocator\",\n \"gpu-descriptor\",\n \"js-sys\",\n \"khronos-egl\",\n \"libc\",\n \"libloading\",\n \"log\",\n \"mach-dxcompiler-rs\",\n \"metal\",\n \"naga\",\n \"ndk-sys\",\n \"objc\",\n \"once_cell\",\n \"ordered-float\",\n \"parking_lot\",\n \"profiling\",\n \"range-alloc\",\n \"raw-window-handle 0.5.2\",\n \"raw-window-handle 0.6.2\",\n \"renderdoc-sys\",\n \"rustc-hash\",\n \"smallvec\",\n \"thiserror 2.0.10\",\n \"wasm-bindgen\",\n \"web-sys\",\n \"wgpu-types\",\n \"windows\",\n \"windows-core\",\n \"winit\",\n]\n\n[[package]]\nname = \"wgpu-info\"\nversion = \"23.0.1\"\ndependencies = [\n \"anyhow\",\n \"bitflags 2.6.0\",\n \"env_logger\",\n \"pico-args\",\n \"serde\",\n \"serde_json\",\n \"wgpu\",\n]\n\n[[package]]\nname = \"wgpu-macros\"\nversion = \"23.0.1\"\ndependencies = [\n \"heck 0.5.0\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"wgpu-test\"\nversion = \"23.0.1\"\ndependencies = [\n \"anyhow\",\n \"arrayvec\",\n \"bitflags 2.6.0\",\n \"bytemuck\",\n \"cfg-if\",\n \"console_log\",\n \"ctor\",\n \"env_logger\",\n \"futures-lite\",\n \"glam\",\n \"image\",\n \"itertools 0.13.0\",\n \"js-sys\",\n \"libtest-mimic\",\n \"log\",\n \"nv-flip\",\n \"parking_lot\",\n \"png\",\n \"pollster\",\n \"profiling\",\n \"serde\",\n \"serde_json\",\n \"strum 0.26.3\",\n \"trybuild\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-bindgen-test\",\n \"web-sys\",\n \"wgpu\",\n \"wgpu-macros\",\n \"wgpu-types\",\n]\n\n[[package]]\nname = \"wgpu-types\"\nversion = \"23.0.0\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"js-sys\",\n \"serde\",\n \"serde_json\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\n \"either\",\n \"home\",\n \"once_cell\",\n \"rustix\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"6.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4ee928febd44d98f2f459a4a79bd4d928591333a494a10a868418ac1b39cf1f\"\ndependencies = [\n \"either\",\n \"home\",\n \"rustix\",\n \"winsafe\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd04d41d93c4992d421894c18c8b43496aa748dd4c081bac0dc93eb0489272b6\"\ndependencies = [\n \"windows-core\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba6d44ec8c2591c134257ce647b7ea6b20335bf6379a27dac5f1641fcf59f99\"\ndependencies = [\n \"windows-implement\",\n \"windows-interface\",\n \"windows-result\",\n \"windows-strings\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-implement\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bbd5b46c938e506ecbce286b6628a02171d56153ba733b6c741fc627ec9579b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"windows-interface\"\nversion = \"0.58.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"053c4c462dc91d3b1504c6fe5a726dd15e216ba718e84a0e46a88fbe5ded3515\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"windows-result\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d1043d8214f791817bab27572aaa8af63732e11bf84aa21a45a78d6c317ae0e\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-strings\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd9b125c486025df0eabcb585e62173c6c9eddcec5d117d3b6e8c30e2ee4d10\"\ndependencies = [\n \"windows-result\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winit\"\nversion = \"0.29.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d59ad965a635657faf09c8f062badd885748428933dad8e8bdd64064d92e5ca\"\ndependencies = [\n \"ahash\",\n \"android-activity\",\n \"atomic-waker\",\n \"bitflags 2.6.0\",\n \"bytemuck\",\n \"calloop\",\n \"cfg_aliases 0.1.1\",\n \"core-foundation\",\n \"core-graphics\",\n \"cursor-icon\",\n \"icrate\",\n \"js-sys\",\n \"libc\",\n \"log\",\n \"memmap2\",\n \"ndk\",\n \"ndk-sys\",\n \"objc2\",\n \"once_cell\",\n \"orbclient\",\n \"percent-encoding\",\n \"raw-window-handle 0.5.2\",\n \"raw-window-handle 0.6.2\",\n \"redox_syscall 0.3.5\",\n \"rustix\",\n \"sctk-adwaita\",\n \"smithay-client-toolkit\",\n \"smol_str\",\n \"unicode-segmentation\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wayland-backend\",\n \"wayland-client\",\n \"wayland-protocols\",\n \"wayland-protocols-plasma\",\n \"web-sys\",\n \"web-time\",\n \"windows-sys 0.48.0\",\n \"x11-dl\",\n \"x11rb\",\n \"xkbcommon-dl\",\n]\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39281189af81c07ec09db316b302a3e67bf9bd7cbf6c820b50e35fee9c2fa980\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winsafe\"\nversion = \"0.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d135d17ab770252ad95e9a872d365cf3090e3be864a34ab46f48555993efc904\"\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"x11-dl\"\nversion = \"2.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38735924fedd5314a6e548792904ed8c6de6636285cb9fec04d5b1db85c1516f\"\ndependencies = [\n \"libc\",\n \"once_cell\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"x11rb\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d91ffca73ee7f68ce055750bf9f6eca0780b8c85eff9bc046a3b0da41755e12\"\ndependencies = [\n \"as-raw-xcb-connection\",\n \"gethostname\",\n \"libc\",\n \"libloading\",\n \"once_cell\",\n \"rustix\",\n \"x11rb-protocol\",\n]\n\n[[package]]\nname = \"x11rb-protocol\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec107c4503ea0b4a98ef47356329af139c0a4f7750e621cf2973cd3385ebcb3d\"\n\n[[package]]\nname = \"xcursor\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ef33da6b1660b4ddbfb3aef0ade110c8b8a781a3b6382fa5f2b5b040fd55f61\"\n\n[[package]]\nname = \"xkbcommon-dl\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d039de8032a9a8856a6be89cea3e5d12fdd82306ab7c94d74e6deab2460651c5\"\ndependencies = [\n \"bitflags 2.6.0\",\n \"dlib\",\n \"log\",\n \"once_cell\",\n \"xkeysym\",\n]\n\n[[package]]\nname = \"xkeysym\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9cc00251562a284751c9973bace760d86c0276c471b4be569fe6b068ee97a56\"\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5b940ebc25896e71dd073bad2dbaa2abfe97b0a391415e22ad1326d9c54e3c4\"\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"120e6aef9aa629e3d4f52dc8cc43a015c7724194c97dfaf45180d2daf2b77f40\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2380878cad4ac9aac1e2435f3eb4020e8374b5f13c296cb75b4620ff8e229154\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b9b4fd18abc82b8136838da5d50bae7bdea537c574d8dc1a34ed098d6c166f0\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa4f8080344d4671fb4e831a13ad1e68092748387dfc4f55e356242fae12ce3e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cff3ee08c995dee1859d998dea82f7374f2826091dd9cd47def953cae446cd2e\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"595eed982f7d355beb85837f651fa22e90b3c044842dc7f2c2842c086f295808\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.2275390625,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"cts_runner\",\n    \"deno_webgpu\",\n\n    # default members\n    \"benches\",\n    \"examples\",\n    \"lock-analyzer\",\n    \"naga-cli\",\n    \"naga\",\n    \"naga/fuzz\",\n    \"naga/hlsl-snapshots\",\n    \"player\",\n    \"tests\",\n    \"wgpu-core\",\n    \"wgpu-hal\",\n    \"wgpu-info\",\n    \"wgpu-macros\",\n    \"wgpu-types\",\n    \"wgpu\",\n]\nexclude = []\ndefault-members = [\n    \"benches\",\n    \"examples\",\n    \"lock-analyzer\",\n    \"naga-cli\",\n    \"naga\",\n    \"naga/fuzz\",\n    \"naga/hlsl-snapshots\",\n    \"player\",\n    \"tests\",\n    \"wgpu-core\",\n    \"wgpu-hal\",\n    \"wgpu-info\",\n    \"wgpu-macros\",\n    \"wgpu-types\",\n    \"wgpu\",\n]\n\n[workspace.lints.clippy]\nmanual_c_str_literals = \"allow\"\nref_as_ptr = \"warn\"\n\n[workspace.package]\nedition = \"2021\"\nrust-version = \"1.83\"\nkeywords = [\"graphics\"]\nlicense = \"MIT OR Apache-2.0\"\nhomepage = \"https://wgpu.rs/\"\nrepository = \"https://github.com/gfx-rs/wgpu\"\nversion = \"23.0.1\"\nauthors = [\"gfx-rs developers\"]\n\n[workspace.dependencies.wgc]\npackage = \"wgpu-core\"\npath = \"./wgpu-core\"\nversion = \"23.0.1\"\n\n[workspace.dependencies.wgt]\npackage = \"wgpu-types\"\npath = \"./wgpu-types\"\nversion = \"23.0.0\"\n\n[workspace.dependencies.hal]\npackage = \"wgpu-hal\"\npath = \"./wgpu-hal\"\nversion = \"23.0.1\"\n\n[workspace.dependencies.naga]\npath = \"./naga\"\nversion = \"23.0.0\"\n\n[workspace.dependencies]\nanyhow = \"1.0.95\"\nargh = \"0.1.13\"\narrayvec = \"0.7\"\nbincode = \"1\"\nbit-vec = \"0.8\"\nbitflags = \"2.6\"\nbytemuck = { version = \"1.21\" }\ncfg_aliases = \"0.2.1\"\ncfg-if = \"1\"\ncriterion = \"0.5\"\ncodespan-reporting = \"0.11\"\nctor = \"0.2\"\ndocument-features = \"0.2.10\"\nencase = \"0.10.0\"\nenv_logger = \"0.11\"\nfern = \"0.7\"\nflume = \"0.11\"\nfutures-lite = \"2\"\ngetrandom = \"0.2\"\nglam = \"0.29\"\nheck = \"0.5.0\"\nimage = { version = \"0.24\", default-features = false, features = [\"png\"] }\nindexmap = \"2\"\nitertools = { version = \"0.13.0\" }\nktx2 = \"0.3\"\nlibc = \"0.2\"\nlibloading = \"0.8\"\nlibtest-mimic = \"0.8.1\"\nlog = \"0.4\"\nnanorand = { version = \"0.7\", default-features = false, features = [\"wyrand\"] }\n# https://github.com/Razaekel/noise-rs/issues/335 (Updated dependencies)\nnoise = { version = \"0.8\", git = \"https://github.com/Razaekel/noise-rs.git\", rev = \"c6942d4fb70af26db4441edcf41f90fa115333f2\" }\nnv-flip = \"0.1\"\nobj = \"0.10\"\nonce_cell = \"1.20.2\"\n# Firefox has 3.4.0 vendored, so we allow that version in our dependencies\nordered-float = \">=3,<=4.6\"\nparking_lot = \"0.12.1\"\npico-args = { version = \"0.5.0\", features = [\n    \"eq-separator\",\n    \"short-space-opt\",\n    \"combined-flags\",\n] }\npng = \"0.17.16\"\npollster = \"0.4\"\nprofiling = { version = \"1\", default-features = false }\nraw-window-handle = \"0.6\"\nrayon = \"1\"\nrenderdoc-sys = \"1.1.0\"\nron = \"0.8\"\n# rustc-hash 2.0 is a completely different hasher with different performance characteristics\nserde_json = \"1.0.134\"\nrustc-hash = \"1\"\nserde = { version = \"1\", default-features = false }\nsmallvec = \"1\"\nstatic_assertions = \"1.1.0\"\nstrum = { version = \"0.26.0\", features = [\"derive\"] }\ntrybuild = \"1\"\ntracy-client = \"0.17\"\nthiserror = \"2\"\nwgpu = { version = \"23.0.1\", path = \"./wgpu\", default-features = false }\nwgpu-core = { version = \"23.0.1\", path = \"./wgpu-core\" }\nwgpu-macros = { version = \"23.0.0\", path = \"./wgpu-macros\" }\nwgpu-test = { version = \"23.0.0\", path = \"./tests\" }\nwgpu-types = { version = \"23.0.0\", path = \"./wgpu-types\" }\nwinit = { version = \"0.29\", features = [\"android-native-activity\"] }\n\n# Metal dependencies\nmetal = { version = \"0.30.0\", git = \"https://github.com/gfx-rs/metal-rs.git\", rev = \"ef768ff9d7\" }\nblock = \"0.1\"\ncore-graphics-types = \"0.1\"\nobjc = \"0.2.5\"\n\n# Vulkan dependencies\nandroid_system_properties = \"0.1.1\"\nash = \"0.38.0\"\ngpu-alloc = \"0.6\"\ngpu-descriptor = \"0.3\"\n\n# DX dependencies\nbit-set = \"0.8\"\ngpu-allocator = { version = \"0.27\", default-features = false }\nrange-alloc = \"0.1\"\nmach-dxcompiler-rs = { version = \"0.1.4\", default-features = false }\nwindows-core = { version = \"0.58\", default-features = false }\n\n# Gles dependencies\nkhronos-egl = \"6\"\nglow = \"0.16\"\nglutin = { version = \"0.31\", default-features = false }\nglutin-winit = { version = \"0.4\", default-features = false }\nglutin_wgl_sys = \"0.6\"\n\n# DX and GLES dependencies\nwindows = { version = \"0.58\", default-features = false }\n\n# wasm32 dependencies\nconsole_error_panic_hook = \"0.1.7\"\nconsole_log = \"1\"\njs-sys = { version = \"0.3.70\", default-features = false }\nwasm-bindgen = \"0.2.97\"\nwasm-bindgen-futures = \"0.4.45\"\nwasm-bindgen-test = \"0.3\"\nweb-sys = { version = \"0.3.74\", default-features = false }\nweb-time = \"0.2.4\"\n\n# deno dependencies\ndeno_console = \"0.179.0\"\ndeno_core = \"0.321.0\"\ndeno_url = \"0.179.0\"\ndeno_web = \"0.210.0\"\ndeno_webidl = \"0.179.0\"\ndeno_webgpu = { version = \"0.146.0\", path = \"./deno_webgpu\" }\ntokio = \"1.41.1\"\ntermcolor = \"1.4.1\"\n\n# android dependencies\nndk-sys = \"0.5.0\"\n\n[patch.\"https://github.com/gfx-rs/naga\"]\n\n[patch.\"https://github.com/zakarumych/gpu-descriptor\"]\n#gpu-descriptor = { path = \"../gpu-descriptor/gpu-descriptor\" }\n\n[patch.\"https://github.com/zakarumych/gpu-alloc\"]\n#gpu-alloc = { path = \"../gpu-alloc/gpu-alloc\" }\n\n[patch.crates-io]\n#glow = { path = \"../glow\" }\n#web-sys = { path = \"../wasm-bindgen/crates/web-sys\" }\n#js-sys = { path = \"../wasm-bindgen/crates/js-sys\" }\n#wasm-bindgen = { path = \"../wasm-bindgen\" }\n\n[profile.release]\nlto = \"thin\"\ndebug = true\n\n# Speed up image comparison even in debug builds\n[profile.dev.package.\"nv-flip-sys\"]\nopt-level = 3\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 2.3447265625,
          "content": "The **WGPU project** is a set of open-source libraries that _enables application\nauthors to write portable and performant graphics programs_. It was originally\nconceived to provide an implementation of WebGPU for Firefox as the standard\nevolved, and settled into something that could be shipped on all web browsers.\nWGPU has also enjoyed much contribution and use from other projects that require\ngraphics programming. We expect that these sorts of users will continue for the\nlifetime of project, and we embrace these contributors' needs and effort as the\nlifeblood of WGPU.\n\n## Mission\n\nThe WGPU community seeks to realize the following directives through the\nproject: it…\n\n1. …provides libraries for the WebGPU API that…\n    1. …are correct and fully conformant.\n    1. …are portable across all major platforms, that is, …\n        1. …`wgpu-core` enables JavaScript platforms to implement their own\n           proper WebGPU API.\n        1. …`wgpu` provides a WebGPU-style API library for native applications,\n           which allows shipping to all major platforms, including WebGPU's\n           JavaScript API.\n    1. …are performant enough to enable demanding applications.\n1. …serves as a platform of experimentation for:\n    1. …WebGPU standards development.\n    1. …native application authors that wish to experiment with features that\n       are not (yet?) standard.\n\n## Decision-making\n\nThe WGPU community's decision-making is influenced by the following\ngroups:\n\n* Community leadership:\n    * Connor Fitzgerald (@cwfitzgerald)\n    * Joshua Groves (@grovesNL)\n    * Andreas Reich (@wumpf)\n* Firefox's WebGPU team (@jimblandy, @nical, @teoxoy, @ErichDonGubler, and\n  others)\n* Deno's WebGPU contributors (@crowlKats)\n* Other users that ship applications based on WGPU\n\nIt is no coincidence that these groups correspond to the historically most\nactive and consistent contributors. In general, WGPU's community structure is\nmeritocratic: social influence is granted proportionate to groups' contribution\nto and stake in WGPU's mission.\n\nThese decision-making groups meet together regularly to discuss issues of\nimportance to the community, with a focus on WGPU's [mission](#Mission).\n\n---\n\nNOTE: The above is a snapshot of a perpetually changing state of affairs in the\nWGPU community. It is not a binding contract between users and decision-makers\nof the WGPU project.\n"
        },
        {
          "name": "LICENSE.APACHE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE.MIT",
          "type": "blob",
          "size": 1.052734375,
          "content": "MIT License\n\nCopyright (c) 2021 The gfx-rs developers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.62890625,
          "content": "<img align=\"right\" width=\"25%\" src=\"logo.png\">\n\n# wgpu\n\n[![Matrix Space](https://img.shields.io/static/v1?label=Space&message=%23Wgpu&color=blue&logo=matrix)](https://matrix.to/#/#Wgpu:matrix.org)\n[![Dev Matrix  ](https://img.shields.io/static/v1?label=devs&message=%23wgpu&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu:matrix.org)\n[![User Matrix ](https://img.shields.io/static/v1?label=users&message=%23wgpu-users&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu-users:matrix.org)\n[![Build Status](https://github.com/gfx-rs/wgpu/workflows/CI/badge.svg)](https://github.com/gfx-rs/wgpu/actions)\n[![codecov.io](https://codecov.io/gh/gfx-rs/wgpu/branch/trunk/graph/badge.svg?token=84qJTesmeS)](https://codecov.io/gh/gfx-rs/wgpu)\n\n`wgpu` is a cross-platform, safe, pure-rust graphics API. It runs natively on Vulkan, Metal, D3D12, and OpenGL; and on top of WebGL2 and WebGPU on wasm.\n\nThe API is based on the [WebGPU standard](https://gpuweb.github.io/gpuweb/). It serves as the core of the WebGPU integration in Firefox, Servo, and Deno.\n\n## Repo Overview\n\nThe repository hosts the following libraries:\n\n- [![Crates.io](https://img.shields.io/crates/v/wgpu.svg?label=wgpu)](https://crates.io/crates/wgpu) [![docs.rs](https://docs.rs/wgpu/badge.svg)](https://docs.rs/wgpu/) - User facing Rust API.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-core.svg?label=wgpu-core)](https://crates.io/crates/wgpu-core) [![docs.rs](https://docs.rs/wgpu-core/badge.svg)](https://docs.rs/wgpu-core/) - Internal safe implementation.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-hal.svg?label=wgpu-hal)](https://crates.io/crates/wgpu-hal) [![docs.rs](https://docs.rs/wgpu-hal/badge.svg)](https://docs.rs/wgpu-hal/) - Internal unsafe GPU API abstraction layer.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-types.svg?label=wgpu-types)](https://crates.io/crates/wgpu-types) [![docs.rs](https://docs.rs/wgpu-types/badge.svg)](https://docs.rs/wgpu-types/) - Rust types shared between all crates.\n- [![Crates.io](https://img.shields.io/crates/v/naga.svg?label=naga)](https://crates.io/crates/naga) [![docs.rs](https://docs.rs/naga/badge.svg)](https://docs.rs/naga/) - Stand-alone shader translation library.\n- [![Crates.io](https://img.shields.io/crates/v/deno_webgpu.svg?label=deno_webgpu)](https://crates.io/crates/deno_webgpu) - WebGPU implementation for the Deno JavaScript/TypeScript runtime\n\nThe following binaries:\n\n- [![Crates.io](https://img.shields.io/crates/v/naga-cli.svg?label=naga-cli)](https://crates.io/crates/naga-cli) - Tool for translating shaders between different languages using `naga`.\n- [![Crates.io](https://img.shields.io/crates/v/wgpu-info.svg?label=wgpu-info)](https://crates.io/crates/wgpu-info) - Tool for getting information on GPUs in the system.\n- `cts_runner` - WebGPU Conformance Test Suite runner using `deno_webgpu`.\n- `player` - standalone application for replaying the API traces.\n\nFor an overview of all the components in the gfx-rs ecosystem, see [the big picture](./etc/big-picture.png).\n\n## Getting Started\n\n### Play with our Examples\n\nGo to [https://wgpu.rs/examples/] to play with our examples in your browser. Requires a browser supporting WebGPU for the WebGPU examples.\n\n### Rust\n\nRust examples can be found at [wgpu/examples](examples). You can run the examples on native with `cargo run --bin wgpu-examples <example>`. See the [list of examples](examples).\n\nTo run the examples in a browser, run `cargo xtask run-wasm`.\nThen open `http://localhost:8000` in your browser, and you can choose an example to run.\nNaturally, in order to display any of the WebGPU based examples, you need to make sure your browser supports it.\n\nIf you are looking for a wgpu tutorial, look at the following:\n\n- https://sotrh.github.io/learn-wgpu/\n\n### C/C++\n\nTo use wgpu in C/C++, you need [wgpu-native](https://github.com/gfx-rs/wgpu-native).\n\nIf you are looking for a wgpu C++ tutorial, look at the following:\n\n- https://eliemichel.github.io/LearnWebGPU/\n\n### Others\n\nIf you want to use wgpu in other languages, there are many bindings to wgpu-native from languages such as Python, D, Julia, Kotlin, and more. See [the list](https://github.com/gfx-rs/wgpu-native#bindings).\n\n## Community\n\nWe have the Matrix space [![Matrix Space](https://img.shields.io/static/v1?label=Space&message=%23Wgpu&color=blue&logo=matrix)](https://matrix.to/#/#Wgpu:matrix.org) with a few different rooms that form the wgpu community:\n\n- [![Wgpu Matrix](https://img.shields.io/static/v1?label=wgpu-devs&message=%23wgpu&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu:matrix.org) - discussion of the wgpu's development.\n- [![Naga Matrix](https://img.shields.io/static/v1?label=naga-devs&message=%23naga&color=blueviolet&logo=matrix)](https://matrix.to/#/#naga:matrix.org) - discussion of the naga's development.\n- [![User Matrix](https://img.shields.io/static/v1?label=wgpu-users&message=%23wgpu-users&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu-users:matrix.org) - discussion of using the library and the surrounding ecosystem.\n- [![Random Matrix](https://img.shields.io/static/v1?label=random&message=%23wgpu-random&color=blueviolet&logo=matrix)](https://matrix.to/#/#wgpu-random:matrix.org) - discussion of everything else.\n\n## Wiki\n\nWe have a [wiki](https://github.com/gfx-rs/wgpu/wiki) that serves as a knowledge base.\n\n## Extension Specifications\n\nWhile the core of wgpu is based on the WebGPU standard, we also support extensions that allow for features that the standard does not have yet.\nFor high-level documentation on how to use these extensions, see the individual specifications:\n\n🧪EXPERIMENTAL🧪 APIs are subject to change and may allow undefined behavior if used incorrectly.\n\n- 🧪EXPERIMENTAL🧪 [Ray Tracing](./etc/specs/ray_tracing.md).\n\n## Supported Platforms\n\n| API    | Windows            | Linux/Android      | macOS/iOS          | Web (wasm)         |\n| ------ | ------------------ | ------------------ | ------------------ | ------------------ |\n| Vulkan |         ✅         |         ✅         |         🌋         |                    |\n| Metal  |                    |                    |         ✅         |                    |\n| DX12   |         ✅         |                    |                    |                    |\n| OpenGL |    🆗 (GL 3.3+)    |  🆗 (GL ES 3.0+)   |         📐         |    🆗 (WebGL2)     |\n| WebGPU |                    |                    |                    |         ✅         |\n\n✅ = First Class Support  \n🆗 = Downlevel/Best Effort Support  \n📐 = Requires the [ANGLE](#angle) translation layer (GL ES 3.0 only)  \n🌋 = Requires the [MoltenVK](https://vulkan.lunarg.com/sdk/home#mac) translation layer  \n🛠️ = Unsupported, though open to contributions\n\n### Shader Support\n\nwgpu supports shaders in [WGSL](https://gpuweb.github.io/gpuweb/wgsl/), SPIR-V, and GLSL.\nBoth [HLSL](https://github.com/Microsoft/DirectXShaderCompiler) and [GLSL](https://github.com/KhronosGroup/glslang)\nhave compilers to target SPIR-V. All of these shader languages can be used with any backend as we handle all of the conversions. Additionally, support for these shader inputs is not going away.\n\nWhile WebGPU does not support any shading language other than WGSL, we will automatically convert your\nnon-WGSL shaders if you're running on WebGPU.\n\nWGSL is always supported by default, but GLSL and SPIR-V need features enabled to compile in support.\n\nNote that the WGSL specification is still under development,\nso the [draft specification][wgsl spec] does not exactly describe what `wgpu` supports.\nSee [below](#tracking-the-webgpu-and-wgsl-draft-specifications) for details.\n\nTo enable SPIR-V shaders, enable the `spirv` feature of wgpu.\nTo enable GLSL shaders, enable the `glsl` feature of wgpu.\n\n### Angle\n\n[Angle](http://angleproject.org) is a translation layer from GLES to other backends developed by Google.\nWe support running our GLES3 backend over it in order to reach platforms DX11 support, which aren't accessible otherwise.\nIn order to run with Angle, the \"angle\" feature has to be enabled, and Angle libraries placed in a location visible to the application.\nThese binaries can be downloaded from [gfbuild-angle](https://github.com/DileSoft/gfbuild-angle) artifacts, [manual compilation](https://github.com/google/angle/blob/main/doc/DevSetup.md) may be required on Macs with Apple silicon.\n\nOn Windows, you generally need to copy them into the working directory, in the same directory as the executable, or somewhere in your path.\nOn Linux, you can point to them using `LD_LIBRARY_PATH` environment.\n\n### MSRV policy\n\nDue to complex dependants, we have two MSRV policies:\n\n- `naga`, `wgpu-core`, `wgpu-hal`, and `wgpu-types`'s MSRV is **1.76**, but may be lower than the rest of the workspace in the future.\n- The rest of the workspace has an MSRV of **1.83** as well right now, but may be higher than above listed crates.\n\nIt is enforced on CI (in \"/.github/workflows/ci.yml\") with the `CORE_MSRV` and `REPO_MSRV` variables.\nThis version can only be upgraded in breaking releases, though we release a breaking version every three months.\n\nThe `naga`, `wgpu-core`, `wgpu-hal`, and `wgpu-types` crates should never\nrequire an MSRV ahead of Firefox's MSRV for nightly builds, as\ndetermined by the value of `MINIMUM_RUST_VERSION` in\n[`python/mozboot/mozboot/util.py`][util].\n\n[util]: https://searchfox.org/mozilla-central/source/python/mozboot/mozboot/util.py\n\n## Environment Variables\n\nAll testing and example infrastructure share the same set of environment variables that determine which Backend/GPU it will run on.\n\n- `WGPU_ADAPTER_NAME` with a substring of the name of the adapter you want to use (ex. `1080` will match `NVIDIA GeForce 1080ti`).\n- `WGPU_BACKEND` with a comma-separated list of the backends you want to use (`vulkan`, `metal`, `dx12`, or `gl`).\n- `WGPU_POWER_PREF` with the power preference to choose when a specific adapter name isn't specified (`high`, `low` or `none`)\n- `WGPU_DX12_COMPILER` with the DX12 shader compiler you wish to use (`dxc`, `static-dxc`, or `fxc`). Note that `dxc` requires `dxil.dll` and `dxcompiler.dll` to be in the working directory, and `static-dxc` requires the `static-dxc` crate feature to be enabled. Otherwise, it will fall back to `fxc`.\n- `WGPU_GLES_MINOR_VERSION` with the minor OpenGL ES 3 version number to request (`0`, `1`, `2` or `automatic`).\n- `WGPU_ALLOW_UNDERLYING_NONCOMPLIANT_ADAPTER` with a boolean whether non-compliant drivers are enumerated (`0` for false, `1` for true).\n\nWhen running the CTS, use the variables `DENO_WEBGPU_ADAPTER_NAME`, `DENO_WEBGPU_BACKEND`, `DENO_WEBGPU_POWER_PREFERENCE`.\n\n## Testing\n\nWe have multiple methods of testing, each of which tests different qualities about wgpu. We automatically run our tests on CI. The current state of CI testing:\n\n| Platform/Backend | Tests              | Notes                 |\n| ---------------- | ------------------ | --------------------- |\n| Windows/DX12     | :heavy_check_mark: | using WARP            |\n| Windows/OpenGL   | :heavy_check_mark: | using llvmpipe        |\n| MacOS/Metal      | :heavy_check_mark: | using hardware runner |\n| Linux/Vulkan     | :heavy_check_mark: | using lavapipe        |\n| Linux/OpenGL ES  | :heavy_check_mark: | using llvmpipe        |\n| Chrome/WebGL     | :heavy_check_mark: | using swiftshader     |\n| Chrome/WebGPU    | :x:                | not set up            |\n\n### Core Test Infrastructure\n\nWe use a tool called [`cargo nextest`](https://github.com/nextest-rs/nextest) to run our tests.\nTo install it, run `cargo install cargo-nextest`.\n\nTo run the test suite:\n\n```\ncargo xtask test\n```\n\nTo run the test suite on WebGL (currently incomplete):\n\n```\ncd wgpu\nwasm-pack test --headless --chrome --no-default-features --features webgl --workspace\n```\n\nThis will automatically run the tests using a packaged browser. Remove `--headless` to run the tests with whatever browser you wish at `http://localhost:8000`.\n\nIf you are a user and want a way to help contribute to wgpu, we always need more help writing test cases.\n\n### WebGPU Conformance Test Suite\n\nWebGPU includes a Conformance Test Suite to validate that implementations are working correctly. We can run this CTS against wgpu.\n\nTo run the CTS, first, you need to check it out:\n\n```\ngit clone https://github.com/gpuweb/cts.git\ncd cts\n# works in bash and powershell\ngit checkout $(cat ../cts_runner/revision.txt)\n```\n\nTo run a given set of tests:\n\n```\n# Must be inside the `cts` folder we just checked out, else this will fail\ncargo run --manifest-path ../Cargo.toml -p cts_runner --bin cts_runner -- ./tools/run_deno --verbose \"<test string>\"\n```\n\nTo find the full list of tests, go to the [online cts viewer](https://gpuweb.github.io/cts/standalone/?runnow=0&worker=0&debug=0&q=webgpu:*).\n\nThe list of currently enabled CTS tests can be found [here](./cts_runner/test.lst).\n\n## Tracking the WebGPU and WGSL draft specifications\n\nThe `wgpu` crate is meant to be an idiomatic Rust translation of the [WebGPU API][webgpu spec].\nThat specification, along with its shading language, [WGSL][wgsl spec],\nare both still in the \"Working Draft\" phase,\nand while the general outlines are stable,\ndetails change frequently.\nUntil the specification is stabilized, the `wgpu` crate and the version of WGSL it implements\nwill likely differ from what is specified,\nas the implementation catches up.\n\nExactly which WGSL features `wgpu` supports depends on how you are using it:\n\n- When running as native code, `wgpu` uses the [Naga][naga] crate\n  to translate WGSL code into the shading language of your platform's native GPU API.\n  Naga has [a milestone][naga wgsl milestone]\n  for catching up to the WGSL specification,\n  but in general, there is no up-to-date summary\n  of the differences between Naga and the WGSL spec.\n\n- When running in a web browser (by compilation to WebAssembly)\n  without the `\"webgl\"` feature enabled,\n  `wgpu` relies on the browser's own WebGPU implementation.\n  WGSL shaders are simply passed through to the browser,\n  so that determines which WGSL features you can use.\n\n- When running in a web browser with `wgpu`'s `\"webgl\"` feature enabled,\n  `wgpu` uses Naga to translate WGSL programs into GLSL.\n  This uses the same version of Naga as if you were running `wgpu` as native code.\n\n[webgpu spec]: https://www.w3.org/TR/webgpu/\n[wgsl spec]: https://gpuweb.github.io/gpuweb/wgsl/\n[naga]: https://github.com/gfx-rs/naga/\n[naga wgsl milestone]: https://github.com/gfx-rs/naga/milestone/4\n\n## Coordinate Systems\n\nwgpu uses the coordinate systems of D3D and Metal:\n\n| Render                                              | Texture                                               |\n| --------------------------------------------------- | ----------------------------------------------------- |\n| ![render_coordinates](./etc/render_coordinates.png) | ![texture_coordinates](./etc/texture_coordinates.png) |\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 4.1630859375,
          "content": "This is an overview of how to run wgpu releases.\n\n## Structure\n\nWe do a major breaking release every 12 weeks. This happens no matter the status of various in-flight projects.\n\nWe do a patch releases as needed in the weeks between major releases. Once a new major release is cut, we stop doing patch releases for the previous major release unless there is a critical bug or a compilation issue.\n\n## People\n\nAnyone can perform most of these steps, except actually publishing the crates.\n\nCurrently only @kvark and @cwfitzgerald can publish all crates. @grovesNL can also publish `wgpu` crates. @jimblandy can publish `naga` crates.\n\n## Major Release Process\n\nApprox 1 Week Before:\n- Determine if `glow` (@groves), `metal-rs` (@kvark and @cwfitzgerald) or any other dependant crates will need a release. If so, coordinate with their maintainers.\n- Go through the changelog:\n  - Re-categorize miscategorized items.\n  - Edit major changes so a user can easily understand what they need to do.\n  - Add missing major changes that users need to know about.\n  - Copy-edit the changelog for clarity.\n\nDay of Release:\n- Update all crates to be the new version. We bump all versions even if there were no changes.\n  - `naga`\n  - `naga-cli`\n  - `wgpu-types`\n  - `wgpu-hal`\n  - `wgpu-core`\n  - `Cargo.toml` (this covers the rest of the crates).\n- Ensure `glow` and `metal` are updated to the latest version if needed.\n- Add a new header for the changelog with the release version and date.\n- Create a PR with all of the version changes and changelog updates.\n- Once the PR is CI clean, (force) merge it.\n- Checkout `trunk` with the merged PR.\n- Publish! These commands can be pasted directly into your terminal in a single command, and they will publish everything.\n  ```bash\n    cargo publish -p naga\n    cargo publish -p naga-cli\n    cargo publish -p wgpu-types\n    cargo publish -p wgpu-hal --all-features\n    cargo publish -p wgpu-core --all-features\n    cargo publish -p wgpu\n    cargo publish -p wgpu-info\n  ```\n- Create a new release on the `wgpu` repo with the changelog and a tag called `vX.Y.Z`.\n- Create a branch with the with the new version `vX.Y` and push it to the repo.\n- Publish the link to the github release in the following places.\n  - [r/rust](https://www.reddit.com/r/rust/).\n    - Add an AMA comment.\n  - Crosspost to [r/rust_gamedev](https://www.reddit.com/r/rust_gamedev/).\n    - Add an AMA comment.\n  - Include the r/rust post shortlink in the following posts as well:\n  - [wgpu matrix](https://matrix.to/#/#wgpu:matrix.org)\n  - [Rust Gamedev Discord](https://discord.gg/yNtPTb2) in the #crates channel\n  - [Bevy Discord](https://discord.com/invite/bevy) in the #rendering-dev channel\n  - [Graphics Programming Discord](https://discord.gg/6mgNGk7) in the #webgpu channel\n  - [Rust Community Discord](https://discord.gg/rust-lang-community) in the #games-and-graphics channel\n- Complete the release's milestone on GitHub.\n- Create a new milestone for the next release, in 12 weeks time.\n\n## Patch Release Process\n- Enumerate all PRs that haven't been backported yet. These use the `needs-backport` label. [GH Link](https://github.com/gfx-rs/wgpu/issues?q=label%3A%22PR%3A+needs+back-porting)\n- On _your own branch_ based on the latest release branch. Cherry-pick the PRs that need to be backported. When modifying the commits, use --append to retain their original authorship.\n- Remove the `needs-backport` label from the PRs.\n- Fix the changelogs items and add a new header for the patch release with the release version and date.\n- Once all the PRs are cherry-picked, look at the diff between HEAD and the previous patch release. See what crates changed.\n- Bump all the versions of the crates that changed.\n- Create a PR with all of the version changes and changelog updates into the release branch.\n- Once the PR is CI clean, (force) rebase merge it.\n- Checkout the release branch with the merged PR.\n- Publish all relevant crates (see list above).\n- Create a new release on the `wgpu` repo with the changelog and a tag called `vX.Y.Z` on the release branch.\n- Backport the changelog and version bumps to the `trunk` branch.\n  - Ensure that any items in the newly-released changelog don't appear in the \"unreleased\" section of the trunk changelog.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.2373046875,
          "content": "coverage:\n  status:\n    project:\n      default:\n        informational: true\n        if_ci_failed: success\n    patch:\n      default:\n        informational: true\n        if_ci_failed: success\ncomment: false\ngithub_checks:\n    annotations: false\n"
        },
        {
          "name": "cts_runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "deno_webgpu",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lock-analyzer",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 182.490234375,
          "content": null
        },
        {
          "name": "naga-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "naga",
          "type": "tree",
          "content": null
        },
        {
          "name": "player",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0986328125,
          "content": "[toolchain]\nchannel = \"1.83\"\ncomponents = [\"rustfmt\", \"clippy\"]\ntargets = [\"wasm32-unknown-unknown\"]\n"
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.0009765625,
          "content": "\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 2.205078125,
          "content": "# This file is only relevant for Nix and NixOS users.\n# What's actually meant by \"Nix\" here is not UNIX, but the *package manager* Nix, see https://nixos.org/.\n# If you are\n#   on macOS (and not using nix-darwin)\n#   or on Windows (and not using Nix in WSL),\n# you can carelessly ignore this file.\n#\n# Otherwise, if you *do* use Nix the package manager,\n# this file declares\n#   common dependencies\n#   and some nice tools\n# which you'll most likely need when working with wgpu.\n# Feel free to copy it into your own project if deemed useful.\n#\n# To use this file, just run `nix-shell` in this folder,\n# which will drop you into a shell\n# with all the deps needed for building wgpu available.\n#\n# Or if you're using direnv (https://direnv.net/),\n# use `direnv allow` to automatically always use this file\n# if you're navigating into this or a subfolder.\n\n{ pkgs ? import <nixpkgs> {} }:\n\npkgs.mkShell rec {\n  buildInputs = with pkgs; [\n    # necessary for building wgpu in 3rd party packages (in most cases)\n    libxkbcommon\n    wayland xorg.libX11 xorg.libXcursor xorg.libXrandr xorg.libXi\n    alsa-lib\n    fontconfig freetype\n    shaderc directx-shader-compiler\n    pkg-config cmake\n    mold # could use any linker, needed for rustix (but mold is fast)\n\n    libGL\n    vulkan-headers vulkan-loader\n    vulkan-tools vulkan-tools-lunarg\n    vulkan-extension-layer\n    vulkan-validation-layers # don't need them *strictly* but immensely helpful\n\n    # necessary for developing (all of) wgpu itself\n    cargo-nextest cargo-fuzz\n\n    # nice for developing wgpu itself\n    typos \n\n    # if you don't already have rust installed through other means,\n    # this shell.nix can do that for you with this below\n    yq # for tomlq below\n    rustup\n\n    # nice tools\n    gdb rr\n    evcxr\n    valgrind\n    renderdoc\n  ];\n\n  shellHook = ''\n    export RUSTC_VERSION=\"$(tomlq -r .toolchain.channel rust-toolchain.toml)\"\n    export PATH=\"$PATH:''${CARGO_HOME:-~/.cargo}/bin\"\n    export PATH=\"$PATH:''${RUSTUP_HOME:-~/.rustup/toolchains/$RUSTC_VERSION-x86_64-unknown-linux/bin}\"\n    export LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:${builtins.toString (pkgs.lib.makeLibraryPath buildInputs)}\";\n\n    rustup default $RUSTC_VERSION\n    rustup component add rust-src rust-analyzer\n  '';\n}\n"
        },
        {
          "name": "taplo.toml",
          "type": "blob",
          "size": 0.03515625,
          "content": "[formatting]\nindent_string = \"    \"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "typos.toml",
          "type": "blob",
          "size": 0.8115234375,
          "content": "[files]\n# Include .github, .cargo, etc.\nignore-hidden = false\nextend-exclude = [\n    '/.git',\n    # spirv-asm isn't real source code\n    '*.spvasm',\n    'etc/big-picture.xml',\n]\n\n# Corrections take the form of a key/value pair. The key is the incorrect word\n# and the value is the correct word. If the key and value are the same, the\n# word is treated as always correct. If the value is an empty string, the word\n# is treated as always incorrect.\n\n[default.extend-words]\n# Things that aren't typos\nlod = \"lod\"\nmetalness = \"metalness\"\n\n# Usernames\nHealthire = \"Healthire\"\nREASY = \"REASY\"\n\n[type.rust.extend-identifiers]\nANDed = \"ANDed\"\nD3DCOLORtoUBYTE4 = \"D3DCOLORtoUBYTE4\"\nDerivate = \"Derivate\"\ninout = \"inout\"\n\n[type.wgsl]\nextend-glob = [\"*.wgsl\"]\n\n[type.wgsl.extend-identifiers]\npn = \"pn\"\n\n[type.yaml.extend-words]\ndota = \"dota\"\n"
        },
        {
          "name": "wgpu-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "wgpu-hal",
          "type": "tree",
          "content": null
        },
        {
          "name": "wgpu-info",
          "type": "tree",
          "content": null
        },
        {
          "name": "wgpu-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "wgpu-types",
          "type": "tree",
          "content": null
        },
        {
          "name": "wgpu",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtask",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}