{
  "metadata": {
    "timestamp": 1736709408066,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ogham/exa",
      "stars": 23713,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.24609375,
          "content": "# Rust stuff\ntarget\n\n# Vagrant stuff\n.vagrant\n*.log\n\n# Compiled artifacts\n# (see devtools/*-package-for-*.sh)\n/exa-linux-x86_64\n/exa-linux-x86_64-*.zip\n/exa-macos-x86_64\n/exa-macos-x86_64-*.zip\n/MD5SUMS\n/SHA1SUMS\n\n# Snap stuff\nparts\nprime\nstage\n*.snap\n"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.029296875,
          "content": "disable_all_formatting = true\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 9.9326171875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14c189c53d098945499cdfa7ecc63567cf3886b3332b312a5b4585d8d3a6a610\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.67\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd\"\ndependencies = [\n \"jobserver\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"datetime\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c3f7a77f3e57fedf80e09136f2d8777ebf621207306f6d96d610af048354bc\"\ndependencies = [\n \"libc\",\n \"locale\",\n \"pad\",\n \"redox_syscall\",\n \"winapi\",\n]\n\n[[package]]\nname = \"exa\"\nversion = \"0.10.1\"\ndependencies = [\n \"ansi_term\",\n \"datetime\",\n \"git2\",\n \"glob\",\n \"lazy_static\",\n \"libc\",\n \"locale\",\n \"log\",\n \"natord\",\n \"num_cpus\",\n \"number_prefix\",\n \"scoped_threadpool\",\n \"term_grid\",\n \"terminal_size\",\n \"unicode-width\",\n \"users\",\n \"zoneinfo_compiled\",\n]\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191\"\ndependencies = [\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"git2\"\nversion = \"0.13.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9831e983241f8c5591ed53f17d874833e2fa82cac2625f3888c50cbfe136cba\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"openssl-sys\",\n \"url\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b919933a397b79c37e33b77bb2aa3dc8eb6e165ad809e58ff75bc7db2e34574\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"322f4de77956e22ed0e5032c359a0f1273f1f7f0d79bfa3b8ffbc730d7fbcc5c\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"972f5ae5d1cb9c6ae417789196c803205313edde988685da5e3aae0827b9e7fd\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9385f66bf6105b241aa65a61cb923ef20efc665cb9f9bb50ac2f0c4b7f378d41\"\n\n[[package]]\nname = \"libgit2-sys\"\nversion = \"0.12.21+1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86271bacd72b2b9e854c3dcfb82efd538f15f870e4c11af66900effb462f6825\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"602113192b08db8f38796c4e85c39e960c145965140e918018bcde1952429655\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"locale\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5fdbe492a9c0238da900a1165c42fc5067161ce292678a6fe80921f30fe307fd\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n\n[[package]]\nname = \"natord\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308d96db8debc727c3fd9744aac51751243420e46edf401010908da7f8d5e57c\"\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05499f3756671c15885fee9034446956fff3f243d6077b91e5767df161f766b3\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"111.15.0+1.1.1k\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1a5f6ae2ac04393b217ea9f700cd04fa9bf3d93fae2872069f3d15d908af70a\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"313752393519e876837e09e1fa183ddef0be7735868dced3196f4472d536277f\"\ndependencies = [\n \"autocfg\",\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"pad\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2ad9b889f1b12e0b9ee24db044b5129150d5eada288edc800f789928dc8c0e3\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n\n[[package]]\nname = \"scoped_threadpool\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\n\n[[package]]\nname = \"term_grid\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7c9eb7705cb3f0fd71d3955b23db6d372142ac139e8c473952c93bf3c3dc4b7\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86ca8ced750734db02076f44132d802af0b33b09942331f4459dde8636fd2406\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b5220f05bb7de7f3f53c7c065e1199b3172696fe2db9f9c4d8ad9b4ee74c342\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eeb8be209bb1c96b7c177c7420d26e04eccacb0eeae6b980e35fcb74678107e0\"\ndependencies = [\n \"matches\",\n]\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07fbfce1c8a97d547e8b5334978438d9d6ec8c20e38f56d4a4374d181493eaef\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3\"\n\n[[package]]\nname = \"url\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ccd964113622c8e9322cfac19eb1004a07e636c545f325da085d5cdde6f1f8b\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"users\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24cc0f6d6f267b73e5a2cadf007ba8f9bc39c6a6f9666f8cf25ea809a153b032\"\ndependencies = [\n \"libc\",\n \"log\",\n]\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbdbff6266a24120518560b5dc983096efb98462e51d0d68169895b237be3e5d\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"zoneinfo_compiled\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64fbebe65e899530f43bd760b23fda8f141118f4db49952b02998cbd0907a5de\"\ndependencies = [\n \"byteorder\",\n \"datetime\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 1.91015625,
          "content": "[package]\nname = \"exa\"\ndescription = \"A modern replacement for ls\"\nauthors = [\"Benjamin Sago <ogham@bsago.me>\"]\ncategories = [\"command-line-utilities\"]\nedition = \"2021\"\nrust-version = \"1.66.1\"\nexclude = [\"/devtools/*\", \"/Justfile\", \"/Vagrantfile\", \"/screenshots.png\"]\nreadme = \"README.md\"\nhomepage = \"https://the.exa.website/\"\nlicense = \"MIT\"\nrepository = \"https://github.com/ogham/exa\"\nversion = \"0.10.1\"\n\n\n[[bin]]\nname = \"exa\"\n\n\n[dependencies]\nansi_term = \"0.12\"\nglob = \"0.3\"\nlazy_static = \"1.3\"\nlibc = \"0.2\"\nlocale = \"0.2\"\nlog = \"0.4\"\nnatord = \"1.0\"\nnum_cpus = \"1.10\"\nnumber_prefix = \"0.4\"\nscoped_threadpool = \"0.1\"\nterm_grid = \"0.2.0\"\nterminal_size = \"0.1.16\"\nunicode-width = \"0.1\"\nzoneinfo_compiled = \"0.5.1\"\n\n[target.'cfg(unix)'.dependencies]\nusers = \"0.11\"\n\n[dependencies.datetime]\nversion = \"0.5.2\"\ndefault-features = false\nfeatures = [\"format\"]\n\n[dependencies.git2]\nversion = \"0.13\"\noptional = true\ndefault-features = false\n\n[build-dependencies.datetime]\nversion = \"0.5.2\"\ndefault-features = false\n\n[features]\ndefault = [ \"git\" ]\ngit = [ \"git2\" ]\nvendored-openssl = [\"git2/vendored-openssl\"]\n\n\n# make dev builds faster by excluding debug symbols\n[profile.dev]\ndebug = false\n\n# use LTO for smaller binaries (that take longer to build)\n[profile.release]\nlto = true\n\n\n[package.metadata.deb]\nlicense-file = [ \"LICENCE\", \"4\" ]\ndepends = \"$auto\"\nextended-description = \"\"\"\nexa is a replacement for ls written in Rust.\n\"\"\"\nsection = \"utils\"\npriority = \"optional\"\nassets = [\n    [ \"target/release/exa\", \"/usr/bin/exa\", \"0755\" ],\n    [ \"target/release/../man/exa.1\", \"/usr/share/man/man1/exa.1\", \"0644\" ],\n    [ \"target/release/../man/exa_colors.5\", \"/usr/share/man/man5/exa_colors.5\", \"0644\" ],\n    [ \"completions/bash/exa\", \"/usr/share/bash-completion/completions/exa\", \"0644\" ],\n    [ \"completions/zsh/_exa\", \"/usr/share/zsh/site-functions/_exa\", \"0644\" ],\n    [ \"completions/fish/exa.fish\", \"/usr/share/fish/vendor_completions.d/exa.fish\", \"0644\" ],\n]\n"
        },
        {
          "name": "Justfile",
          "type": "blob",
          "size": 2.58203125,
          "content": "all: build test\nall-release: build-release test-release\n\n\n#----------#\n# building #\n#----------#\n\n# compile the exa binary\n@build:\n    cargo build\n\n# compile the exa binary (in release mode)\n@build-release:\n    cargo build --release --verbose\n\n# produce an HTML chart of compilation timings\n@build-time:\n    cargo +nightly clean\n    cargo +nightly build -Z timings\n\n# check that the exa binary can compile\n@check:\n    cargo check\n\n\n#---------------#\n# running tests #\n#---------------#\n\n# run unit tests\n@test:\n    cargo test --workspace -- --quiet\n\n# run unit tests (in release mode)\n@test-release:\n    cargo test --workspace --release --verbose\n\n\n#------------------------#\n# running extended tests #\n#------------------------#\n\n# run extended tests\n@xtests:\n    xtests/run.sh\n\n# run extended tests (using the release mode exa)\n@xtests-release:\n    xtests/run.sh --release\n\n# display the number of extended tests that get run\n@count-xtests:\n    grep -F '[[cmd]]' -R xtests | wc -l\n\n\n#-----------------------#\n# code quality and misc #\n#-----------------------#\n\n# lint the code\n@clippy:\n    touch src/main.rs\n    cargo clippy\n\n# update dependency versions, and checks for outdated ones\n@update-deps:\n    cargo update\n    command -v cargo-outdated >/dev/null || (echo \"cargo-outdated not installed\" && exit 1)\n    cargo outdated\n\n# list unused dependencies\n@unused-deps:\n    command -v cargo-udeps >/dev/null || (echo \"cargo-udeps not installed\" && exit 1)\n    cargo +nightly udeps\n\n# check that every combination of feature flags is successful\n@check-features:\n    command -v cargo-hack >/dev/null || (echo \"cargo-hack not installed\" && exit 1)\n    cargo hack check --feature-powerset\n\n# build exa and run extended tests with features disabled\n@feature-checks *args:\n    cargo build --no-default-features\n    specsheet xtests/features/none.toml -shide {{args}} \\\n        -O cmd.target.exa=\"${CARGO_TARGET_DIR:-../../target}/debug/exa\"\n\n# print versions of the necessary build tools\n@versions:\n    rustc --version\n    cargo --version\n\n\n#---------------#\n# documentation #\n#---------------#\n\n# build the man pages\n@man:\n    mkdir -p \"${CARGO_TARGET_DIR:-target}/man\"\n    pandoc --standalone -f markdown -t man man/exa.1.md        > \"${CARGO_TARGET_DIR:-target}/man/exa.1\"\n    pandoc --standalone -f markdown -t man man/exa_colors.5.md > \"${CARGO_TARGET_DIR:-target}/man/exa_colors.5\"\n\n# build and preview the main man page (exa.1)\n@man-1-preview: man\n    man \"${CARGO_TARGET_DIR:-target}/man/exa.1\"\n\n# build and preview the colour configuration man page (exa_colors.5)\n@man-5-preview: man\n    man \"${CARGO_TARGET_DIR:-target}/man/exa_colors.5\"\n"
        },
        {
          "name": "LICENCE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Benjamin Sago\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.212890625,
          "content": "# exa is unmaintained, use the [fork eza](https://github.com/eza-community/eza) instead.\n\n(This repository isn’t archived because the only person with the rights to do so is unreachable).\n\n---\n\n<div align=\"center\">\n\n# exa\n\n[exa](https://the.exa.website/) is a modern replacement for _ls_.\n\n**README Sections:** [Options](#options) — [Installation](#installation) — [Development](#development)\n\n[![Unit tests](https://github.com/ogham/exa/actions/workflows/unit-tests.yml/badge.svg)](https://github.com/ogham/exa/actions/workflows/unit-tests.yml)\n</div>\n\n![Screenshots of exa](screenshots.png)\n\n---\n\n**exa** is a modern replacement for the venerable file-listing command-line program `ls` that ships with Unix and Linux operating systems, giving it more features and better defaults.\nIt uses colours to distinguish file types and metadata.\nIt knows about symlinks, extended attributes, and Git.\nAnd it’s **small**, **fast**, and just **one single binary**.\n\nBy deliberately making some decisions differently, exa attempts to be a more featureful, more user-friendly version of `ls`.\nFor more information, see [exa’s website](https://the.exa.website/).\n\n\n---\n\n<a id=\"options\">\n<h1>Command-line options</h1>\n</a>\n\nexa’s options are almost, but not quite, entirely unlike `ls`’s.\n\n### Display options\n\n- **-1**, **--oneline**: display one entry per line\n- **-G**, **--grid**: display entries as a grid (default)\n- **-l**, **--long**: display extended details and attributes\n- **-R**, **--recurse**: recurse into directories\n- **-T**, **--tree**: recurse into directories as a tree\n- **-x**, **--across**: sort the grid across, rather than downwards\n- **-F**, **--classify**: display type indicator by file names\n- **--colo[u]r**: when to use terminal colours\n- **--colo[u]r-scale**: highlight levels of file sizes distinctly\n- **--icons**: display icons\n- **--no-icons**: don't display icons (always overrides --icons)\n\n### Filtering options\n\n- **-a**, **--all**: show hidden and 'dot' files\n- **-d**, **--list-dirs**: list directories like regular files\n- **-L**, **--level=(depth)**: limit the depth of recursion\n- **-r**, **--reverse**: reverse the sort order\n- **-s**, **--sort=(field)**: which field to sort by\n- **--group-directories-first**: list directories before other files\n- **-D**, **--only-dirs**: list only directories\n- **--git-ignore**: ignore files mentioned in `.gitignore`\n- **-I**, **--ignore-glob=(globs)**: glob patterns (pipe-separated) of files to ignore\n\nPass the `--all` option twice to also show the `.` and `..` directories.\n\n### Long view options\n\nThese options are available when running with `--long` (`-l`):\n\n- **-b**, **--binary**: list file sizes with binary prefixes\n- **-B**, **--bytes**: list file sizes in bytes, without any prefixes\n- **-g**, **--group**: list each file’s group\n- **-h**, **--header**: add a header row to each column\n- **-H**, **--links**: list each file’s number of hard links\n- **-i**, **--inode**: list each file’s inode number\n- **-m**, **--modified**: use the modified timestamp field\n- **-S**, **--blocks**: list each file’s number of file system blocks\n- **-t**, **--time=(field)**: which timestamp field to use\n- **-u**, **--accessed**: use the accessed timestamp field\n- **-U**, **--created**: use the created timestamp field\n- **-@**, **--extended**: list each file’s extended attributes and sizes\n- **--changed**: use the changed timestamp field\n- **--git**: list each file’s Git status, if tracked or ignored\n- **--time-style**: how to format timestamps\n- **--no-permissions**: suppress the permissions field\n- **--octal-permissions**: list each file's permission in octal format\n- **--no-filesize**: suppress the filesize field\n- **--no-user**: suppress the user field\n- **--no-time**: suppress the time field\n\nSome of the options accept parameters:\n\n- Valid **--color** options are **always**, **automatic**, and **never**.\n- Valid sort fields are **accessed**, **changed**, **created**, **extension**, **Extension**, **inode**, **modified**, **name**, **Name**, **size**, **type**, and **none**. Fields starting with a capital letter sort uppercase before lowercase. The modified field has the aliases **date**, **time**, and **newest**, while its reverse has the aliases **age** and **oldest**.\n- Valid time fields are **modified**, **changed**, **accessed**, and **created**.\n- Valid time styles are **default**, **iso**, **long-iso**, and **full-iso**.\n\n\n---\n\n<a id=\"installation\">\n<h1>Installation</h1>\n</a>\n\nexa is available for macOS and Linux.\nMore information on how to install exa is available on [the Installation page](https://the.exa.website/install).\n\n### Alpine Linux\n\nOn Alpine Linux, [enable community repository](https://wiki.alpinelinux.org/wiki/Enable_Community_Repository) and install the [`exa`](https://pkgs.alpinelinux.org/package/edge/community/x86_64/exa) package.\n\n    apk add exa\n\n### Arch Linux\n\nOn Arch, install the [`exa`](https://www.archlinux.org/packages/community/x86_64/exa/) package.\n\n    pacman -S exa\n\n### Android / Termux\n\nOn Android / Termux, install the [`exa`](https://github.com/termux/termux-packages/tree/master/packages/exa) package.\n\n    pkg install exa\n\n### Debian\n\nOn Debian, install the [`exa`](https://packages.debian.org/stable/exa) package.\n\n    apt install exa\n\n### Fedora\n\nOn Fedora, install the [`exa`](https://src.fedoraproject.org/modules/exa) package.\n\n    dnf install exa\n\n### Gentoo\n\nOn Gentoo, install the [`sys-apps/exa`](https://packages.gentoo.org/packages/sys-apps/exa) package.\n\n    emerge sys-apps/exa\n\n### Homebrew\n\nIf you’re using [Homebrew](https://brew.sh/) on macOS, install the [`exa`](http://formulae.brew.sh/formula/exa) formula.\n\n    brew install exa\n\n### MacPorts\n\nIf you're using [MacPorts](https://www.macports.org/) on macOS, install the [`exa`](https://ports.macports.org/port/exa/summary) port.\n\n    port install exa\n\n### Nix\n\nOn nixOS, install the [`exa`](https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/misc/exa/default.nix) package.\n\n    nix-env -i exa\n\n### openSUSE\n\nOn openSUSE, install the [`exa`](https://software.opensuse.org/package/exa) package.\n\n    zypper install exa\n\n### Ubuntu\n\nOn Ubuntu 20.10 (Groovy Gorilla) and later, install the [`exa`](https://packages.ubuntu.com/jammy/exa) package.\n\n    sudo apt install exa\n\n### Void Linux\n\nOn Void Linux, install the [`exa`](https://github.com/void-linux/void-packages/blob/master/srcpkgs/exa/template) package.\n\n    xbps-install -S exa\n\n### Manual installation from GitHub\n\nCompiled binary versions of exa are uploaded to GitHub when a release is made.\nYou can install exa manually by [downloading a release](https://github.com/ogham/exa/releases), extracting it, and copying the binary to a directory in your `$PATH`, such as `/usr/local/bin`.\n\nFor more information, see the [Manual Installation page](https://the.exa.website/install/linux#manual).\n\n### Cargo\n\nIf you already have a Rust environment set up, you can use the `cargo install` command:\n\n    cargo install exa\n\nCargo will build the `exa` binary and place it in `$HOME/.cargo`.\n\nTo build without Git support, run `cargo install --no-default-features exa` is also available, if the requisite dependencies are not installed.\n\n\n---\n\n<a id=\"development\">\n<h1>Development\n\n<a href=\"https://blog.rust-lang.org/2023/01/10/Rust-1.66.1.html\">\n    <img src=\"https://img.shields.io/badge/rustc-1.66.1+-lightgray.svg\" alt=\"Rust 1.66.1+\" />\n</a>\n\n<a href=\"https://github.com/ogham/exa/blob/master/LICENCE\">\n    <img src=\"https://img.shields.io/badge/licence-MIT-green\" alt=\"MIT Licence\" />\n</a>\n</h1></a>\n\nexa is written in [Rust](https://www.rust-lang.org/).\nYou will need rustc version 1.66.1 or higher.\nThe recommended way to install Rust for development is from the [official download page](https://www.rust-lang.org/tools/install), using rustup.\n\nOnce Rust is installed, you can compile exa with Cargo:\n\n    cargo build\n    cargo test\n\n- The [just](https://github.com/casey/just) command runner can be used to run some helpful development commands, in a manner similar to `make`.\nRun `just --list` to get an overview of what’s available.\n\n- If you are compiling a copy for yourself, be sure to run `cargo build --release` or `just build-release` to benefit from release-mode optimisations.\nCopy the resulting binary, which will be in the `target/release` directory, into a folder in your `$PATH`.\n`/usr/local/bin` is usually a good choice.\n\n- To compile and install the manual pages, you will need [pandoc](https://pandoc.org/).\nThe `just man` command will compile the Markdown into manual pages, which it will place in the `target/man` directory.\nTo use them, copy them into a directory that `man` will read.\n`/usr/local/share/man` is usually a good choice.\n\n- exa depends on [libgit2](https://github.com/rust-lang/git2-rs) for certain features.\nIf you’re unable to compile libgit2, you can opt out of Git support by running `cargo build --no-default-features`.\n\n- If you intend to compile for musl, you will need to use the flag `vendored-openssl` if you want to get the Git feature working.\nThe full command is `cargo build --release --target=x86_64-unknown-linux-musl --features vendored-openssl,git`.\n\nFor more information, see the [Building from Source page](https://the.exa.website/install/source).\n\n\n### Testing with Vagrant\n\nexa uses [Vagrant][] to configure virtual machines for testing.\n\nPrograms such as exa that are basically interfaces to the system are [notoriously difficult to test][testing].\nAlthough the internal components have unit tests, it’s impossible to do a complete end-to-end test without mandating the current user’s name, the time zone, the locale, and directory structure to test.\n(And yes, these tests are worth doing. I have missed an edge case on many an occasion.)\n\nThe initial attempt to solve the problem was just to create a directory of “awkward” test cases, run exa on it, and make sure it produced the correct output.\nBut even this output would change if, say, the user’s locale formats dates in a different way.\nThese can be mocked inside the code, but at the cost of making that code more complicated to read and understand.\n\nAn alternative solution is to fake *everything*: create a virtual machine with a known state and run the tests on *that*.\nThis is what Vagrant does.\nAlthough it takes a while to download and set up, it gives everyone the same development environment to test for any obvious regressions.\n\n[Vagrant]: https://www.vagrantup.com/\n[testing]: https://eev.ee/blog/2016/08/22/testing-for-people-who-hate-testing/#troublesome-cases\n\nFirst, initialise the VM:\n\n    host$ vagrant up\n\nThe first command downloads the virtual machine image, and then runs our provisioning script, which installs Rust and exa’s build-time dependencies, configures the environment, and generates some awkward files and folders to use as test cases.\nOnce this is done, you can SSH in, and build and test:\n\n    host$ vagrant ssh\n    vm$ cd /vagrant\n    vm$ cargo build\n    vm$ ./xtests/run\n    All the tests passed!\n\nOf course, the drawback of having a standard development environment is that you stop noticing bugs that occur outside of it.\nFor this reason, Vagrant isn’t a *necessary* development step — it’s there if you’d like to use it, but exa still gets used and tested on other platforms.\nIt can still be built and compiled on any target triple that it supports, VM or no VM, with `cargo build` and `cargo test`.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 5.92578125,
          "content": "Vagrant.configure(2) do |config|\n\n  # We use Ubuntu instead of Debian because the image comes with two-way\n  # shared folder support by default.\n  UBUNTU = 'hashicorp/bionic64'\n\n  config.vm.define(:exa) do |config|\n    config.vm.provider :virtualbox do |v|\n      v.name = 'exa'\n      v.memory = 2048\n      v.cpus = `nproc`.chomp.to_i\n    end\n\n    config.vm.provider :vmware_desktop do |v|\n      v.vmx['memsize'] = '2048'\n      v.vmx['numvcpus'] = `nproc`.chomp\n    end\n\n    config.vm.box = UBUNTU\n    config.vm.hostname = 'exa'\n\n\n    # Make sure we know the VM image’s default user name. The ‘cassowary’ user\n    # (specified later) is used for most of the test *output*, but we still\n    # need to know where the ‘target’ and ‘.cargo’ directories go.\n    developer = 'vagrant'\n\n\n    # Install the dependencies needed for exa to build, as quietly as\n    # apt can do.\n    config.vm.provision :shell, privileged: true, inline: <<-EOF\n      if hash fish &>/dev/null; then\n        echo \"Tools are already installed\"\n      else\n        trap 'exit' ERR\n        echo \"Installing tools\"\n        apt-get update -qq\n        apt-get install -qq -o=Dpkg::Use-Pty=0 \\\n          git gcc curl attr libgit2-dev zip \\\n          fish zsh bash bash-completion\n      fi\n    EOF\n\n\n    # Install Rust.\n    # This is done as vagrant, not root, because it’s vagrant\n    # who actually uses it. Sent to /dev/null because the progress\n    # bar produces a ton of output.\n    config.vm.provision :shell, privileged: false, inline: <<-EOF\n      if hash rustc &>/dev/null; then\n        echo \"Rust is already installed\"\n      else\n        trap 'exit' ERR\n        echo \"Installing Rust\"\n        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal --component rustc,rust-std,cargo,clippy -y > /dev/null\n        source $HOME/.cargo/env\n        echo \"Installing cargo-hack\"\n        cargo install -q cargo-hack\n        echo \"Installing specsheet\"\n        cargo install -q --git https://github.com/ogham/specsheet\n      fi\n    EOF\n\n\n    # Privileged installation and setup scripts.\n    config.vm.provision :shell, privileged: true, inline: <<-EOF\n\n      # Install Just, the command runner.\n      if hash just &>/dev/null; then\n        echo \"just is already installed\"\n      else\n        trap 'exit' ERR\n        echo \"Installing just\"\n        wget -q \"https://github.com/casey/just/releases/download/v0.8.3/just-v0.8.3-x86_64-unknown-linux-musl.tar.gz\"\n        tar -xf \"just-v0.8.3-x86_64-unknown-linux-musl.tar.gz\"\n        cp just /usr/local/bin\n      fi\n\n      # Guarantee that the timezone is UTC — some of the tests\n      # depend on this (for now).\n      timedatectl set-timezone UTC\n\n\n      # Use a different ‘target’ directory on the VM than on the host.\n      # By default it just uses the one in /vagrant/target, which can\n      # cause problems if it has different permissions than the other\n      # directories, or contains object files compiled for the host.\n      echo 'PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/#{developer}/.cargo/bin\"' > /etc/environment\n      echo 'CARGO_TARGET_DIR=\"/home/#{developer}/target\"'                                                     >> /etc/environment\n\n\n      # Create a variety of misc scripts.\n\n      ln -sf /vagrant/devtools/dev-run-debug.sh   /usr/bin/exa\n      ln -sf /vagrant/devtools/dev-run-release.sh /usr/bin/rexa\n\n      echo -e \"#!/bin/sh\\ncargo build --manifest-path /vagrant/Cargo.toml \\\\$@\" > /usr/bin/build-exa\n      ln -sf /usr/bin/build-exa /usr/bin/b\n\n      echo -e \"#!/bin/sh\\ncargo test --manifest-path /vagrant/Cargo.toml \\\\$@ -- --quiet\" > /usr/bin/test-exa\n      ln -sf /usr/bin/test-exa /usr/bin/t\n\n      echo -e \"#!/bin/sh\\n/vagrant/xtests/run.sh\" > /usr/bin/run-xtests\n      ln -sf /usr/bin/run-xtests /usr/bin/x\n\n      echo -e \"#!/bin/sh\\nbuild-exa && test-exa && run-xtests\" > /usr/bin/compile-exa\n      ln -sf /usr/bin/compile-exa /usr/bin/c\n\n      echo -e \"#!/bin/sh\\nbash /vagrant/devtools/dev-package-for-linux.sh \\\\$@\" > /usr/bin/package-exa\n      echo -e \"#!/bin/sh\\ncat /etc/motd\" > /usr/bin/halp\n\n      chmod +x /usr/bin/{exa,rexa,b,t,x,c,build-exa,test-exa,run-xtests,compile-exa,package-exa,halp}\n\n\n      # Configure the welcoming text that gets shown:\n\n      # Capture the help text so it gets displayed first\n      rm -f /etc/update-motd.d/*\n      bash /vagrant/devtools/dev-help.sh > /etc/motd\n\n      # Tell bash to execute a bunch of stuff when a session starts\n      echo \"source /vagrant/devtools/dev-bash.sh\" > /home/#{developer}/.bash_profile\n      chown #{developer} /home/#{developer}/.bash_profile\n\n      # Disable last login date in sshd\n      sed -i '/PrintLastLog yes/c\\PrintLastLog no' /etc/ssh/sshd_config\n      systemctl restart sshd\n\n\n      # Link the completion files so they’re “installed”:\n\n      # bash\n      test -h /etc/bash_completion.d/exa \\\n        || ln -s /vagrant/contrib/completions.bash /etc/bash_completion.d/exa\n\n      # zsh\n      test -h /usr/share/zsh/vendor-completions/_exa \\\n        || ln -s /vagrant/contrib/completions.zsh /usr/share/zsh/vendor-completions/_exa\n\n      # fish\n      test -h /usr/share/fish/completions/exa.fish \\\n        || ln -s /vagrant/contrib/completions.fish /usr/share/fish/completions/exa.fish\n    EOF\n\n\n    # Install kcov for test coverage\n    # This doesn’t run coverage over the xtests so it’s less useful for now\n    if ENV.key?('INSTALL_KCOV')\n      config.vm.provision :shell, privileged: false, inline: <<-EOF\n        trap 'exit' ERR\n\n        test -e ~/.cargo/bin/cargo-kcov \\\n          || cargo install cargo-kcov\n\n        sudo apt-get install -qq -o=Dpkg::Use-Pty=0 -y \\\n          cmake g++ pkg-config \\\n          libcurl4-openssl-dev libdw-dev binutils-dev libiberty-dev\n\n        cargo kcov --print-install-kcov-sh | sudo sh\n      EOF\n    end\n\n    config.vm.provision :shell, privileged: true,  path: 'devtools/dev-set-up-environment.sh'\n    config.vm.provision :shell, privileged: false, path: 'devtools/dev-create-test-filesystem.sh'\n  end\nend\n"
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 3.650390625,
          "content": "/// The version string isn’t the simplest: we want to show the version,\n/// current Git hash, and compilation date when building *debug* versions, but\n/// just the version for *release* versions so the builds are reproducible.\n///\n/// This script generates the string from the environment variables that Cargo\n/// adds (http://doc.crates.io/environment-variables.html) and runs `git` to\n/// get the SHA1 hash. It then writes the string into a file, which exa then\n/// includes at build-time.\n///\n/// - https://stackoverflow.com/q/43753491/3484614\n/// - https://crates.io/crates/vergen\n\nuse std::env;\nuse std::fs::File;\nuse std::io::{self, Write};\nuse std::path::PathBuf;\n\nuse datetime::{LocalDateTime, ISO};\n\n\n/// The build script entry point.\nfn main() -> io::Result<()> {\n    #![allow(clippy::write_with_newline)]\n\n    let tagline = \"exa - list files on the command-line\";\n    let url     = \"https://the.exa.website/\";\n\n    let ver =\n        if is_debug_build() {\n            format!(\"{}\\nv{} \\\\1;31m(pre-release debug build!)\\\\0m\\n\\\\1;4;34m{}\\\\0m\", tagline, version_string(), url)\n        }\n        else if is_development_version() {\n            format!(\"{}\\nv{} [{}] built on {} \\\\1;31m(pre-release!)\\\\0m\\n\\\\1;4;34m{}\\\\0m\", tagline, version_string(), git_hash(), build_date(), url)\n        }\n        else {\n            format!(\"{}\\nv{}\\n\\\\1;4;34m{}\\\\0m\", tagline, version_string(), url)\n        };\n\n    // We need to create these files in the Cargo output directory.\n    let out = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n    let path = &out.join(\"version_string.txt\");\n\n    // Bland version text\n    let mut f = File::create(path).unwrap_or_else(|_| { panic!(\"{}\", path.to_string_lossy().to_string()) });\n    writeln!(f, \"{}\", strip_codes(&ver))?;\n\n    Ok(())\n}\n\n/// Removes escape codes from a string.\nfn strip_codes(input: &str) -> String {\n    input.replace(\"\\\\0m\", \"\")\n         .replace(\"\\\\1;31m\", \"\")\n         .replace(\"\\\\1;4;34m\", \"\")\n}\n\n/// Retrieve the project’s current Git hash, as a string.\nfn git_hash() -> String {\n    use std::process::Command;\n\n    String::from_utf8_lossy(\n        &Command::new(\"git\")\n            .args(&[\"rev-parse\", \"--short\", \"HEAD\"])\n            .output().unwrap()\n            .stdout).trim().to_string()\n}\n\n/// Whether we should show pre-release info in the version string.\n///\n/// Both weekly releases and actual releases are --release releases,\n/// but actual releases will have a proper version number.\nfn is_development_version() -> bool {\n    cargo_version().ends_with(\"-pre\") || env::var(\"PROFILE\").unwrap() == \"debug\"\n}\n\n/// Whether we are building in debug mode.\nfn is_debug_build() -> bool {\n    env::var(\"PROFILE\").unwrap() == \"debug\"\n}\n\n/// Retrieves the [package] version in Cargo.toml as a string.\nfn cargo_version() -> String {\n    env::var(\"CARGO_PKG_VERSION\").unwrap()\n}\n\n/// Returns the version and build parameters string.\nfn version_string() -> String {\n    let mut ver = cargo_version();\n\n    let feats = nonstandard_features_string();\n    if ! feats.is_empty() {\n        ver.push_str(&format!(\" [{}]\", &feats));\n    }\n\n    ver\n}\n\n/// Finds whether a feature is enabled by examining the Cargo variable.\nfn feature_enabled(name: &str) -> bool {\n    env::var(&format!(\"CARGO_FEATURE_{}\", name))\n        .map(|e| ! e.is_empty())\n        .unwrap_or(false)\n}\n\n/// A comma-separated list of non-standard feature choices.\nfn nonstandard_features_string() -> String {\n    let mut s = Vec::new();\n\n    if feature_enabled(\"GIT\") {\n        s.push(\"+git\");\n    }\n    else {\n        s.push(\"-git\");\n    }\n\n    s.join(\", \")\n}\n\n/// Formats the current date as an ISO 8601 string.\nfn build_date() -> String {\n    let now = LocalDateTime::now();\n    format!(\"{}\", now.date().iso())\n}\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "devtools",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "[toolchain]\nchannel = \"1.66.1\"\n"
        },
        {
          "name": "screenshots.png",
          "type": "blob",
          "size": 444.24609375,
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "xtests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}