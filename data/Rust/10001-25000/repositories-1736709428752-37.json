{
  "metadata": {
    "timestamp": 1736709428752,
    "page": 37,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HigherOrderCO/Bend",
      "stars": 17900,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0439453125,
          "content": "/target\n*.snap.new\n.out.hvm\n.DS_Store\n.vscode"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.2060546875,
          "content": "edition = \"2021\"\nmax_width = 110\n# won't add \\r\\n on windows machines, better on diffs\nnewline_style = \"Unix\"\nuse_small_heuristics = \"Max\"\ntab_spaces = 2\nuse_field_init_shorthand = true\nuse_try_shorthand = true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 14.220703125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),\nand this project does not currently adhere to a particular versioning scheme.\n\n## [Unreleased]\n\n### Added\n\n- Emit a warning when a rule in a pattern matching function is unreachable. ([#736][gh-736])\n\n### Fixed\n- Fix type checker not properly unifying all the arms of a match expression. ([#734][gh-734])\n\n## [0.2.37] - 2024-10-18\n\n### Fixed\n\n- Fix variable binding in pattern matching when the irrefutable pattern optimization occurs. ([#618][gh-618])\n- Don't warn on unused generated definitions. ([#514][gh-514])\n- Fix local definitions not being desugared properly. ([#623][gh-623])\n- Expand references to functions generated by the `float_combinators` pass inside the main function. ([#642][gh-642])\n- Expand references inside constructors in the main function. ([#643][gh-643])\n- Fix readback when hvm net has `a{n}` or `x{n}` vars. ([#659][gh-659])\n- Fix imported constructors not being updated to Constructor expression. ([#674][gh-674])\n- Fix parse error on parenthesized eraser. ([#675][gh-675])\n- Fix IO/FS/read_line when the line ends with a EOF. ([#638][gh-638])\n- Fix lambda body being parsed as tuple in imp syntax. ([#706][gh-706])\n\n### Added\n\n- Add type system for Bend. ([#615][gh-615], [#679][gh-679], see [Type Checking](docs/type-checking.md))\n- Add import system. ([#544][gh-544])\n- Add multi line comment `#{ ... #}` syntax. ([#595][gh-595])\n- Add error message when input file is not found. ([#513][gh-513])\n- Add `List/filter` and `String/{equals, filter}` builtins.\n- Add IO functions for loading dynamically linked libraries (`IO/DyLib/open`, `IO/DyLib/call`, `IO/DyLib/close`). ([#621][gh-621])\n\n### Changed\n\n- Change tuple syntax to not require parentheses in some cases. ([#554][gh-554])\n- Improve error messages in branching statements. ([#464][gh-464])\n- Change branches to support ending with ask statements. ([#629][gh-629])\n- Improve hexadecimal and binary floating numbers. ([#648][gh-648])\n- Change IO functions to return Result. ([#657][gh-657])\n- Revamp the diagnostics system and parser to show more error and warning messages ([#673][gh-673])\n\n## [0.2.36] - 2024-07-04\n\n### Changed\n\n- Improve error messages for redefinition of types and objects. ([#485][gh-485])\n- Don't allow tabs to be used for indentation or spacing. ([#463][gh-463])\n- Rename builtin function `sleep` to `IO/nanosleep`. ([#581][gh-581])\n- Equational number pattern compilation to use the predecessor variable when possible. ([#470][gh-470])\n- Rename `Bytes/decode_utf8` to `String/decode_utf8` and `Bytes/decode_ascii` to `String/decode_ascii`.\n- Rename `log` to `Math/log` and `atan2` to `Math/atan2`.\n\n### Fixed\n\n- Fix readback of numeric operations. ([#467][gh-467])\n- Propagate the \"builtin\" attribute of definitions when extracting functions from `bend` and `fold` syntax.\n- Panic while using unscoped variables on definition patterns. ([#468][gh-468])\n\n### Added\n\n- Create new type of top-level definition for writing native HVM definitions. ([#586][gh-586])\n- Add `log` and `atan2` builtin functions. ([#583][gh-583])\n- Add `to_f24`, `to_u24` and `to_i24` number casting builtin functions. ([#582][gh-582])\n- Add `IO/sleep` builtin function to sleep for a given amount of seconds as a float. ([#581][gh-581])\n- Add primitive file IO functions `IO/FS/{read, write, seek, open, close}`. ([#573][gh-573])\n- Add encoding/decoding builtin functions `Bytes/{decode_utf8, decode_ascii} String/{encode_ascii, decode_ascii} Utf8/{decode_character, REPLACEMENT_CHARACTER}`. ([#580][gh-580])\n- Add `IO/print` function to print to stdout. ([#579][gh-579])\n- Add `IO/input` function to read a line of input from stdin. ([#579][gh-579])\n- Add file IO utilities `IO/FS/{read_file, write_file, read_line, read_to_end}`. ([#578][gh-578])\n- Add list utilities `List/{length, reverse, flatten, concat}`.\n- Add `elif` chains to functional syntax. ([#596][gh-596])\n- Add local definitions to imperative syntax. ([#562][gh-562])\n- Add local definitions to functional syntax.\n- Add repeated field name error message.\n- Add `Math` builtin functions. ([#570][gh-570])\n- Add primitive file IO function `IO/FS/flush`. ([#598][gh-598])\n- Changed `bend run` to `bend run-rs` and `bend run` defaults to the C implementation. ([#620][gh-620])\n\n## [0.2.35] - 2024-06-06\n\n### Changed\n\n- Make lambda `Term` with bind patterns display as `let` terms. ([#466][gh-466])\n\n## [0.2.34] - 2024-06-05\n\n### Added\n\n- Add syntax for \"less than or equal\" `<=` and \"greater than or equal\" `>=` numeric operators. ([#451][gh-451])\n\n## [0.2.33] - 2024-06-05\n\n### Added\n\n- Implement `expand_main`, a compilation pass that expands references in the entry point function. ([#424][gh-424])\n\n### Changed\n\n- Make the `float_combinators` pass no longer extract in the entry point function. ([#424][gh-424])\n\n## [0.2.32] - 2024-06-05\n\n### Added\n\n- Implement the built-in `Tree` datatype. ([#528][gh-528])\n- Implement `![]` and `!` syntax for `Tree` literals. ([#528][gh-528])\n- Create a changelog.\n\n### Changed\n\n- Move the builtins documentation to `/docs`.\n\n## [0.2.30] - 2024-06-04\n\n### Changed\n\n- No longer expand generated recursive definitions. ([#502][gh-502])\n\n## [0.2.29] - 2024-06-04\n\n### Added\n\n- Support custom HVM binaries. ([#479][gh-479])\n\n### Changed\n\n- Make monadic blocks lazy by deferring execution of continuations with free vars. ([#526][gh-526])\n\n## [0.2.28] - 2024-05-30\n\n### Added\n\n- Support mapper statements. ([#465][gh-465])\n\n## [0.2.27] - 2024-05-29\n\n### Changed\n\n- Make `with` clauses take a bind and an argument. ([#516][gh-516])\n\n## [0.2.26] - 2024-05-28\n\n### Changed\n\n- `do` keyword to `with`. ([#494][gh-494])\n\n### Added\n\n- `wrap` alias inside `with` blocks. ([#494][gh-494])\n\n## [0.2.25] - 2024-05-28\n\n### Added\n\n- Generated constructor tags. ([#512][gh-512])\n\n## [0.2.24] - 2024-05-27\n\n### Added\n\n- `elif` chains. ([#427][gh-427])\n\n## [0.2.23] - 2024-05-27\n\n### Fixed\n\n- `gen-cu` and `gen-c` commands after move to HVM syntax tree.\n\n## [0.2.22] - 2024-05-26\n\n### Changed\n\n- Rust channel from `nightly` to `stable`. ([#486][gh-486])\n\n## [0.2.21] - 2024-05-25\n\n### Changed\n\n- HVM syntax tree for representing inets inside the compiler. ([#475][gh-475])\n\n## [0.2.20] - 2024-05-24\n\n### Fixed\n\n- Map getters generation inside map setters. ([#489][gh-489])\n\n## [0.2.19] - 2024-05-24\n\n### Changed\n\n- Variable names to not allow `__`. ([#478][gh-478])\n\n## [0.2.18] - 2024-05-24\n\n### Fixed\n\n- Nested map getters generation. ([#483][gh-483])\n\n## [0.2.17] - 2024-05-23\n\n### Changed\n\n- Top-level names to not start with `//`. ([#443][gh-443])\n\n## [0.2.16] - 2024-05-23\n\n### Added\n\n- New `IO` builtins.\n\n### Fixed\n\n- Definition pruning transformation.\n\n## [0.2.15] - 2024-05-22\n\n### Fixed\n\n- Exponentiation miscompilation. ([#444][gh-444])\n\n## [0.2.14] - 2024-05-22\n\n### Changed\n\n- Inet level eta-reduction pass to not reduce number nodes.\n\n## [0.2.13] - 2024-05-22\n\n### Fixed\n\n- Scope of `fork`.\n\n## [0.2.12] - 2024-05-22\n\n### Changed\n\n- Functional syntax `data` keyword to `type`.\n\n## [0.2.11] - 2024-05-22\n\n### Added\n\n- List comprehension.\n- Bit shift left and Bit shift right.\n\n## [0.2.10] - 2024-05-21\n\n### Changed\n\n- Numbers to new HVM number operation format.\n- Rules definition to be in a single block.\n- Disabled `net-size` check by default.\n\n## [0.2.9] - 2024-05-19\n\n### Changed\n\n- Readback error messages.\n\n## [0.2.8] - 2024-05-19\n\n### Changed\n\n- Increase max net size.\n- `check-net-size` to be optional.\n\n## [0.2.7] - 2024-05-17\n\n### Added\n\n- Apache-2.0 License.\n\n## [0.2.6] - 2024-05-17\n\n### Added\n\n- Simple readback of tuples.\n\n### Changed\n\n- Imperative syntax to require `,` in list-like builtins.\n\n### Fixed\n\n- Empty map parsing.\n\n## [0.2.5] - 2024-05-16\n\n### Added\n\n- Exponentiation `**` operator.\n\n### Changed\n\n- `go` to `fork` inside `bend` statement.\n\n## [0.2.4] - 2024-05-15\n\n### Changed\n\n- New version for hvm-core compatibility.\n\n## [0.2.3] - 2024-05-15\n\n### Changed\n\n- Rename to `bend-lang`.\n- Use crates.io HVM.\n\n### Added\n\n- List readback.\n\n## [0.2.2] - 2024-05-15\n\n### Changed\n\n- Comments from `//` to `#`.\n- Lambda syntax and built-in constructor names.\n- Fold to require explicit state passing.\n\n### Added\n\n- Record types and destructuring.\n- String readback.\n\n## [0.2.1] - 2024-05-15\n\n### Fixed\n\n- Number parsing in imperative syntax.\n\n### Changed\n\n- Require `\\n` after return.\n\n## [0.2.0] - 2024-05-14\n\n- Initial public release of Bend.\n\n[0.2.0]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.0\n[0.2.1]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.1\n[0.2.2]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.2\n[0.2.3]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.3\n[0.2.4]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.4\n[0.2.5]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.5\n[0.2.6]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.6\n[0.2.7]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.7\n[0.2.8]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.8\n[0.2.9]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.9\n[0.2.10]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.10\n[0.2.11]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.11\n[0.2.12]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.12\n[0.2.13]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.13\n[0.2.14]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.14\n[0.2.15]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.15\n[0.2.16]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.16\n[0.2.17]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.17\n[0.2.18]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.18\n[0.2.19]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.19\n[0.2.20]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.20\n[0.2.21]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.21\n[0.2.22]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.22\n[0.2.23]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.23\n[0.2.24]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.24\n[0.2.25]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.25\n[0.2.26]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.26\n[0.2.27]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.27\n[0.2.28]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.28\n[0.2.29]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.29\n[0.2.30]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.30\n[0.2.32]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.32\n[0.2.33]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.33\n[0.2.34]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.34\n[0.2.35]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.35\n[0.2.36]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.36\n[0.2.37]: https://github.com/HigherOrderCO/Bend/releases/tag/0.2.37\n[Unreleased]: https://github.com/HigherOrderCO/Bend/compare/0.2.37...HEAD\n[gh-424]: https://github.com/HigherOrderCO/Bend/issues/424\n[gh-427]: https://github.com/HigherOrderCO/Bend/issues/427\n[gh-443]: https://github.com/HigherOrderCO/Bend/issues/443\n[gh-444]: https://github.com/HigherOrderCO/Bend/issues/444\n[gh-451]: https://github.com/HigherOrderCO/Bend/issues/451\n[gh-463]: https://github.com/HigherOrderCO/Bend/issues/463\n[gh-464]: https://github.com/HigherOrderCO/Bend/issues/464\n[gh-465]: https://github.com/HigherOrderCO/Bend/issues/465\n[gh-466]: https://github.com/HigherOrderCO/Bend/issues/466\n[gh-467]: https://github.com/HigherOrderCO/Bend/issues/467\n[gh-468]: https://github.com/HigherOrderCO/Bend/issues/468\n[gh-470]: https://github.com/HigherOrderCO/Bend/issues/470\n[gh-475]: https://github.com/HigherOrderCO/Bend/issues/475\n[gh-478]: https://github.com/HigherOrderCO/Bend/issues/478\n[gh-479]: https://github.com/HigherOrderCO/Bend/issues/479\n[gh-483]: https://github.com/HigherOrderCO/Bend/issues/483\n[gh-485]: https://github.com/HigherOrderCO/Bend/issues/485\n[gh-486]: https://github.com/HigherOrderCO/Bend/issues/486\n[gh-489]: https://github.com/HigherOrderCO/Bend/issues/489\n[gh-494]: https://github.com/HigherOrderCO/Bend/issues/494\n[gh-502]: https://github.com/HigherOrderCO/Bend/issues/502\n[gh-512]: https://github.com/HigherOrderCO/Bend/issues/512\n[gh-513]: https://github.com/HigherOrderCO/Bend/issues/513\n[gh-514]: https://github.com/HigherOrderCO/Bend/issues/514\n[gh-516]: https://github.com/HigherOrderCO/Bend/issues/516\n[gh-526]: https://github.com/HigherOrderCO/Bend/issues/526\n[gh-528]: https://github.com/HigherOrderCO/Bend/issues/528\n[gh-544]: https://github.com/HigherOrderCO/Bend/pull/544\n[gh-554]: https://github.com/HigherOrderCO/Bend/issues/554\n[gh-562]: https://github.com/HigherOrderCO/Bend/issues/562\n[gh-570]: https://github.com/HigherOrderCO/Bend/issues/570\n[gh-573]: https://github.com/HigherOrderCO/Bend/issues/573\n[gh-578]: https://github.com/HigherOrderCO/Bend/issues/578\n[gh-579]: https://github.com/HigherOrderCO/Bend/issues/579\n[gh-580]: https://github.com/HigherOrderCO/Bend/issues/580\n[gh-581]: https://github.com/HigherOrderCO/Bend/issues/581\n[gh-582]: https://github.com/HigherOrderCO/Bend/issues/582\n[gh-583]: https://github.com/HigherOrderCO/Bend/issues/583\n[gh-586]: https://github.com/HigherOrderCO/Bend/issues/586\n[gh-595]: https://github.com/HigherOrderCO/Bend/issues/595\n[gh-596]: https://github.com/HigherOrderCO/Bend/issues/596\n[gh-598]: https://github.com/HigherOrderCO/Bend/issues/598\n[gh-618]: https://github.com/HigherOrderCO/Bend/issues/618\n[gh-620]: https://github.com/HigherOrderCO/Bend/issues/620\n[gh-621]: https://github.com/HigherOrderCO/Bend/issues/621\n[gh-623]: https://github.com/HigherOrderCO/Bend/issues/623\n[gh-629]: https://github.com/HigherOrderCO/Bend/issues/629\n[gh-638]: https://github.com/HigherOrderCO/Bend/issues/638\n[gh-642]: https://github.com/HigherOrderCO/Bend/issues/642\n[gh-643]: https://github.com/HigherOrderCO/Bend/issues/643\n[gh-648]: https://github.com/HigherOrderCO/Bend/issues/648\n[gh-657]: https://github.com/HigherOrderCO/Bend/issues/657\n[gh-659]: https://github.com/HigherOrderCO/Bend/pull/659\n[gh-673]: https://github.com/HigherOrderCO/Bend/pull/673\n[gh-674]: https://github.com/HigherOrderCO/Bend/issues/674\n[gh-675]: https://github.com/HigherOrderCO/Bend/issues/675\n[gh-706]: https://github.com/HigherOrderCO/Bend/issues/706\n[gh-734]: https://github.com/HigherOrderCO/Bend/issues/734\n[gh-736]: https://github.com/HigherOrderCO/Bend/issues/736\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.1025390625,
          "content": "# Contributing to Bend\n\nThank you for considering contributing to Bend!\n\n## How to Contribute\n\n### Reporting bugs\n\n1. **Check for existing issues:** Before you create a new issue, please do a search in [our issues](https://github.com/HigherOrderCO/Bend/issues) to see if the issue or feature request has already been filed.\n2. **Create a new issue:** If you find no issue or your issue differs, [create a new issue](https://github.com/HigherOrderCO/Bend/issues/new?template=bug_report.yml) and provide detailed information, including steps to reproduce the problem.\n\n### Suggesting Enhancements\n\n1. **Check for existing suggestions:** Before suggesting a new feature, please check if it's already been suggested in [our issues](https://github.com/HigherOrderCO/Bend/issues).\n2. **Create a new suggestion:** If you find no similar suggestion, [create a new suggestion issue](https://github.com/HigherOrderCO/Bend/issues/new?template=feature_request.md) and provide detailed information about the enhancement and why it would be useful.\n\n### Checking HVM Issues\n\nSince Bend depends on HVM, some issues might be related to HVM rather than Bend itself. Please also check the [HVM issues page](https://github.com/HigherOrderCO/HVM/issues) to see if your issue has already been reported there.\n\n### Submitting Changes\n\n1. **Fork the repository:** Create your own fork of the repository on GitHub.\n2. **Create a new branch:** Make your changes in a new branch in your forked repository.\n3. **Run formatting and linting checks:** Before submitting your changes, ensure your code is properly formatted and linted:\n   - Run `cargo fmt` to format your code.\n   - Run `cargo clippy` to lint your code.\n4. **Run tests:** Ensure all tests pass and update any test results:\n   - Run `cargo insta test` to run the tests.\n      > If insta is not available as a cargo command, install it using `cargo install cargo-insta`.\n   - Run `cargo insta review` to save any changes to the test results.\n5. **Submit a pull request:** Once your changes are ready, submit a pull request from your branch to the `main` branch of the Bend Repository\n\nWe appreciate every contribution!\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 12.845703125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"TSPL\"\nversion = \"0.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe639519d49b56c98fd4fde7a5a7be01b5563862341a783b9bc2eb58f5120d8b\"\ndependencies = [\n \"highlight_error\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ad186efb764318d35165f1758e7dcef3b10628e26d41a44bc5550652e6804391\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19\"\ndependencies = [\n \"anstyle\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"bend-lang\"\nversion = \"0.2.37\"\ndependencies = [\n \"TSPL\",\n \"clap\",\n \"highlight_error\",\n \"hvm\",\n \"indexmap\",\n \"insta\",\n \"interner\",\n \"itertools\",\n \"loaned\",\n \"stacker\",\n \"stdext\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.99\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96c51067fd44124faa7f870b4b1c969379ad32b2ba805aa959430ceaa384f695\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5db83dced34638ad474f39f250d7fea9598bdd239eaced1bdf45d597da0f433f\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7e204572485eb3fbf28f871612191521df159bc3e15a9f5064c66dba3a8c05f\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c780290ccf4fb26629baa7a1081e68ced113f1d3ec302fa5948f1c381ebf06c6\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b82cf0babdbd58558212896d1a4272303a57bdb245c2bf1147185fb45640e70\"\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422\"\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3dca9240753cf90908d7e4aac30f630662b02aebaa1b58a3cadabdb23385b58b\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"highlight_error\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"809e18805660d7b6b2e2b9f316a5099521b5998d5cba4dda11b5157a21aaef03\"\n\n[[package]]\nname = \"hvm\"\nversion = \"2.0.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fafa02949c005e70869074ac9db489ad92eaf92c78b4dcf6c0b45d98982c08d\"\ndependencies = [\n \"TSPL\",\n \"cc\",\n \"clap\",\n \"highlight_error\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"insta\"\nversion = \"1.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"810ae6042d48e2c9e9215043563a58a80b877bc863228a74cf10c49d4620a6f5\"\ndependencies = [\n \"console\",\n \"lazy_static\",\n \"linked-hash-map\",\n \"similar\",\n]\n\n[[package]]\nname = \"interner\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8c60687056b35a996f2213287048a7092d801b61df5fee3bd5bd9bf6f17a2d0\"\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1c173a5686ce8bfa551b3563d0c2170bf24ca44da99c7ca4bfdab5418c3fe57\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.155\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97b3888a4aecf77e811145cadf6eef5901f4782c53886191b2f693f24761847c\"\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"loaned\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4c980a418236e2d8f7c239f73e49afc38e7f71772fcd3fc723d95c3d93a7591\"\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.85\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22244ce15aa966053a896d1accb3a6e68469b97c7f33f284b99f0d576879fc23\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"psm\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5787f7cda34e3033a72192c018bc5883100330f362ef279a8cbccfce8bb4e874\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"similar\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa42c91313f1d05da9b26f267f931cf178d4aba455b4c4622dd7355eb80c6640\"\n\n[[package]]\nname = \"stacker\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c886bd4480155fd3ef527d45e9ac8dd7118a898a46530b7b94c3e21866259fce\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"psm\",\n \"winapi\",\n]\n\n[[package]]\nname = \"stdext\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4af28eeb7c18ac2dbdb255d40bee63f203120e1db6b0024b177746ebec7049c1\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c42f3f41a2de00b01c0aaad383c5a45241efc8b2d1eda5661812fda5f3cdcff5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06abde3611657adf66d383f00b093d7faecc7fa57071cce2578660c9f1010821\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.712890625,
          "content": "[package]\nname = \"bend-lang\"\ndescription = \"A high-level, massively parallel programming language\"\nlicense = \"Apache-2.0\"\nversion = \"0.2.37\"\nedition = \"2021\"\nrust-version = \"1.74\"\nexclude = [\"tests/\"]\n\n[lib]\nname = \"bend\"\npath = \"src/lib.rs\"\n\n[[bin]]\nname = \"bend\"\npath = \"src/main.rs\"\nrequired-features = [\"cli\"]\n\n[profile.release]\nlto = true\n\n[features]\ndefault = [\"cli\"]\ncli = [\"dep:clap\"]\n\n[dependencies]\nTSPL = \"0.0.13\"\nclap = { version = \"4.4.1\", features = [\"derive\"], optional = true }\nhighlight_error = \"0.1.1\"\nhvm = \"=2.0.22\"\nindexmap = \"2.2.3\"\ninterner = \"0.2.1\"\nitertools = \"0.11.0\"\nloaned = \"0.1.0\"\nstacker = \"0.1\"\n\n[dev-dependencies]\ninsta = \"1.34.0\"\nstdext = \"0.3.1\"\nwalkdir = \"2.3.3\"\n\n[profile.test]\nopt-level = 2\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 3.287109375,
          "content": "# Known Issues and Frequently Asked Questions\n\n## Installation and Setup\n\n### Can I run this on Windows?\n- We're still working on the windows support, for the moment, please use [WSL2](https://learn.microsoft.com/en-us/windows/wsl/install).\n\n### I'm getting a `CUDA not available!` error even though I have it installed?\n- CUDA support is enable only during installation. If you first installed HVM and then installed CUDA and `nvcc`, please try to install HVM again.\n\n### I'm getting a `Failed to launch kernels (error code invalid argument)!` error.\n- The current iteration of the `hvm.cu` was written with the RTX 4090 in mind, and won't work on older GPUs, since they contain about half of the newer GPUs shared memory, for better understanding please refer to [HVM#283](https://github.com/HigherOrderCO/HVM/issues/283). We are working on support for older GPUs and will release it soon.\n\n### I get \"Command `bend` not found\" after installing, what do I do?\n- If you are on Unix system (or WSL) then most likely bend did not add itself to the PATH variable in your rc file. To remedy this:\n  - Determine if you are using bash or zsh (check for presence of `~/.bashrc` or `~/.zshrc`)\n  - Make change to the relevant file by running `echo -n 'export PATH=$PATH:$HOME/.cargo/bin' >> ~/.bashrc`\n    - use `~/.zshrc` in place of `~/.bashrc` in the case you are on zsh system\n  - You will then need to run `source ~/.bashrc` or `source ~/.zshrc` for the changes to take effect immediately\n  - Try running `bend` once more - it should work now! \n\n### I got an error when installing HVM on Linux\n- If the error happens when compiling the CUDA runtime or contains anything regarding `ccbin`, please refer to [HVM#291](https://github.com/HigherOrderCO/HVM/issues/291).\n\n- If the error contains anything regarding `libc` missing, please refer to [HVM#355](https://github.com/HigherOrderCO/Bend/issues/355)\n\n### Can I run this on AMD/Intel/Apple GPUs?\n- We plan on adding support to many other GPUs as soon as the CUDA version is sufficiently stable.\n\n### What GPUs are supported?\nGPUs with >=96KB L1 cache per SM *should* work. This includes the following:\n| GPU                         | Tested? |\n|-----------------------------|---------|\n| RTX 4090                    | Yes     |\n| All Other Desktop 40 Series | No      |\n| All Desktop 30 Series       | No      |\n| All Mobile 40 Series        | No      |\n| All Mobile 30 Series        | No      |\n\n## Using Bend\n\n### How do I use IO?\n- IO is still being developed and is expected to come soon.\n\n### How to do FFI?\n- Not as soon as basic IO, but planned or at least something similar to FFI.\n\n### Are there any Libraries, Packages etc?\n- A package manager will be added soon.\n\n### Why are my numbers giving me wrong results?\nSome possibilities:\n- Your program is causing an overflow on 24-bit number values.\n- Your program is doing operations on numbers of different types. (e.g. `2.0 + 1` is not allowed, you must use `2.0 + 1.0`)\n- Floating point numbers are currently bugged and are interpreted incorrectly in some cases.\n- There's a bug with signed integers numbers that flips that sometimes flips the order of the operations.\n\n### I'm getting an error of failed assertion\n- HVM currently has a bug in its conversion of f32 to f24 and it's unable to read the number 0.0. We already have a fix that we're working on.\n"
        },
        {
          "name": "FEATURES.md",
          "type": "blob",
          "size": 12.8564453125,
          "content": "## Features\n\nBend offers two flavors of syntax, the user-friendly python-like syntax \"Imp\" (the default) and the core ML/Haskell-like syntax \"Fun\".\nYou can read the full reference for both of them [here](docs/syntax.md), but these examples will use the first one.\n\nTo see some more complex examples programs, check out the [examples](examples/) folder.\n\n### Basic features\n\nWe can start with a basic program that adds the numbers 3 and 2.\n\n```py\ndef main:\n  return 2 + 3\n```\n\nRunning this program will show the number 5.\nBe careful with `run` since it will not show any warnings by default. Before running a new program, it's useful to first `check` it.\n\nBend programs consist of a series of function definitions, always starting with a function called `main` or `Main`.\n\nFunctions can receive arguments both directly and using a lambda abstraction.\n\n```py\n# These two are equivalent\ndef add(x, y):\n  return x + y\n\ndef add2:\n  return lambda x, y: x + y\n```\n\nYou can then call this function like this:\n\n```py\ndef main:\n  sum = add(2, 3)\n  return sum\n```\n\n### Data types\n\nYou can bundle multiple values into a single value using a tuple or a struct.\n\n```py\n# With a tuple\ndef tuple_fst(x):\n  # This destructures the tuple into the two values it holds.\n  # '*' means that the value is discarded and not bound to any variable.\n  (fst, *) = x\n  return fst\n\n# With an object (similar to what other languages call a struct, a class or a record)\nobject Pair { fst, snd }\n\ndef Pair/fst(x):\n  match x:\n    case Pair:\n      return x.fst\n\n# We can also access the fields of an object after we `open` it.\ndef Pair/fst_2(x):\n  open Pair: x\n  return x.fst\n\n# This is how we can create new objects.\ndef Pair/with_one(x):\n  return Pair{ fst: x, snd: 1 }\n\n# The function can be named anything, but by convention we use Type/function_name.\ndef Pair/swap(x):\n  open Pair: x\n  # We can also call the constructor like any normal function.\n  return Pair(x.snd, x.fst)\n```\n\nFor more complicated data structures, we can use `type` to define algebraic data types.\n\n```py\ntype MyTree:\n  Node { val, ~left, ~right }\n  Leaf\n```\n\nThis defines a constructor function for each variant of the type, with names `MyTree/Node` and `MyTree/Leaf`.\n\nLike most things in bend (except tuples and numbers), types defined with `type` and `object` become lambda encoded functions.\nYou can read how this is done internally by the compiler in [Defining data types](docs/defining-data-types.md) and [Pattern matching](docs/pattern-matching.md).\n\n### Pattern matching\n\nWe can pattern match on values of a data type to perform different actions depending on the variant of the value.\n\n```py\ndef Maybe/or_default(x, default):\n  match x:\n    case Maybe/Some:\n      # We can access the fields of the variant using 'matched.field'\n      return x.val\n    case Maybe/None:\n      return default\n```\n\n### Folding and bending\n\nWe use `~` to indicate that a field is recursive.\nThis allows us to easily create and consume these recursive data structures with `bend` and `fold`.\n\n`fold` is a recursive `match` that you can use to transform and consume data structures.\n`bend` is a pure recursive loop that is very useful for generating data structures.\n\n```py\ndef MyTree.sum(x):\n  # Sum all the values in the tree.\n  fold x:\n    # The fold is implicitly called for fields marked with '~' in their definition.\n    case MyTree/Node:\n      return x.val + x.left + x.right\n    case MyTree/Leaf:\n      return 0\n\ndef main:\n  bend val = 0:\n    when val < 10:\n      # 'fork' calls the bend recursively with the provided values.\n      x = MyTree/Node { val:val, left:fork(val + 1), right:fork(val + 1) }\n    else:\n      # 'else' is the base case, when the condition fails.\n      x = MyTree/Leaf\n\n  return MyTree.sum(x)\n```\n\nThese are equivalent to inline recursive functions that create a tree and consume it.\n\n```py\ndef MyTree.sum(x):\n  match x:\n    case MyTree/Node:\n      return x.val + MyTree.sum(x.left) + MyTree.sum(x.right)\n    case MyTree/Leaf:\n      return 0\n\ndef main_bend(val):\n  if val < 10:\n    return MyTree/Node(val, main_bend(val + 1), main_bend(val + 1))\n  else:\n    return MyTree/Leaf\n\ndef main:\n  x = main_bend(0)\n  return MyTree.sum(x)\n```\n\nMaking your program around folding trees is a very good way of making it parallelizable, since each core can be dispatched to work on a different branch of the tree.\n\nYou can also pass some state variables to `fold` just like the variables used in a `bend`.\nIf you give a `fold` some state, then you necessarily need to pass it by calling the folded fields of the matched value, like passing an additional argument to the fold call.\n\n```py\n# This function substitutes each value in the tree with the sum of all the values before it.\ndef MyTree.map_sum(x):\n  acc = 0\n  fold x with acc:\n    case MyTree/Node:\n      # `x.left` and `x.right` are called with the new state value.\n      # Note that values are copied if you use them more than once, so you don't want to pass something very large.\n      return MyTree/Node{ val: x.val + acc, left: x.left(x.val + acc), right: x.right(x.val + acc) }\n    case MyTree/Leaf:\n      return x\n```\n\nThis allows `fold` to be a very powerful and generic tool that can be used to implement most pure data transformations.\n\n### Some caveats and limitations\n\n_Attention_: Note that despite the ADT syntax sugars, Bend is an _untyped_ language and the compiler will not stop you from using values incorrectly, which can lead to very unexpected results.\nFor example, the following program will compile just fine even though `!=` is only defined for native numbers:\n\n```py\ndef main:\n  bend val = [0, 1, 2, 3]:\n    when val != []:\n      match val:\n        case List/Cons:\n          x = val.head + fork(val.tail)\n        case List/Nil:\n          x = 0\n    else:\n      x = 0\n  return x\n```\n\nRunning this program will show `λ* *` and not the expected `6`.\n\nIt's also important to note that Bend is linear (technically affine), meaning that every variable is only used once. When a variable is used more than once, the compiler will automatically insert a duplication.\nDuplications efficiently share the same value between two locations, only cloning a value when it's actually needed, but their exact behaviour is slightly more complicated than that and escapes normal lambda-calculus rules.\nYou can read more about it in [Dups and sups](docs/dups-and-sups.md) and learn how pattern matching avoids this problem in [Pattern matching](docs/pattern-matching.md).\n\nTo use a variable twice without duplicating it, you can use a `use` statement.\nIt inlines clones of some value in the statements that follow it.\n\n```py\ndef foo(x):\n  use result = bar(1, x)\n  return (result, result)\n\n# Is equivalent to\ndef foo(x):\n  return (bar(1, x), bar(1, x))\n```\n\nNote that any variable in the `use` will end up being duplicated.\n\nBend supports recursive functions of unrestricted depth:\n\n```py\ndef native_num_to_adt(n):\n  if n == 0:\n    return Nat/Zero\n  else:\n    return Nat/Succ(native_num_to_adt(n - 1))\n```\n\nIf your recursive function is not based on pattern matching syntax (like `if`, `match`, `fold`, etc) you have to be careful to avoid an infinite loop.\n\n```py\n# A scott-encoded list folding function\n# Writing it like this will cause an infinite loop.\ndef scott_list.add(xs, add):\n  xs(\n    λxs.head xs.tail: λc n: (c (xs.head + add) scott_list.sum(xs.tail, add)),\n    λc λn: n\n  )\n\n# Instead we want to write it like this;\ndef scott_list.add(xs, add):\n  xs(\n    λxs.head xs.tail: λadd: λc n: (c (xs.head + add) scott_list.sum(xs.tail, add)),\n    λadd: λc λn: n,\n    add\n  )\n```\n\nSince Bend is eagerly executed, some situations will cause function applications to always be expanded, which can lead to looping situations.\nYou can read how to avoid this in [Lazy definitions](docs/lazy-definitions.md).\n\n### Numbers\n\nBend has native numbers and operations.\n\n```py\ndef main:\n  a = 1      # A 24 bit unsigned integer.\n  b = +2     # A 24 bit signed integer.\n  c = -3     # Another signed integer, but with negative value.\n  d = 1.0    # A 24 bit floating point number.\n  e = +0.001 # Also a float.\n  return (a * 2, b - c, d / e)\n```\n\nUnsigned numbers are written as just the number.\nSigned numbers are written with a `+` or `-` sign.\nFloating point numbers must have the decimal point `.` and can optionally take a sign `+` or `-`.\n\nThe three number types are fundamentally different.\nIf you mix two numbers of different types HVM will interpret the binary representation of one of them incorrectly, leading to incorrect results. Which number is interpreted incorrectly depends on the situation and shouldn't be relied on for now.\n\nAt the moment Bend doesn't have a way to convert between the different number types, but it will be added in the future.\n\nYou can use `switch` to pattern match on unsigned native numbers:\n\n```py\nswitch x = 4:\n  # From '0' to n, ending with the default case '_'.\n  case 0:  \"zero\"\n  case 1:  \"one\"\n  case 2:  \"two\"\n  # The default case binds the name <arg>-<n>\n  # where 'arg' is the name of the argument and 'n' is the next number.\n  # In this case, it's 'x-3', which will have value (4 - 3) = 1\n  case _:  String.concat(\"other: \", (String.from_num x-3))\n```\n\n### Other builtin types\n\nBend has Lists and Strings, which support Unicode characters.\n\n```py\ndef main:\n  return [\"You: Hello, 🌎\", \"🌎: Hello, user\"]\n```\n\nA string is desugared to a String data type containing two constructors, `String/Cons` and `String/Nil`.\nList also becomes a type with two constructors, `List/Cons` and `List/Nil`.\n\n```py\n# When you write this\ndef StrEx:\n  return \"Hello\"\ndef ids:\n  return [1, 2, 3]\n\n# The compiler converts it to this\ndef StrEx:\n  String/Cons('H', String/Cons('e', String/Cons('l', String/Cons('l', String/Cons('o', String/Nil)))))\ndef ids:\n  List/Cons(1, List/Cons(2, List/Cons(3, List/Nil)))\n\n# These are the definitions of the builtin types.\ntype String:\n  Cons { head, ~tail }\n  Nil\ntype List:\n  Cons { head, ~tail }\n  Nil\n```\n\nCharacters are delimited by `'` `'` and support Unicode escape sequences. They are encoded as a U24 with the unicode codepoint as their value.\n\n```py\n# These two are equivalent\ndef chars:\n  return ['A', '\\u{4242}', '🌎']\n\ndef chars2:\n  return [65, 0x4242, 0x1F30E]\n```\n\nBend has a built-in binary tree Map data structure where the key is a `u24` value, meaning you can use numbers, characters, and symbols as keys.\n\nMaps are delimited by `{` `}` and its entries are separated by commas. A key-value entry in a map is denoted using a colon `:`. For example:\n\n```py\n{ 42: [4, 2] } # 42 is the key and [4, 2] is the value\n```\n\nA Map is desugared to a Map data type containing two constructors `Map/Leaf` and `Map/Node`.\n\n```py\n# When you write this\ndef empty_map:\n  return {}\n\ndef init_map:\n  return { 1: \"one\", 2: \"two\", `blue`: 0x0000FF }\n\ndef main:\n  map = init_map\n  one = map[1]    # map getter syntax\n  map[0] = \"zero\" # map setter syntax\n  return one\n\n# The compiler converts it to this\ndef empty_map():\n  return Map/Leaf\n\ndef init_map():\n  map = Map/set(Map/Leaf, 1, \"one\")\n  map = Map/set(map, 2, \"two\")\n  map = Map/set(map, `blue`, 0x0000FF)\n  return map\n\ndef main():\n  map = init_map\n  (one, map) = Map/get(map, 1)\n  map = Map/set(map, 0, \"zero\")\n  return one\n\n# The builtin Map type definition\ntype Map:\n  Node { value, ~left, ~right }\n  Leaf\n```\n\nNotice that the getter and setter syntax induces an order on things using the map, since every get or set operation depends on the value of the previous map.\n> **_NOTE:_** Do not get mistaken with lists creation syntax, that also uses `[` `]`.\n\n### Mixing syntaxes\n\nAs was said in the beginning, Bend offers two flavors of syntax.\nYou can mix and match them freely in your program, as long as each function uses only one flavor.\n\n```py\ntype Bool:\n  True\n  False\n\ndef is_odd(x):\n  switch x:\n    case 0:\n      return Bool/False\n    case _:\n      return is_even(x-1)\n\n(is_even n) = switch n {\n  0: return Bool/True\n  _: (is_odd n-1)\n}\n\nmain = (is_odd 20)\n```\n\n### More features\n\nKey:\n\n- &#128215;: Basic resources\n- &#128217;: Intermediate resources\n- &#128213;: Advanced resources\n\nOther features are described in the following documentation files:\n\n- &#128215; Lazy definitions: [Making recursive definitions lazy](docs/lazy-definitions.md)\n- &#128215; Data types: [Defining data types](docs/defining-data-types.md)\n- &#128215; Pattern matching: [Pattern matching](docs/pattern-matching.md)\n- &#128215; Native numbers and operations: [Native numbers](docs/native-numbers.md)\n- &#128215; Builtin definitions: [Builtins](docs/builtins.md)\n- &#128215; CLI arguments: [CLI arguments](docs/cli-arguments.md)\n- &#128217; Duplications and superpositions: [Dups and sups](docs/dups-and-sups.md)\n- &#128217; Scopeless lambdas: [Using scopeless lambdas](docs/using-scopeless-lambdas.md)\n- &#128213; Fusing functions: [Writing fusing functions](docs/writing-fusing-functions.md)\n\n## Further reading\n\n- &#128217; [Compilation and readback](docs/compilation-and-readback.md)\n- &#128217; [Old HVM wiki learning material](https://github.com/HigherOrderCO/HVM/wiki/HVM-Wiki). It is outdated, but it can still teach you some of the basics.\n"
        },
        {
          "name": "GUIDE.md",
          "type": "blob",
          "size": 24.2626953125,
          "content": "# Bend in X minutes - the ultimate guide!\n\nBend is a high-level, massively parallel programming language. That means it\nfeels like Python, but scales like CUDA. It runs on CPUs and GPUs, and you don't\nhave to do anything to make it parallel: as long as your code isn't \"helplessly\nsequential\", it **will** use 1000's of threads!\n\nWhile cool, Bend is far from perfect. In absolute terms it is still not so fast.\nCompared to SOTA compilers like GCC or GHC, our code gen is still embarrassingly\nbad, and there is a lot to improve. And, of course, in this beginning, there\nwill be tons of instability and bugs. That said, it does what it promises:\nscaling horizontally with cores. And that's really cool! If you'd like to be an\nearly adopter of this interesting tech, this guide will teach you how to apply\nBend to build parallel programs in a new way!\n\nFor a more technical dive, check HVM2's\n[paper](http://paper.HigherOrderCO.com/). For an entertaining, intuitive\nexplanation, see HVM1's classic\n[HOW.md](https://github.com/HigherOrderCO/HVM/blob/master/guide/HOW.md). But if\nyou just want to dive straight into action - this guide is for you. Let's go!\n\n## Installation\n\n### Install dependencies\n\n#### On Linux\n\n```sh\n# Install Rust if you haven't it already.\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# For the C version of Bend, use GCC. We recommend a version up to 12.x.\nsudo apt install gcc\n```\n\nFor the CUDA runtime [install the CUDA toolkit for Linux](https://developer.nvidia.com/cuda-downloads?target_os=Linux) version 12.x.\n\n#### On Mac\n\n```sh\n# Install Rust if you haven't it already.\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# For the C version of Bend, use GCC. We recommend a version up to 12.x.\nbrew install gcc\n```\n\n### Install Bend\n\n1. Install HVM2 by running:\n\n```sh\n# HVM2 is HOC's massively parallel Interaction Combinator evaluator.\ncargo install hvm\n\n# This ensures HVM is correctly installed and accessible.\nhvm --version\n```\n\n2. Install Bend by running:\n\n```sh\n# This command will install Bend\ncargo install bend-lang\n\n# This ensures Bend is correctly installed and accessible.\nbend --version\n```\n\n## Hello, World!\n\nAs we said, Bend _feels_ like Python - in some ways. It is high-level, you can\neasily create objects and lists, there are ifs and loops. Yet, it is different:\nthere is some Haskell in it, in the sense algebraic datatypes, pattern-matching\nand recursion play an important role. This is how its `\"Hello, world!\"` looks:\n\n```python\ndef main():\n  return \"Hello, world!\"\n```\n\nWait - there is something strange there. Why `return`, not `print`? Well, _for\nnow_ (you'll read these words a lot), Bend doesn't have IO. We plan on\nintroducing it very soon! So, _for now_, all you can do is perform computations,\nand see results. To run the program above, type:\n\n```\nbend run-rs main.bend\n```\n\nIf all goes well, you should see `\"Hello, world!\"`. The `bend run-rs` command uses\nthe reference interpreter, which is slow. In a few moments, we'll teach you how\nto run your code in parallel, on both CPUs and GPUs. For now, let's learn some\nfundamentals!\n\n## Basic Functions and Datatypes\n\nIn Bend, functions are pure: they receive something, and they return something.\nThat's all. Here is a function that tells you how old you are:\n\n```python\ndef am_i_old(age):\n  if age < 18:\n    return \"you're a kid\"\n  else:\n    return \"you're an adult\"\n\ndef main():\n  return am_i_old(32)\n```\n\nThat is simple enough, isn't it? Here is one that returns the distance between\ntwo points:\n\n```python\ndef distance(ax, ay, bx, by):\n  dx = bx - ax\n  dy = by - ay\n  return (dx * dx + dy * dy) ** 0.5\n\ndef main():\n  return distance(10.0, 10.0, 20.0, 20.0)\n```\n\nThis isn't so pretty. Could we use tuples instead? Yes:\n\n```python\ndef distance(a, b):\n  (ax, ay) = a\n  (bx, by) = b\n  dx = bx - ax\n  dy = by - ay\n  return (dx * dx + dy * dy) ** 0.5\n\ndef main():\n  return distance((10.0, 10.0), (20.0, 20.0))\n```\n\nSo far, this does look like Python, doesn't it? What about objects? Well - here,\nthere is a difference. In Python, we have classes. In Bend, we just have the\nobjects themselves. This is how we create a 2D vector:\n\n```python\nobject V2 { x, y }\n\ndef distance(a, b):\n  open V2: a\n  open V2: b\n  dx = b.x - a.x\n  dy = b.y - a.y\n  return (dx * dx + dy * dy) ** 0.5\n\ndef main():\n  return distance(V2 { x: 10.0, y: 10.0 }, V2 { x: 20.0, y: 20.0 })\n```\n\nThis doesn't look too different, does it? What is that `open` thing, though? It\njust tells Bend to _consume_ the vector, `a`, \"splitting\" it into its\ncomponents, `a.x` and `a.y`. Is that really necessary? Actually, no - not\nreally. But, _for now_, it is. This has to do with the fact Bend is an affine\nlanguage, which... well, let's not get into that. For now, just remember we\nneed `open` to access fields.\n\nBend comes with 3 built-in numeric types: `u24`, `i24`, `f24`. That's quite\nsmall, we admit. Soon, we'll have larger types. For now, that's what we got.\nThe `u24` type is written like `123` or `0xF`. The `i24` type requires a sign,\nas in, `+7` or `-7`. The `f24` type uses `.`, like `3.14`.\n\nOther than tuples, Bend has another, very general, way to encode data:\ndatatypes! These are just \"objects with tags\". A classic example of this is a\n\"shape\", which can be either a circle or a rectangle. It is defined like this:\n\n```python\ntype Shape:\n  Circle { radius }\n  Rectangle { width, height }\n\ndef area(shape):\n  match shape:\n    case Shape/Circle:\n      return 3.14 * shape.radius ** 2.0\n    case Shape/Rectangle:\n      return shape.width * shape.height\n\ndef main:\n  return area(Shape/Circle { radius: 10.0 })\n```\n\nIn this example, `Shape` is a datatype with two variants: `Circle` and\n`Rectangle`. The `area` function uses pattern matching to handle each variant\nappropriately. Just like objects need `open`, datatypes need `match`, which\ngive us access to fields in each respective case.\n\nDatatypes are very general. From matrices, to JSON, to quadtrees, every type of\ndata can be represented as a datatype (I mean, that's the name!). In fact,\nlists - which, on Python, are actually stored as arrays - are represented using\ndatatypes on Bend. Specifically, the type:\n\n```python\ntype List:\n  Nil\n  Cons { head, ~tail }\n```\n\nHere, the `Nil` variant represents an empty list, and the `Cons` variant\nrepresents a concatenation between an element (`head`) and another list\n(`tail`). That way, the `[1,2,3]` list could be written as:\n\n```python\ndef main:\n  my_list = List/Cons { head: 1, tail: List/Cons { head: 2, tail: List/Cons { head: 3, tail: List/Nil }}}\n  return my_list\n```\n\nObviously - that's terrible. So, you can write just instead:\n\n```python\ndef main:\n  my_list = [1, 2, 3]\n  return my_list\n```\n\nWhich is decent. But while it is written the same as in Python, it is important\nto understand it is just the `List` datatype, which means we can operate on it\nusing the `match` notation. For example:\n\n```python\ndef main:\n  my_list = [1, 2, 3]\n  match my_list:\n    case List/Cons:\n      return my_list.head\n    case List/Nil:\n      return 0\n```\n\nWill return `1`, which is the first element.\n\n> **_NOTE:_** Despite creating lists with `[` `]`, the syntax used for accessing values as in `type[key]` is actually related to the `Map` built-in type.\n\nWe also have a syntax sugar for strings in Bend, which is just a list of `u24`\ncharacters (UTF-16 encoded). The `\"Hello, world!\"` type we've seen used it!\n\n> **_NOTE:_** The actual type used for strings is `String`, which has `String/Cons` and `String/Nil` just like `List` does.\n\nBend also has inline functions, which work just like Python:\n\n```python\ndef main:\n  mul_2 = lambda x: x * 2\n  return mul_2(7)\n```\n\nExcept without the annoying syntax restrictions. You can also shorten it as `λ`,\nif you can somehow type that.\n\nYou can also match on native numbers (`u24`) using the `switch` statement:\n\n```python\ndef slow_mul2(n):\n  switch n:\n    case 0:\n      return 0\n    case _:\n      return 2 + slow_mul2(n-1)\n```\n\nThe `if-else` syntax is a third option to branch, other than `match` and\n`switch`. It expects a `u24` (`1` for `true` and `0` for `false`):\n\n```python\ndef is_even(n):\n  if n % 2 == 0:\n    return 1\n  else:\n    return 0\n```\n\n_note - some types, like tuples, aren't being pretty-printed correctly after\ncomputation. this will be fixed in the next days (TM)_\n\n## The Dreaded Immutability\n\nFinally, let's get straight to the fun part: how do we implement parallel\nalgorithms with Bend? Just kidding. Before we get there, let's talk about loops.\nYou might have noticed we have avoided them so far. That wasn't by accident.\nThere is an important aspect on which Bend diverges from Python, and aligns with\nHaskell: **variables are immutable**. Not \"by default\". They just **are**. For\nexample, in Bend, we're not allowed to write:\n\n```python\ndef parity(x):\n  result = \"odd\"\n  if x % 2 == 0:\n    result = \"even\"\n  return result\n```\n\n... because that would mutate the `result` variable. Instead, we should write:\n\n```python\ndef is_even(x):\n  if x % 2 == 0:\n    return \"even\"\n  else:\n    return \"odd\"\n\ndef main:\n  return is_even(7)\n```\n\nWhich is immutable. If that sounds annoying, that's because **it is**. Don't\nlet anyone tell you otherwise. We are aware of that, and we have many ideas on\nhow to improve this, making Bend feel even more Python-like. For now, we have to\nlive with it. But, wait... if variables are immutable... how do we even do\nloops? For example:\n\n```python\ndef sum(x):\n  total = 0\n  for i in range(10)\n    total += i\n  return total\n```\n\nHere, the entire way the algorithm works is by mutating the `total` variable.\nWithout mutability, loops don't make sense. The good news is Bend has _something\nelse_ that is equally as - actually, more - powerful. And learning it is really\nworth your time. Let's do it!\n\n## Folds and Bends\n\n### Recursive Datatypes\n\nLet's start by implementing a recursive datatype in Bend:\n\n```python\ntype Tree:\n  Node { ~left, ~right }\n  Leaf { value }\n```\n\nThis defines a binary tree, with elements on leaves. Here, `~` flags a field as\n_recursive_. For example, the tree:\n\n```\n  __/\\__\n /\\     /\\\n1  2   3  4\n```\n\nCould be represented as:\n\n```\ntree = Tree/Node {\n  lft: Tree/Node { left: Tree/Leaf { val: 1 }, right: Tree/Leaf { val: 2 } },\n  rgt: Tree/Node { left: Tree/Leaf { val: 3 }, right: Tree/Leaf { val: 4 } }\n}\n```\n\nBinary trees are so useful in Bend that this type is already pre-defined in the\nlanguage and has its own dedicated syntax:\n\n```py\n# ![a, b] => Equivalent to Tree/Node { left: a, right: b }\n# !x      => Equivalent to Tree/Leaf { value: x }\ntree = ![![!1, !2],![!3, !4]]\n```\n\n### Fold: consuming recursive datatypes\n\nNow, here's a question: how do we _sum_ the elements of a tree? In Python, we\ncould just use a loop. In Bend, we don't have loops. Fortunately, there is\nanother construct we can use: it's called `fold`, and it works like a _search\nand replace_ for datatypes. For example, consider the code below:\n\n```python\ndef sum(tree):\n  fold tree:\n    case Tree/Node:\n      return tree.left + tree.right\n    case Tree/Leaf:\n      return tree.value\n\ndef main:\n  tree = ![![!1, !2],![!3, !4]]\n  return sum(tree)\n```\n\nIt accomplishes the task by replacing every `Tree/Node { left, right }` by `left +\nright`, and replacing every `Tree/Leaf` by `value`. As a result, the entire \"tree of\nvalues\" is turned into a \"tree of additions\", and it evaluates as follows:\n\n```python\nnums = ((1 + 2) + (3 + 4))\nnums = (3 + 7)\nnums = 10\n```\n\nNow, this may look limiting, but it actually isn't. Folds are known for being\nuniversal: _any algorithm that can be implemented with a loop, can be\nimplemented with a fold_. So, we can do much more than just compute an\n\"aggregated value\". Suppose we wanted, for example, to transform every element\ninto a tuple of `(index,value)`, returning a new tree. Here's how to do it:\n\n```python\ndef enum(tree):\n  idx = 0\n  fold tree with idx:\n    case Tree/Node:\n      return ![tree.left(idx * 2 + 0), tree.right(idx * 2 + 1)]\n    case Tree/Leaf:\n      return !(idx, tree.value)\n\ndef main:\n  tree = ![![!1, !2],![!3, !4]]\n  return enum(tree)\n```\n\nCompared to the `sum` algorithm, 3 important things changed:\n\n1. We initialize a state, `idx`, as `0`.\n\n2. We pass new states down as `tree.xyz(new_idx)`\n\n3. The base case receives the final state: the element index\n\nSo, in the end, we'll have computed a copy of the original tree, except that\nevery element has now became a tuple of index and value.\n\nNow, please take a moment to think about this fact: **everything can be computed\nwith a fold.** This idea often takes some time to get used to, but, once you do,\nit is really liberating, and will let you write better algorithms. As an\nexercise, use `fold` to implement a \"reverse\" algorithm for lists:\n\n```python\ndef reverse(list):\n  # exercise\n  ?\n\ndef main:\n  return reverse([1,2,3])\n```\n\n## Bend: generating recursive datatypes\n\nBending is the opposite of folding. Whatever `fold` consumes, `bend` creates.\nThe idea is that, by defining an _initial state_ and a _halting condition_, we\ncan \"grow\" a recursive structure, layer by layer, until the condition is met.\nFor example, consider the code below:\n\n```python\ndef main():\n  bend x = 0:\n    when x < 3:\n      tree = ![fork(x + 1), fork(x + 1)]\n    else:\n      tree = !7\n  return tree\n```\n\nThe program above will initialize a state (`x = 0`), and then, for as long as `x\n< 3`, it will \"fork\" that state in two, creating a `Tree/Node`, and continuing\nwith `x + 1`. When `x >= 3`, it will halt and return a `Tree/Leaf` with `7`.\nWhen all is done, the result will be assigned to the `tree` variable:\n\n```python\ntree = fork(0)\ntree = ![fork(1), fork(1)]\ntree = ![![fork(2),fork(2)], ![fork(2),fork(2)]]\ntree = ![![![fork(3),fork(3)], ![fork(3),fork(3)]], ![![fork(3),fork(3)], ![fork(3),fork(3)]]]\ntree = ![![![!7, !7], ![!7, !7]], ![![!7, !7], ![!7, !7]]]\n```\n\nWith some imagination, we can easily see that, by recursively unrolling a state\nthis way, we can generate any structure we'd like. In fact, `bend` is so general\nwe can even use it to emulate a loop. For example, this Python program:\n\n```python\nsum = 0\nidx = 0\nwhile idx < 10:\n  sum = idx + sum\n  idx = idx + 1\n```\n\nCould be emulated in Bend with a \"sequential bend\":\n\n```python\nbend idx = 0:\n  when idx < 10:\n    sum = idx + fork(idx + 1)\n  else:\n    sum = 0\n```\n\nOf course, if you do it, Bend's devs will be very disappointed with you. Why?\nBecause everyone is here for one thing. Let's do it!\n\n## Parallel \"Hello, World\"\n\nSo, after all this learning, we're now ready to answer the ultimate question:\n\n**How do we write parallel algorithms in Bend?**\n\nAt this point, you might have the idea: by using _folds_ and _bends_, right?\nWell... actually not! You do not need to use these constructs at all to make it\nhappen. Anything that _can_ be parallelized _will_ be parallelized on Bend. To\nbe more precise, this:\n\n```\nf(g(x))\n```\n\nCan NOT be parallelized, because `f` **depends** on the result of `g`. But this:\n\n```\nH(f(x), g(y))\n```\n\nCan be parallelized, because `f(x)` and `g(y)` are **independent**. Traditional\nloops, on the other hands, are inherently sequential. A loop like:\n\n```python\nsum = 0\nfor i in range(8):\n  sum += i\n```\n\nIs actually just a similar way to write:\n\n```python\nsum = (0 + (1 + (2 + (3 + (4 + (5 + (6 + 7)))))))\n```\n\nWhich is _really bad_ for parallelism, because the only way to compute this is\nby evaluating the expressions one after the other, in order:\n\n```python\nsum = (0 + (1 + (2 + (3 + (4 + (5 + (6 + 7)))))))\nsum = (0 + (1 + (2 + (3 + (4 + (5 + 13))))))\nsum = (0 + (1 + (2 + (3 + (4 + 18)))))\nsum = (0 + (1 + (2 + (3 + 22))))\nsum = (0 + (1 + (2 + 25)))\nsum = (0 + (1 + 27))\nsum = (0 + 28)\nsum = 28\n```\n\nThere is nothing Bend could do to save this program: sequentialism is an\ninherent part of its logic. Now, if we had written, instead:\n\n```python\nsum = (((0 + 1) + (2 + 3)) + ((4 + 5) + (6 + 7)))\n```\n\nThen, we'd have a much easier time evaluating that in parallel. Look at it:\n\n```python\nsum = (((0 + 1) + (2 + 3)) + ((4 + 5) + (6 + 7)))\nsum = ((1 + 5) + (9 + 13))\nsum = (6 + 22)\nsum = 28\n```\n\nThat's so much better that even the _line count_ is shorter!\n\nSo, how do you write a parallel program in Bend?\n\n**Just write algorithms that aren't helplessly sequential.**\n\nThat's all there is to it. As long as you write programs like that one, then\nunlike the former one, they will run in parallel. And that's why `bend` and\n`fold` are core features: they're, essentially, parallelizable loops. For\nexample, to add numbers in parallel, we can write:\n\n```python\ndef main():\n  bend d = 0, i = 0:\n    when d < 28:\n      sum = fork(d+1, i*2+0) + fork(d+1, i*2+1)\n    else:\n      sum = i\n  return sum\n```\n\nAnd that's the parallel \"Hello, world\"! Now, let's finally run it. But first,\nlet's measure its single-core performance. Also, remember that, for now, Bend\nonly supports 24-bit numbers (`u24`), thus, the results will always be in `mod\n16777216`.\n\n```\nbend run-rs main.bend\n```\n\nOn my machine (Apple M3 Max), it completes after `147s`, at `65 MIPS` (Million\nInteractions Per Second - Bend's version of the FLOPS). That's too long. Let's\nrun it in parallel, by using the **C interpreter** instead:\n\n```\nbend run main.bend\n```\n\n> Note: `run` is an alias to the `run-c` command.\n\nAnd, just like that, the same program now runs in `8.49s`, at `1137 MIPS`.\nThat's **18x faster**! Can we do better? Sure: let's use the **C compiler** now:\n\n```\nbend gen-c main.bend >> main.c\n```\n\nThis command converts your `bend` file into a small, dependency-free C file\nthat does the same computation much faster. You can compile it to an executable:\n\n```\ngcc main.c -o main -O2 -lm -lpthread # if you're on Linux\ngcc main.c -o main -O2               # if you're on OSX\n./main\n```\n\nNow, the same program runs in `5.81s`, at `1661.91 MIPS`. That's now **25x\nfaster** than the original! Can we do better? Let's now enter the unexplored\nrealms of arbitrary high-level programs on... GPUs. How hard that could be?\nWell, for us... it was. A lot. For you... just call the **CUDA interpreter**:\n\n```\nbend run-cu main.bend\n```\n\nAnd, simply as that, the same program now runs in `0.82s`, at a blistering\n`11803.24 MIPS`. That's **181x faster** than the original. Congratulations!\nYou're now a thread bender.\n\n~\n\nAs a last note, you may have noticed that the compiled version isn't much faster\nthan the interpreted one. Our compiler is still on its infancy, and the assembly\ngenerated is quite abysmal. Most of our effort went into setting up a foundation\nfor the parallel evaluator, which was no easy task. With that out of our way,\nimproving the compiler is a higher priority now. You can expect it to improve\ncontinuously over time. For now, it is important to understand the state of\nthings, and set up reasonable expectations.\n\n## A Parallel Bitonic Sort\n\nThe bitonic sort is a popular algorithm that sorts a set of numbers by moving\nthem through a \"circuit\" (sorting network) and swapping as they pass through:\n\n![bitonic-sort](https://upload.wikimedia.org/wikipedia/commons/thumb/b/bd/BitonicSort1.svg/1686px-BitonicSort1.svg.png)\n\nIn CUDA, this can be implemented by using mutable arrays and synchronization\nprimitives. This is well known. What is less known is that it can also be\nimplemented as a series of _immutable tree rotations_, with pattern-matching and\nrecursion. Don't bother trying to understand it, but, here's the code:\n\n```python\ndef gen(d, x):\n  switch d:\n    case 0:\n      return x\n    case _:\n      return (gen(d-1, x * 2 + 1), gen(d-1, x * 2))\n\ndef sum(d, t):\n  switch d:\n    case 0:\n      return t\n    case _:\n      (t.a, t.b) = t\n      return sum(d-1, t.a) + sum(d-1, t.b)\n\ndef swap(s, a, b):\n  switch s:\n    case 0:\n      return (a,b)\n    case _:\n      return (b,a)\n\ndef warp(d, s, a, b):\n  switch d:\n    case 0:\n      return swap(s ^ (a > b), a, b)\n    case _:\n      (a.a,a.b) = a\n      (b.a,b.b) = b\n      (A.a,A.b) = warp(d-1, s, a.a, b.a)\n      (B.a,B.b) = warp(d-1, s, a.b, b.b)\n      return ((A.a,B.a),(A.b,B.b))\n\ndef flow(d, s, t):\n  switch d:\n    case 0:\n      return t\n    case _:\n      (t.a, t.b) = t\n      return down(d, s, warp(d-1, s, t.a, t.b))\n\ndef down(d,s,t):\n  switch d:\n    case 0:\n      return t\n    case _:\n      (t.a, t.b) = t\n      return (flow(d-1, s, t.a), flow(d-1, s, t.b))\n\ndef sort(d, s, t):\n  switch d:\n    case 0:\n      return t\n    case _:\n      (t.a, t.b) = t\n      return flow(d, s, (sort(d-1, 0, t.a), sort(d-1, 1, t.b)))\n\ndef main:\n  return sum(18, sort(18, 0, gen(18, 0)))\n```\n\nAs a test of Bend's ability to parallelize the most insanely high-level\ncomputations possible, let's benchmark this program. Here are the results:\n\n- 12.33s / 102 MIPS (Apple M3 Max, 1 thread)\n\n- 0.96s / 1315 MIPS (Apple M3 Max, 16 threads) - 12x speedup\n\n- 0.24s / 5334 MIPS (NVIDIA RTX 4090, 16k threads) - 51x speedup\n\nAnd, just like magic, it works! 51x faster on RTX. How cool is that?\n\nOf course, you would absolutely **not** want to sort numbers like that,\nspecially when mutable arrays exist. But there are many algorithms that _can\nnot_ be implemented easily with buffers. Evolutionary and genetic algorithms,\nproof checkers, compilers, interpreters. For the first time ever, you can\nimplement these algorithms as high-level functions, in a language that runs on\nGPUs. That's the magic of Bend!\n\n## Graphics Rendering\n\nWhile the algorithm above does parallelize well, it is very memory-hungry. It is\na nice demo of Bend's potential, but isn't a great way to sort lists. Currently,\nBend has a 4GB memory limit (for being a 32-bit architecture). When the memory\nis filled, its performance will degrade considerably. But we can do better.\n\nSince Bend is GC-free, we can express low memory footprint programs using `bend`\nor tail calls. For maximum possible performance, one should first create enough\n\"parallel room\" to fill all available cores, and then spend some time doing\ncompute-heavy, but less memory-hungry, computations. For example, consider:\n\n```python\n# given a shader, returns a square image\ndef render(depth):\n  bend d = 0, i = 0:\n    when d < depth:\n      color = (fork(d+1, i*2+0), fork(d+1, i*2+1))\n    else:\n      width = depth / 2\n      color = demo_shader(i % width, i / width)\n  return color\n\n# given a position, returns a color\n# for this demo, it just busy loops\ndef demo_shader(x, y):\n  bend i = 0:\n    when i < 100000:\n      color = fork(i + 1)\n    else:\n      color = 0x000001\n  return color\n\n# renders a 256x256 image using demo_shader\ndef main:\n  return render(16, demo_shader)\n```\n\nIt emulates an OpenGL fragment shader by building an \"image\" as a perfect binary\ntree, and then calling the `demo_shader` function on each pixel. Since the tree\nhas a depth of 16, we have `2^16 = 65536 pixels`, which is enough to fill all\ncores of an RTX 4090. Moreover, since `demo_shader` isn't doing many\nallocations, it can operate entirely inside the GPU's \"shared memory\" (L1\ncache). Each GPU thread has a local space of 64 IC nodes. Functions that don't\nneed more than that, like `demo_shader`, can run up to 5x faster!\n\nOn my GPU, it performs `22,000 MIPS` out of the box, and `40000+ MIPS` with a\ntweak on the generated CUDA file (doubling the `TPC`, which doubles the number\nof threads per block). In the near future, we plan to add immutable textures,\nallowing for single-interaction sampling. With some napkin math, this should be\nenough to render 3D games in real-time. Imagine a future where game engines are\nwritten in Python-like languages? That's the future we're building, with Bend!\n\nYou can see your programs total cost (number of interactions) and performance\n(MIPS) by adding the `-s` flag. This is a good way to check if your algorithm is\nparallelizing. For example, on my Apple M3 Max, sequential algorithms will\nperform about 100 MIPS on interpreted mode, and 130 MIPS on compiled mode\n(remember our compiler is still **very** immature, which is why it isn't much\nfaster than the interpreter). A well-parallelizable program, though, will easily\nreach 1000+ MIPS.\n\n## To be continued...\n\nThis guide isn't extensive, and there's a lot uncovered. For example, Bend also\nhas an entire \"secret\" Haskell-like syntax that is compatible with old HVM1.\n[Here](https://gist.github.com/VictorTaelin/9cbb43e2b1f39006bae01238f99ff224) is\nan implementation of the Bitonic Sort with Haskell-like equations. We'll\ndocument its syntax here soon!\n\n## Community\n\nRemember: Bend is very new and experimental. Bugs and imperfections should be\nexpected. That said, [HOC](https://HigherOrderCO.com/) will provide long-term\nsupport to Bend (and its runtime, HVM2). So, if you believe this paradigm will\nbe big someday, and want to be part of it in these early stages, join us on\n[Discord](https://Discord.HigherOrderCO.com/). Report bugs, bring your\nsuggestions, and let's chat and build this future together!\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5185546875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n\n   Copyright 2023-2024 Higher Order Company\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8671875,
          "content": "<h1 >Bend</h1>\n<p>A high-level, massively parallel programming language</p>\n\n## Index\n1. [Introduction](#introduction)\n2. [Important Notes](#important-notes)\n3. [Install](#install)\n4. [Getting Started](#getting-started)\n5. [Speedup Example](#speedup-examples)\n6. [Additional Resources](#additional-resources)\n\n## Introduction\n\nBend offers the feel and features of expressive languages like Python and Haskell. This includes fast object allocations, full support for higher-order functions with closures, unrestricted recursion, and even continuations.                             \nBend scales like CUDA, it runs on massively parallel hardware like GPUs, with nearly linear acceleration based on core count, and without explicit parallelism annotations: no thread creation, locks, mutexes, or atomics.                     \nBend is powered by the [HVM2](https://github.com/higherorderco/hvm) runtime.\n\n\n## Important Notes\n\n* Bend is designed to excel in scaling performance with cores, supporting over 10000 concurrent threads.\n* The current version may have lower single-core performance.\n* You can expect substantial improvements in performance as we advance our code generation and optimization techniques.\n* We are still working to support Windows. Use [WSL2](https://learn.microsoft.com/en-us/windows/wsl/install) as an alternative solution.\n* [We only support NVIDIA Gpus currently](https://github.com/HigherOrderCO/Bend/issues/341).\n\n\n\n\n## Install\n\n### Install dependencies\n\n#### On Linux\n```sh\n# Install Rust if you haven't already.\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# For the C version of Bend, use GCC. We recommend a version up to 12.x.\nsudo apt install gcc\n```\nFor the CUDA runtime [install the CUDA toolkit for Linux](https://developer.nvidia.com/cuda-downloads?target_os=Linux) version 12.x.\n\n\n#### On Mac\n```sh\n# Install Rust if you haven't it already.\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# For the C version of Bend, use GCC. We recommend a version up to 12.x.\nbrew install gcc\n```\n\n\n### Install Bend\n\n1. Install HVM2 by running:\n```sh\n# HVM2 is HOC's massively parallel Interaction Combinator evaluator.\ncargo install hvm\n\n# This ensures HVM is correctly installed and accessible.\nhvm --version\n```\n2. Install Bend by running:\n```sh\n# This command will install Bend\ncargo install bend-lang\n\n# This ensures Bend is correctly installed and accessible.\nbend --version\n```\n\n### Getting Started\n#### Running Bend Programs\n```sh\nbend run    <file.bend> # uses the C interpreter by default (parallel)\nbend run-rs <file.bend> # uses the Rust interpreter (sequential)\nbend run-c  <file.bend> # uses the C interpreter (parallel)\nbend run-cu <file.bend> # uses the CUDA interpreter (massively parallel)\n\n# Notes\n# You can also compile Bend to standalone C/CUDA files using gen-c and gen-cu for maximum performance.\n# The code generator is still in its early stages and not as mature as compilers like GCC and GHC.\n# You can use the -s flag to have more information on\n  # Reductions\n  # Time the code took to run\n  # Interaction per second (In millions)\n```\n\n#### Testing Bend Programs\nThe example below sums all the numbers in the range from `start` to `target`. It can be written in two different methods: one that is inherently sequential (and thus cannot be parallelized), and another that is easily parallelizable. (We will be using the `-s`flag in most examples, for the sake of visibility)\n\n#### Sequential version:\nFirst, create a file named `sequential_sum.bend`\n```sh\n# Write this command on your terminal\ntouch sequential_sum.bend\n```\nThen with your text editor, open the file `sequential_sum.bend`, copy the code below and paste in the file.\n\n```py\n# Defines the function Sum with two parameters: start and target\ndef Sum(start, target):\n  if start == target:\n    # If the value of start is the same as target, returns start.\n    return start\n  else:\n    # If start is not equal to target, recursively call Sum with\n    # start incremented by 1, and add the result to start.\n    return start + Sum(start + 1, target)  \n\ndef main():\n  # This translates to (1 + (2 + (3 + (...... + (999999 + 1000000)))))\n  # Note that this will overflow the maximum value of a number in Bend\n  return Sum(1, 1_000_000)\n```\n\n##### Running the file\nYou can run it using Rust interpreter (Sequential)\n```sh\nbend run sequential_sum.bend -s\n```\n\nOr you can run it using C interpreter (Sequential)\n```sh\nbend run-c sequential_sum.bend -s\n```\n\nIf you have a NVIDIA GPU, you can also run in CUDA (Sequential)\n```sh\nbend run-cu sequential_sum.bend -s\n```\n\nIn this version, the next value to be calculated depends on the previous sum, meaning that it cannot proceed until the current computation is complete. Now, let's look at the easily parallelizable version.\n\n\n#### Parallelizable version:\nFirst close the old file and then proceed to your terminal to create `parallel_sum.bend`\n```sh\n# Write this command on your terminal\ntouch parallel_sum.bend\n```\nThen with your text editor, open the file `parallel_sum.bend`, copy the code below and paste in the file.\n\n```py\n# Defines the function Sum with two parameters: start and target\ndef Sum(start, target):\n  if start == target:\n    # If the value of start is the same as target, returns start.\n    return start\n  else:\n    # If start is not equal to target, calculate the midpoint (half),\n    # then recursively call Sum on both halves.\n    half = (start + target) / 2\n    left = Sum(start, half)  # (Start -> Half)\n    right = Sum(half + 1, target)\n    return left + right\n\n# A parallelizable sum of numbers from 1 to 1000000\ndef main():\n  # This translates to (((1 + 2) + (3 + 4)) + ... (999999 + 1000000)...)\n  return Sum(1, 1_000_000)\n```\n\nIn this example, the (3 + 4) sum does not depend on the (1 + 2), meaning that it can run in parallel because both computations can happen at the same time. \n\n##### Running the file\nYou can run it using Rust interpreter (Sequential)\n```sh\nbend run parallel_sum.bend -s\n```\n\nOr you can run it using C interpreter (Parallel)\n```sh\nbend run-c parallel_sum.bend -s\n```\n\nIf you have a NVIDIA GPU, you can also run in CUDA (Massively parallel)\n```sh\nbend run-cu parallel_sum.bend -s\n```\n\nIn Bend, it can be parallelized by just changing the run command. If your code **can** run in parallel it **will** run in parallel.\n\n\n### Speedup Examples\nThe code snippet below implements a [bitonic sorter](https://en.wikipedia.org/wiki/Bitonic_sorter) with *immutable tree rotations*. It's not the type of algorithm you would expect to run fast on GPUs. However, since it uses a divide and conquer approach, which is inherently parallel, Bend will execute it on multiple threads, no thread creation, no explicit lock management.\n\n#### Bitonic Sorter Benchmark\n\n- `bend run`: CPU, Apple M3 Max: 12.15 seconds\n- `bend run-c`: CPU, Apple M3 Max: 0.96 seconds\n- `bend run-cu`: GPU, NVIDIA RTX 4090: 0.21 seconds\n\n <details>\n  <summary><b>Click here for the Bitonic Sorter code</b></summary>\n   \n\n```py\n# Sorting Network = just rotate trees!\ndef sort(d, s, tree):\n  switch d:\n    case 0:\n      return tree\n    case _:\n      (x,y) = tree\n      lft   = sort(d-1, 0, x)\n      rgt   = sort(d-1, 1, y)\n      return rots(d, s, (lft, rgt))\n\n# Rotates sub-trees (Blue/Green Box)\ndef rots(d, s, tree):\n  switch d:\n    case 0:\n      return tree\n    case _:\n      (x,y) = tree\n      return down(d, s, warp(d-1, s, x, y))\n\n# Swaps distant values (Red Box)\ndef warp(d, s, a, b):\n  switch d:\n    case 0:\n      return swap(s ^ (a > b), a, b)\n    case _:\n      (a.a, a.b) = a\n      (b.a, b.b) = b\n      (A.a, A.b) = warp(d-1, s, a.a, b.a)\n      (B.a, B.b) = warp(d-1, s, a.b, b.b)\n      return ((A.a,B.a),(A.b,B.b))\n\n# Propagates downwards\ndef down(d,s,t):\n  switch d:\n    case 0:\n      return t\n    case _:\n      (t.a, t.b) = t\n      return (rots(d-1, s, t.a), rots(d-1, s, t.b))\n\n# Swaps a single pair\ndef swap(s, a, b):\n  switch s:\n    case 0:\n      return (a,b)\n    case _:\n      return (b,a)\n\n# Testing\n# -------\n\n# Generates a big tree\ndef gen(d, x):\n  switch d:\n    case 0:\n      return x\n    case _:\n      return (gen(d-1, x * 2 + 1), gen(d-1, x * 2))\n\n# Sums a big tree\ndef sum(d, t):\n  switch d:\n    case 0:\n      return t\n    case _:\n      (t.a, t.b) = t\n      return sum(d-1, t.a) + sum(d-1, t.b)\n\n# Sorts a big tree\ndef main:\n  return sum(20, sort(20, 0, gen(20, 0)))\n\n```\n\n</details>\n  \nif you are interested in some other algorithms, you can check our [examples folder](https://github.com/HigherOrderCO/Bend/tree/main/examples)\n\n\n### Additional Resources\n - To understand the technology behind Bend, check out the HVM2 [paper](https://paper.higherorderco.com/).\n - We are working on an official documentation, meanwhile for a more in depth\n     explanation check [GUIDE.md](https://github.com/HigherOrderCO/Bend/blob/main/GUIDE.md)\n - Read about our features at [FEATURES.md](https://github.com/HigherOrderCO/Bend/blob/main/FEATURES.md)\n - Bend is developed by [HigherOrderCO](https://higherorderco.com/) - join our [Discord](https://discord.higherorderco.com)!\n"
        },
        {
          "name": "cspell.json",
          "type": "blob",
          "size": 2.0166015625,
          "content": "{\n  \"version\": \"0.2\",\n  \"language\": \"en\",\n  \"words\": [\n    \"anni\",\n    \"annihilations\",\n    \"arities\",\n    \"arity\",\n    \"arrayvec\",\n    \"behaviour\",\n    \"bitand\",\n    \"Bitonic\",\n    \"builtins\",\n    \"callcc\",\n    \"chumsky\",\n    \"clippy\",\n    \"codegen\",\n    \"codepoint\",\n    \"codepoints\",\n    \"combinators\",\n    \"concat\",\n    \"ctrs\",\n    \"cuda\",\n    \"datatypes\",\n    \"Deque\",\n    \"destructures\",\n    \"desugared\",\n    \"desugars\",\n    \"devs\",\n    \"dups\",\n    \"effectful\",\n    \"elif\",\n    \"elifs\",\n    \"foldl\",\n    \"hasher\",\n    \"hexdigit\",\n    \"Hindley\",\n    \"hvm's\",\n    \"indexmap\",\n    \"inet\",\n    \"inets\",\n    \"inlineable\",\n    \"inlineables\",\n    \"inlinees\",\n    \"inlines\",\n    \"inodes\",\n    \"insta\",\n    \"interner\",\n    \"ints\",\n    \"itertools\",\n    \"ITRS\",\n    \"kwarg\",\n    \"kwargs\",\n    \"lcons\",\n    \"linearization\",\n    \"linearizes\",\n    \"linearizing\",\n    \"lnil\",\n    \"lpthread\",\n    \"mant\",\n    \"Milner\",\n    \"miscompilation\",\n    \"mult\",\n    \"namegen\",\n    \"nams\",\n    \"nanosleep\",\n    \"nats\",\n    \"newtype\",\n    \"nilary\",\n    \"nullary\",\n    \"numop\",\n    \"nums\",\n    \"OOM's\",\n    \"oper\",\n    \"opers\",\n    \"parallelizable\",\n    \"peekable\",\n    \"postcondition\",\n    \"powi\",\n    \"prec\",\n    \"proto\",\n    \"Pythonish\",\n    \"quadtree\",\n    \"quadtrees\",\n    \"rbag\",\n    \"readback\",\n    \"recursively\",\n    \"redex\",\n    \"redexes\",\n    \"repr\",\n    \"resugar\",\n    \"resugared\",\n    \"resugaring\",\n    \"rfold\",\n    \"rsplit\",\n    \"rwts\",\n    \"scons\",\n    \"scopeless\",\n    \"scrutinee\",\n    \"sequentialism\",\n    \"snil\",\n    \"SOTA\",\n    \"stdext\",\n    \"struct\",\n    \"subcmd\",\n    \"submatch\",\n    \"subpattern\",\n    \"subpatterns\",\n    \"subterm\",\n    \"subterms\",\n    \"succ\",\n    \"supercombinator\",\n    \"supercombinators\",\n    \"Tarjan's\",\n    \"tlsv\",\n    \"TSPL\",\n    \"tunr\",\n    \"unbounds\",\n    \"undefer\",\n    \"vectorize\",\n    \"vectorizes\",\n    \"walkdir\"\n  ],\n  \"files\": [\n    \"**/*.rs\",\n    \"**/*.md\"\n  ],\n  \"ignoreRegExpList\": [\n    \"HexValues\",\n    \"/λ/g\",\n    \"/-O/g\",\n    \"/`.`/g\",\n    \"/`..`/g\",\n    \"/`...`/g\",\n    \"/`....`/g\",\n    \"/`.....`/g\",\n    \"/```(.*\\n)*```/g\"\n  ]\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "justfile",
          "type": "blob",
          "size": 0.5498046875,
          "content": "# To use this, first run `cargo install just`\n# Then run the install subcommand: `just install`\n# Running `just` is equivalent to running `just all` because it's the first command\n\nexport CARGO_TERM_COLOR := \"always\"\n\nall: rustup-show check fmt clippy test sort audit\n\nrustup-show:\n  rustup show\n\ncheck:\n  cargo check --all-targets\n\nfmt:\n  cargo fmt --all -- --check\n\nclippy:\n  cargo clippy --all-targets\n\ntest:\n  cargo insta test --workspace\n\nsort:\n  cargo sort --check --workspace\n\naudit:\n  cargo audit\n\ninstall:\n  cargo install --locked cargo-sort cargo-audit\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}