{
  "metadata": {
    "timestamp": 1736709409724,
    "page": 8,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheAlgorithms/Rust",
      "stars": 23263,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 0.0322265625,
          "content": "[core]\n    hooksPath = git_hooks\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0654296875,
          "content": "\n/target\n**/*.rs.bk\n\n/target\n**/*.rs.bk\nCargo.lock\n/.idea/\n.vscode\n"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.05859375,
          "content": "FROM gitpod/workspace-rust:2024-06-05-14-45-28\n\nUSER gitpod\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.1220703125,
          "content": "---\nimage:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: cargo build\n\nvscode:\n  extensions:\n    - rust-lang.rust-analyzer\n...\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.845703125,
          "content": "# The Algorithms: Rust\n\nThis project aims at showcasing common algorithms implemented in `Rust`, with an accent on idiomatic code and genericity. \n\n## Project structure\n\nThe project is organized as follows:\n\n`src/`\n  - `my_algo_category/`\n    - `mod.rs`\n    - `my_algorithm.rs`\n    - `some_other_algorithm.rs`\n  - `some_other_algo_category/`\n    - ...\n\n\n`mod.rs` contains the export:\n\n```rust\nmod my_algorithm;\n\npub use self::my_algorithm::my_algorithm;\n```\n\n`my_algorithm.rs` contains your algorithm and the related tests:\n\n```rust\npub fn my_algorithm() {\n    // ...\n}\n\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn my_test() {\n        // ...\n    }\n}\n```\n\n## Before submitting your PR\n\nDo **not** use acronyms: `DFS` should be `depth_first_search`.\n\nMake sure you run\n  * `cargo test` \n  * `cargo fmt`\n  * `cargo clippy --all -- -D warnings`\n\n  And that's about it !\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 8.412109375,
          "content": "[package]\nname = \"the_algorithms_rust\"\nedition = \"2021\"\nversion = \"0.1.0\"\nauthors = [\"Anshul Malik <malikanshul29@gmail.com>\"]\n\n[dependencies]\nnum-bigint = { version = \"0.4\", optional = true }\nnum-traits = { version = \"0.2\", optional = true }\nrand = \"0.8\"\nrand_chacha = \"0.3\"\nnalgebra = \"0.33.0\"\n\n[dev-dependencies]\nquickcheck = \"1.0\"\nquickcheck_macros = \"1.0\"\n\n[features]\ndefault = [\"big-math\"]\nbig-math = [\"dep:num-bigint\", \"dep:num-traits\"]\n\n[lints.clippy]\npedantic = \"warn\"\nrestriction = \"warn\"\nnursery = \"warn\"\ncargo = \"warn\"\n# pedantic-lints:\nbool_to_int_with_if = { level = \"allow\", priority = 1 }\ncast_lossless = { level = \"allow\", priority = 1 }\ncast_possible_truncation = { level = \"allow\", priority = 1 }\ncast_possible_wrap = { level = \"allow\", priority = 1 }\ncast_precision_loss = { level = \"allow\", priority = 1 }\ncast_sign_loss = { level = \"allow\", priority = 1 }\ncloned_instead_of_copied = { level = \"allow\", priority = 1 }\ndefault_trait_access = { level = \"allow\", priority = 1 }\ndoc_markdown = { level = \"allow\", priority = 1 }\nenum_glob_use = { level = \"allow\", priority = 1 }\nexplicit_deref_methods = { level = \"allow\", priority = 1 }\nexplicit_iter_loop = { level = \"allow\", priority = 1 }\nfloat_cmp = { level = \"allow\", priority = 1 }\nif_not_else = { level = \"allow\", priority = 1 }\nimplicit_clone = { level = \"allow\", priority = 1 }\nimplicit_hasher = { level = \"allow\", priority = 1 }\nitems_after_statements = { level = \"allow\", priority = 1 }\niter_without_into_iter = { level = \"allow\", priority = 1 }\nlinkedlist = { level = \"allow\", priority = 1 }\nmanual_assert = { level = \"allow\", priority = 1 }\nmanual_let_else = { level = \"allow\", priority = 1 }\nmanual_string_new = { level = \"allow\", priority = 1 }\nmany_single_char_names = { level = \"allow\", priority = 1 }\nmatch_bool = { level = \"allow\", priority = 1 }\nmatch_on_vec_items = { level = \"allow\", priority = 1 }\nmatch_same_arms = { level = \"allow\", priority = 1 }\nmatch_wildcard_for_single_variants = { level = \"allow\", priority = 1 }\nmissing_errors_doc = { level = \"allow\", priority = 1 }\nmissing_fields_in_debug = { level = \"allow\", priority = 1 }\nmissing_panics_doc = { level = \"allow\", priority = 1 }\nmodule_name_repetitions = { level = \"allow\", priority = 1 }\nmust_use_candidate = { level = \"allow\", priority = 1 }\nneedless_for_each = { level = \"allow\", priority = 1 }\nneedless_pass_by_value = { level = \"allow\", priority = 1 }\nrange_plus_one = { level = \"allow\", priority = 1 }\nredundant_closure_for_method_calls = { level = \"allow\", priority = 1 }\nredundant_else = { level = \"allow\", priority = 1 }\nreturn_self_not_must_use = { level = \"allow\", priority = 1 }\nsemicolon_if_nothing_returned = { level = \"allow\", priority = 1 }\nshould_panic_without_expect = { level = \"allow\", priority = 1 }\nsimilar_names = { level = \"allow\", priority = 1 }\nsingle_match_else = { level = \"allow\", priority = 1 }\nstable_sort_primitive = { level = \"allow\", priority = 1 }\ntoo_many_lines = { level = \"allow\", priority = 1 }\ntrivially_copy_pass_by_ref = { level = \"allow\", priority = 1 }\nunnecessary_box_returns = { level = \"allow\", priority = 1 }\nunnested_or_patterns = { level = \"allow\", priority = 1 }\nunreadable_literal = { level = \"allow\", priority = 1 }\nunused_self = { level = \"allow\", priority = 1 }\nused_underscore_binding = { level = \"allow\", priority = 1 }\nref_option = { level = \"allow\", priority = 1 }\n# restriction-lints:\nabsolute_paths = { level = \"allow\", priority = 1 }\narithmetic_side_effects = { level = \"allow\", priority = 1 }\nas_conversions = { level = \"allow\", priority = 1 }\nassertions_on_result_states = { level = \"allow\", priority = 1 }\nblanket_clippy_restriction_lints = { level = \"allow\", priority = 1 }\nclone_on_ref_ptr = { level = \"allow\", priority = 1 }\ndbg_macro = { level = \"allow\", priority = 1 }\ndecimal_literal_representation = { level = \"allow\", priority = 1 }\ndefault_numeric_fallback = { level = \"allow\", priority = 1 }\nderef_by_slicing = { level = \"allow\", priority = 1 }\nelse_if_without_else = { level = \"allow\", priority = 1 }\nexhaustive_enums = { level = \"allow\", priority = 1 }\nexhaustive_structs = { level = \"allow\", priority = 1 }\nexpect_used = { level = \"allow\", priority = 1 }\nfloat_arithmetic = { level = \"allow\", priority = 1 }\nfloat_cmp_const = { level = \"allow\", priority = 1 }\nget_unwrap = { level = \"allow\", priority = 1 }\nif_then_some_else_none = { level = \"allow\", priority = 1 }\nimpl_trait_in_params = { level = \"allow\", priority = 1 }\nimplicit_return = { level = \"allow\", priority = 1 }\nindexing_slicing = { level = \"allow\", priority = 1 }\ninteger_division = { level = \"allow\", priority = 1 }\ninteger_division_remainder_used = { level = \"allow\", priority = 1 }\niter_over_hash_type = { level = \"allow\", priority = 1 }\nlittle_endian_bytes = { level = \"allow\", priority = 1 }\nmap_err_ignore = { level = \"allow\", priority = 1 }\nmin_ident_chars = { level = \"allow\", priority = 1 }\nmissing_assert_message = { level = \"allow\", priority = 1 }\nmissing_asserts_for_indexing = { level = \"allow\", priority = 1 }\nmissing_docs_in_private_items = { level = \"allow\", priority = 1 }\nmissing_inline_in_public_items = { level = \"allow\", priority = 1 }\nmissing_trait_methods = { level = \"allow\", priority = 1 }\nmod_module_files = { level = \"allow\", priority = 1 }\nmodulo_arithmetic = { level = \"allow\", priority = 1 }\nmultiple_unsafe_ops_per_block = { level = \"allow\", priority = 1 }\nnon_ascii_literal = { level = \"allow\", priority = 1 }\npanic = { level = \"allow\", priority = 1 }\npartial_pub_fields = { level = \"allow\", priority = 1 }\npattern_type_mismatch = { level = \"allow\", priority = 1 }\nprint_stderr = { level = \"allow\", priority = 1 }\nprint_stdout = { level = \"allow\", priority = 1 }\npub_use = { level = \"allow\", priority = 1 }\npub_with_shorthand = { level = \"allow\", priority = 1 }\nquestion_mark_used = { level = \"allow\", priority = 1 }\nredundant_type_annotations = { level = \"allow\", priority = 1 }\nsame_name_method = { level = \"allow\", priority = 1 }\nsemicolon_outside_block = { level = \"allow\", priority = 1 }\nseparated_literal_suffix = { level = \"allow\", priority = 1 }\nshadow_reuse = { level = \"allow\", priority = 1 }\nshadow_same = { level = \"allow\", priority = 1 }\nshadow_unrelated = { level = \"allow\", priority = 1 }\nsingle_call_fn = { level = \"allow\", priority = 1 }\nsingle_char_lifetime_names = { level = \"allow\", priority = 1 }\nstd_instead_of_alloc = { level = \"allow\", priority = 1 }\nstd_instead_of_core = { level = \"allow\", priority = 1 }\nstr_to_string = { level = \"allow\", priority = 1 }\nstring_add = { level = \"allow\", priority = 1 }\nstring_slice = { level = \"allow\", priority = 1 }\nundocumented_unsafe_blocks = { level = \"allow\", priority = 1 }\nunnecessary_safety_comment = { level = \"allow\", priority = 1 }\nunreachable = { level = \"allow\", priority = 1 }\nunseparated_literal_suffix = { level = \"allow\", priority = 1 }\nunwrap_in_result = { level = \"allow\", priority = 1 }\nunwrap_used = { level = \"allow\", priority = 1 }\nuse_debug = { level = \"allow\", priority = 1 }\nwildcard_enum_match_arm = { level = \"allow\", priority = 1 }\nrenamed_function_params = { level = \"allow\", priority = 1 }\nallow_attributes_without_reason = { level = \"allow\", priority = 1 }\nallow_attributes = { level = \"allow\", priority = 1 }\ncfg_not_test = { level = \"allow\", priority = 1 }\nfield_scoped_visibility_modifiers = { level = \"allow\", priority = 1 }\nunused_trait_names = { level = \"allow\", priority = 1 }\nused_underscore_items = { level = \"allow\", priority = 1 }\n# nursery-lints:\nbranches_sharing_code = { level = \"allow\", priority = 1 }\ncognitive_complexity = { level = \"allow\", priority = 1 }\nderive_partial_eq_without_eq = { level = \"allow\", priority = 1 }\nempty_line_after_doc_comments = { level = \"allow\", priority = 1 }\nfallible_impl_from = { level = \"allow\", priority = 1 }\nimprecise_flops = { level = \"allow\", priority = 1 }\nmissing_const_for_fn = { level = \"allow\", priority = 1 }\nnonstandard_macro_braces = { level = \"allow\", priority = 1 }\noption_if_let_else = { level = \"allow\", priority = 1 }\nsuboptimal_flops = { level = \"allow\", priority = 1 }\nsuspicious_operation_groupings = { level = \"allow\", priority = 1 }\nuse_self = { level = \"allow\", priority = 1 }\nwhile_float = { level = \"allow\", priority = 1 }\nneedless_pass_by_ref_mut = { level = \"allow\", priority = 1 }\ntoo_long_first_doc_paragraph = { level = \"allow\", priority = 1 }\n# cargo-lints:\ncargo_common_metadata = { level = \"allow\", priority = 1 }\n# style-lints:\ndoc_lazy_continuation = { level = \"allow\", priority = 1 }\nneedless_return = { level = \"allow\", priority = 1 }\n# complexity-lints\nneedless_lifetimes = { level = \"allow\", priority = 1 }\n"
        },
        {
          "name": "DIRECTORY.md",
          "type": "blob",
          "size": 32.8818359375,
          "content": "# List of all files\n\n## Src\n  * Backtracking\n    * [All Combination Of Size K](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/all_combination_of_size_k.rs)\n    * [Graph Coloring](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/graph_coloring.rs)\n    * [Hamiltonian Cycle](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/hamiltonian_cycle.rs)\n    * [Knight Tour](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/knight_tour.rs)\n    * [N Queens](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/n_queens.rs)\n    * [Parentheses Generator](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/parentheses_generator.rs)\n    * [Permutations](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/permutations.rs)\n    * [Rat In Maze](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/rat_in_maze.rs)\n    * [Subset Sum](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/subset_sum.rs)\n    * [Sudoku](https://github.com/TheAlgorithms/Rust/blob/master/src/backtracking/sudoku.rs)\n  * Big Integer\n    * [Fast Factorial](https://github.com/TheAlgorithms/Rust/blob/master/src/big_integer/fast_factorial.rs)\n    * [Multiply](https://github.com/TheAlgorithms/Rust/blob/master/src/big_integer/multiply.rs)\n    * [Poly1305](https://github.com/TheAlgorithms/Rust/blob/master/src/big_integer/poly1305.rs)\n  * Bit Manipulation\n    * [Counting Bits](https://github.com/TheAlgorithms/Rust/blob/master/src/bit_manipulation/counting_bits.rs)\n    * [Highest Set Bit](https://github.com/TheAlgorithms/Rust/blob/master/src/bit_manipulation/highest_set_bit.rs)\n    * [N Bits Gray Code](https://github.com/TheAlgorithms/Rust/blob/master/src/bit_manipulation/n_bits_gray_code.rs)\n    * [Sum Of Two Integers](https://github.com/TheAlgorithms/Rust/blob/master/src/bit_manipulation/sum_of_two_integers.rs)\n  * Ciphers\n    * [Aes](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/aes.rs)\n    * [Another Rot13](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/another_rot13.rs)\n    * [Baconian Cipher](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/baconian_cipher.rs)\n    * [Base64](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/base64.rs)\n    * [Blake2B](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/blake2b.rs)\n    * [Caesar](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/caesar.rs)\n    * [Chacha](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/chacha.rs)\n    * [Diffie Hellman](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/diffie_hellman.rs)\n    * [Hashing Traits](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/hashing_traits.rs)\n    * [Kerninghan](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/kerninghan.rs)\n    * [Morse Code](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/morse_code.rs)\n    * [Polybius](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/polybius.rs)\n    * [Rail Fence](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/rail_fence.rs)\n    * [Rot13](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/rot13.rs)\n    * [Salsa](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/salsa.rs)\n    * [Sha256](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/sha256.rs)\n    * [Sha3](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/sha3.rs)\n    * [Tea](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/tea.rs)\n    * [Theoretical Rot13](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/theoretical_rot13.rs)\n    * [Transposition](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/transposition.rs)\n    * [Vigenere](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/vigenere.rs)\n    * [Xor](https://github.com/TheAlgorithms/Rust/blob/master/src/ciphers/xor.rs)\n  * Compression\n    * [Run Length Encoding](https://github.com/TheAlgorithms/Rust/blob/master/src/compression/run_length_encoding.rs)\n  * Conversions\n    * [Binary To Decimal](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/binary_to_decimal.rs)\n    * [Binary To Hexadecimal](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/binary_to_hexadecimal.rs)\n    * [Decimal To Binary](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/decimal_to_binary.rs)\n    * [Decimal To Hexadecimal](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/decimal_to_hexadecimal.rs)\n    * [Hexadecimal To Binary](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/hexadecimal_to_binary.rs)\n    * [Hexadecimal To Decimal](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/hexadecimal_to_decimal.rs)\n    * [Length Conversion](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/length_conversion.rs)\n    * [Octal To Binary](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/octal_to_binary.rs)\n    * [Octal To Decimal](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/octal_to_decimal.rs)\n    * [Rgb Cmyk Conversion](https://github.com/TheAlgorithms/Rust/blob/master/src/conversions/rgb_cmyk_conversion.rs)\n  * Data Structures\n    * [Avl Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/avl_tree.rs)\n    * [B Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/b_tree.rs)\n    * [Binary Search Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/binary_search_tree.rs)\n    * [Fenwick Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/fenwick_tree.rs)\n    * [Floyds Algorithm](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/floyds_algorithm.rs)\n    * [Graph](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/graph.rs)\n    * [Hash Table](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/hash_table.rs)\n    * [Heap](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/heap.rs)\n    * [Lazy Segment Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/lazy_segment_tree.rs)\n    * [Linked List](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/linked_list.rs)\n    * Probabilistic\n      * [Bloom Filter](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/probabilistic/bloom_filter.rs)\n      * [Count Min Sketch](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/probabilistic/count_min_sketch.rs)\n    * [Queue](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/queue.rs)\n    * [Range Minimum Query](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/range_minimum_query.rs)\n    * [Rb Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/rb_tree.rs)\n    * [Segment Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/segment_tree.rs)\n    * [Segment Tree Recursive](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/segment_tree_recursive.rs)\n    * [Stack Using Singly Linked List](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/stack_using_singly_linked_list.rs)\n    * [Treap](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/treap.rs)\n    * [Trie](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/trie.rs)\n    * [Union Find](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/union_find.rs)\n    * [Veb Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/data_structures/veb_tree.rs)\n  * Dynamic Programming\n    * [Coin Change](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/coin_change.rs)\n    * [Egg Dropping](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/egg_dropping.rs)\n    * [Fibonacci](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/fibonacci.rs)\n    * [Fractional Knapsack](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/fractional_knapsack.rs)\n    * [Is Subsequence](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/is_subsequence.rs)\n    * [Knapsack](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/knapsack.rs)\n    * [Longest Common Subsequence](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/longest_common_subsequence.rs)\n    * [Longest Common Substring](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/longest_common_substring.rs)\n    * [Longest Continuous Increasing Subsequence](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/longest_continuous_increasing_subsequence.rs)\n    * [Longest Increasing Subsequence](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/longest_increasing_subsequence.rs)\n    * [Matrix Chain Multiply](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/matrix_chain_multiply.rs)\n    * [Maximal Square](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/maximal_square.rs)\n    * [Maximum Subarray](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/maximum_subarray.rs)\n    * [Minimum Cost Path](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/minimum_cost_path.rs)\n    * [Rod Cutting](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/rod_cutting.rs)\n    * [Snail](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/snail.rs)\n    * [Subset Generation](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/subset_generation.rs)\n    * [Trapped Rainwater](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/trapped_rainwater.rs)\n    * [Word Break](https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/word_break.rs)\n  * Financial\n    * [Present Value](https://github.com/TheAlgorithms/Rust/blob/master/src/financial/present_value.rs)\n  * General\n    * [Convex Hull](https://github.com/TheAlgorithms/Rust/blob/master/src/general/convex_hull.rs)\n    * [Fisher Yates Shuffle](https://github.com/TheAlgorithms/Rust/blob/master/src/general/fisher_yates_shuffle.rs)\n    * [Genetic](https://github.com/TheAlgorithms/Rust/blob/master/src/general/genetic.rs)\n    * [Hanoi](https://github.com/TheAlgorithms/Rust/blob/master/src/general/hanoi.rs)\n    * [Huffman Encoding](https://github.com/TheAlgorithms/Rust/blob/master/src/general/huffman_encoding.rs)\n    * [Kadane Algorithm](https://github.com/TheAlgorithms/Rust/blob/master/src/general/kadane_algorithm.rs)\n    * [Kmeans](https://github.com/TheAlgorithms/Rust/blob/master/src/general/kmeans.rs)\n    * [Mex](https://github.com/TheAlgorithms/Rust/blob/master/src/general/mex.rs)\n    * Permutations\n      * [Heap](https://github.com/TheAlgorithms/Rust/blob/master/src/general/permutations/heap.rs)\n      * [Naive](https://github.com/TheAlgorithms/Rust/blob/master/src/general/permutations/naive.rs)\n      * [Steinhaus Johnson Trotter](https://github.com/TheAlgorithms/Rust/blob/master/src/general/permutations/steinhaus_johnson_trotter.rs)\n    * [Two Sum](https://github.com/TheAlgorithms/Rust/blob/master/src/general/two_sum.rs)\n  * Geometry\n    * [Closest Points](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/closest_points.rs)\n    * [Graham Scan](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/graham_scan.rs)\n    * [Jarvis Scan](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/jarvis_scan.rs)\n    * [Point](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/point.rs)\n    * [Polygon Points](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/polygon_points.rs)\n    * [Ramer Douglas Peucker](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/ramer_douglas_peucker.rs)\n    * [Segment](https://github.com/TheAlgorithms/Rust/blob/master/src/geometry/segment.rs)\n  * Graph\n    * [Astar](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/astar.rs)\n    * [Bellman Ford](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/bellman_ford.rs)\n    * [Bipartite Matching](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/bipartite_matching.rs)\n    * [Breadth First Search](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/breadth_first_search.rs)\n    * [Centroid Decomposition](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/centroid_decomposition.rs)\n    * [Decremental Connectivity](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/decremental_connectivity.rs)\n    * [Depth First Search](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/depth_first_search.rs)\n    * [Depth First Search Tic Tac Toe](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/depth_first_search_tic_tac_toe.rs)\n    * [Detect Cycle](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/detect_cycle.rs)\n    * [Dijkstra](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/dijkstra.rs)\n    * [Dinic Maxflow](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/dinic_maxflow.rs)\n    * [Disjoint Set Union](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/disjoint_set_union.rs)\n    * [Eulerian Path](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/eulerian_path.rs)\n    * [Floyd Warshall](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/floyd_warshall.rs)\n    * [Ford Fulkerson](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/ford_fulkerson.rs)\n    * [Graph Enumeration](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/graph_enumeration.rs)\n    * [Heavy Light Decomposition](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/heavy_light_decomposition.rs)\n    * [Kosaraju](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/kosaraju.rs)\n    * [Lee Breadth First Search](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/lee_breadth_first_search.rs)\n    * [Lowest Common Ancestor](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/lowest_common_ancestor.rs)\n    * [Minimum Spanning Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/minimum_spanning_tree.rs)\n    * [Prim](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/prim.rs)\n    * [Prufer Code](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/prufer_code.rs)\n    * [Strongly Connected Components](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/strongly_connected_components.rs)\n    * [Tarjans Ssc](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/tarjans_ssc.rs)\n    * [Topological Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/topological_sort.rs)\n    * [Two Satisfiability](https://github.com/TheAlgorithms/Rust/blob/master/src/graph/two_satisfiability.rs)\n  * Greedy\n    * [Stable Matching](https://github.com/TheAlgorithms/Rust/blob/master/src/greedy/stable_matching.rs)\n  * [Lib](https://github.com/TheAlgorithms/Rust/blob/master/src/lib.rs)\n  * Machine Learning\n    * [Cholesky](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/cholesky.rs)\n    * [K Means](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/k_means.rs)\n    * [Linear Regression](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/linear_regression.rs)\n    * [Logistic Regression](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/logistic_regression.rs)\n    * Loss Function\n      * [Average Margin Ranking Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/average_margin_ranking_loss.rs)\n      * [Hinge Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/hinge_loss.rs)\n      * [Huber Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/huber_loss.rs)\n      * [Kl Divergence Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/kl_divergence_loss.rs)\n      * [Mean Absolute Error Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/mean_absolute_error_loss.rs)\n      * [Mean Squared Error Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/mean_squared_error_loss.rs)\n      * [Negative Log Likelihood](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/loss_function/negative_log_likelihood.rs)\n    * Optimization\n      * [Adam](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/optimization/adam.rs)\n      * [Gradient Descent](https://github.com/TheAlgorithms/Rust/blob/master/src/machine_learning/optimization/gradient_descent.rs)\n  * Math\n    * [Abs](https://github.com/TheAlgorithms/Rust/blob/master/src/math/abs.rs)\n    * [Aliquot Sum](https://github.com/TheAlgorithms/Rust/blob/master/src/math/aliquot_sum.rs)\n    * [Amicable Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/amicable_numbers.rs)\n    * [Area Of Polygon](https://github.com/TheAlgorithms/Rust/blob/master/src/math/area_of_polygon.rs)\n    * [Area Under Curve](https://github.com/TheAlgorithms/Rust/blob/master/src/math/area_under_curve.rs)\n    * [Armstrong Number](https://github.com/TheAlgorithms/Rust/blob/master/src/math/armstrong_number.rs)\n    * [Average](https://github.com/TheAlgorithms/Rust/blob/master/src/math/average.rs)\n    * [Baby Step Giant Step](https://github.com/TheAlgorithms/Rust/blob/master/src/math/baby_step_giant_step.rs)\n    * [Bell Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/bell_numbers.rs)\n    * [Binary Exponentiation](https://github.com/TheAlgorithms/Rust/blob/master/src/math/binary_exponentiation.rs)\n    * [Binomial Coefficient](https://github.com/TheAlgorithms/Rust/blob/master/src/math/binomial_coefficient.rs)\n    * [Catalan Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/catalan_numbers.rs)\n    * [Ceil](https://github.com/TheAlgorithms/Rust/blob/master/src/math/ceil.rs)\n    * [Chinese Remainder Theorem](https://github.com/TheAlgorithms/Rust/blob/master/src/math/chinese_remainder_theorem.rs)\n    * [Collatz Sequence](https://github.com/TheAlgorithms/Rust/blob/master/src/math/collatz_sequence.rs)\n    * [Combinations](https://github.com/TheAlgorithms/Rust/blob/master/src/math/combinations.rs)\n    * [Cross Entropy Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/math/cross_entropy_loss.rs)\n    * [Decimal To Fraction](https://github.com/TheAlgorithms/Rust/blob/master/src/math/decimal_to_fraction.rs)\n    * [Doomsday](https://github.com/TheAlgorithms/Rust/blob/master/src/math/doomsday.rs)\n    * [Elliptic Curve](https://github.com/TheAlgorithms/Rust/blob/master/src/math/elliptic_curve.rs)\n    * [Euclidean Distance](https://github.com/TheAlgorithms/Rust/blob/master/src/math/euclidean_distance.rs)\n    * [Exponential Linear Unit](https://github.com/TheAlgorithms/Rust/blob/master/src/math/exponential_linear_unit.rs)\n    * [Extended Euclidean Algorithm](https://github.com/TheAlgorithms/Rust/blob/master/src/math/extended_euclidean_algorithm.rs)\n    * [Factorial](https://github.com/TheAlgorithms/Rust/blob/master/src/math/factorial.rs)\n    * [Factors](https://github.com/TheAlgorithms/Rust/blob/master/src/math/factors.rs)\n    * [Fast Fourier Transform](https://github.com/TheAlgorithms/Rust/blob/master/src/math/fast_fourier_transform.rs)\n    * [Fast Power](https://github.com/TheAlgorithms/Rust/blob/master/src/math/fast_power.rs)\n    * [Faster Perfect Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/faster_perfect_numbers.rs)\n    * [Field](https://github.com/TheAlgorithms/Rust/blob/master/src/math/field.rs)\n    * [Frizzy Number](https://github.com/TheAlgorithms/Rust/blob/master/src/math/frizzy_number.rs)\n    * [Gaussian Elimination](https://github.com/TheAlgorithms/Rust/blob/master/src/math/gaussian_elimination.rs)\n    * [Gaussian Error Linear Unit](https://github.com/TheAlgorithms/Rust/blob/master/src/math/gaussian_error_linear_unit.rs)\n    * [Gcd Of N Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/gcd_of_n_numbers.rs)\n    * [Geometric Series](https://github.com/TheAlgorithms/Rust/blob/master/src/math/geometric_series.rs)\n    * [Greatest Common Divisor](https://github.com/TheAlgorithms/Rust/blob/master/src/math/greatest_common_divisor.rs)\n    * [Huber Loss](https://github.com/TheAlgorithms/Rust/blob/master/src/math/huber_loss.rs)\n    * [Infix To Postfix](https://github.com/TheAlgorithms/Rust/blob/master/src/math/infix_to_postfix.rs)\n    * [Interest](https://github.com/TheAlgorithms/Rust/blob/master/src/math/interest.rs)\n    * [Interpolation](https://github.com/TheAlgorithms/Rust/blob/master/src/math/interpolation.rs)\n    * [Interquartile Range](https://github.com/TheAlgorithms/Rust/blob/master/src/math/interquartile_range.rs)\n    * [Karatsuba Multiplication](https://github.com/TheAlgorithms/Rust/blob/master/src/math/karatsuba_multiplication.rs)\n    * [Lcm Of N Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/lcm_of_n_numbers.rs)\n    * [Leaky Relu](https://github.com/TheAlgorithms/Rust/blob/master/src/math/leaky_relu.rs)\n    * [Least Square Approx](https://github.com/TheAlgorithms/Rust/blob/master/src/math/least_square_approx.rs)\n    * [Linear Sieve](https://github.com/TheAlgorithms/Rust/blob/master/src/math/linear_sieve.rs)\n    * [Logarithm](https://github.com/TheAlgorithms/Rust/blob/master/src/math/logarithm.rs)\n    * [Lucas Series](https://github.com/TheAlgorithms/Rust/blob/master/src/math/lucas_series.rs)\n    * [Matrix Ops](https://github.com/TheAlgorithms/Rust/blob/master/src/math/matrix_ops.rs)\n    * [Mersenne Primes](https://github.com/TheAlgorithms/Rust/blob/master/src/math/mersenne_primes.rs)\n    * [Miller Rabin](https://github.com/TheAlgorithms/Rust/blob/master/src/math/miller_rabin.rs)\n    * [Modular Exponential](https://github.com/TheAlgorithms/Rust/blob/master/src/math/modular_exponential.rs)\n    * [Newton Raphson](https://github.com/TheAlgorithms/Rust/blob/master/src/math/newton_raphson.rs)\n    * [Nthprime](https://github.com/TheAlgorithms/Rust/blob/master/src/math/nthprime.rs)\n    * [Pascal Triangle](https://github.com/TheAlgorithms/Rust/blob/master/src/math/pascal_triangle.rs)\n    * [Perfect Cube](https://github.com/TheAlgorithms/Rust/blob/master/src/math/perfect_cube.rs)\n    * [Perfect Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/perfect_numbers.rs)\n    * [Perfect Square](https://github.com/TheAlgorithms/Rust/blob/master/src/math/perfect_square.rs)\n    * [Pollard Rho](https://github.com/TheAlgorithms/Rust/blob/master/src/math/pollard_rho.rs)\n    * [Postfix Evaluation](https://github.com/TheAlgorithms/Rust/blob/master/src/math/postfix_evaluation.rs)\n    * [Prime Check](https://github.com/TheAlgorithms/Rust/blob/master/src/math/prime_check.rs)\n    * [Prime Factors](https://github.com/TheAlgorithms/Rust/blob/master/src/math/prime_factors.rs)\n    * [Prime Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/prime_numbers.rs)\n    * [Quadratic Residue](https://github.com/TheAlgorithms/Rust/blob/master/src/math/quadratic_residue.rs)\n    * [Random](https://github.com/TheAlgorithms/Rust/blob/master/src/math/random.rs)\n    * [Relu](https://github.com/TheAlgorithms/Rust/blob/master/src/math/relu.rs)\n    * [Sieve Of Eratosthenes](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sieve_of_eratosthenes.rs)\n    * [Sigmoid](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sigmoid.rs)\n    * [Signum](https://github.com/TheAlgorithms/Rust/blob/master/src/math/signum.rs)\n    * [Simpsons Integration](https://github.com/TheAlgorithms/Rust/blob/master/src/math/simpsons_integration.rs)\n    * [Softmax](https://github.com/TheAlgorithms/Rust/blob/master/src/math/softmax.rs)\n    * [Sprague Grundy Theorem](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sprague_grundy_theorem.rs)\n    * [Square Pyramidal Numbers](https://github.com/TheAlgorithms/Rust/blob/master/src/math/square_pyramidal_numbers.rs)\n    * [Square Root](https://github.com/TheAlgorithms/Rust/blob/master/src/math/square_root.rs)\n    * [Sum Of Digits](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sum_of_digits.rs)\n    * [Sum Of Geometric Progression](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sum_of_geometric_progression.rs)\n    * [Sum Of Harmonic Series](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sum_of_harmonic_series.rs)\n    * [Sylvester Sequence](https://github.com/TheAlgorithms/Rust/blob/master/src/math/sylvester_sequence.rs)\n    * [Tanh](https://github.com/TheAlgorithms/Rust/blob/master/src/math/tanh.rs)\n    * [Trapezoidal Integration](https://github.com/TheAlgorithms/Rust/blob/master/src/math/trapezoidal_integration.rs)\n    * [Trial Division](https://github.com/TheAlgorithms/Rust/blob/master/src/math/trial_division.rs)\n    * [Trig Functions](https://github.com/TheAlgorithms/Rust/blob/master/src/math/trig_functions.rs)\n    * [Vector Cross Product](https://github.com/TheAlgorithms/Rust/blob/master/src/math/vector_cross_product.rs)\n    * [Zellers Congruence Algorithm](https://github.com/TheAlgorithms/Rust/blob/master/src/math/zellers_congruence_algorithm.rs)\n  * Navigation\n    * [Bearing](https://github.com/TheAlgorithms/Rust/blob/master/src/navigation/bearing.rs)\n    * [Haversine](https://github.com/TheAlgorithms/Rust/blob/master/src/navigation/haversine.rs)\n  * Number Theory\n    * [Compute Totient](https://github.com/TheAlgorithms/Rust/blob/master/src/number_theory/compute_totient.rs)\n    * [Kth Factor](https://github.com/TheAlgorithms/Rust/blob/master/src/number_theory/kth_factor.rs)\n  * Searching\n    * [Binary Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/binary_search.rs)\n    * [Binary Search Recursive](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/binary_search_recursive.rs)\n    * [Exponential Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/exponential_search.rs)\n    * [Fibonacci Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/fibonacci_search.rs)\n    * [Interpolation Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/interpolation_search.rs)\n    * [Jump Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/jump_search.rs)\n    * [Kth Smallest](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/kth_smallest.rs)\n    * [Kth Smallest Heap](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/kth_smallest_heap.rs)\n    * [Linear Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/linear_search.rs)\n    * [Moore Voting](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/moore_voting.rs)\n    * [Quick Select](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/quick_select.rs)\n    * [Saddleback Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/saddleback_search.rs)\n    * [Ternary Search](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/ternary_search.rs)\n    * [Ternary Search Min Max](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/ternary_search_min_max.rs)\n    * [Ternary Search Min Max Recursive](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/ternary_search_min_max_recursive.rs)\n    * [Ternary Search Recursive](https://github.com/TheAlgorithms/Rust/blob/master/src/searching/ternary_search_recursive.rs)\n  * Sorting\n    * [Bead Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/bead_sort.rs)\n    * [Binary Insertion Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/binary_insertion_sort.rs)\n    * [Bingo Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/bingo_sort.rs)\n    * [Bitonic Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/bitonic_sort.rs)\n    * [Bogo Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/bogo_sort.rs)\n    * [Bubble Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/bubble_sort.rs)\n    * [Bucket Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/bucket_sort.rs)\n    * [Cocktail Shaker Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/cocktail_shaker_sort.rs)\n    * [Comb Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/comb_sort.rs)\n    * [Counting Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/counting_sort.rs)\n    * [Cycle Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/cycle_sort.rs)\n    * [Dutch National Flag Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/dutch_national_flag_sort.rs)\n    * [Exchange Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/exchange_sort.rs)\n    * [Gnome Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/gnome_sort.rs)\n    * [Heap Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/heap_sort.rs)\n    * [Insertion Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/insertion_sort.rs)\n    * [Intro Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/intro_sort.rs)\n    * [Merge Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/merge_sort.rs)\n    * [Odd Even Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/odd_even_sort.rs)\n    * [Pancake Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/pancake_sort.rs)\n    * [Patience Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/patience_sort.rs)\n    * [Pigeonhole Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/pigeonhole_sort.rs)\n    * [Quick Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/quick_sort.rs)\n    * [Quick Sort 3_ways](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/quick_sort_3_ways.rs)\n    * [Radix Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/radix_sort.rs)\n    * [Selection Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/selection_sort.rs)\n    * [Shell Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/shell_sort.rs)\n    * [Sleep Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/sleep_sort.rs)\n    * [Sort Utils](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/sort_utils.rs)\n    * [Stooge Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/stooge_sort.rs)\n    * [Tim Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/tim_sort.rs)\n    * [Tree Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/tree_sort.rs)\n    * [Wave Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/wave_sort.rs)\n    * [Wiggle Sort](https://github.com/TheAlgorithms/Rust/blob/master/src/sorting/wiggle_sort.rs)\n  * String\n    * [Aho Corasick](https://github.com/TheAlgorithms/Rust/blob/master/src/string/aho_corasick.rs)\n    * [Anagram](https://github.com/TheAlgorithms/Rust/blob/master/src/string/anagram.rs)\n    * [Autocomplete Using Trie](https://github.com/TheAlgorithms/Rust/blob/master/src/string/autocomplete_using_trie.rs)\n    * [Boyer Moore Search](https://github.com/TheAlgorithms/Rust/blob/master/src/string/boyer_moore_search.rs)\n    * [Burrows Wheeler Transform](https://github.com/TheAlgorithms/Rust/blob/master/src/string/burrows_wheeler_transform.rs)\n    * [Duval Algorithm](https://github.com/TheAlgorithms/Rust/blob/master/src/string/duval_algorithm.rs)\n    * [Hamming Distance](https://github.com/TheAlgorithms/Rust/blob/master/src/string/hamming_distance.rs)\n    * [Isogram](https://github.com/TheAlgorithms/Rust/blob/master/src/string/isogram.rs)\n    * [Isomorphism](https://github.com/TheAlgorithms/Rust/blob/master/src/string/isomorphism.rs)\n    * [Jaro Winkler Distance](https://github.com/TheAlgorithms/Rust/blob/master/src/string/jaro_winkler_distance.rs)\n    * [Knuth Morris Pratt](https://github.com/TheAlgorithms/Rust/blob/master/src/string/knuth_morris_pratt.rs)\n    * [Levenshtein Distance](https://github.com/TheAlgorithms/Rust/blob/master/src/string/levenshtein_distance.rs)\n    * [Lipogram](https://github.com/TheAlgorithms/Rust/blob/master/src/string/lipogram.rs)\n    * [Manacher](https://github.com/TheAlgorithms/Rust/blob/master/src/string/manacher.rs)\n    * [Palindrome](https://github.com/TheAlgorithms/Rust/blob/master/src/string/palindrome.rs)\n    * [Pangram](https://github.com/TheAlgorithms/Rust/blob/master/src/string/pangram.rs)\n    * [Rabin Karp](https://github.com/TheAlgorithms/Rust/blob/master/src/string/rabin_karp.rs)\n    * [Reverse](https://github.com/TheAlgorithms/Rust/blob/master/src/string/reverse.rs)\n    * [Run Length Encoding](https://github.com/TheAlgorithms/Rust/blob/master/src/string/run_length_encoding.rs)\n    * [Shortest Palindrome](https://github.com/TheAlgorithms/Rust/blob/master/src/string/shortest_palindrome.rs)\n    * [Suffix Array](https://github.com/TheAlgorithms/Rust/blob/master/src/string/suffix_array.rs)\n    * [Suffix Array Manber Myers](https://github.com/TheAlgorithms/Rust/blob/master/src/string/suffix_array_manber_myers.rs)\n    * [Suffix Tree](https://github.com/TheAlgorithms/Rust/blob/master/src/string/suffix_tree.rs)\n    * [Z Algorithm](https://github.com/TheAlgorithms/Rust/blob/master/src/string/z_algorithm.rs)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2019 The Algorithms\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.5498046875,
          "content": "<div align=\"center\">\n<!-- Title: -->\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Rust_programming_language_black_logo.svg/1024px-Rust_programming_language_black_logo.svg.png\" width=\"100\" height=\"100\">\n\n<h1><a href=\"https://github.com/TheAlgorithms/\">The Algorithms</a> - Rust</h1>\n\n<!-- Labels: -->\n<a href=\"https://gitpod.io/#https://github.com/TheAlgorithms/Rust\">\n    <img src=\"https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&style=flat-square\" height=\"20\" alt=\"Gitpod Ready-to-Code\">\n</a>\n<a href=\"https://github.com/TheAlgorithms/Rust/actions/workflows/build.yml\">\n  <img src=\"https://github.com/TheAlgorithms/Rust/actions/workflows/build.yml/badge.svg\" height=\"20\" alt=\"Build workflow\">\n</a>\n<a href=\"https://codecov.io/gh/TheAlgorithms/Rust\" > \n  <img src=\"https://codecov.io/gh/TheAlgorithms/Rust/graph/badge.svg?token=nRkPKfbs42\"/> \n</a>\n<a href=\"https://the-algorithms.com/discord\">\n  <img src=\"https://img.shields.io/discord/808045925556682782.svg?logo=discord&colorB=00d37d\" height=\"20\" alt=\"Discord community\">\n</a>\n<a href=\"https://matrix.to/#/#TheAlgorithms_community:gitter.im\">\n  <img src=\"https://img.shields.io/gitter/room/TheAlgorithms/community.svg?style=flat-square\" height=\"20\" alt=\"Gitter chat\">\n</a>\n\n<!-- Short description: -->\n  <h3>All algorithms implemented in Rust - for education</h3>\n</div>\n\n### List of Algorithms\nSee our [directory](DIRECTORY.md) for easier navigation and a better overview of the project.\n\n### Contributing\nRead through our [Contribution Guidelines](CONTRIBUTING.md) before you contribute.\n"
        },
        {
          "name": "git_hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}