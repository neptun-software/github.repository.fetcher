{
  "metadata": {
    "timestamp": 1736709462774,
    "page": 96,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BurntSushi/xsv",
      "stars": 10458,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0947265625,
          "content": ".*.swp\ndoc\ntags\nexamples/data/ss10pusa.csv\nbuild\ntarget\nctags.rust\n*.csv\n*.tsv\nmain\n*.idx\nbuilds\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.6142578125,
          "content": "language: rust\ncache: cargo\n\nenv:\n  global:\n    - PROJECT_NAME=xsv\nmatrix:\n  include:\n    # Stable channel\n    - os: linux\n      rust: stable\n      env: TARGET=i686-unknown-linux-musl\n    - os: osx\n      rust: stable\n      env: TARGET=x86_64-apple-darwin\n    - os: linux\n      rust: stable\n      env: TARGET=x86_64-unknown-linux-musl\n    # Minimum Rust supported channel.\n    - os: linux\n      rust: 1.28.0\n      env: TARGET=x86_64-unknown-linux-gnu\n    - os: linux\n      rust: 1.28.0\n      env: TARGET=x86_64-unknown-linux-musl\n\nbefore_install:\n  - export PATH=\"$PATH:$HOME/.cargo/bin\"\n\ninstall:\n  - bash ci/install.sh\n\nscript:\n  - bash ci/script.sh\n\nbefore_deploy:\n  - bash ci/before_deploy.sh\n\ndeploy:\n  provider: releases\n  api_key:\n    secure: aDT53aTIcl6RLcd4/StnKT55LgJyjiCtsmu1Byy0TIEtP4ZfNhsHwCbqyZT6TLownLJPi5wLM1WRncGKNYQelFDk/mUA8YugcFDfiSN//ZZ8KLAQiI+PX6JCrFYr/ZmP4dJzFWS1hPsr/X0gdbrlb3kuQG7BI9gH3GY4yTsLNiY=\n  file_glob: true\n  file: ${PROJECT_NAME}-${TRAVIS_TAG}-${TARGET}.*\n  # don't delete the artifacts from previous phases\n  skip_cleanup: true\n  # deploy when a new tag is pushed\n  on:\n    # channel to use to produce the release artifacts\n    # NOTE make sure you only release *once* per target\n    # TODO you may want to pick a different channel\n    condition: $TRAVIS_RUST_VERSION = stable\n    tags: true\n\nbranches:\n  only:\n    # Pushes and PR to the master branch\n    - master\n    # IMPORTANT Ruby regex to match tags. Required, or travis won't trigger deploys when a new tag\n    # is pushed. This regex matches semantic versions like v1.2.3-rc4+2016.02.22\n    - /^\\d+\\.\\d+\\.\\d+.*$/\n\nnotifications:\n  email:\n    on_success: never\n"
        },
        {
          "name": "BENCHMARKS.md",
          "type": "blob",
          "size": 1.857421875,
          "content": "These are some very basic and unscientific benchmarks of various commands\nprovided by `xsv`. Please see below for more information.\n\nThese benchmarks were run with\n[worldcitiespop_mil.csv](https://burntsushi.net/stuff/worldcitiespop_mil.csv),\nwhich is a random 1,000,000 row subset of the world city population dataset\nfrom the [Data Science Toolkit](https://github.com/petewarden/dstkdata).\n\nThese benchmarks were run on an Intel i7-6900K (8 CPUs, 16 threads) with 64GB\nof memory.\n\n```\ncount                   0.11 seconds   413.76  MB/sec\nflatten                 4.54 seconds   10.02   MB/sec\nflatten_condensed       4.45 seconds   10.22   MB/sec\nfrequency               1.82 seconds   25.00   MB/sec\nindex                   0.12 seconds   379.28  MB/sec\nsample_10               0.18 seconds   252.85  MB/sec\nsample_1000             0.18 seconds   252.85  MB/sec\nsample_100000           0.29 seconds   156.94  MB/sec\nsearch                  0.27 seconds   168.56  MB/sec\nselect                  0.14 seconds   325.09  MB/sec\nsearch                  0.13 seconds   350.10  MB/sec\nselect                  0.13 seconds   350.10  MB/sec\nsort                    2.18 seconds   20.87   MB/sec\nslice_one_middle        0.08 seconds   568.92  MB/sec\nslice_one_middle_index  0.01 seconds   4551.36 MB/sec\nstats                   1.09 seconds   41.75   MB/sec\nstats_index             0.15 seconds   303.42  MB/sec\nstats_everything        1.94 seconds   23.46   MB/sec\nstats_everything_index  0.93 seconds   48.93   MB/sec\n```\n\n### Details\n\nThe purpose of these benchmarks is to provide a rough ballpark estimate of how\nfast each command is. My hope is that they can also catch significant\nperformance regressions.\n\nThe `count` command can be viewed as a sort of baseline of the fastest possible\ncommand that parses every record in CSV data.\n\nThe benchmarks that end with `_index` are run with indexing enabled.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.123046875,
          "content": "This project is dual-licensed under the Unlicense and MIT licenses.\n\nYou may use this code under the terms of either license.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 22.673828125,
          "content": "[[package]]\nname = \"aho-corasick\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"cloudabi\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"crossbeam-epoch 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"parking_lot 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"csv\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"csv-core 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"csv-core\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"csv-index\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"byteorder 1.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"csv 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"docopt\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"regex 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"fuchsia-zircon\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"fuchsia-zircon-sys\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"version_check 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"nodrop\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"owning_ref\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"lock_api 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"quickcheck\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rand_core 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"proc-macro2 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rand_core 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"regex\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"aho-corasick 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"regex-syntax 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.75\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.75\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"proc-macro2 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"streaming-stats\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"num-traits 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"syn\"\nversion = \"0.14.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"proc-macro2 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"tabwriter\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"threadpool\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"ucd-util\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"unreachable\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"utf8-ranges\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"void\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\n\n[[package]]\nname = \"xsv\"\nversion = \"0.13.0\"\ndependencies = [\n \"byteorder 1.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"crossbeam-channel 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"csv 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"csv-index 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"docopt 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"quickcheck 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"regex 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"streaming-stats 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"tabwriter 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n \"threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n]\n\n[metadata]\n\"checksum aho-corasick 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c1c6d463cbe7ed28720b5b489e7c083eeb8f90d08be2a0d6bb9e1ffea9ce1afa\"\n\"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n\"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n\"checksum byteorder 1.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8389c509ec62b9fe8eca58c502a0acaf017737355615243496cde4994f8fa4f9\"\n\"checksum cfg-if 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0c4e7bb64a8ebb0d856483e1e682ea3422f883c5f5615a90d51a2c82fe87fdd3\"\n\"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n\"checksum crossbeam-channel 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c0a94250b0278d7fc5a894c3d276b11ea164edc8bf8feb10ca1ea517b44a649\"\n\"checksum crossbeam-epoch 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"30fecfcac6abfef8771151f8be4abc9e4edc112c2bcb233314cafde2680536e9\"\n\"checksum crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"677d453a17e8bd2b913fa38e8b9cf04bcdbb5be790aa294f2389661d72036015\"\n\"checksum csv 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0bbb6d75aae072248e381715437855a69595e5a97d3abbf748fe7a95e65d77fa\"\n\"checksum csv-core 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4dd8e6d86f7ba48b4276ef1317edc8cc36167546d8972feb4a2b5fec0b374105\"\n\"checksum csv-index 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b27beef016f9d0d43fd1f6097a469d1ccccd2191888f5dfeb4e7be7dbc8bfc6\"\n\"checksum docopt 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d60c92df70dfaaabecc14b409fd79f55ba0f247780529db1d73bfa601e1d3ac0\"\n\"checksum filetime 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"714653f3e34871534de23771ac7b26e999651a0a228f47beb324dfdf1dd4b10f\"\n\"checksum fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2e9763c69ebaae630ba35f74888db465e49e259ba1bc0eda7d06f4a067615d82\"\n\"checksum fuchsia-zircon-sys 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n\"checksum lazy_static 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ca488b89a5657b0a2ecd45b95609b3e848cf1755da332a0da46e2b2b1cb371a7\"\n\"checksum libc 0.2.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"76e3a3ef172f1a0b9a9ff0dd1491ae5e6c948b94479a3021819ba7d860c8645d\"\n\"checksum lock_api 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"949826a5ccf18c1b3a7c3d57692778d21768b79e46eb9dd07bfc4c2160036c54\"\n\"checksum log 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cba860f648db8e6f269df990180c2217f333472b4a6e901e97446858487971e2\"\n\"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n\"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n\"checksum nodrop 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a2228dca57108069a5262f2ed8bd2e82496d2e074a06d1ccc7ce1687b6ae0a2\"\n\"checksum num-traits 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"630de1ef5cc79d0cdd78b7e33b81f083cbfe90de0f4b2b2f07f905867c70e9fe\"\n\"checksum num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c51a3322e4bca9d212ad9a158a02abc6934d005490c054a2778df73a70aa0a30\"\n\"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n\"checksum parking_lot 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"69376b761943787ebd5cc85a5bc95958651a22609c5c1c2b65de21786baec72b\"\n\"checksum parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4db1a8ccf734a7bce794cc19b3df06ed87ab2f3907036b693c68f56b4d4537fa\"\n\"checksum proc-macro2 0.4.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee5697238f0d893c7f0ecc59c0999f18d2af85e424de441178bcacc9f9e6cf67\"\n\"checksum quickcheck 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b70118ab610f395b6c68ee9c7443d27b8da7d6d5145e82dc0be6fbe60029da37\"\n\"checksum quote 0.6.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd636425967c33af890042c483632d33fa7a18f19ad1d7ea72e8998c6ef8dea5\"\n\"checksum rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8356f47b32624fef5b3301c1be97e5944ecdd595409cc5da11d05f211db6cfbd\"\n\"checksum rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e464cd887e869cddcae8792a4ee31d23c7edd516700695608f5b98c67ee0131c\"\n\"checksum rand_core 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edecf0f94da5551fc9b492093e30b041a891657db7940ee221f9d2f66e82eef2\"\n\"checksum redox_syscall 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c214e91d3ecf43e9a4e41e578973adeb14b474f2bee858742d127af75a0112b1\"\n\"checksum regex 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d8c9f33201f46669484bacc312b00e7541bed6aaf296dffe2bb4e0ac6b8ce2a\"\n\"checksum regex-syntax 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"747ba3b235651f6e2f67dfa8bcdcd073ddb7c243cb21c442fc12395dfcac212d\"\n\"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n\"checksum serde 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\" = \"22d340507cea0b7e6632900a176101fea959c7065d93ba555072da90aaaafc87\"\n\"checksum serde_derive 1.0.75 (registry+https://github.com/rust-lang/crates.io-index)\" = \"234fc8b737737b148ccd625175fc6390f5e4dacfdaa543cb93a3430d984a9119\"\n\"checksum smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"153ffa32fd170e9944f7e0838edf824a754ec4c1fc64746fcc9fe1f8fa602e5d\"\n\"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n\"checksum streaming-stats 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f233aa550ceeb22c47cff12e167f7bc89c03e265e7fcff64b8359bb6799e0f4\"\n\"checksum strsim 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb4f380125926a99e52bc279241539c018323fab05ad6368b56f93d9369ff550\"\n\"checksum syn 0.14.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"261ae9ecaa397c42b960649561949d69311f08eeaea86a65696e6e46517cf741\"\n\"checksum tabwriter 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9128e3a9149e51494cad59712a286e149fcb74e443d2298d69bd6eaa42cc4ebb\"\n\"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n\"checksum threadpool 1.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e2f0c90a5f3459330ac8bc0d2f879c693bb7a2f59689c1083fc4ef83834da865\"\n\"checksum ucd-util 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd2be2d6639d0f8fe6cdda291ad456e23629558d466e2789d2c3e9892bda285d\"\n\"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n\"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n\"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\"\n\"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n\"checksum version_check 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7716c242968ee87e5542f8021178248f267f295a5c4803beae8b8b7fd9bc6051\"\n\"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n\"checksum winapi 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"773ef9dcc5f24b7d850d0ff101e542ff24c3b090a9768e03ff889fdef41f00fd\"\n\"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\"checksum winapi-x86_64-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.9111328125,
          "content": "[package]\nname = \"xsv\"\nversion = \"0.13.0\"  #:version\nauthors = [\"Andrew Gallant <jamslam@gmail.com>\"]\ndescription = \"A high performance CSV command line toolkit.\"\ndocumentation = \"https://burntsushi.net/rustdoc/xsv/\"\nhomepage = \"https://github.com/BurntSushi/xsv\"\nrepository = \"https://github.com/BurntSushi/xsv\"\nreadme = \"README.md\"\nkeywords = [\"csv\", \"tsv\", \"slice\", \"command\"]\nlicense = \"Unlicense/MIT\"\nautotests = false\n\n[[bin]]\nname = \"xsv\"\ntest = false\nbench = false\ndoctest = false\n\n[[test]]\nname = \"tests\"\n\n[profile.release]\nopt-level = 3\ndebug = true\n\n[profile.test]\nopt-level = 3\n\n[dependencies]\nbyteorder = \"1\"\ncrossbeam-channel = \"0.2.4\"\ncsv = \"1\"\ncsv-index = \"0.1.5\"\ndocopt = \"1\"\nfiletime = \"0.1\"\nnum_cpus = \"1.4\"\nrand = \"0.5\"\nregex = \"1\"\nserde = \"1\"\nserde_derive = \"1\"\nstreaming-stats = \"0.2\"\ntabwriter = \"1\"\nthreadpool = \"1.3\"\n\n[dev-dependencies]\nquickcheck = { version = \"0.7\", default-features = false }\nlog = \"0.4\"\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Andrew Gallant\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5576171875,
          "content": "all:\n\t@echo Nothing to do...\n\nctags:\n\tctags --recurse --options=ctags.rust --languages=Rust\n\ndocs:\n\tcargo doc\n\tin-dir ./target/doc fix-perms\n\trscp ./target/doc/* gopher:~/www/burntsushi.net/rustdoc/\n\ndebug:\n\tcargo build --verbose\n\trustc -L ./target/deps/ -g -Z lto --opt-level 3 src/main.rs\n\npush:\n\tgit push home master\n\tgit push origin master\n\ndev:\n\tcargo build\n\tcp ./target/xsv ~/bin/bin/xsv\n\nrelease:\n\tcargo build --release\n\tmkdir -p ~/bin/bin\n\tcp ./target/release/xsv ~/bin/bin/xsv\n\ngithub:\n\t./scripts/build-release\n\t./scripts/github-release\n\t./scripts/github-upload\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.4267578125,
          "content": "xsv is a command line program for indexing, slicing, analyzing, splitting\nand joining CSV files. Commands should be simple, fast and composable:\n\n1. Simple tasks should be easy.\n2. Performance trade offs should be exposed in the CLI interface.\n3. Composition should not come at the expense of performance.\n\nThis README contains information on how to\n[install `xsv`](https://github.com/BurntSushi/xsv#installation), in addition to\na quick tour of several commands.\n\n[![Linux build status](https://api.travis-ci.org/BurntSushi/xsv.svg)](https://travis-ci.org/BurntSushi/xsv)\n[![Windows build status](https://ci.appveyor.com/api/projects/status/github/BurntSushi/xsv?svg=true)](https://ci.appveyor.com/project/BurntSushi/xsv)\n[![](https://meritbadge.herokuapp.com/xsv)](https://crates.io/crates/xsv)\n\nDual-licensed under MIT or the [UNLICENSE](https://unlicense.org).\n\n\n### Available commands\n\n* **cat** - Concatenate CSV files by row or by column.\n* **count** - Count the rows in a CSV file. (Instantaneous with an index.)\n* **fixlengths** - Force a CSV file to have same-length records by either\n  padding or truncating them.\n* **flatten** - A flattened view of CSV records. Useful for viewing one record\n  at a time. e.g., `xsv slice -i 5 data.csv | xsv flatten`.\n* **fmt** - Reformat CSV data with different delimiters, record terminators\n  or quoting rules. (Supports ASCII delimited data.)\n* **frequency** - Build frequency tables of each column in CSV data. (Uses\n  parallelism to go faster if an index is present.)\n* **headers** - Show the headers of CSV data. Or show the intersection of all\n  headers between many CSV files.\n* **index** - Create an index for a CSV file. This is very quick and provides\n  constant time indexing into the CSV file.\n* **input** - Read CSV data with exotic quoting/escaping rules.\n* **join** - Inner, outer and cross joins. Uses a simple hash index to make it\n  fast.\n* **partition** - Partition CSV data based on a column value.\n* **sample** - Randomly draw rows from CSV data using reservoir sampling (i.e.,\n  use memory proportional to the size of the sample).\n* **reverse** - Reverse order of rows in CSV data.\n* **search** - Run a regex over CSV data. Applies the regex to each field\n  individually and shows only matching rows.\n* **select** - Select or re-order columns from CSV data.\n* **slice** - Slice rows from any part of a CSV file. When an index is present,\n  this only has to parse the rows in the slice (instead of all rows leading up\n  to the start of the slice).\n* **sort** - Sort CSV data.\n* **split** - Split one CSV file into many CSV files of N chunks.\n* **stats** - Show basic types and statistics of each column in the CSV file.\n  (i.e., mean, standard deviation, median, range, etc.)\n* **table** - Show aligned output of any CSV data using\n  [elastic tabstops](https://github.com/BurntSushi/tabwriter).\n\n\n### A whirlwind tour\n\nLet's say you're playing with some of the data from the\n[Data Science Toolkit](https://github.com/petewarden/dstkdata), which contains\nseveral CSV files. Maybe you're interested in the population counts of each\ncity in the world. So grab the data and start examining it:\n\n```bash\n$ curl -LO https://burntsushi.net/stuff/worldcitiespop.csv\n$ xsv headers worldcitiespop.csv\n1   Country\n2   City\n3   AccentCity\n4   Region\n5   Population\n6   Latitude\n7   Longitude\n```\n\nThe next thing you might want to do is get an overview of the kind of data that\nappears in each column. The `stats` command will do this for you:\n\n```bash\n$ xsv stats worldcitiespop.csv --everything | xsv table\nfield       type     min            max            min_length  max_length  mean          stddev         median     mode         cardinality\nCountry     Unicode  ad             zw             2           2                                                   cn           234\nCity        Unicode   bab el ahmar  Þykkvibaer     1           91                                                  san jose     2351892\nAccentCity  Unicode   Bâb el Ahmar  ïn Bou Chella  1           91                                                  San Antonio  2375760\nRegion      Unicode  00             Z9             0           2                                        13         04           397\nPopulation  Integer  7              31480498       0           8           47719.570634  302885.559204  10779                   28754\nLatitude    Float    -54.933333     82.483333      1           12          27.188166     21.952614      32.497222  51.15        1038349\nLongitude   Float    -179.983333    180            1           14          37.08886      63.22301       35.28      23.8         1167162\n```\n\nThe `xsv table` command takes any CSV data and formats it into aligned columns\nusing [elastic tabstops](https://github.com/BurntSushi/tabwriter). You'll\nnotice that it even gets alignment right with respect to Unicode characters.\n\nSo, this command takes about 12 seconds to run on my machine, but we can speed\nit up by creating an index and re-running the command:\n\n```bash\n$ xsv index worldcitiespop.csv\n$ xsv stats worldcitiespop.csv --everything | xsv table\n...\n```\n\nWhich cuts it down to about 8 seconds on my machine. (And creating the index\ntakes less than 2 seconds.)\n\nNotably, the same type of \"statistics\" command in another\n[CSV command line toolkit](https://csvkit.readthedocs.io/)\ntakes about 2 minutes to produce similar statistics on the same data set.\n\nCreating an index gives us more than just faster statistics gathering. It also\nmakes slice operations extremely fast because *only the sliced portion* has to\nbe parsed. For example, let's say you wanted to grab the last 10 records:\n\n```bash\n$ xsv count worldcitiespop.csv\n3173958\n$ xsv slice worldcitiespop.csv -s 3173948 | xsv table\nCountry  City               AccentCity         Region  Population  Latitude     Longitude\nzw       zibalonkwe         Zibalonkwe         06                  -19.8333333  27.4666667\nzw       zibunkululu        Zibunkululu        06                  -19.6666667  27.6166667\nzw       ziga               Ziga               06                  -19.2166667  27.4833333\nzw       zikamanas village  Zikamanas Village  00                  -18.2166667  27.95\nzw       zimbabwe           Zimbabwe           07                  -20.2666667  30.9166667\nzw       zimre park         Zimre Park         04                  -17.8661111  31.2136111\nzw       ziyakamanas        Ziyakamanas        00                  -18.2166667  27.95\nzw       zizalisari         Zizalisari         04                  -17.7588889  31.0105556\nzw       zuzumba            Zuzumba            06                  -20.0333333  27.9333333\nzw       zvishavane         Zvishavane         07      79876       -20.3333333  30.0333333\n```\n\nThese commands are *instantaneous* because they run in time and memory\nproportional to the size of the slice (which means they will scale to\narbitrarily large CSV data).\n\nSwitching gears a little bit, you might not always want to see every column in\nthe CSV data. In this case, maybe we only care about the country, city and\npopulation. So let's take a look at 10 random rows:\n\n```bash\n$ xsv select Country,AccentCity,Population worldcitiespop.csv \\\n  | xsv sample 10 \\\n  | xsv table\nCountry  AccentCity       Population\ncn       Guankoushang\nza       Klipdrift\nma       Ouled Hammou\nfr       Les Gravues\nla       Ban Phadèng\nde       Lüdenscheid      80045\nqa       Umm ash Shubrum\nbd       Panditgoan\nus       Appleton\nua       Lukashenkivske\n```\n\nWhoops! It seems some cities don't have population counts. How pervasive is\nthat?\n\n```bash\n$ xsv frequency worldcitiespop.csv --limit 5\nfield,value,count\nCountry,cn,238985\nCountry,ru,215938\nCountry,id,176546\nCountry,us,141989\nCountry,ir,123872\nCity,san jose,328\nCity,san antonio,320\nCity,santa rosa,296\nCity,santa cruz,282\nCity,san juan,255\nAccentCity,San Antonio,317\nAccentCity,Santa Rosa,296\nAccentCity,Santa Cruz,281\nAccentCity,San Juan,254\nAccentCity,San Miguel,254\nRegion,04,159916\nRegion,02,142158\nRegion,07,126867\nRegion,03,122161\nRegion,05,118441\nPopulation,(NULL),3125978\nPopulation,2310,12\nPopulation,3097,11\nPopulation,983,11\nPopulation,2684,11\nLatitude,51.15,777\nLatitude,51.083333,772\nLatitude,50.933333,769\nLatitude,51.116667,769\nLatitude,51.133333,767\nLongitude,23.8,484\nLongitude,23.2,477\nLongitude,23.05,476\nLongitude,25.3,474\nLongitude,23.1,459\n```\n\n(The `xsv frequency` command builds a frequency table for each column in the\nCSV data. This one only took 5 seconds.)\n\nSo it seems that most cities do not have a population count associated with\nthem at all. No matter—we can adjust our previous command so that it only\nshows rows with a population count:\n\n```bash\n$ xsv search -s Population '[0-9]' worldcitiespop.csv \\\n  | xsv select Country,AccentCity,Population \\\n  | xsv sample 10 \\\n  | xsv table\nCountry  AccentCity       Population\nes       Barañáin         22264\nes       Puerto Real      36946\nat       Moosburg         4602\nhu       Hejobaba         1949\nru       Polyarnyye Zori  15092\ngr       Kandíla          1245\nis       Ólafsvík         992\nhu       Decs             4210\nbg       Sliven           94252\ngb       Leatherhead      43544\n```\n\nErk. Which country is `at`? No clue, but the Data Science Toolkit has a CSV\nfile called `countrynames.csv`. Let's grab it and do a join so we can see which\ncountries these are:\n\n```bash\ncurl -LO https://gist.githubusercontent.com/anonymous/063cb470e56e64e98cf1/raw/98e2589b801f6ca3ff900b01a87fbb7452eb35c7/countrynames.csv\n$ xsv headers countrynames.csv\n1   Abbrev\n2   Country\n$ xsv join --no-case  Country sample.csv Abbrev countrynames.csv | xsv table\nCountry  AccentCity       Population  Abbrev  Country\nes       Barañáin         22264       ES      Spain\nes       Puerto Real      36946       ES      Spain\nat       Moosburg         4602        AT      Austria\nhu       Hejobaba         1949        HU      Hungary\nru       Polyarnyye Zori  15092       RU      Russian Federation | Russia\ngr       Kandíla          1245        GR      Greece\nis       Ólafsvík         992         IS      Iceland\nhu       Decs             4210        HU      Hungary\nbg       Sliven           94252       BG      Bulgaria\ngb       Leatherhead      43544       GB      Great Britain | UK | England | Scotland | Wales | Northern Ireland | United Kingdom\n```\n\nWhoops, now we have two columns called `Country` and an `Abbrev` column that we\nno longer need. This is easy to fix by re-ordering columns with the `xsv\nselect` command:\n\n```bash\n$ xsv join --no-case  Country sample.csv Abbrev countrynames.csv \\\n  | xsv select 'Country[1],AccentCity,Population' \\\n  | xsv table\nCountry                                                                              AccentCity       Population\nSpain                                                                                Barañáin         22264\nSpain                                                                                Puerto Real      36946\nAustria                                                                              Moosburg         4602\nHungary                                                                              Hejobaba         1949\nRussian Federation | Russia                                                          Polyarnyye Zori  15092\nGreece                                                                               Kandíla          1245\nIceland                                                                              Ólafsvík         992\nHungary                                                                              Decs             4210\nBulgaria                                                                             Sliven           94252\nGreat Britain | UK | England | Scotland | Wales | Northern Ireland | United Kingdom  Leatherhead      43544\n```\n\nPerhaps we can do this with the original CSV data? Indeed we can—because\njoins in `xsv` are fast.\n\n```bash\n$ xsv join --no-case Abbrev countrynames.csv Country worldcitiespop.csv \\\n  | xsv select '!Abbrev,Country[1]' \\\n  > worldcitiespop_countrynames.csv\n$ xsv sample 10 worldcitiespop_countrynames.csv | xsv table\nCountry                      City                   AccentCity             Region  Population  Latitude    Longitude\nSri Lanka                    miriswatte             Miriswatte             36                  7.2333333   79.9\nRomania                      livezile               Livezile               26      1985        44.512222   22.863333\nIndonesia                    tawainalu              Tawainalu              22                  -4.0225     121.9273\nRussian Federation | Russia  otar                   Otar                   45                  56.975278   48.305278\nFrance                       le breuil-bois robert  le Breuil-Bois Robert  A8                  48.945567   1.717026\nFrance                       lissac                 Lissac                 B1                  45.103094   1.464927\nAlbania                      lumalasi               Lumalasi               46                  40.6586111  20.7363889\nChina                        motzushih              Motzushih              11                  27.65       111.966667\nRussian Federation | Russia  svakino                Svakino                69                  55.60211    34.559785\nRomania                      tirgu pancesti         Tirgu Pancesti         38                  46.216667   27.1\n```\n\nThe `!Abbrev,Country[1]` syntax means, \"remove the `Abbrev` column and remove\nthe second occurrence of the `Country` column.\" Since we joined with\n`countrynames.csv` first, the first `Country` name (fully expanded) is now\nincluded in the CSV data.\n\nThis `xsv join` command takes about 7 seconds on my machine. The performance\ncomes from constructing a very simple hash index of one of the CSV data files\ngiven. The `join` command does an inner join by default, but it also has left,\nright and full outer join support too.\n\n\n### Installation\n\nBinaries for Windows, Linux and macOS are available [from Github](https://github.com/BurntSushi/xsv/releases/latest).\n\nIf you're a **macOS Homebrew** user, then you can install xsv\nfrom homebrew-core:\n\n```\n$ brew install xsv\n```\n\nIf you're a **macOS MacPorts** user, then you can install xsv\nfrom the [official ports](https://www.macports.org/ports.php?by=name&substr=xsv):\n\n```\n$ sudo port install xsv\n```\n\nIf you're a **Nix/NixOS** user, you can install xsv from nixpkgs:\n\n```\n$ nix-env -i xsv\n```\n\nAlternatively, you can compile from source by\n[installing Cargo](https://crates.io/install)\n([Rust's](https://www.rust-lang.org/) package manager)\nand installing `xsv` using Cargo:\n\n```bash\ncargo install xsv\n```\n\nCompiling from this repository also works similarly:\n\n```bash\ngit clone git://github.com/BurntSushi/xsv\ncd xsv\ncargo build --release\n```\n\nCompilation will probably take a few minutes depending on your machine. The\nbinary will end up in `./target/release/xsv`.\n\n\n### Benchmarks\n\nI've compiled some [very rough\nbenchmarks](https://github.com/BurntSushi/xsv/blob/master/BENCHMARKS.md) of\nvarious `xsv` commands.\n\n\n### Motivation\n\nHere are several valid criticisms of this project:\n\n1. You shouldn't be working with CSV data because CSV is a terrible format.\n2. If your data is gigabytes in size, then CSV is the wrong storage type.\n3. Various SQL databases provide all of the operations available in `xsv` with\n   more sophisticated indexing support. And the performance is a zillion times\n   better.\n\nI'm sure there are more criticisms, but the impetus for this project was a 40GB\nCSV file that was handed to me. I was tasked with figuring out the shape of the\ndata inside of it and coming up with a way to integrate it into our existing\nsystem. It was then that I realized that every single CSV tool I knew about was\nwoefully inadequate. They were just too slow or didn't provide enough\nflexibility. (Another project I had comprised of a few dozen CSV files. They\nwere smaller than 40GB, but they were each supposed to represent the same kind\nof data. But they all had different column and unintuitive column names. Useful\nCSV inspection tools were critical here—and they had to be reasonably fast.)\n\nThe key ingredients for helping me with my task were indexing, random sampling,\nsearching, slicing and selecting columns. All of these things made dealing with\n40GB of CSV data a bit more manageable (or dozens of CSV files).\n\nGetting handed a large CSV file *once* was enough to launch me on this quest.\nFrom conversations I've had with others, CSV data files this large don't seem\nto be a rare event. Therefore, I believe there is room for a tool that has a\nhope of dealing with data that large.\n\n\n### Naming collision\n\nThis project is unrelated to another similar project with the same name:\nhttps://mj.ucw.cz/sw/xsv/\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.1640625,
          "content": "\n# Inspired from https://github.com/habitat-sh/habitat/blob/master/appveyor.yml\ncache:\n  - c:\\cargo\\registry\n  - c:\\cargo\\git\n  - c:\\projects\\ripgrep\\target\n\ninit:\n  - mkdir c:\\cargo\n  - mkdir c:\\rustup\n  - SET PATH=c:\\cargo\\bin;%PATH%\n\nenvironment:\n  CARGO_HOME: \"c:\\\\cargo\"\n  RUSTUP_HOME: \"c:\\\\rustup\"\n  CARGO_TARGET_DIR: \"c:\\\\projects\\\\xsv\\\\target\"\n  global:\n    PROJECT_NAME: xsv\n    RUST_BACKTRACE: full\n  matrix:\n    # Stable channel\n    - TARGET: i686-pc-windows-gnu\n      CHANNEL: stable\n    - TARGET: i686-pc-windows-msvc\n      CHANNEL: stable\n    - TARGET: x86_64-pc-windows-gnu\n      CHANNEL: stable\n    - TARGET: x86_64-pc-windows-msvc\n      CHANNEL: stable\n\nmatrix:\n  fast_finish: true\n\n# Install Rust and Cargo\n# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)\ninstall:\n  - curl -sSf -o rustup-init.exe https://win.rustup.rs/\n  - rustup-init.exe -y --default-host %TARGET% --no-modify-path\n  - if defined MSYS2_BITS set PATH=%PATH%;C:\\msys64\\mingw%MSYS2_BITS%\\bin\n  - rustc -V\n  - cargo -V\n\n# ???\nbuild: false\n\n# Equivalent to Travis' `script` phase\n# TODO modify this phase as you see fit\ntest_script:\n  - cargo test --verbose\n\nbefore_deploy:\n  # Generate artifacts for release\n  - cargo build --release\n  - mkdir staging\n  # TODO update this part to copy the artifacts that make sense for your project\n  - copy target\\release\\xsv.exe staging\n  - cd staging\n    # release zipfile will look like 'rust-everywhere-v1.2.3-x86_64-pc-windows-msvc'\n  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *\n  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip\n\ndeploy:\n  description: 'Windows release'\n  # All the zipped artifacts will be deployed\n  artifact: /.*\\.zip/\n  auth_token:\n    secure: vv4vBCEosGlyQjaEC1+kraP2P6O4CQSa+Tw50oHWFTGcmuXxaWS0/yEXbxsIRLpw\n  provider: GitHub\n  # deploy when a new tag is pushed and only on the stable channel\n  on:\n    # channel to use to produce the release artifacts\n    # NOTE make sure you only release *once* per target\n    # TODO you may want to pick a different channel\n    CHANNEL: stable\n    appveyor_repo_tag: true\n\nbranches:\n  only:\n    - appveyor\n    - /\\d+\\.\\d+\\.\\d+/\n  except:\n    - master\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "session.vim",
          "type": "blob",
          "size": 0.0546875,
          "content": "au BufWritePost *.rs silent!make ctags > /dev/null 2>&1\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}