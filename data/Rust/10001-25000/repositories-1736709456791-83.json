{
  "metadata": {
    "timestamp": 1736709456791,
    "page": 83,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rust-lang/rust-clippy",
      "stars": 11645,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.4287109375,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\nmax_line_length = 120\n\n[*.md]\n# double whitespace at end of line\n# denotes a line break in Markdown\ntrim_trailing_whitespace = false\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.115234375,
          "content": "* text=auto eol=lf\n*.rs text eol=lf whitespace=tab-in-indent,trailing-space,tabwidth=4\n*.fixed linguist-language=Rust\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5498046875,
          "content": "# Generated by ui-test\nrustc-ice-*\n\n# Used by CI to be able to push:\n/.github/deploy_key\nout\n\n# Compiled files\n*.o\n*.d\n*.so\n*.rlib\n*.dll\n*.pyc\n*.rmeta\n\n# Executables\n*.exe\n\n# Generated by Cargo\n*Cargo.lock\n/target\n/clippy_lints/target\n/clippy_utils/target\n/clippy_dev/target\n/lintcheck/target\n/rustc_tools_util/target\n\n# Generated by dogfood\n/target_recur/\n\n# Generated by lintcheck\n/lintcheck-logs\n\n# gh pages docs\nutil/gh-pages/lints.json\nutil/gh-pages/index.html\n\n# rustfmt backups\n*.rs.bk\n\nhelper.txt\n*.iml\n.vscode\n.idea\n\n# mdbook generated output\n/book/book\n"
        },
        {
          "name": ".remarkrc",
          "type": "blob",
          "size": 0.3046875,
          "content": "{\n  \"plugins\": [\n    \"remark-preset-lint-recommended\",\n    \"remark-gfm\",\n    [\"remark-lint-list-item-indent\", false],\n    [\"remark-lint-no-literal-urls\", false],\n    [\"remark-lint-no-shortcut-reference-link\", false],\n    [\"remark-lint-maximum-line-length\", 120]\n  ],\n  \"settings\": {\n    \"commonmark\": true\n  }\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 359.52734375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\nSee [Changelog Update](book/src/development/infrastructure/changelog_update.md) if you want to update this\ndocument.\n\n## Unreleased / Beta / In Rust Nightly\n\n[786fbd6d...master](https://github.com/rust-lang/rust-clippy/compare/786fbd6d...master)\n\n## Rust 1.84\n\nCurrent stable, released 2025-01-09\n\n[View all 84 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2024-10-03T21%3A23%3A58Z..2024-11-14T17%3A41%3A37Z+base%3Amaster)\n\n### New Lints\n\n* Added [`unnecessary_map_or`] to `style`\n  [#11796](https://github.com/rust-lang/rust-clippy/pull/11796)\n* Added [`arbitrary_source_item_ordering`] to `restriction`\n  [#13376](https://github.com/rust-lang/rust-clippy/pull/13376)\n* Added [`map_with_unused_argument_over_ranges`] to `restriction`\n  [#13034](https://github.com/rust-lang/rust-clippy/pull/13034)\n* Added [`map_all_any_identity`] to `complexity`\n  [#13499](https://github.com/rust-lang/rust-clippy/pull/13499)\n* Added [`needless_as_bytes`] to `complexity`\n  [#13437](https://github.com/rust-lang/rust-clippy/pull/13437)\n* Added [`unnecessary_literal_bound`] to `pedantic`\n  [#13395](https://github.com/rust-lang/rust-clippy/pull/13395)\n* Added [`manual_ignore_case_cmp`] to `perf`\n  [#13334](https://github.com/rust-lang/rust-clippy/pull/13334)\n* Added [`regex_creation_in_loops`] to `perf`\n  [#13412](https://github.com/rust-lang/rust-clippy/pull/13412)\n\n### Moves and Deprecations\n\n* Moved [`manual_is_power_of_two`] to `pedantic` (From `complexity`, now allow-by-default)\n  [#13553](https://github.com/rust-lang/rust-clippy/pull/13553)\n* Move [`module_name_repetitions`] to `restriction` (from `pedantic`)\n  [#13541](https://github.com/rust-lang/rust-clippy/pull/13541)\n\n### Enhancements\n\n* [`doc_markdown`]: Added the following identifiers to [`doc-valid-idents`]:\n  CoAP, MHz, GHz, and THz\n  [#13633](https://github.com/rust-lang/rust-clippy/pull/13633)\n  [#13460](https://github.com/rust-lang/rust-clippy/pull/13460)\n* [`large_const_arrays`]: Changed the default of [`array-size-threshold`] to `16kb` (from `512kb`)\n  [#13485](https://github.com/rust-lang/rust-clippy/pull/13485)\n\n## Rust 1.83\n\nReleased 2024-11-28\n\n[View all 64 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2024-08-25T09%3A59%3A01Z..2024-10-03T13%3A42%3A56Z+base%3Amaster)\n\n### Important Change\n\n* Removed the implicit `cargo-clippy` feature set by Clippy as announced here:\n  <https://blog.rust-lang.org/2024/02/28/Clippy-deprecating-feature-cargo-clippy.html>\n  [#13246](https://github.com/rust-lang/rust-clippy/pull/13246)\n\n### New Lints\n\n* Added [`unused_trait_names`] to `restriction`\n  [#13322](https://github.com/rust-lang/rust-clippy/pull/13322)\n* Added [`unnecessary_first_then_check`] to `complexity`\n  [#13421](https://github.com/rust-lang/rust-clippy/pull/13421)\n* Added [`non_zero_suggestions`] to `restriction`\n  [#13167](https://github.com/rust-lang/rust-clippy/pull/13167)\n* Added [`manual_is_power_of_two`] to `pedantic`\n  [#13327](https://github.com/rust-lang/rust-clippy/pull/13327)\n* Added [`manual_div_ceil`] to `complexity`\n  [#12987](https://github.com/rust-lang/rust-clippy/pull/12987)\n* Added [`zombie_processes`] to `suspicious`\n  [#11476](https://github.com/rust-lang/rust-clippy/pull/11476)\n* Added [`used_underscore_items`] to `pedantic`\n  [#13294](https://github.com/rust-lang/rust-clippy/pull/13294)\n\n### Moves and Deprecations\n\n* Moved [`ref_option`] to `pedantic` (From `nursery`)\n  [#13469](https://github.com/rust-lang/rust-clippy/pull/13469)\n* Moved [`manual_c_str_literals`] to `complexity` (From `pedantic`, now warn-by-default)\n  [#13263](https://github.com/rust-lang/rust-clippy/pull/13263)\n* Moved [`empty_line_after_doc_comments`] to `suspicious` (From `nursery`, now warn-by-default)\n  [#13091](https://github.com/rust-lang/rust-clippy/pull/13091)\n* Moved [`empty_line_after_outer_attr`] to `suspicious` (From `nursery`, now warn-by-default)\n  [#13091](https://github.com/rust-lang/rust-clippy/pull/13091)\n\n### Enhancements\n\n* [`missing_panics_doc`]: No longer lints in const environments\n  [#13382](https://github.com/rust-lang/rust-clippy/pull/13382)\n\n## Rust 1.82\n\nReleased 2024-10-17\n\n[View all 108 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2024-07-11T20%3A12%3A07Z..2024-08-24T20%3A55%3A35Z+base%3Amaster)\n\n### New Lints\n\n* Added [`too_long_first_doc_paragraph`] to `nursery`\n  [#12993](https://github.com/rust-lang/rust-clippy/pull/12993)\n* Added [`unused_result_ok`] to `restriction`\n  [#12150](https://github.com/rust-lang/rust-clippy/pull/12150)\n* Added [`pathbuf_init_then_push`] to `restriction`\n  [#11700](https://github.com/rust-lang/rust-clippy/pull/11700)\n\n### Enhancements\n\n* [`explicit_iter_loop`]: Now respects the `msrv` configuration\n  [#13288](https://github.com/rust-lang/rust-clippy/pull/13288)\n* [`assigning_clones`]: No longer lints in test code\n  [#13273](https://github.com/rust-lang/rust-clippy/pull/13273)\n* [`inconsistent_struct_constructor`]: Lint attributes now work on the struct definition\n  [#13211](https://github.com/rust-lang/rust-clippy/pull/13211)\n* [`set_contains_or_insert`]: Now also checks for `BTreeSet`\n  [#13053](https://github.com/rust-lang/rust-clippy/pull/13053)\n* [`doc_markdown`]: Added the following identifiers to [`doc-valid-idents`]: AccessKit,\n  CoreFoundation, CoreGraphics, CoreText, Direct2D, Direct3D, DirectWrite, PostScript,\n  OpenAL, OpenType, WebRTC, WebSocket, WebTransport, NetBSD, and OpenBSD\n  [#13093](https://github.com/rust-lang/rust-clippy/pull/13093)\n\n### ICE Fixes\n\n* [`uninit_vec`]\n  [rust#128720](https://github.com/rust-lang/rust/pull/128720)\n\n## Rust 1.81\n\nReleased 2024-09-05\n\n### New Lints\n\n* Added [`cfg_not_test`] to `restriction`\n  [#11293](https://github.com/rust-lang/rust-clippy/pull/11293)\n* Added [`byte_char_slices`] to `style`\n  [#10155](https://github.com/rust-lang/rust-clippy/pull/10155)\n* Added [`set_contains_or_insert`] to `nursery`\n  [#12873](https://github.com/rust-lang/rust-clippy/pull/12873)\n* Added [`manual_rotate`] to `style`\n  [#12983](https://github.com/rust-lang/rust-clippy/pull/12983)\n* Added [`unnecessary_min_or_max`] to `complexity`\n  [#12368](https://github.com/rust-lang/rust-clippy/pull/12368)\n* Added [`manual_inspect`] to `complexity`\n  [#12287](https://github.com/rust-lang/rust-clippy/pull/12287)\n* Added [`field_scoped_visibility_modifiers`] to `restriction`\n  [#12893](https://github.com/rust-lang/rust-clippy/pull/12893)\n* Added [`manual_pattern_char_comparison`] to `style`\n  [#12849](https://github.com/rust-lang/rust-clippy/pull/12849)\n* Added [`needless_maybe_sized`] to `suspicious`\n  [#10632](https://github.com/rust-lang/rust-clippy/pull/10632)\n* Added [`needless_character_iteration`] to `suspicious`\n  [#12815](https://github.com/rust-lang/rust-clippy/pull/12815)\n\n### Moves and Deprecations\n\n* [`allow_attributes`], [`allow_attributes_without_reason`]: Now work on stable\n  [rust#120924](https://github.com/rust-lang/rust/pull/120924)\n* Renamed `overflow_check_conditional` to [`panicking_overflow_checks`]\n  [#12944](https://github.com/rust-lang/rust-clippy/pull/12944)\n* Moved [`panicking_overflow_checks`] to `correctness` (From `complexity` now deny-by-default)\n  [#12944](https://github.com/rust-lang/rust-clippy/pull/12944)\n* Renamed `thread_local_initializer_can_be_made_const` to [`missing_const_for_thread_local`]\n  [#12974](https://github.com/rust-lang/rust-clippy/pull/12974)\n* Deprecated [`maybe_misused_cfg`] and [`mismatched_target_os`] as they are now caught by cargo\n  and rustc\n  [#12875](https://github.com/rust-lang/rust-clippy/pull/12875)\n\n### Enhancements\n\n* [`significant_drop_in_scrutinee`]: Now also checks scrutinies of `while let` and `for let`\n  expressions\n  [#12870](https://github.com/rust-lang/rust-clippy/pull/12870)\n* [`std_instead_of_core`]: Now respects the `msrv` configuration\n  [#13168](https://github.com/rust-lang/rust-clippy/pull/13168)\n\n### ICE Fixes\n\n* [`suboptimal_flops`]: No longer crashes on custom `.log()` functions\n  [#12884](https://github.com/rust-lang/rust-clippy/pull/12884)\n\n## Rust 1.80\n\nCurrent stable, released 2024-07-25\n\n[View all 68 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2024-04-18T22%3A50%3A22Z..2024-05-30T08%3A26%3A18Z+base%3Amaster)\n\n### New Lints\n\n* Added [`while_float`] to `nursery`\n  [#12765](https://github.com/rust-lang/rust-clippy/pull/12765)\n* Added [`macro_metavars_in_unsafe`] to `suspicious`\n  [#12107](https://github.com/rust-lang/rust-clippy/pull/12107)\n* Added [`renamed_function_params`] to `restriction`\n  [#11540](https://github.com/rust-lang/rust-clippy/pull/11540)\n* Added [`doc_lazy_continuation`] to `style`\n  [#12770](https://github.com/rust-lang/rust-clippy/pull/12770)\n\n### Moves and Deprecations\n\n* Moved [`assigning_clones`] to `pedantic` (From `perf` now allow-by-default)\n  [#12779](https://github.com/rust-lang/rust-clippy/pull/12779)\n* Moved [`single_char_pattern`] to `pedantic` (From `perf` now allow-by-default)\n  [#11852](https://github.com/rust-lang/rust-clippy/pull/11852)\n\n### Enhancements\n\n* [`panic`]: Added [`allow-panic-in-tests`] configuration to allow the lint in tests\n  [#12803](https://github.com/rust-lang/rust-clippy/pull/12803)\n* [`missing_const_for_fn`]: Now respects the [`msrv`] configuration\n  [#12713](https://github.com/rust-lang/rust-clippy/pull/12713)\n* [`missing_panics_doc`]: No longer lints on compile-time panics\n  [#12790](https://github.com/rust-lang/rust-clippy/pull/12790)\n* [`collapsible_match`]: Now considers the [`msrv`] configuration for the suggestion\n  [#12745](https://github.com/rust-lang/rust-clippy/pull/12745)\n* [`useless_vec`]: Added [`allow-useless-vec-in-tests`] configuration to allow the lint in tests\n  [#12725](https://github.com/rust-lang/rust-clippy/pull/12725)\n\n### Suggestion Fixes/Improvements\n\n* [`single_match`], [`single_match_else`]: Suggestions are now machine-applicable\n  [#12726](https://github.com/rust-lang/rust-clippy/pull/12726)\n\n## Rust 1.79\n\nReleased 2024-06-13\n\n[View all 102 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2024-03-08T11%3A13%3A58Z..2024-04-18T15%3A50%3A50Z+base%3Amaster)\n\n### New Lints\n\n* Added [`legacy_numeric_constants`] to `style`\n  [#12312](https://github.com/rust-lang/rust-clippy/pull/12312)\n* Added [`missing_transmute_annotations`] to `suspicious`\n  [#12239](https://github.com/rust-lang/rust-clippy/pull/12239)\n* Added [`integer_division_remainder_used`] to `restriction`\n  [#12451](https://github.com/rust-lang/rust-clippy/pull/12451)\n* Added [`duplicated_attributes`] to `suspicious`\n  [#12378](https://github.com/rust-lang/rust-clippy/pull/12378)\n* Added [`manual_unwrap_or_default`] to `suspicious`\n  [#12440](https://github.com/rust-lang/rust-clippy/pull/12440)\n* Added [`zero_repeat_side_effects`] to `suspicious`\n  [#12449](https://github.com/rust-lang/rust-clippy/pull/12449)\n* Added [`const_is_empty`] to `suspicious`\n  [#12310](https://github.com/rust-lang/rust-clippy/pull/12310)\n\n### Moves and Deprecations\n\n* Moved [`box_default`] to `style` (From `perf`)\n  [#12601](https://github.com/rust-lang/rust-clippy/pull/12601)\n* Moved [`manual_clamp`] to `complexity` (From `nursery` now warn-by-default)\n  [#12543](https://github.com/rust-lang/rust-clippy/pull/12543)\n* Moved [`readonly_write_lock`] to `perf` (From `nursery` now warn-by-default)\n  [#12479](https://github.com/rust-lang/rust-clippy/pull/12479)\n\n### Enhancements\n\n* [`module_name_repetitions`]: Added the [`allowed-prefixes`] configuration to allow common prefixes.\n  [#12573](https://github.com/rust-lang/rust-clippy/pull/12573)\n* [`cast_sign_loss`], [`cast_possible_truncation`], [`cast_lossless`]: Are now allowed in macros\n  [#12631](https://github.com/rust-lang/rust-clippy/pull/12631)\n* [`manual_clamp`]: Now only lints on constant min and max values\n  [#12543](https://github.com/rust-lang/rust-clippy/pull/12543)\n* [`assigning_clones`]: Now considers the [`msrv`] configuration\n  [#12511](https://github.com/rust-lang/rust-clippy/pull/12511)\n* [`needless_return`], [`useless_let_if_seq`], [`mut_mut`], [`read_zero_byte_vec`], [`unused_io_amount`],\n  [`unused_peekable`]: Now respects `#[allow]` attributes on the affected statement instead\n  [#12446](https://github.com/rust-lang/rust-clippy/pull/12446)\n\n### False Positive Fixes\n\n* [`cast_lossless`]: No longer lints when casting to `u128`\n  [#12496](https://github.com/rust-lang/rust-clippy/pull/12496)\n* [`std_instead_of_core`] No longer lints on modules that are only in `std`\n  [#12447](https://github.com/rust-lang/rust-clippy/pull/12447)\n\n### ICE Fixes\n\n* [`needless_return`]: No longer crashes on non-ascii characters\n  [#12493](https://github.com/rust-lang/rust-clippy/pull/12493)\n\n## Rust 1.78\n\nReleased 2024-05-02\n\n[View all 112 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2024-01-26T05%3A46%3A23Z..2024-03-07T16%3A25%3A52Z+base%3Amaster)\n\n### New Lints\n\n* [`assigning_clones`]\n  [#12077](https://github.com/rust-lang/rust-clippy/pull/12077)\n* [`mixed_attributes_style`]\n  [#12354](https://github.com/rust-lang/rust-clippy/pull/12354)\n* [`empty_docs`]\n  [#12342](https://github.com/rust-lang/rust-clippy/pull/12342)\n* [`unnecessary_get_then_check`]\n  [#12339](https://github.com/rust-lang/rust-clippy/pull/12339)\n* [`multiple_bound_locations`]\n  [#12259](https://github.com/rust-lang/rust-clippy/pull/12259)\n* [`unnecessary_clippy_cfg`]\n  [#12303](https://github.com/rust-lang/rust-clippy/pull/12303)\n* [`deprecated_clippy_cfg_attr`]\n  [#12292](https://github.com/rust-lang/rust-clippy/pull/12292)\n* [`manual_c_str_literals`]\n  [#11919](https://github.com/rust-lang/rust-clippy/pull/11919)\n* [`ref_as_ptr`]\n  [#12087](https://github.com/rust-lang/rust-clippy/pull/12087)\n* [`lint_groups_priority`]\n  [#11832](https://github.com/rust-lang/rust-clippy/pull/11832)\n* [`unnecessary_result_map_or_else`]\n  [#12169](https://github.com/rust-lang/rust-clippy/pull/12169)\n* [`to_string_trait_impl`]\n  [#12122](https://github.com/rust-lang/rust-clippy/pull/12122)\n* [`incompatible_msrv`]\n  [#12160](https://github.com/rust-lang/rust-clippy/pull/12160)\n\n### Enhancements\n\n* [`thread_local_initializer_can_be_made_const`]: Now checks the [`msrv`] configuration\n  [#12405](https://github.com/rust-lang/rust-clippy/pull/12405)\n* [`disallowed_macros`]: Code generated by derive macros can no longer allow this lint\n  [#12267](https://github.com/rust-lang/rust-clippy/pull/12267)\n* [`wildcard_imports`]: Add configuration [`allowed-wildcard-imports`] to allow preconfigured wildcards\n  [#11979](https://github.com/rust-lang/rust-clippy/pull/11979)\n\n### ICE Fixes\n\n* [`ptr_as_ptr`]: No longer ICEs when the cast source is a function call to a local variable\n  [#12617](https://github.com/rust-lang/rust-clippy/pull/12617)\n* [`cast_sign_loss`]: Avoids an infinite loop when casting two chained `.unwrap()` calls\n  [#12508](https://github.com/rust-lang/rust-clippy/pull/12508)\n\n## Rust 1.77\n\nReleased 2024-03-18\n\n[View all 93 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-12-16T18%3A20%3A00Z..2024-01-25T18%3A15%3A56Z+base%3Amaster)\n\n### New Lints\n\n* [`suspicious_open_options`]\n  [#11608](https://github.com/rust-lang/rust-clippy/pull/11608)\n* [`option_as_ref_cloned`]\n  [#12051](https://github.com/rust-lang/rust-clippy/pull/12051)\n* [`thread_local_initializer_can_be_made_const`]\n  [#12026](https://github.com/rust-lang/rust-clippy/pull/12026)\n* [`str_split_at_newline`]\n  [#11987](https://github.com/rust-lang/rust-clippy/pull/11987)\n* [`empty_enum_variants_with_brackets`]\n  [#12047](https://github.com/rust-lang/rust-clippy/pull/12047)\n* [`manual_is_variant_and`]\n  [#11865](https://github.com/rust-lang/rust-clippy/pull/11865)\n* [`pub_underscore_fields`]\n  [#10283](https://github.com/rust-lang/rust-clippy/pull/10283)\n* [`eager_transmute`]\n  [#11981](https://github.com/rust-lang/rust-clippy/pull/11981)\n* [`iter_filter_is_some`]\n  [#12004](https://github.com/rust-lang/rust/pull/12004)\n* [`iter_filter_is_ok`]\n  [#12004](https://github.com/rust-lang/rust/pull/12004)\n* [`result_filter_map`]\n  [#11869](https://github.com/rust-lang/rust-clippy/pull/11869)\n* [`unconditional_recursion`]\n  [#11938](https://github.com/rust-lang/rust-clippy/pull/11938)\n\n### Enhancements\n\n* [`multiple_crate_versions`]: Added the [`allowed-duplicate-crates`] configuration to allow specific crates\n  [#12179](https://github.com/rust-lang/rust-clippy/pull/12179)\n* [`single_call_fn`]: No longer ignores `#[allow]` attributes\n  [#12183](https://github.com/rust-lang/rust-clippy/pull/12183)\n* [`read_zero_byte_vec`]: Updated the heuristics used for linting\n  [#11766](https://github.com/rust-lang/rust-clippy/pull/11766)\n\n### ICE Fixes\n\n* [`unit_arg`]: No longer crashes when checking for const in nested bodies\n  [#11977](https://github.com/rust-lang/rust-clippy/pull/11977)\n* [`indexing_slicing`]: No longer crashes when the array index exceeds `usize`\n  [#12266](https://github.com/rust-lang/rust-clippy/pull/12266)\n\n### Others\n\n* Warnings about invalid fields inside `clippy.toml` files now include suggestions for existing fields\n  [#12180](https://github.com/rust-lang/rust-clippy/pull/12180)\n\n## Rust 1.76\n\nReleased 2024-02-08\n\n[View all 85 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-11-02T20%3A23%3A40Z..2023-12-16T13%3A11%3A08Z+base%3Amaster)\n\n### New Lints\n\n- [`infinite_loop`]\n  [#11829](https://github.com/rust-lang/rust-clippy/pull/11829)\n- [`ineffective_open_options`]\n  [#11902](https://github.com/rust-lang/rust-clippy/pull/11902)\n- [`uninhabited_references`]\n  [#11878](https://github.com/rust-lang/rust-clippy/pull/11878)\n- [`repeat_vec_with_capacity`]\n  [#11597](https://github.com/rust-lang/rust-clippy/pull/11597)\n- [`test_attr_in_doctest`]\n  [#11872](https://github.com/rust-lang/rust-clippy/pull/11872)\n- [`option_map_or_err_ok`]\n  [#11864](https://github.com/rust-lang/rust-clippy/pull/11864)\n- [`join_absolute_paths`]\n  [#11453](https://github.com/rust-lang/rust-clippy/pull/11453)\n- [`impl_hash_borrow_with_str_and_bytes`]\n  [#11781](https://github.com/rust-lang/rust-clippy/pull/11781)\n- [`iter_over_hash_type`]\n  [#11791](https://github.com/rust-lang/rust-clippy/pull/11791)\n\n### Moves and Deprecations\n\n- Renamed `blocks_in_if_conditions` to [`blocks_in_conditions`]\n  [#11853](https://github.com/rust-lang/rust-clippy/pull/11853)\n- Moved [`implied_bounds_in_impls`] to `complexity` (Now warn-by-default)\n  [#11867](https://github.com/rust-lang/rust-clippy/pull/11867)\n- Moved [`if_same_then_else`] to `style` (Now warn-by-default)\n  [#11809](https://github.com/rust-lang/rust-clippy/pull/11809)\n\n### Enhancements\n\n- [`missing_safety_doc`], [`unnecessary_safety_doc`], [`missing_panics_doc`], [`missing_errors_doc`]:\n  Added the [`check-private-items`] configuration to enable lints on private items\n  [#11842](https://github.com/rust-lang/rust-clippy/pull/11842)\n\n### ICE Fixes\n\n- [`impl_trait_in_params`]: No longer crashes when a function has generics but no function parameters\n  [#11804](https://github.com/rust-lang/rust-clippy/pull/11804)\n- [`unused_enumerate_index`]: No longer crashes on empty tuples\n  [#11756](https://github.com/rust-lang/rust-clippy/pull/11756)\n\n### Others\n\n- Clippy now respects the `CARGO` environment value\n  [#11944](https://github.com/rust-lang/rust-clippy/pull/11944)\n\n## Rust 1.75\n\nReleased 2023-12-28\n\n[View all 69 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-09-25T11%3A47%3A47Z..2023-11-02T16%3A41%3A59Z+base%3Amaster)\n\n### New Lints\n\n* [`unused_enumerate_index`]\n  [#10404](https://github.com/rust-lang/rust-clippy/pull/10404)\n* [`unnecessary_fallible_conversions`]\n  [#11669](https://github.com/rust-lang/rust-clippy/pull/11669)\n* [`waker_clone_wake`]\n  [#11698](https://github.com/rust-lang/rust-clippy/pull/11698)\n* [`struct_field_names`]\n  [#11496](https://github.com/rust-lang/rust-clippy/pull/11496)\n* [`into_iter_without_iter`]\n  [#11587](https://github.com/rust-lang/rust-clippy/pull/11587)\n* [`iter_without_into_iter`]\n  [#11527](https://github.com/rust-lang/rust-clippy/pull/11527)\n* [`manual_hash_one`]\n  [#11556](https://github.com/rust-lang/rust-clippy/pull/11556)\n\n\n### Moves and Deprecations\n\n* Moved [`read_zero_byte_vec`] to `nursery` (Now allow-by-default)\n  [#11727](https://github.com/rust-lang/rust-clippy/pull/11727)\n* Moved [`missing_enforced_import_renames`] to `style` (Now warn-by-default)\n  [#11539](https://github.com/rust-lang/rust-clippy/pull/11539)\n* Moved [`needless_raw_string_hashes`] to `pedantic` (Now allow-by-default)\n  [#11415](https://github.com/rust-lang/rust-clippy/pull/11415)\n* Moved [`needless_pass_by_ref_mut`] to `nursery` (Now allow-by-default)\n  [#11596](https://github.com/rust-lang/rust-clippy/pull/11596)\n\n### Enhancements\n\n* [`declare_interior_mutable_const`] and [`borrow_interior_mutable_const`]: Now check the\n  [`ignore-interior-mutability`] config value\n  [#11678](https://github.com/rust-lang/rust-clippy/pull/11678)\n\n### Suggestion Fixes/Improvements\n\n* [`items_after_test_module`]: The suggestion is now machine-applicable\n  [#11611](https://github.com/rust-lang/rust-clippy/pull/11611)\n\n### ICE Fixes\n\n* [`redundant_locals`]: No longer crashes if variables are rebound above macros\n  [#11623](https://github.com/rust-lang/rust-clippy/pull/11623)\n* [`implicit_hasher`]: No longer lints inside macros, which could cause ICEs\n  [#11593](https://github.com/rust-lang/rust-clippy/pull/11593)\n\n### Documentation Improvements\n\n* `cargo clippy --help` now uses colors for readability :tada:\n\n## Rust 1.74\n\nReleased 2023-11-16\n\n[View all 94 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-08-11T15%3A29%3A18Z..2023-09-25T08%3A48%3A22Z+base%3Amaster)\n\n### New Lints\n\n* [`redundant_as_str`]\n  [#11526](https://github.com/rust-lang/rust-clippy/pull/11526)\n* [`needless_borrows_for_generic_args`]\n  [#11511](https://github.com/rust-lang/rust-clippy/pull/11511)\n* [`path_ends_with_ext`]\n  [#11483](https://github.com/rust-lang/rust-clippy/pull/11483)\n* [`unnecessary_map_on_constructor`]\n  [#11413](https://github.com/rust-lang/rust-clippy/pull/11413)\n* [`missing_asserts_for_indexing`]\n  [#10692](https://github.com/rust-lang/rust-clippy/pull/10692)\n* [`iter_out_of_bounds`]\n  [#11396](https://github.com/rust-lang/rust-clippy/pull/11396)\n* [`implied_bounds_in_impls`]\n  [#11362](https://github.com/rust-lang/rust-clippy/pull/11362)\n* [`reserve_after_initialization`]\n  [#11373](https://github.com/rust-lang/rust-clippy/pull/11373)\n* [`should_panic_without_expect`]\n  [#11204](https://github.com/rust-lang/rust-clippy/pull/11204)\n\n### Moves and Deprecations\n\n* Renamed `incorrect_clone_impl_on_copy_type` to [`non_canonical_clone_impl`]\n  [#11358](https://github.com/rust-lang/rust-clippy/pull/11358)\n* Renamed `incorrect_partial_ord_impl_on_ord_type` to [`non_canonical_partial_ord_impl`]\n  [#11358](https://github.com/rust-lang/rust-clippy/pull/11358)\n* Moved [`non_canonical_clone_impl`] to `suspicious` (Now warn-by-default)\n  [#11358](https://github.com/rust-lang/rust-clippy/pull/11358)\n* Moved [`non_canonical_partial_ord_impl`] to `suspicious` (Now warn-by-default)\n  [#11358](https://github.com/rust-lang/rust-clippy/pull/11358)\n* Moved [`needless_pass_by_ref_mut`] to `nursery` (Now allow-by-default)\n  [#11596](https://github.com/rust-lang/rust-clippy/pull/11596)\n\n### Enhancements\n\n* [`undocumented_unsafe_blocks`]: The config values [`accept-comment-above-statement`] and \n  [`accept-comment-above-attributes`] are now `true` by default\n  [#11170](https://github.com/rust-lang/rust-clippy/pull/11170)\n* [`explicit_iter_loop`]: Added [`enforce-iter-loop-reborrow`] to disable reborrow linting by default\n  [#11418](https://github.com/rust-lang/rust-clippy/pull/11418)\n\n### ICE Fixes\n\n* [`enum_variant_names`]: No longer crashes if the threshold is 0 and the enum has no variants\n  [#11552](https://github.com/rust-lang/rust-clippy/pull/11552)\n* [`cast_possible_truncation`]: No longer crashes on values larger than `u64::MAX`\n  [#11517](https://github.com/rust-lang/rust-clippy/pull/11517)\n* [`tuple_array_conversions`]: No longer crashes if the array length is not usize\n  [#11379](https://github.com/rust-lang/rust-clippy/pull/11379)\n* [`useless_conversion`]: No longer crashes, when the receiver is a non-fn item\n  [#11070](https://github.com/rust-lang/rust-clippy/pull/11070)\n\n## Rust 1.73\n\nReleased 2023-10-05\n\n[View all 103 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-07-02T12%3A24%3A40Z..2023-08-11T11%3A09%3A56Z+base%3Amaster)\n\n### New Lints\n\n* [`impossible_comparisons`]\n  [#10843](https://github.com/rust-lang/rust-clippy/pull/10843)\n* [`redundant_comparisons`]\n  [#10843](https://github.com/rust-lang/rust-clippy/pull/10843)\n* [`ignored_unit_patterns`]\n  [#11242](https://github.com/rust-lang/rust-clippy/pull/11242)\n* [`readonly_write_lock`]\n  [#11210](https://github.com/rust-lang/rust-clippy/pull/11210)\n* [`filter_map_bool_then`]\n  [#11115](https://github.com/rust-lang/rust-clippy/pull/11115)\n* [`needless_return_with_question_mark`]\n  [#11031](https://github.com/rust-lang/rust-clippy/pull/11031)\n* [`redundant_guards`]\n  [#10955](https://github.com/rust-lang/rust-clippy/pull/10955)\n* [`redundant_locals`]\n  [#10885](https://github.com/rust-lang/rust-clippy/pull/10885)\n* [`absolute_paths`]\n  [#11003](https://github.com/rust-lang/rust-clippy/pull/11003)\n* [`error_impl_error`]\n  [#11107](https://github.com/rust-lang/rust-clippy/pull/11107)\n* [`iter_skip_zero`]\n  [#11046](https://github.com/rust-lang/rust-clippy/pull/11046)\n* [`string_lit_chars_any`]\n  [#11052](https://github.com/rust-lang/rust-clippy/pull/11052)\n* [`four_forward_slashes`]\n  [#11140](https://github.com/rust-lang/rust-clippy/pull/11140)\n* [`format_collect`]\n  [#11116](https://github.com/rust-lang/rust-clippy/pull/11116)\n* [`needless_pass_by_ref_mut`]\n  [#10900](https://github.com/rust-lang/rust-clippy/pull/10900)\n* [`manual_is_infinite`]\n  [#11049](https://github.com/rust-lang/rust-clippy/pull/11049)\n* [`manual_is_finite`]\n  [#11049](https://github.com/rust-lang/rust-clippy/pull/11049)\n* [`incorrect_partial_ord_impl_on_ord_type`]\n  [#10788](https://github.com/rust-lang/rust-clippy/pull/10788)\n* [`read_line_without_trim`]\n  [#10970](https://github.com/rust-lang/rust-clippy/pull/10970)\n* [`type_id_on_box`]\n  [#10987](https://github.com/rust-lang/rust-clippy/pull/10987)\n\n### Moves and Deprecations\n\n* Renamed `unwrap_or_else_default` to [`unwrap_or_default`]\n  [#10120](https://github.com/rust-lang/rust-clippy/pull/10120)\n* Moved [`tuple_array_conversions`] to `pedantic` (Now allow-by-default)\n  [#11146](https://github.com/rust-lang/rust-clippy/pull/11146)\n* Moved [`arc_with_non_send_sync`] to `suspicious` (Now warn-by-default)\n  [#11104](https://github.com/rust-lang/rust-clippy/pull/11104)\n* Moved [`needless_raw_string_hashes`] to `pedantic` (Now allow-by-default)\n  [#11415](https://github.com/rust-lang/rust-clippy/pull/11415)\n\n### Enhancements\n\n* [`unwrap_used`]: No longer lints on the never-type or never-like enums\n  [#11252](https://github.com/rust-lang/rust-clippy/pull/11252)\n* [`expect_used`]: No longer lints on the never-type or never-like enums\n  [#11252](https://github.com/rust-lang/rust-clippy/pull/11252)\n\n### False Positive Fixes\n\n* [`panic_in_result_fn`]: No longer triggers on `todo!`, `unimplemented!`, `unreachable!`\n  [#11123](https://github.com/rust-lang/rust-clippy/pull/11123)\n\n### Suggestion Fixes/Improvements\n\n* [`semicolon_if_nothing_returned`]: The suggestion is now machine-applicable with rustfix\n  [#11083](https://github.com/rust-lang/rust-clippy/pull/11083)\n\n### ICE Fixes\n\n* [`filter_map_bool_then`]: No longer crashes on late-bound regions\n  [#11318](https://github.com/rust-lang/rust-clippy/pull/11318)\n* [`unwrap_or_default`]: No longer crashes on alias types for local items\n  [#11258](https://github.com/rust-lang/rust-clippy/pull/11258)\n* [`unnecessary_literal_unwrap`]: No longer crashes on `None.unwrap_or_default()`\n  [#11106](https://github.com/rust-lang/rust-clippy/pull/11106)\n* Fixed MIR-related ICE\n  [#11130](https://github.com/rust-lang/rust-clippy/pull/11130)\n* [`missing_fields_in_debug`]: No longer crashes on non-ADT self types\n  [#11069](https://github.com/rust-lang/rust-clippy/pull/11069)\n\n## Rust 1.72\n\nReleased 2023-08-24\n\n[View all 131 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-05-22T14%3A53%3A59Z..2023-07-01T22%3A57%3A20Z+base%3Amaster)\n\n### New Lints\n\n* [`manual_try_fold`]\n  [#11012](https://github.com/rust-lang/rust-clippy/pull/11012)\n* [`tuple_array_conversions`]\n  [#11020](https://github.com/rust-lang/rust-clippy/pull/11020)\n* [`redundant_at_rest_pattern`]\n  [#11013](https://github.com/rust-lang/rust-clippy/pull/11013)\n* [`needless_pub_self`]\n  [#10967](https://github.com/rust-lang/rust-clippy/pull/10967)\n* [`pub_with_shorthand`]\n  [#10967](https://github.com/rust-lang/rust-clippy/pull/10967)\n* [`pub_without_shorthand`]\n  [#10967](https://github.com/rust-lang/rust-clippy/pull/10967)\n* [`manual_range_patterns`]\n  [#10968](https://github.com/rust-lang/rust-clippy/pull/10968)\n* [`needless_raw_string_hashes`]\n  [#10884](https://github.com/rust-lang/rust-clippy/pull/10884)\n* [`needless_raw_strings`]\n  [#10884](https://github.com/rust-lang/rust-clippy/pull/10884)\n* [`incorrect_clone_impl_on_copy_type`]\n  [#10925](https://github.com/rust-lang/rust-clippy/pull/10925)\n* [`drain_collect`]\n  [#10835](https://github.com/rust-lang/rust-clippy/pull/10835)\n* [`single_range_in_vec_init`]\n  [#10934](https://github.com/rust-lang/rust-clippy/pull/10934)\n* [`unnecessary_literal_unwrap`]\n  [#10358](https://github.com/rust-lang/rust-clippy/pull/10358)\n* [`large_stack_frames`]\n  [#10827](https://github.com/rust-lang/rust-clippy/pull/10827)\n* [`min_ident_chars`]\n  [#10916](https://github.com/rust-lang/rust-clippy/pull/10916)\n* [`needless_if`]\n  [#10921](https://github.com/rust-lang/rust-clippy/pull/10921)\n* [`excessive_nesting`]\n  [#10672](https://github.com/rust-lang/rust-clippy/pull/10672)\n* [`arc_with_non_send_sync`]\n  [#10898](https://github.com/rust-lang/rust-clippy/pull/10898)\n* [`redundant_type_annotations`]\n  [#10570](https://github.com/rust-lang/rust-clippy/pull/10570)\n* [`host_endian_bytes`]\n  [#10826](https://github.com/rust-lang/rust-clippy/pull/10826)\n* [`little_endian_bytes`]\n  [#10826](https://github.com/rust-lang/rust-clippy/pull/10826)\n* [`big_endian_bytes`]\n  [#10826](https://github.com/rust-lang/rust-clippy/pull/10826)\n* [`ptr_cast_constness`]\n  [#10779](https://github.com/rust-lang/rust-clippy/pull/10779)\n* [`needless_else`]\n  [#10810](https://github.com/rust-lang/rust-clippy/pull/10810)\n\n### Moves and Deprecations\n\n* Moved [`redundant_clone`] to `nursery` (Now allow-by-default)\n  [#10873](https://github.com/rust-lang/rust-clippy/pull/10873)\n\n### Enhancements\n\n* [`undocumented_unsafe_blocks`]: Added [`accept-comment-above-attributes`] configuration\n  [#10986](https://github.com/rust-lang/rust-clippy/pull/10986)\n* [`undocumented_unsafe_blocks`]: Added [`accept-comment-above-statement`] configuration.\n  [#10886](https://github.com/rust-lang/rust-clippy/pull/10886)\n* [`missing_panics_doc`]: No longer lints on `todo!()`\n  [#10976](https://github.com/rust-lang/rust-clippy/pull/10976)\n* [`module_inception`]: Added `allow-private-module-inception` configuration.\n  [#10917](https://github.com/rust-lang/rust-clippy/pull/10917)\n* Errors and warnings generated while parsing `clippy.toml` now point to the location in the TOML\n  file the error/warning occurred in.\n  [#10607](https://github.com/rust-lang/rust-clippy/pull/10607)\n\n### False Positive Fixes\n\n* [`excessive_precision`]: No longer lints overflowing literals\n  [#10952](https://github.com/rust-lang/rust-clippy/pull/10952)\n\n### Suggestion Fixes/Improvements\n\n* [`option_map_unwrap_or`]: The suggestion now considers the set [`msrv`] config value\n  [#11030](https://github.com/rust-lang/rust-clippy/pull/11030)\n\n### Documentation Improvements\n\n* [Clippy's lint list] now stores filter parameters in the URL, to allow easy sharing\n  [#10834](https://github.com/rust-lang/rust-clippy/pull/10834)\n\n## Rust 1.71\n\nReleased 2023-07-13\n\nNote: Clippy will use a shorter changelog format from now on, if you want a detailed list of\nall changes, please check out the list of merged pull requests.\n\n[View all 78 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-04-11T20%3A05%3A26Z..2023-05-20T13%3A48%3A17Z+base%3Amaster)\n\n### New Lints\n\n* [`non_minimal_cfg`]\n  [#10763](https://github.com/rust-lang/rust-clippy/pull/10763)\n* [`manual_next_back`]\n  [#10769](https://github.com/rust-lang/rust-clippy/pull/10769)\n* [`ref_patterns`]\n  [#10736](https://github.com/rust-lang/rust-clippy/pull/10736)\n* [`default_constructed_unit_structs`]\n  [#10716](https://github.com/rust-lang/rust-clippy/pull/10716)\n* [`manual_while_let_some`]\n  [#10647](https://github.com/rust-lang/rust-clippy/pull/10647)\n* [`needless_bool_assign`]\n  [#10432](https://github.com/rust-lang/rust-clippy/pull/10432)\n* [`items_after_test_module`]\n  [#10578](https://github.com/rust-lang/rust-clippy/pull/10578)\n\n### Moves and Deprecations\n\n* Rename `integer_arithmetic` to `arithmetic_side_effects`\n  [#10674](https://github.com/rust-lang/rust-clippy/pull/10674)\n* Moved [`redundant_clone`] to `nursery` (Now allow-by-default)\n  [#10873](https://github.com/rust-lang/rust-clippy/pull/10873)\n\n### Enhancements\n\n* [`invalid_regex`]: Now supports the new syntax introduced after regex v1.8.0\n  [#10682](https://github.com/rust-lang/rust-clippy/pull/10682)\n* [`semicolon_outside_block`]: Added [`semicolon-outside-block-ignore-multiline`] as a new config value.\n  [#10656](https://github.com/rust-lang/rust-clippy/pull/10656)\n* [`semicolon_inside_block`]: Added [`semicolon-inside-block-ignore-singleline`] as a new config value.\n  [#10656](https://github.com/rust-lang/rust-clippy/pull/10656)\n* [`unnecessary_box_returns`]: Added [`unnecessary-box-size`] as a new config value to set the maximum\n  size of `T` in `Box<T>` to be linted.\n  [#10651](https://github.com/rust-lang/rust-clippy/pull/10651)\n\n### Documentation Improvements\n\n* `cargo clippy --explain LINT` now shows possible configuration options for the explained lint\n  [#10751](https://github.com/rust-lang/rust-clippy/pull/10751)\n* New config values mentioned in this changelog will now be linked.\n  [#10889](https://github.com/rust-lang/rust-clippy/pull/10889)\n* Several sections of [Clippy's book] have been reworked\n  [#10652](https://github.com/rust-lang/rust-clippy/pull/10652)\n  [#10622](https://github.com/rust-lang/rust-clippy/pull/10622)\n\n[Clippy's book]: https://doc.rust-lang.org/clippy/\n\n## Rust 1.70\n\nReleased 2023-06-01\n\n[View all 91 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-02-26T01%3A05%3A43Z..2023-04-11T13%3A27%3A30Z+base%3Amaster)\n\n### New Lints\n\n* [`large_futures`]\n  [#10414](https://github.com/rust-lang/rust-clippy/pull/10414)\n* [`missing_assert_message`]\n  [#10362](https://github.com/rust-lang/rust-clippy/pull/10362)\n* [`clear_with_drain`]\n  [#10528](https://github.com/rust-lang/rust-clippy/pull/10528)\n* [`redundant_async_block`]\n  [#10448](https://github.com/rust-lang/rust-clippy/pull/10448)\n* [`collection_is_never_read`]\n  [#10415](https://github.com/rust-lang/rust-clippy/pull/10415)\n* [`let_with_type_underscore`]\n  [#10467](https://github.com/rust-lang/rust-clippy/pull/10467)\n* [`tests_outside_test_module`]\n  [#10543](https://github.com/rust-lang/rust-clippy/pull/10543)\n* [`allow_attributes`]\n  [#10481](https://github.com/rust-lang/rust-clippy/pull/10481)\n* [`suspicious_doc_comments`]\n  [#10497](https://github.com/rust-lang/rust-clippy/pull/10497)\n* [`unnecessary_box_returns`]\n  [#9102](https://github.com/rust-lang/rust-clippy/pull/9102)\n* [`manual_main_separator_str`]\n  [#10483](https://github.com/rust-lang/rust-clippy/pull/10483)\n* [`unnecessary_struct_initialization`]\n  [#10489](https://github.com/rust-lang/rust-clippy/pull/10489)\n* [`manual_slice_size_calculation`]\n  [#10601](https://github.com/rust-lang/rust-clippy/pull/10601)\n* [`lines_filter_map_ok`]\n  [#10534](https://github.com/rust-lang/rust-clippy/pull/10534)\n\n### Moves and Deprecations\n\n* Moved [`let_underscore_untyped`] to `restriction`\n  [#10442](https://github.com/rust-lang/rust-clippy/pull/10442)\n\n### Enhancements\n\n* [`extra_unused_type_parameters`]: No longer lints on public items if `avoid-breaking-exported-api` is set\n  [#10536](https://github.com/rust-lang/rust-clippy/pull/10536)\n* [`len_without_is_empty`]: Now also detects `async` functions\n  [#10359](https://github.com/rust-lang/rust-clippy/pull/10359)\n* [`arithmetic_side_effects`]: Now correctly handles divisions and modulo expressions if the right-hand-side\n  is unknown\n  [#10585](https://github.com/rust-lang/rust-clippy/pull/10585)\n* [`nonminimal_bool`]: No longer ignores `#[allow]` attributes\n  [#10588](https://github.com/rust-lang/rust-clippy/pull/10588)\n* [`uninit_vec`], [`uninit_assumed_init`]: Now uses a better heuristic\n  [#10520](https://github.com/rust-lang/rust-clippy/pull/10520)\n* [`ifs_same_cond`]: Now also detects immutable method calls.\n  [#10350](https://github.com/rust-lang/rust-clippy/pull/10350)\n* [`arithmetic_side_effects`]: No longer lints on right or left shifts with constant integers, as the\n  compiler warns about them\n  [#10309](https://github.com/rust-lang/rust-clippy/pull/10309)\n* [`items_after_statements`]: `#[allow(items_after_statements)]` now works on items\n  [#10542](https://github.com/rust-lang/rust-clippy/pull/10542)\n* [`significant_drop_tightening`]: Was optimized\n  [#10533](https://github.com/rust-lang/rust-clippy/pull/10533)\n\n### False Positive Fixes\n\n* [`single_component_path_imports`]: No longer lints if the import is used relative to `self`\n  [#10566](https://github.com/rust-lang/rust-clippy/pull/10566)\n* [`derivable_impls`]: No longer suggests deriving `Default` on generics with implicit arguments\n  [#10399](https://github.com/rust-lang/rust-clippy/pull/10399)\n* [`let_unit_value`]: No longer lints if the expression contains an `await`\n  [#10439](https://github.com/rust-lang/rust-clippy/pull/10439)\n* [`double_must_use`]: Now ignores `async` functions\n  [#10589](https://github.com/rust-lang/rust-clippy/pull/10589)\n* [`manual_clamp`]: No longer lints in constant context\n  [#10479](https://github.com/rust-lang/rust-clippy/pull/10479)\n* [`almost_swapped`]: Now ignores external macros\n  [#10502](https://github.com/rust-lang/rust-clippy/pull/10502)\n* [`nonminimal_bool`]: Now ignores macros\n  [#10527](https://github.com/rust-lang/rust-clippy/pull/10527)\n* [`needless_return`]: No longer lints match statements with incompatible branches\n  [#10593](https://github.com/rust-lang/rust-clippy/pull/10593)\n* [`use_self`]: Do not suggest using `Self` in const generic parameters\n  [#10375](https://github.com/rust-lang/rust-clippy/pull/10375)\n* [`mem_replace_option_with_none`]: No longer lints on field expressions\n  [#10594](https://github.com/rust-lang/rust-clippy/pull/10594)\n* [`items_after_statements`]: No longer lints on items from macros\n  [#10542](https://github.com/rust-lang/rust-clippy/pull/10542)\n* [`print_literal`], [`write_literal`]: No longer lint strings coming from the `file!()` macro\n  [#10573](https://github.com/rust-lang/rust-clippy/pull/10573)\n* [`uninit_vec`], [`uninit_assumed_init`]: Now check the types inside arrays and tuples\n  [#10553](https://github.com/rust-lang/rust-clippy/pull/10553)\n* [`almost_swapped`]: No longer lints if a variable is assigned to itself\n  [#10499](https://github.com/rust-lang/rust-clippy/pull/10499)\n* [`missing_docs_in_private_items`]: No longer lints on public items\n  [#10324](https://github.com/rust-lang/rust-clippy/pull/10324)\n\n### Suggestion Fixes/Improvements\n\n* [`extra_unused_type_parameters`]: The suggestion is now machine applicable\n  [#10536](https://github.com/rust-lang/rust-clippy/pull/10536)\n* [`match_single_binding`]: Now adds a semicolon after the suggestion\n  [#10470](https://github.com/rust-lang/rust-clippy/pull/10470)\n* [`missing_const_for_fn`]: Now includes a note if the change could break compatibility\n  [#10618](https://github.com/rust-lang/rust-clippy/pull/10618)\n* [`cast_possible_truncation`]: Corrected suggestion for float and wildcard casts\n  [#10496](https://github.com/rust-lang/rust-clippy/pull/10496)\n* [`transmutes_expressible_as_ptr_casts`]: The suggestion now includes parentheses when they are required\n  [#10454](https://github.com/rust-lang/rust-clippy/pull/10454)\n\n### ICE Fixes\n\n* [`needless_borrow`]: No longer panics on ambiguous projections\n  [#10403](https://github.com/rust-lang/rust-clippy/pull/10403)\n* [`multiple_unsafe_ops_per_block`]: Fix ICE when calling a function-like object in an unsafe block\n  [#10405](https://github.com/rust-lang/rust-clippy/pull/10405)\n\n### Others\n\n* `clippy-driver` now searches parent directories for `clippy.toml` files\n  [#10592](https://github.com/rust-lang/rust-clippy/pull/10592)\n* Fixed a deserialization error for the `array-size-threshold` config value\n  [#10423](https://github.com/rust-lang/rust-clippy/pull/10423)\n\n## Rust 1.69\n\nReleased 2023-04-20\n\n[View all 72 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2023-01-13T06%3A12%3A46Z..2023-02-25T23%3A48%3A10Z+base%3Amaster)\n\n### New Lints\n\n* [`no_mangle_with_rust_abi`]\n  [#10369](https://github.com/rust-lang/rust-clippy/pull/10369)\n* [`significant_drop_tightening`]\n  [#10163](https://github.com/rust-lang/rust-clippy/pull/10163)\n* [`suspicious_command_arg_space`]\n  [#10317](https://github.com/rust-lang/rust-clippy/pull/10317)\n* [`let_underscore_untyped`]\n  [#10356](https://github.com/rust-lang/rust-clippy/pull/10356)\n* [`question_mark_used`]\n  [#10342](https://github.com/rust-lang/rust-clippy/pull/10342)\n* [`extra_unused_type_parameters`]\n  [#10028](https://github.com/rust-lang/rust-clippy/pull/10028)\n* [`impl_trait_in_params`]\n  [10197](https://github.com/rust-lang/rust-clippy/pull/10197)\n* [`transmute_int_to_non_zero`]\n  [#10360](https://github.com/rust-lang/rust-clippy/pull/10360)\n* [`multiple_unsafe_ops_per_block`]\n  [#10206](https://github.com/rust-lang/rust-clippy/pull/10206)\n\n### Moves and Deprecations\n\n* Moved [`uninlined_format_args`] to `pedantic` (Now allow-by-default)\n  [#10265](https://github.com/rust-lang/rust-clippy/pull/10265)\n* Moved [`unchecked_duration_subtraction`] to `pedantic` (Now allow-by-default)\n  [#10194](https://github.com/rust-lang/rust-clippy/pull/10194)\n\n### Enhancements\n\n* [`arithmetic_side_effects`]: No longer lints if safe constant values are used.\n  [#10310](https://github.com/rust-lang/rust-clippy/pull/10310)\n* [`needless_lifetimes`]: Now works in local macros\n  [#10257](https://github.com/rust-lang/rust-clippy/pull/10257)\n* [`unused_io_amount`]: Now detects usages of `is_ok` and `is_err`\n  [#10225](https://github.com/rust-lang/rust-clippy/pull/10225)\n* [`missing_docs_in_private_items`]: Added new configuration `missing-docs-in-crate-items` to lint\n  on items visible within the current crate. For example, `pub(crate)` items.\n  [#10303](https://github.com/rust-lang/rust-clippy/pull/10303)\n* [`almost_swapped`]: Now detects almost swaps using `let` statements\n  [#10177](https://github.com/rust-lang/rust-clippy/pull/10177)\n* [`wildcard_enum_match_arm`]: Now lints missing private variants, for local enums\n  [#10250](https://github.com/rust-lang/rust-clippy/pull/10250)\n\n### False Positive Fixes\n\n* [`explicit_auto_deref`]: Now considers projections when determining if auto deref is applicable\n  [#10386](https://github.com/rust-lang/rust-clippy/pull/10386)\n* [`manual_let_else`]: Now considers side effects of branches before linting\n  [#10336](https://github.com/rust-lang/rust-clippy/pull/10336)\n* [`uninlined_format_args`]: No longer lints for arguments with generic parameters\n  [#10343](https://github.com/rust-lang/rust-clippy/pull/10343)\n* [`needless_lifetimes`]: No longer lints signatures in macros if the lifetime is a metavariable\n  [#10380](https://github.com/rust-lang/rust-clippy/pull/10380)\n* [`len_without_is_empty`]: No longer lints if `len` as a non-default signature\n  [#10255](https://github.com/rust-lang/rust-clippy/pull/10255)\n* [`unusual_byte_groupings`]: Relaxed the required restrictions for specific sizes to reduce false\n  positives\n  [#10353](https://github.com/rust-lang/rust-clippy/pull/10353)\n* [`manual_let_else`]: No longer lints `if-else` blocks if they can divergent\n  [#10332](https://github.com/rust-lang/rust-clippy/pull/10332)\n* [`expect_used`], [`unwrap_used`], [`dbg_macro`], [`print_stdout`], [`print_stderr`]: No longer lint\n  in test functions if `allow-expect-in-tests` is set\n  [#10391](https://github.com/rust-lang/rust-clippy/pull/10391)\n* [`unnecessary_safety_comment`]: No longer lints code inside macros\n  [#10106](https://github.com/rust-lang/rust-clippy/pull/10106)\n* [`never_loop`]: No longer lints statements following break statements for outer blocks.\n  [#10311](https://github.com/rust-lang/rust-clippy/pull/10311)\n\n### Suggestion Fixes/Improvements\n\n* [`box_default`]: The suggestion now includes the type for trait objects when needed\n  [#10382](https://github.com/rust-lang/rust-clippy/pull/10382)\n* [`cast_possible_truncation`]: Now suggests using `try_from` or allowing the lint\n  [#10038](https://github.com/rust-lang/rust-clippy/pull/10038)\n* [`invalid_regex`]: Regex errors for non-literals or regular strings containing escape sequences will\n  now show the complete error\n  [#10231](https://github.com/rust-lang/rust-clippy/pull/10231)\n* [`transmutes_expressible_as_ptr_casts`]: The suggestion now works if the base type is borrowed\n  [#10193](https://github.com/rust-lang/rust-clippy/pull/10193)\n* [`needless_return`]: Now removes all semicolons on the same line\n  [#10187](https://github.com/rust-lang/rust-clippy/pull/10187)\n* [`suspicious_to_owned`]: The suggestion now shows all options clearly\n  [#10295](https://github.com/rust-lang/rust-clippy/pull/10295)\n* [`bytes_nth`]: Now suggests the correct replacement based on the context\n  [#10361](https://github.com/rust-lang/rust-clippy/pull/10361)\n* [`bool_assert_comparison`]: The suggestion is now machine applicable\n  [#10218](https://github.com/rust-lang/rust-clippy/pull/10218)\n* [`cast_possible_truncation`]: Corrected the lint name in the help message\n  [#10330](https://github.com/rust-lang/rust-clippy/pull/10330)\n* [`needless_return`]: The suggestion now works on if sequences\n  [#10345](https://github.com/rust-lang/rust-clippy/pull/10345)\n* [`needless_lifetimes`]: The suggestion is now machine applicable\n  [#10222](https://github.com/rust-lang/rust-clippy/pull/10222)\n* [`map_entry`]: The suggestion no longer expands macros\n  [#10346](https://github.com/rust-lang/rust-clippy/pull/10346)\n\n### ICE Fixes\n\n* [`needless_pass_by_value`]: Fixed an ICE caused by how late bounds were handled\n  [#10328](https://github.com/rust-lang/rust-clippy/pull/10328)\n* [`needless_borrow`]: No longer panics on ambiguous projections\n  [#10403](https://github.com/rust-lang/rust-clippy/pull/10403)\n\n### Documentation Improvements\n\n* All configurations are now documented in the Clippy Book\n  [#10199](https://github.com/rust-lang/rust-clippy/pull/10199)\n\n## Rust 1.68\n\nReleased 2023-03-09\n\n[View all 76 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-12-01T20%3A40%3A04Z..2023-01-12T18%3A58%3A59Z+base%3Amaster)\n\n### New Lints\n\n* [`permissions_set_readonly_false`]\n  [#10063](https://github.com/rust-lang/rust-clippy/pull/10063)\n* [`almost_complete_range`]\n  [#10043](https://github.com/rust-lang/rust-clippy/pull/10043)\n* [`size_of_ref`]\n  [#10098](https://github.com/rust-lang/rust-clippy/pull/10098)\n* [`semicolon_outside_block`]\n  [#9826](https://github.com/rust-lang/rust-clippy/pull/9826)\n* [`semicolon_inside_block`]\n  [#9826](https://github.com/rust-lang/rust-clippy/pull/9826)\n* [`transmute_null_to_fn`]\n  [#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n* [`fn_null_check`]\n  [#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n\n### Moves and Deprecations\n\n* Moved [`manual_clamp`] to `nursery` (Now allow-by-default)\n  [#10101](https://github.com/rust-lang/rust-clippy/pull/10101)\n* Moved [`mutex_atomic`] to `restriction`\n  [#10115](https://github.com/rust-lang/rust-clippy/pull/10115)\n* Renamed `derive_hash_xor_eq` to [`derived_hash_with_manual_eq`]\n  [#10184](https://github.com/rust-lang/rust-clippy/pull/10184)\n\n### Enhancements\n\n* [`collapsible_str_replace`]: Now takes MSRV into consideration. The minimal version is 1.58\n  [#10047](https://github.com/rust-lang/rust-clippy/pull/10047)\n* [`unused_self`]: No longer lints, if the method body contains a `todo!()` call\n  [#10166](https://github.com/rust-lang/rust-clippy/pull/10166)\n* [`derivable_impls`]: Now suggests deriving `Default` for enums with default unit variants\n  [#10161](https://github.com/rust-lang/rust-clippy/pull/10161)\n* [`arithmetic_side_effects`]: Added two new config values\n  `arithmetic-side-effects-allowed-binary` and `arithmetic-side-effects-allowed-unary`\n  to allow operation on user types\n  [#9840](https://github.com/rust-lang/rust-clippy/pull/9840)\n* [`large_const_arrays`], [`large_stack_arrays`]: avoid integer overflow when calculating\n  total array size\n  [#10103](https://github.com/rust-lang/rust-clippy/pull/10103)\n* [`indexing_slicing`]: add new config `suppress-restriction-lint-in-const` to enable\n  restriction lints, even if the suggestion might not be applicable\n  [#9920](https://github.com/rust-lang/rust-clippy/pull/9920)\n* [`needless_borrow`], [`redundant_clone`]: Now track references better and detect more cases\n  [#9701](https://github.com/rust-lang/rust-clippy/pull/9701)\n* [`derived_hash_with_manual_eq`]: Now allows `#[derive(PartialEq)]` with custom `Hash`\n  implementations\n  [#10184](https://github.com/rust-lang/rust-clippy/pull/10184)\n* [`manual_is_ascii_check`]: Now detects ranges with `.contains()` calls\n  [#10053](https://github.com/rust-lang/rust-clippy/pull/10053)\n* [`transmuting_null`]: Now detects `const` pointers to all types\n  [#10099](https://github.com/rust-lang/rust-clippy/pull/10099)\n* [`needless_return`]: Now detects more cases for returns of owned values\n  [#10110](https://github.com/rust-lang/rust-clippy/pull/10110)\n\n### False Positive Fixes\n\n* [`field_reassign_with_default`]: No longer lints cases, where values are initializes from\n  closures capturing struct values\n  [#10143](https://github.com/rust-lang/rust-clippy/pull/10143)\n* [`seek_to_start_instead_of_rewind`]: No longer lints, if the return of `seek` is used.\n  [#10096](https://github.com/rust-lang/rust-clippy/pull/10096)\n* [`manual_filter`]: Now ignores if expressions where the else branch has side effects or\n  doesn't return `None`\n  [#10091](https://github.com/rust-lang/rust-clippy/pull/10091)\n* [`implicit_clone`]: No longer lints if the type doesn't implement clone\n  [#10022](https://github.com/rust-lang/rust-clippy/pull/10022)\n* [`match_wildcard_for_single_variants`]: No longer lints on wildcards with a guard\n  [#10056](https://github.com/rust-lang/rust-clippy/pull/10056)\n* [`drop_ref`]: No longer lints idiomatic expression in `match` arms\n  [#10142](https://github.com/rust-lang/rust-clippy/pull/10142)\n* [`arithmetic_side_effects`]: No longer lints on corner cases with negative number literals\n  [#9867](https://github.com/rust-lang/rust-clippy/pull/9867)\n* [`string_lit_as_bytes`]: No longer lints in scrutinies of `match` statements\n  [#10012](https://github.com/rust-lang/rust-clippy/pull/10012)\n* [`manual_assert`]: No longer lints in `else if` statements\n  [#10013](https://github.com/rust-lang/rust-clippy/pull/10013)\n* [`needless_return`]: don't lint when using `do yeet`\n  [#10109](https://github.com/rust-lang/rust-clippy/pull/10109)\n* All lints: No longer lint in enum discriminant values when the suggestion won't work in a\n  const context\n  [#10008](https://github.com/rust-lang/rust-clippy/pull/10008)\n* [`single_element_loop`]: No longer lints, if the loop contains a `break` or `continue`\n  [#10162](https://github.com/rust-lang/rust-clippy/pull/10162)\n* [`uninlined_format_args`]: No longer suggests inlining arguments in `assert!` and\n  `debug_assert!` macros before 2021 edition\n  [#10055](https://github.com/rust-lang/rust-clippy/pull/10055)\n* [`explicit_counter_loop`]: No longer ignores counter changes after `continue` expressions\n  [#10094](https://github.com/rust-lang/rust-clippy/pull/10094)\n* [`from_over_into`]: No longer lints on opaque types\n  [#9982](https://github.com/rust-lang/rust-clippy/pull/9982)\n* [`expl_impl_clone_on_copy`]: No longer lints on `#[repr(packed)]` structs with generic\n  parameters\n  [#10189](https://github.com/rust-lang/rust-clippy/pull/10189)\n\n### Suggestion Fixes/Improvements\n\n* [`zero_ptr`]: Now suggests `core::` paths for `no_std` crates\n  [#10023](https://github.com/rust-lang/rust-clippy/pull/10023)\n* [`useless_conversion`]: Now suggests removing calls to `into_iter()` on an expression\n  implementing `Iterator`\n  [#10020](https://github.com/rust-lang/rust-clippy/pull/10020)\n* [`box_default`]: The suggestion now uses short paths\n  [#10153](https://github.com/rust-lang/rust-clippy/pull/10153)\n* [`default_trait_access`], [`clone_on_copy`]: The suggestion now uses short paths\n  [#10160](https://github.com/rust-lang/rust-clippy/pull/10160)\n* [`comparison_to_empty`]: The suggestion now removes unused deref operations\n  [#9962](https://github.com/rust-lang/rust-clippy/pull/9962)\n* [`manual_let_else`]: Suggestions for or-patterns now include required brackets.\n  [#9966](https://github.com/rust-lang/rust-clippy/pull/9966)\n* [`match_single_binding`]: suggestion no longer introduces unneeded semicolons\n  [#10060](https://github.com/rust-lang/rust-clippy/pull/10060)\n* [`case_sensitive_file_extension_comparisons`]: Now displays a suggestion with `Path`\n  [#10107](https://github.com/rust-lang/rust-clippy/pull/10107)\n* [`empty_structs_with_brackets`]: The suggestion is no longer machine applicable, to avoid\n  errors when accessing struct fields\n  [#10141](https://github.com/rust-lang/rust-clippy/pull/10141)\n* [`identity_op`]: Removes borrows in the suggestion when needed\n  [#10004](https://github.com/rust-lang/rust-clippy/pull/10004)\n* [`suboptimal_flops`]: The suggestion now includes parentheses when required\n  [#10113](https://github.com/rust-lang/rust-clippy/pull/10113)\n* [`iter_kv_map`]: Now handles `mut` and reference annotations in the suggestion\n  [#10159](https://github.com/rust-lang/rust-clippy/pull/10159)\n* [`redundant_static_lifetimes`]: The suggestion no longer removes `mut` from references\n  [#10006](https://github.com/rust-lang/rust-clippy/pull/10006)\n\n### ICE Fixes\n\n* [`new_ret_no_self`]: Now avoids a stack overflow for `impl Trait` types\n  [#10086](https://github.com/rust-lang/rust-clippy/pull/10086)\n* [`unnecessary_to_owned`]: Now handles compiler generated notes better\n  [#10027](https://github.com/rust-lang/rust-clippy/pull/10027)\n\n### Others\n\n* `SYSROOT` and `--sysroot` can now be set at the same time\n  [#10149](https://github.com/rust-lang/rust-clippy/pull/10149)\n* Fix error when providing an `array-size-threshold` in `clippy.toml`\n  [#10423](https://github.com/rust-lang/rust-clippy/pull/10423)\n\n## Rust 1.67\n\nReleased 2023-01-26\n\n[View all 104 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-10-23T13%3A35%3A19Z..2022-12-01T13%3A34%3A39Z+base%3Amaster)\n\n### New Lints\n\n* [`seek_from_current`]\n  [#9681](https://github.com/rust-lang/rust-clippy/pull/9681)\n* [`from_raw_with_void_ptr`]\n  [#9690](https://github.com/rust-lang/rust-clippy/pull/9690)\n* [`misnamed_getters`]\n  [#9770](https://github.com/rust-lang/rust-clippy/pull/9770)\n* [`seek_to_start_instead_of_rewind`]\n  [#9667](https://github.com/rust-lang/rust-clippy/pull/9667)\n* [`suspicious_xor_used_as_pow`]\n  [#9506](https://github.com/rust-lang/rust-clippy/pull/9506)\n* [`unnecessary_safety_doc`]\n  [#9822](https://github.com/rust-lang/rust-clippy/pull/9822)\n* [`unchecked_duration_subtraction`]\n  [#9570](https://github.com/rust-lang/rust-clippy/pull/9570)\n* [`manual_is_ascii_check`]\n  [#9765](https://github.com/rust-lang/rust-clippy/pull/9765)\n* [`unnecessary_safety_comment`]\n  [#9851](https://github.com/rust-lang/rust-clippy/pull/9851)\n* [`let_underscore_future`]\n  [#9760](https://github.com/rust-lang/rust-clippy/pull/9760)\n* [`manual_let_else`]\n  [#8437](https://github.com/rust-lang/rust-clippy/pull/8437)\n\n### Moves and Deprecations\n\n* Moved [`needless_collect`] to `nursery` (Now allow-by-default)\n  [#9705](https://github.com/rust-lang/rust-clippy/pull/9705)\n* Moved [`or_fun_call`] to `nursery` (Now allow-by-default)\n  [#9829](https://github.com/rust-lang/rust-clippy/pull/9829)\n* Uplifted [`let_underscore_lock`] into rustc\n  [#9697](https://github.com/rust-lang/rust-clippy/pull/9697)\n* Uplifted [`let_underscore_drop`] into rustc\n  [#9697](https://github.com/rust-lang/rust-clippy/pull/9697)\n* Moved [`bool_to_int_with_if`] to `pedantic` (Now allow-by-default)\n  [#9830](https://github.com/rust-lang/rust-clippy/pull/9830)\n* Move `index_refutable_slice` to `pedantic` (Now warn-by-default)\n  [#9975](https://github.com/rust-lang/rust-clippy/pull/9975)\n* Moved [`manual_clamp`] to `nursery` (Now allow-by-default)\n  [#10101](https://github.com/rust-lang/rust-clippy/pull/10101)\n\n### Enhancements\n\n* The scope of `#![clippy::msrv]` is now tracked correctly\n  [#9924](https://github.com/rust-lang/rust-clippy/pull/9924)\n* `#[clippy::msrv]` can now be used as an outer attribute\n  [#9860](https://github.com/rust-lang/rust-clippy/pull/9860)\n* Clippy will now avoid Cargo's cache, if `Cargo.toml` or `clippy.toml` have changed\n  [#9707](https://github.com/rust-lang/rust-clippy/pull/9707)\n* [`uninlined_format_args`]: Added a new config `allow-mixed-uninlined-format-args` to allow the\n  lint, if only some arguments can be inlined\n  [#9865](https://github.com/rust-lang/rust-clippy/pull/9865)\n* [`needless_lifetimes`]: Now provides suggests for individual lifetimes\n  [#9743](https://github.com/rust-lang/rust-clippy/pull/9743)\n* [`needless_collect`]: Now detects needless `is_empty` and `contains` calls\n  [#8744](https://github.com/rust-lang/rust-clippy/pull/8744)\n* [`blanket_clippy_restriction_lints`]: Now lints, if `clippy::restriction` is enabled via the\n  command line arguments\n  [#9755](https://github.com/rust-lang/rust-clippy/pull/9755)\n* [`mutable_key_type`]: Now has the `ignore-interior-mutability` configuration, to add types which\n  should be ignored by the lint\n  [#9692](https://github.com/rust-lang/rust-clippy/pull/9692)\n* [`uninlined_format_args`]: Now works for multiline `format!` expressions\n  [#9945](https://github.com/rust-lang/rust-clippy/pull/9945)\n* [`cognitive_complexity`]: Now works for async functions\n  [#9828](https://github.com/rust-lang/rust-clippy/pull/9828)\n  [#9836](https://github.com/rust-lang/rust-clippy/pull/9836)\n* [`vec_box`]: Now avoids an off-by-one error when using the `vec-box-size-threshold` configuration\n  [#9848](https://github.com/rust-lang/rust-clippy/pull/9848)\n* [`never_loop`]: Now correctly handles breaks in nested labeled blocks\n  [#9858](https://github.com/rust-lang/rust-clippy/pull/9858)\n  [#9837](https://github.com/rust-lang/rust-clippy/pull/9837)\n* [`disallowed_methods`], [`disallowed_types`], [`disallowed_macros`]: Now correctly resolve\n  paths, if a crate is used multiple times with different versions\n  [#9800](https://github.com/rust-lang/rust-clippy/pull/9800)\n* [`disallowed_methods`]: Can now be used for local methods\n  [#9800](https://github.com/rust-lang/rust-clippy/pull/9800)\n* [`print_stdout`], [`print_stderr`]: Can now be enabled in test with the `allow-print-in-tests`\n  config value\n  [#9797](https://github.com/rust-lang/rust-clippy/pull/9797)\n* [`from_raw_with_void_ptr`]: Now works for `Rc`, `Arc`, `alloc::rc::Weak` and\n  `alloc::sync::Weak` types.\n  [#9700](https://github.com/rust-lang/rust-clippy/pull/9700)\n* [`needless_borrowed_reference`]: Now works for struct and tuple patterns with wildcards\n  [#9855](https://github.com/rust-lang/rust-clippy/pull/9855)\n* [`or_fun_call`]: Now supports `map_or` methods\n  [#9689](https://github.com/rust-lang/rust-clippy/pull/9689)\n* [`unwrap_used`], [`expect_used`]: No longer lints in test code\n  [#9686](https://github.com/rust-lang/rust-clippy/pull/9686)\n* [`fn_params_excessive_bools`]: Is now emitted with the lint level at the linted function\n  [#9698](https://github.com/rust-lang/rust-clippy/pull/9698)\n\n### False Positive Fixes\n\n* [`new_ret_no_self`]: No longer lints when `impl Trait<Self>` is returned\n  [#9733](https://github.com/rust-lang/rust-clippy/pull/9733)\n* [`unnecessary_lazy_evaluations`]: No longer lints, if the type has a significant drop\n  [#9750](https://github.com/rust-lang/rust-clippy/pull/9750)\n* [`option_if_let_else`]: No longer lints, if any arm has guard\n  [#9747](https://github.com/rust-lang/rust-clippy/pull/9747)\n* [`explicit_auto_deref`]: No longer lints, if the target type is a projection with generic\n  arguments\n  [#9813](https://github.com/rust-lang/rust-clippy/pull/9813)\n* [`unnecessary_to_owned`]: No longer lints, if the suggestion effects types\n  [#9796](https://github.com/rust-lang/rust-clippy/pull/9796)\n* [`needless_borrow`]: No longer lints, if the suggestion is affected by `Deref`\n  [#9674](https://github.com/rust-lang/rust-clippy/pull/9674)\n* [`unused_unit`]: No longer lints, if lifetimes are bound to the return type\n  [#9849](https://github.com/rust-lang/rust-clippy/pull/9849)\n* [`mut_mut`]: No longer lints cases with unsized mutable references\n  [#9835](https://github.com/rust-lang/rust-clippy/pull/9835)\n* [`bool_to_int_with_if`]: No longer lints in const context\n  [#9738](https://github.com/rust-lang/rust-clippy/pull/9738)\n* [`use_self`]: No longer lints in macros\n  [#9704](https://github.com/rust-lang/rust-clippy/pull/9704)\n* [`unnecessary_operation`]: No longer lints, if multiple macros are involved\n  [#9981](https://github.com/rust-lang/rust-clippy/pull/9981)\n* [`allow_attributes_without_reason`]: No longer lints inside external macros\n  [#9630](https://github.com/rust-lang/rust-clippy/pull/9630)\n* [`question_mark`]: No longer lints for `if let Err()` with an `else` branch\n  [#9722](https://github.com/rust-lang/rust-clippy/pull/9722)\n* [`unnecessary_cast`]: No longer lints if the identifier and cast originate from different macros\n  [#9980](https://github.com/rust-lang/rust-clippy/pull/9980)\n* [`arithmetic_side_effects`]: Now detects operations with associated constants\n  [#9592](https://github.com/rust-lang/rust-clippy/pull/9592)\n* [`explicit_auto_deref`]: No longer lints, if the initial value is not a reference or reference\n  receiver\n  [#9997](https://github.com/rust-lang/rust-clippy/pull/9997)\n* [`module_name_repetitions`], [`single_component_path_imports`]: Now handle `#[allow]`\n  attributes correctly\n  [#9879](https://github.com/rust-lang/rust-clippy/pull/9879)\n* [`bool_to_int_with_if`]: No longer lints `if let` statements\n  [#9714](https://github.com/rust-lang/rust-clippy/pull/9714)\n* [`needless_borrow`]: No longer lints, `if`-`else`-statements that require the borrow\n  [#9791](https://github.com/rust-lang/rust-clippy/pull/9791)\n* [`needless_borrow`]: No longer lints borrows, if moves were illegal\n  [#9711](https://github.com/rust-lang/rust-clippy/pull/9711)\n* [`manual_swap`]: No longer lints in const context\n  [#9871](https://github.com/rust-lang/rust-clippy/pull/9871)\n\n### Suggestion Fixes/Improvements\n\n* [`missing_safety_doc`], [`missing_errors_doc`], [`missing_panics_doc`]: No longer show the\n  entire item in the lint emission.\n  [#9772](https://github.com/rust-lang/rust-clippy/pull/9772)\n* [`needless_lifetimes`]: Only suggests `'_` when it's applicable\n  [#9743](https://github.com/rust-lang/rust-clippy/pull/9743)\n* [`use_self`]: Now suggests full paths correctly\n  [#9726](https://github.com/rust-lang/rust-clippy/pull/9726)\n* [`redundant_closure_call`]: Now correctly deals with macros during suggestion creation\n  [#9987](https://github.com/rust-lang/rust-clippy/pull/9987)\n* [`unnecessary_cast`]: Suggestions now correctly deal with references\n  [#9996](https://github.com/rust-lang/rust-clippy/pull/9996)\n* [`unnecessary_join`]: Suggestions now correctly use [turbofish] operators\n  [#9779](https://github.com/rust-lang/rust-clippy/pull/9779)\n* [`equatable_if_let`]: Can now suggest `matches!` replacements\n  [#9368](https://github.com/rust-lang/rust-clippy/pull/9368)\n* [`string_extend_chars`]: Suggestions now correctly work for `str` slices\n  [#9741](https://github.com/rust-lang/rust-clippy/pull/9741)\n* [`redundant_closure_for_method_calls`]: Suggestions now include angle brackets and generic\n  arguments if needed\n  [#9745](https://github.com/rust-lang/rust-clippy/pull/9745)\n* [`manual_let_else`]: Suggestions no longer expand macro calls\n  [#9943](https://github.com/rust-lang/rust-clippy/pull/9943)\n* [`infallible_destructuring_match`]: Suggestions now preserve references\n  [#9850](https://github.com/rust-lang/rust-clippy/pull/9850)\n* [`result_large_err`]: The error now shows the largest enum variant\n  [#9662](https://github.com/rust-lang/rust-clippy/pull/9662)\n* [`needless_return`]: Suggestions are now formatted better\n  [#9967](https://github.com/rust-lang/rust-clippy/pull/9967)\n* [`unused_rounding`]: The suggestion now preserves the original float literal notation\n  [#9870](https://github.com/rust-lang/rust-clippy/pull/9870)\n\n[turbofish]: https://turbo.fish/::%3CClippy%3E\n\n### ICE Fixes\n\n* [`result_large_err`]: Fixed ICE for empty enums\n  [#10007](https://github.com/rust-lang/rust-clippy/pull/10007)\n* [`redundant_allocation`]: Fixed ICE for types with bounded variables\n  [#9773](https://github.com/rust-lang/rust-clippy/pull/9773)\n* [`unused_rounding`]: Fixed ICE, if `_` was used as a separator\n  [#10001](https://github.com/rust-lang/rust-clippy/pull/10001)\n\n## Rust 1.66\n\nReleased 2022-12-15\n\n[View all 116 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-09-09T17%3A32%3A39Z..2022-10-23T11%3A27%3A24Z+base%3Amaster)\n\n### New Lints\n\n* [`manual_clamp`]\n  [#9484](https://github.com/rust-lang/rust-clippy/pull/9484)\n* [`missing_trait_methods`]\n  [#9670](https://github.com/rust-lang/rust-clippy/pull/9670)\n* [`unused_format_specs`]\n  [#9637](https://github.com/rust-lang/rust-clippy/pull/9637)\n* [`iter_kv_map`]\n  [#9409](https://github.com/rust-lang/rust-clippy/pull/9409)\n* [`manual_filter`]\n  [#9451](https://github.com/rust-lang/rust-clippy/pull/9451)\n* [`box_default`]\n  [#9511](https://github.com/rust-lang/rust-clippy/pull/9511)\n* [`implicit_saturating_add`]\n  [#9549](https://github.com/rust-lang/rust-clippy/pull/9549)\n* [`as_ptr_cast_mut`]\n  [#9572](https://github.com/rust-lang/rust-clippy/pull/9572)\n* [`disallowed_macros`]\n  [#9495](https://github.com/rust-lang/rust-clippy/pull/9495)\n* [`partial_pub_fields`]\n  [#9658](https://github.com/rust-lang/rust-clippy/pull/9658)\n* [`uninlined_format_args`]\n  [#9233](https://github.com/rust-lang/rust-clippy/pull/9233)\n* [`cast_nan_to_int`]\n  [#9617](https://github.com/rust-lang/rust-clippy/pull/9617)\n\n### Moves and Deprecations\n\n* `positional_named_format_parameters` was uplifted to rustc under the new name\n  `named_arguments_used_positionally`\n  [#8518](https://github.com/rust-lang/rust-clippy/pull/8518)\n* Moved [`implicit_saturating_sub`] to `style` (Now warn-by-default)\n  [#9584](https://github.com/rust-lang/rust-clippy/pull/9584)\n* Moved `derive_partial_eq_without_eq` to `nursery` (now allow-by-default)\n  [#9536](https://github.com/rust-lang/rust-clippy/pull/9536)\n\n### Enhancements\n\n* [`nonstandard_macro_braces`]: Now includes `matches!()` in the default lint config\n  [#9471](https://github.com/rust-lang/rust-clippy/pull/9471)\n* [`suboptimal_flops`]: Now supports multiplication and subtraction operations\n  [#9581](https://github.com/rust-lang/rust-clippy/pull/9581)\n* [`arithmetic_side_effects`]: Now detects cases with literals behind references\n  [#9587](https://github.com/rust-lang/rust-clippy/pull/9587)\n* [`upper_case_acronyms`]: Now also checks enum names\n  [#9580](https://github.com/rust-lang/rust-clippy/pull/9580)\n* [`needless_borrowed_reference`]: Now lints nested patterns\n  [#9573](https://github.com/rust-lang/rust-clippy/pull/9573)\n* [`unnecessary_cast`]: Now works for non-trivial non-literal expressions\n  [#9576](https://github.com/rust-lang/rust-clippy/pull/9576)\n* [`arithmetic_side_effects`]: Now detects operations with custom types\n  [#9559](https://github.com/rust-lang/rust-clippy/pull/9559)\n* [`disallowed_methods`], [`disallowed_types`]: Not correctly lints types, functions and macros\n  with the same path\n  [#9495](https://github.com/rust-lang/rust-clippy/pull/9495)\n* [`self_named_module_files`], [`mod_module_files`]: Now take remapped path prefixes into account\n  [#9475](https://github.com/rust-lang/rust-clippy/pull/9475)\n* [`bool_to_int_with_if`]: Now detects the inverse if case\n  [#9476](https://github.com/rust-lang/rust-clippy/pull/9476)\n\n### False Positive Fixes\n\n* [`arithmetic_side_effects`]: Now allows operations that can't overflow\n  [#9474](https://github.com/rust-lang/rust-clippy/pull/9474)\n* [`unnecessary_lazy_evaluations`]: No longer lints in external macros\n  [#9486](https://github.com/rust-lang/rust-clippy/pull/9486)\n* [`needless_borrow`], [`explicit_auto_deref`]: No longer lint on unions that require the reference\n  [#9490](https://github.com/rust-lang/rust-clippy/pull/9490)\n* [`almost_complete_letter_range`]: No longer lints in external macros\n  [#9467](https://github.com/rust-lang/rust-clippy/pull/9467)\n* [`drop_copy`]: No longer lints on idiomatic cases in match arms\n  [#9491](https://github.com/rust-lang/rust-clippy/pull/9491)\n* [`question_mark`]: No longer lints in const context\n  [#9487](https://github.com/rust-lang/rust-clippy/pull/9487)\n* [`collapsible_if`]: Suggestion now work in macros\n  [#9410](https://github.com/rust-lang/rust-clippy/pull/9410)\n* [`std_instead_of_core`]: No longer triggers on unstable modules\n  [#9545](https://github.com/rust-lang/rust-clippy/pull/9545)\n* [`unused_peekable`]: No longer lints, if the peak is done in a closure or function\n  [#9465](https://github.com/rust-lang/rust-clippy/pull/9465)\n* [`useless_attribute`]: No longer lints on `#[allow]` attributes for [`unsafe_removed_from_name`]\n  [#9593](https://github.com/rust-lang/rust-clippy/pull/9593)\n* [`unnecessary_lazy_evaluations`]: No longer suggest switching to early evaluation when type has\n  custom `Drop` implementation\n  [#9551](https://github.com/rust-lang/rust-clippy/pull/9551)\n* [`unnecessary_cast`]: No longer lints on negative hexadecimal literals when cast as floats\n  [#9609](https://github.com/rust-lang/rust-clippy/pull/9609)\n* [`use_self`]: No longer lints in proc macros\n  [#9454](https://github.com/rust-lang/rust-clippy/pull/9454)\n* [`never_loop`]: Now takes `let ... else` statements into consideration.\n  [#9496](https://github.com/rust-lang/rust-clippy/pull/9496)\n* [`default_numeric_fallback`]: Now ignores constants\n  [#9636](https://github.com/rust-lang/rust-clippy/pull/9636)\n* [`uninit_vec`]: No longer lints `Vec::set_len(0)`\n  [#9519](https://github.com/rust-lang/rust-clippy/pull/9519)\n* [`arithmetic_side_effects`]: Now ignores references to integer types\n  [#9507](https://github.com/rust-lang/rust-clippy/pull/9507)\n* [`large_stack_arrays`]: No longer lints inside static items\n  [#9466](https://github.com/rust-lang/rust-clippy/pull/9466)\n* [`ref_option_ref`]: No longer lints if the inner reference is mutable\n  [#9684](https://github.com/rust-lang/rust-clippy/pull/9684)\n* [`ptr_arg`]: No longer lints if the argument is used as an incomplete trait object\n  [#9645](https://github.com/rust-lang/rust-clippy/pull/9645)\n* [`should_implement_trait`]: Now also works for `default` methods\n  [#9546](https://github.com/rust-lang/rust-clippy/pull/9546)\n\n### Suggestion Fixes/Improvements\n\n* [`derivable_impls`]: The suggestion is now machine applicable\n  [#9429](https://github.com/rust-lang/rust-clippy/pull/9429)\n* [`match_single_binding`]: The suggestion now handles scrutinies with side effects better\n  [#9601](https://github.com/rust-lang/rust-clippy/pull/9601)\n* [`zero_prefixed_literal`]: Only suggests using octal numbers, if this is possible\n  [#9652](https://github.com/rust-lang/rust-clippy/pull/9652)\n* [`rc_buffer`]: The suggestion is no longer machine applicable to avoid semantic changes\n  [#9633](https://github.com/rust-lang/rust-clippy/pull/9633)\n* [`print_literal`], [`write_literal`], [`uninlined_format_args`]: The suggestion now ignores\n  comments after the macro call.\n  [#9586](https://github.com/rust-lang/rust-clippy/pull/9586)\n* [`expect_fun_call`]:Improved the suggestion for `format!` calls with captured variables\n  [#9586](https://github.com/rust-lang/rust-clippy/pull/9586)\n* [`nonstandard_macro_braces`]: The suggestion is now machine applicable and will no longer\n  replace brackets inside the macro argument.\n  [#9499](https://github.com/rust-lang/rust-clippy/pull/9499)\n* [`from_over_into`]: The suggestion is now a machine applicable and contains explanations\n  [#9649](https://github.com/rust-lang/rust-clippy/pull/9649)\n* [`needless_return`]: The automatic suggestion now removes all required semicolons\n  [#9497](https://github.com/rust-lang/rust-clippy/pull/9497)\n* [`to_string_in_format_args`]: The suggestion now keeps parenthesis around values\n  [#9590](https://github.com/rust-lang/rust-clippy/pull/9590)\n* [`manual_assert`]: The suggestion now preserves comments\n  [#9479](https://github.com/rust-lang/rust-clippy/pull/9479)\n* [`redundant_allocation`]: The suggestion applicability is now marked `MaybeIncorrect` to\n  avoid semantic changes\n  [#9634](https://github.com/rust-lang/rust-clippy/pull/9634)\n* [`assertions_on_result_states`]: The suggestion has been corrected, for cases where the\n  `assert!` is not in a statement.\n  [#9453](https://github.com/rust-lang/rust-clippy/pull/9453)\n* [`nonminimal_bool`]: The suggestion no longer expands macros\n  [#9457](https://github.com/rust-lang/rust-clippy/pull/9457)\n* [`collapsible_match`]: Now specifies field names, when a struct is destructed\n  [#9685](https://github.com/rust-lang/rust-clippy/pull/9685)\n* [`unnecessary_cast`]: The suggestion now adds parenthesis for negative numbers\n  [#9577](https://github.com/rust-lang/rust-clippy/pull/9577)\n* [`redundant_closure`]: The suggestion now works for `impl FnMut` arguments\n  [#9556](https://github.com/rust-lang/rust-clippy/pull/9556)\n\n### ICE Fixes\n\n* [`unnecessary_to_owned`]: Avoid ICEs in favor of false negatives if information is missing\n  [#9505](https://github.com/rust-lang/rust-clippy/pull/9505)\n  [#10027](https://github.com/rust-lang/rust-clippy/pull/10027)\n* [`manual_range_contains`]: No longer ICEs on values behind references\n  [#9627](https://github.com/rust-lang/rust-clippy/pull/9627)\n* [`needless_pass_by_value`]: No longer ICEs on unsized `dyn Fn` arguments\n  [#9531](https://github.com/rust-lang/rust-clippy/pull/9531)\n* `*_interior_mutable_const` lints: no longer ICE on const unions containing `!Freeze` types\n  [#9539](https://github.com/rust-lang/rust-clippy/pull/9539)\n\n### Others\n\n* Released `rustc_tools_util` for version information on `Crates.io`. (Further adjustments will\n  not be published as part of this changelog)\n\n## Rust 1.65\n\nReleased 2022-11-03\n\n[View all 86 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-07-29T01%3A09%3A31Z..2022-09-09T00%3A01%3A54Z+base%3Amaster)\n\n### Important Changes\n\n* Clippy now has an `--explain <LINT>` command to show the lint description in the console\n  [#8952](https://github.com/rust-lang/rust-clippy/pull/8952)\n\n### New Lints\n\n* [`unused_peekable`]\n  [#9258](https://github.com/rust-lang/rust-clippy/pull/9258)\n* [`collapsible_str_replace`]\n  [#9269](https://github.com/rust-lang/rust-clippy/pull/9269)\n* [`manual_string_new`]\n  [#9295](https://github.com/rust-lang/rust-clippy/pull/9295)\n* [`iter_on_empty_collections`]\n  [#9187](https://github.com/rust-lang/rust-clippy/pull/9187)\n* [`iter_on_single_items`]\n  [#9187](https://github.com/rust-lang/rust-clippy/pull/9187)\n* [`bool_to_int_with_if`]\n  [#9412](https://github.com/rust-lang/rust-clippy/pull/9412)\n* [`multi_assignments`]\n  [#9379](https://github.com/rust-lang/rust-clippy/pull/9379)\n* [`result_large_err`]\n  [#9373](https://github.com/rust-lang/rust-clippy/pull/9373)\n* [`partialeq_to_none`]\n  [#9288](https://github.com/rust-lang/rust-clippy/pull/9288)\n* [`suspicious_to_owned`]\n  [#8984](https://github.com/rust-lang/rust-clippy/pull/8984)\n* [`cast_slice_from_raw_parts`]\n  [#9247](https://github.com/rust-lang/rust-clippy/pull/9247)\n* [`manual_instant_elapsed`]\n  [#9264](https://github.com/rust-lang/rust-clippy/pull/9264)\n\n### Moves and Deprecations\n\n* Moved [`significant_drop_in_scrutinee`] to `nursery` (now allow-by-default)\n  [#9302](https://github.com/rust-lang/rust-clippy/pull/9302)\n* Rename `logic_bug` to [`overly_complex_bool_expr`]\n  [#9306](https://github.com/rust-lang/rust-clippy/pull/9306)\n* Rename `arithmetic` to [`arithmetic_side_effects`]\n  [#9443](https://github.com/rust-lang/rust-clippy/pull/9443)\n* Moved [`only_used_in_recursion`] to complexity (now warn-by-default)\n  [#8804](https://github.com/rust-lang/rust-clippy/pull/8804)\n* Moved [`assertions_on_result_states`] to restriction (now allow-by-default)\n  [#9273](https://github.com/rust-lang/rust-clippy/pull/9273)\n* Renamed `blacklisted_name` to [`disallowed_names`]\n  [#8974](https://github.com/rust-lang/rust-clippy/pull/8974)\n\n### Enhancements\n\n* [`option_if_let_else`]: Now also checks for match expressions\n  [#8696](https://github.com/rust-lang/rust-clippy/pull/8696)\n* [`explicit_auto_deref`]: Now lints on implicit returns in closures\n  [#9126](https://github.com/rust-lang/rust-clippy/pull/9126)\n* [`needless_borrow`]: Now considers trait implementations\n  [#9136](https://github.com/rust-lang/rust-clippy/pull/9136)\n* [`suboptimal_flops`], [`imprecise_flops`]: Now lint on constant expressions\n  [#9404](https://github.com/rust-lang/rust-clippy/pull/9404)\n* [`if_let_mutex`]: Now detects mutex behind references and warns about deadlocks\n  [#9318](https://github.com/rust-lang/rust-clippy/pull/9318)\n\n### False Positive Fixes\n\n* [`unit_arg`] [`default_trait_access`] [`missing_docs_in_private_items`]: No longer\n  trigger in code generated from proc-macros\n  [#8694](https://github.com/rust-lang/rust-clippy/pull/8694)\n* [`unwrap_used`]: Now lints uses of `unwrap_err`\n  [#9338](https://github.com/rust-lang/rust-clippy/pull/9338)\n* [`expect_used`]: Now lints uses of `expect_err`\n  [#9338](https://github.com/rust-lang/rust-clippy/pull/9338)\n* [`transmute_undefined_repr`]: Now longer lints if the first field is compatible\n  with the other type\n  [#9287](https://github.com/rust-lang/rust-clippy/pull/9287)\n* [`unnecessary_to_owned`]: No longer lints, if type change cased errors in\n  the caller function\n  [#9424](https://github.com/rust-lang/rust-clippy/pull/9424)\n* [`match_like_matches_macro`]: No longer lints, if there are comments inside the\n  match expression\n  [#9276](https://github.com/rust-lang/rust-clippy/pull/9276)\n* [`partialeq_to_none`]: No longer trigger in code generated from macros\n  [#9389](https://github.com/rust-lang/rust-clippy/pull/9389)\n* [`arithmetic_side_effects`]: No longer lints expressions that only use literals\n  [#9365](https://github.com/rust-lang/rust-clippy/pull/9365)\n* [`explicit_auto_deref`]: Now ignores references on block expressions when the type\n  is `Sized`, on `dyn Trait` returns and when the suggestion is non-trivial\n  [#9126](https://github.com/rust-lang/rust-clippy/pull/9126)\n* [`trait_duplication_in_bounds`]: Now better tracks bounds to avoid false positives\n  [#9167](https://github.com/rust-lang/rust-clippy/pull/9167)\n* [`format_in_format_args`]: Now suggests cases where the result is formatted again\n  [#9349](https://github.com/rust-lang/rust-clippy/pull/9349)\n* [`only_used_in_recursion`]: No longer lints on function without recursions and\n  takes external functions into account\n  [#8804](https://github.com/rust-lang/rust-clippy/pull/8804)\n* [`missing_const_for_fn`]: No longer lints in proc-macros\n  [#9308](https://github.com/rust-lang/rust-clippy/pull/9308)\n* [`non_ascii_literal`]: Allow non-ascii comments in tests and make sure `#[allow]`\n  attributes work in tests\n  [#9327](https://github.com/rust-lang/rust-clippy/pull/9327)\n* [`question_mark`]: No longer lint `if let`s with subpatterns\n  [#9348](https://github.com/rust-lang/rust-clippy/pull/9348)\n* [`needless_collect`]: No longer lints in loops\n  [#8992](https://github.com/rust-lang/rust-clippy/pull/8992)\n* [`mut_mutex_lock`]: No longer lints if the mutex is behind an immutable reference\n  [#9418](https://github.com/rust-lang/rust-clippy/pull/9418)\n* [`needless_return`]: Now ignores returns with arguments\n  [#9381](https://github.com/rust-lang/rust-clippy/pull/9381)\n* [`range_plus_one`], [`range_minus_one`]: Now ignores code with macros\n  [#9446](https://github.com/rust-lang/rust-clippy/pull/9446)\n* [`assertions_on_result_states`]: No longer lints on the unit type\n  [#9273](https://github.com/rust-lang/rust-clippy/pull/9273)\n\n### Suggestion Fixes/Improvements\n\n* [`unwrap_or_else_default`]: Now suggests `unwrap_or_default()` for empty strings\n  [#9421](https://github.com/rust-lang/rust-clippy/pull/9421)\n* [`if_then_some_else_none`]: Now also suggests `bool::then_some`\n  [#9289](https://github.com/rust-lang/rust-clippy/pull/9289)\n* [`redundant_closure_call`]: The suggestion now works for async closures\n  [#9053](https://github.com/rust-lang/rust-clippy/pull/9053)\n* [`suboptimal_flops`]: Now suggests parenthesis when they are required\n  [#9394](https://github.com/rust-lang/rust-clippy/pull/9394)\n* [`case_sensitive_file_extension_comparisons`]: Now suggests `map_or(..)` instead of `map(..).unwrap_or`\n  [#9341](https://github.com/rust-lang/rust-clippy/pull/9341)\n* Deprecated configuration values can now be updated automatically\n  [#9252](https://github.com/rust-lang/rust-clippy/pull/9252)\n* [`or_fun_call`]: Now suggest `Entry::or_default` for `Entry::or_insert(Default::default())`\n  [#9342](https://github.com/rust-lang/rust-clippy/pull/9342)\n* [`unwrap_used`]: Only suggests `expect` if [`expect_used`] is allowed\n  [#9223](https://github.com/rust-lang/rust-clippy/pull/9223)\n\n### ICE Fixes\n\n* Fix ICE in [`useless_format`] for literals\n  [#9406](https://github.com/rust-lang/rust-clippy/pull/9406)\n* Fix infinite loop in [`vec_init_then_push`]\n  [#9441](https://github.com/rust-lang/rust-clippy/pull/9441)\n* Fix ICE when reading literals with weird proc-macro spans\n  [#9303](https://github.com/rust-lang/rust-clippy/pull/9303)\n\n## Rust 1.64\n\nReleased 2022-09-22\n\n[View all 110 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-06-17T21%3A25%3A31Z..2022-07-28T17%3A11%3A18Z+base%3Amaster)\n\n### New Lints\n\n* [`arithmetic_side_effects`]\n  [#9130](https://github.com/rust-lang/rust-clippy/pull/9130)\n* [`invalid_utf8_in_unchecked`]\n  [#9105](https://github.com/rust-lang/rust-clippy/pull/9105)\n* [`assertions_on_result_states`]\n  [#9225](https://github.com/rust-lang/rust-clippy/pull/9225)\n* [`manual_find`]\n  [#8649](https://github.com/rust-lang/rust-clippy/pull/8649)\n* [`manual_retain`]\n  [#8972](https://github.com/rust-lang/rust-clippy/pull/8972)\n* [`default_instead_of_iter_empty`]\n  [#8989](https://github.com/rust-lang/rust-clippy/pull/8989)\n* [`manual_rem_euclid`]\n  [#9031](https://github.com/rust-lang/rust-clippy/pull/9031)\n* [`obfuscated_if_else`]\n  [#9148](https://github.com/rust-lang/rust-clippy/pull/9148)\n* [`std_instead_of_core`]\n  [#9103](https://github.com/rust-lang/rust-clippy/pull/9103)\n* [`std_instead_of_alloc`]\n  [#9103](https://github.com/rust-lang/rust-clippy/pull/9103)\n* [`alloc_instead_of_core`]\n  [#9103](https://github.com/rust-lang/rust-clippy/pull/9103)\n* [`explicit_auto_deref`]\n  [#8355](https://github.com/rust-lang/rust-clippy/pull/8355)\n\n\n### Moves and Deprecations\n\n* Moved [`format_push_string`] to `restriction` (now allow-by-default)\n  [#9161](https://github.com/rust-lang/rust-clippy/pull/9161)\n\n### Enhancements\n\n* [`significant_drop_in_scrutinee`]: Now gives more context in the lint message\n  [#8981](https://github.com/rust-lang/rust-clippy/pull/8981)\n* [`single_match`], [`single_match_else`]: Now catches more `Option` cases\n  [#8985](https://github.com/rust-lang/rust-clippy/pull/8985)\n* [`unused_async`]: Now works for async methods\n  [#9025](https://github.com/rust-lang/rust-clippy/pull/9025)\n* [`manual_filter_map`], [`manual_find_map`]: Now lint more expressions\n  [#8958](https://github.com/rust-lang/rust-clippy/pull/8958)\n* [`question_mark`]: Now works for simple `if let` expressions\n  [#8356](https://github.com/rust-lang/rust-clippy/pull/8356)\n* [`undocumented_unsafe_blocks`]: Now finds comments before the start of closures\n  [#9117](https://github.com/rust-lang/rust-clippy/pull/9117)\n* [`trait_duplication_in_bounds`]: Now catches duplicate bounds in where clauses\n  [#8703](https://github.com/rust-lang/rust-clippy/pull/8703)\n* [`shadow_reuse`], [`shadow_same`], [`shadow_unrelated`]: Now lint in const blocks\n  [#9124](https://github.com/rust-lang/rust-clippy/pull/9124)\n* [`slow_vector_initialization`]: Now detects cases with `vec.capacity()`\n  [#8953](https://github.com/rust-lang/rust-clippy/pull/8953)\n* [`unused_self`]: Now respects the `avoid-breaking-exported-api` config option\n  [#9199](https://github.com/rust-lang/rust-clippy/pull/9199)\n* [`box_collection`]: Now supports all std collections\n  [#9170](https://github.com/rust-lang/rust-clippy/pull/9170)\n\n### False Positive Fixes\n\n* [`significant_drop_in_scrutinee`]: Now ignores calls to `IntoIterator::into_iter`\n  [#9140](https://github.com/rust-lang/rust-clippy/pull/9140)\n* [`while_let_loop`]: Now ignores cases when the significant drop order would change\n  [#8981](https://github.com/rust-lang/rust-clippy/pull/8981)\n* [`branches_sharing_code`]: Now ignores cases where moved variables have a significant\n  drop or variable modifications can affect the conditions\n  [#9138](https://github.com/rust-lang/rust-clippy/pull/9138)\n* [`let_underscore_lock`]: Now ignores bindings that aren't locked\n  [#8990](https://github.com/rust-lang/rust-clippy/pull/8990)\n* [`trivially_copy_pass_by_ref`]: Now tracks lifetimes and ignores cases where unsafe\n  pointers are used\n  [#8639](https://github.com/rust-lang/rust-clippy/pull/8639)\n* [`let_unit_value`]: No longer ignores `#[allow]` attributes on the value\n  [#9082](https://github.com/rust-lang/rust-clippy/pull/9082)\n* [`declare_interior_mutable_const`]: Now ignores the `thread_local!` macro\n  [#9015](https://github.com/rust-lang/rust-clippy/pull/9015)\n* [`if_same_then_else`]: Now ignores branches with `todo!` and `unimplemented!`\n  [#9006](https://github.com/rust-lang/rust-clippy/pull/9006)\n* [`enum_variant_names`]: Now ignores names with `_` prefixes\n  [#9032](https://github.com/rust-lang/rust-clippy/pull/9032)\n* [`let_unit_value`]: Now ignores cases, where the unit type is manually specified\n  [#9056](https://github.com/rust-lang/rust-clippy/pull/9056)\n* [`match_same_arms`]: Now ignores branches with `todo!`\n  [#9207](https://github.com/rust-lang/rust-clippy/pull/9207)\n* [`assign_op_pattern`]: Ignores cases that break borrowing rules\n  [#9214](https://github.com/rust-lang/rust-clippy/pull/9214)\n* [`extra_unused_lifetimes`]: No longer triggers in derive macros\n  [#9037](https://github.com/rust-lang/rust-clippy/pull/9037)\n* [`mismatching_type_param_order`]: Now ignores complicated generic parameters\n  [#9146](https://github.com/rust-lang/rust-clippy/pull/9146)\n* [`equatable_if_let`]: No longer lints in macros\n  [#9074](https://github.com/rust-lang/rust-clippy/pull/9074)\n* [`new_without_default`]: Now ignores generics and lifetime parameters on `fn new`\n  [#9115](https://github.com/rust-lang/rust-clippy/pull/9115)\n* [`needless_borrow`]: Now ignores cases that result in the execution of different traits\n  [#9096](https://github.com/rust-lang/rust-clippy/pull/9096)\n* [`declare_interior_mutable_const`]: No longer triggers in thread-local initializers\n  [#9246](https://github.com/rust-lang/rust-clippy/pull/9246)\n\n### Suggestion Fixes/Improvements\n\n* [`type_repetition_in_bounds`]: The suggestion now works with maybe bounds\n  [#9132](https://github.com/rust-lang/rust-clippy/pull/9132)\n* [`transmute_ptr_to_ref`]: Now suggests `pointer::cast` when possible\n  [#8939](https://github.com/rust-lang/rust-clippy/pull/8939)\n* [`useless_format`]: Now suggests the correct variable name\n  [#9237](https://github.com/rust-lang/rust-clippy/pull/9237)\n* [`or_fun_call`]: The lint emission will now only span over the `unwrap_or` call\n  [#9144](https://github.com/rust-lang/rust-clippy/pull/9144)\n* [`neg_multiply`]: Now suggests adding parentheses around suggestion if needed\n  [#9026](https://github.com/rust-lang/rust-clippy/pull/9026)\n* [`unnecessary_lazy_evaluations`]: Now suggest for `bool::then_some` for lazy evaluation\n  [#9099](https://github.com/rust-lang/rust-clippy/pull/9099)\n* [`manual_flatten`]: Improved message for long code snippets\n  [#9156](https://github.com/rust-lang/rust-clippy/pull/9156)\n* [`explicit_counter_loop`]: The suggestion is now machine applicable\n  [#9149](https://github.com/rust-lang/rust-clippy/pull/9149)\n* [`needless_borrow`]: Now keeps parentheses around fields, when needed\n  [#9210](https://github.com/rust-lang/rust-clippy/pull/9210)\n* [`while_let_on_iterator`]: The suggestion now works in `FnOnce` closures\n  [#9134](https://github.com/rust-lang/rust-clippy/pull/9134)\n\n### ICE Fixes\n\n* Fix ICEs related to `#![feature(generic_const_exprs)]` usage\n  [#9241](https://github.com/rust-lang/rust-clippy/pull/9241)\n* Fix ICEs related to reference lints\n  [#9093](https://github.com/rust-lang/rust-clippy/pull/9093)\n* [`question_mark`]: Fix ICE on zero field tuple structs\n  [#9244](https://github.com/rust-lang/rust-clippy/pull/9244)\n\n### Documentation Improvements\n\n* [`needless_option_take`]: Now includes a \"What it does\" and \"Why is this bad?\" section.\n  [#9022](https://github.com/rust-lang/rust-clippy/pull/9022)\n\n### Others\n\n* Using `--cap-lints=allow` and only `--force-warn`ing some will now work with Clippy's driver\n  [#9036](https://github.com/rust-lang/rust-clippy/pull/9036)\n* Clippy now tries to read the `rust-version` from `Cargo.toml` to identify the\n  minimum supported rust version\n  [#8774](https://github.com/rust-lang/rust-clippy/pull/8774)\n\n## Rust 1.63\n\nReleased 2022-08-11\n\n[View all 91 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-05-05T17%3A24%3A22Z..2022-06-16T14%3A24%3A48Z+base%3Amaster)\n\n### New Lints\n\n* [`borrow_deref_ref`]\n  [#7930](https://github.com/rust-lang/rust-clippy/pull/7930)\n* [`doc_link_with_quotes`]\n  [#8385](https://github.com/rust-lang/rust-clippy/pull/8385)\n* [`no_effect_replace`]\n  [#8754](https://github.com/rust-lang/rust-clippy/pull/8754)\n* [`rc_clone_in_vec_init`]\n  [#8769](https://github.com/rust-lang/rust-clippy/pull/8769)\n* [`derive_partial_eq_without_eq`]\n  [#8796](https://github.com/rust-lang/rust-clippy/pull/8796)\n* [`mismatching_type_param_order`]\n  [#8831](https://github.com/rust-lang/rust-clippy/pull/8831)\n* [`duplicate_mod`] [#8832](https://github.com/rust-lang/rust-clippy/pull/8832)\n* [`unused_rounding`]\n  [#8866](https://github.com/rust-lang/rust-clippy/pull/8866)\n* [`get_first`] [#8882](https://github.com/rust-lang/rust-clippy/pull/8882)\n* [`swap_ptr_to_ref`]\n  [#8916](https://github.com/rust-lang/rust-clippy/pull/8916)\n* [`almost_complete_letter_range`]\n  [#8918](https://github.com/rust-lang/rust-clippy/pull/8918)\n* [`needless_parens_on_range_literals`]\n  [#8933](https://github.com/rust-lang/rust-clippy/pull/8933)\n* [`as_underscore`] [#8934](https://github.com/rust-lang/rust-clippy/pull/8934)\n\n### Moves and Deprecations\n\n* Rename `eval_order_dependence` to [`mixed_read_write_in_expression`], move to\n  `nursery` [#8621](https://github.com/rust-lang/rust-clippy/pull/8621)\n\n### Enhancements\n\n* [`undocumented_unsafe_blocks`]: Now also lints on unsafe trait implementations\n  [#8761](https://github.com/rust-lang/rust-clippy/pull/8761)\n* [`empty_line_after_outer_attr`]: Now also lints on argumentless macros\n  [#8790](https://github.com/rust-lang/rust-clippy/pull/8790)\n* [`expect_used`]: Now can be disabled in tests with the `allow-expect-in-tests`\n  option [#8802](https://github.com/rust-lang/rust-clippy/pull/8802)\n* [`unwrap_used`]: Now can be disabled in tests with the `allow-unwrap-in-tests`\n  option [#8802](https://github.com/rust-lang/rust-clippy/pull/8802)\n* [`disallowed_methods`]: Now also lints indirect usages\n  [#8852](https://github.com/rust-lang/rust-clippy/pull/8852)\n* [`get_last_with_len`]: Now also lints `VecDeque` and any deref to slice\n  [#8862](https://github.com/rust-lang/rust-clippy/pull/8862)\n* [`manual_range_contains`]: Now also lints on chains of `&&` and `||`\n  [#8884](https://github.com/rust-lang/rust-clippy/pull/8884)\n* [`rc_clone_in_vec_init`]: Now also lints on `Weak`\n  [#8885](https://github.com/rust-lang/rust-clippy/pull/8885)\n* [`dbg_macro`]: Introduce `allow-dbg-in-tests` config option\n  [#8897](https://github.com/rust-lang/rust-clippy/pull/8897)\n* [`use_self`]: Now also lints on `TupleStruct` and `Struct` patterns\n  [#8899](https://github.com/rust-lang/rust-clippy/pull/8899)\n* [`manual_find_map`] and [`manual_filter_map`]: Now also lints on more complex\n  method chains inside `map`\n  [#8930](https://github.com/rust-lang/rust-clippy/pull/8930)\n* [`needless_return`]: Now also lints on macro expressions in return statements\n  [#8932](https://github.com/rust-lang/rust-clippy/pull/8932)\n* [`doc_markdown`]: Users can now indicate, that the `doc-valid-idents` config\n  should extend the default and not replace it\n  [#8944](https://github.com/rust-lang/rust-clippy/pull/8944)\n* [`disallowed_names`]: Users can now indicate, that the `disallowed-names`\n  config should extend the default and not replace it\n  [#8944](https://github.com/rust-lang/rust-clippy/pull/8944)\n* [`never_loop`]: Now checks for `continue` in struct expression\n  [#9002](https://github.com/rust-lang/rust-clippy/pull/9002)\n\n### False Positive Fixes\n\n* [`useless_transmute`]: No longer lints on types with erased regions\n  [#8564](https://github.com/rust-lang/rust-clippy/pull/8564)\n* [`vec_init_then_push`]: No longer lints when further extended\n  [#8699](https://github.com/rust-lang/rust-clippy/pull/8699)\n* [`cmp_owned`]: No longer lints on `From::from` for `Copy` types\n  [#8807](https://github.com/rust-lang/rust-clippy/pull/8807)\n* [`redundant_allocation`]: No longer lints on fat pointers that would become\n  thin pointers [#8813](https://github.com/rust-lang/rust-clippy/pull/8813)\n* [`derive_partial_eq_without_eq`]:\n    * Handle differing predicates applied by `#[derive(PartialEq)]` and\n      `#[derive(Eq)]`\n      [#8869](https://github.com/rust-lang/rust-clippy/pull/8869)\n    * No longer lints on non-public types and better handles generics\n      [#8950](https://github.com/rust-lang/rust-clippy/pull/8950)\n* [`empty_line_after_outer_attr`]: No longer lints empty lines in inner\n  string values [#8892](https://github.com/rust-lang/rust-clippy/pull/8892)\n* [`branches_sharing_code`]: No longer lints when using different binding names\n  [#8901](https://github.com/rust-lang/rust-clippy/pull/8901)\n* [`significant_drop_in_scrutinee`]: No longer lints on Try `?` and `await`\n  desugared expressions [#8902](https://github.com/rust-lang/rust-clippy/pull/8902)\n* [`checked_conversions`]: No longer lints in `const` contexts\n  [#8907](https://github.com/rust-lang/rust-clippy/pull/8907)\n* [`iter_overeager_cloned`]: No longer lints on `.cloned().flatten()` when\n  `T::Item` doesn't implement `IntoIterator`\n  [#8960](https://github.com/rust-lang/rust-clippy/pull/8960)\n\n### Suggestion Fixes/Improvements\n\n* [`vec_init_then_push`]: Suggest to remove `mut` binding when possible\n  [#8699](https://github.com/rust-lang/rust-clippy/pull/8699)\n* [`manual_range_contains`]: Fix suggestion for integers with different signs\n  [#8763](https://github.com/rust-lang/rust-clippy/pull/8763)\n* [`identity_op`]: Add parenthesis to suggestions where required\n  [#8786](https://github.com/rust-lang/rust-clippy/pull/8786)\n* [`cast_lossless`]: No longer gives wrong suggestion on `usize`/`isize`->`f64`\n  [#8778](https://github.com/rust-lang/rust-clippy/pull/8778)\n* [`rc_clone_in_vec_init`]: Add suggestion\n  [#8814](https://github.com/rust-lang/rust-clippy/pull/8814)\n* The \"unknown field\" error messages for config files now wraps the field names\n  [#8823](https://github.com/rust-lang/rust-clippy/pull/8823)\n* [`cast_abs_to_unsigned`]: Do not remove cast if it's required\n  [#8876](https://github.com/rust-lang/rust-clippy/pull/8876)\n* [`significant_drop_in_scrutinee`]: Improve lint message for types that are not\n  references and not trivially clone-able\n  [#8902](https://github.com/rust-lang/rust-clippy/pull/8902)\n* [`for_loops_over_fallibles`]: Now suggests the correct variant of `iter()`,\n  `iter_mut()` or `into_iter()`\n  [#8941](https://github.com/rust-lang/rust-clippy/pull/8941)\n\n### ICE Fixes\n\n* Fix ICE in [`let_unit_value`] when calling a `static`/`const` callable type\n  [#8835](https://github.com/rust-lang/rust-clippy/pull/8835)\n* Fix ICEs on callable `static`/`const`s\n  [#8896](https://github.com/rust-lang/rust-clippy/pull/8896)\n* [`needless_late_init`]\n  [#8912](https://github.com/rust-lang/rust-clippy/pull/8912)\n* Fix ICE in shadow lints\n  [#8913](https://github.com/rust-lang/rust-clippy/pull/8913)\n\n### Documentation Improvements\n\n* Clippy has a [Book](https://doc.rust-lang.org/nightly/clippy/) now!\n  [#7359](https://github.com/rust-lang/rust-clippy/pull/7359)\n* Add a *copy lint name*-button to Clippy's lint list\n  [#8839](https://github.com/rust-lang/rust-clippy/pull/8839)\n* Display past names of renamed lints on Clippy's lint list\n  [#8843](https://github.com/rust-lang/rust-clippy/pull/8843)\n* Add the ability to show the lint output in the lint list\n  [#8947](https://github.com/rust-lang/rust-clippy/pull/8947)\n\n## Rust 1.62\n\nReleased 2022-06-30\n\n[View all 90 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-03-25T17%3A22%3A30Z..2022-05-05T13%3A29%3A44Z+base%3Amaster)\n\n### New Lints\n\n* [`large_include_file`]\n  [#8727](https://github.com/rust-lang/rust-clippy/pull/8727)\n* [`cast_abs_to_unsigned`]\n  [#8635](https://github.com/rust-lang/rust-clippy/pull/8635)\n* [`err_expect`]\n  [#8606](https://github.com/rust-lang/rust-clippy/pull/8606)\n* [`unnecessary_owned_empty_strings`]\n  [#8660](https://github.com/rust-lang/rust-clippy/pull/8660)\n* [`empty_structs_with_brackets`]\n  [#8594](https://github.com/rust-lang/rust-clippy/pull/8594)\n* [`crate_in_macro_def`]\n  [#8576](https://github.com/rust-lang/rust-clippy/pull/8576)\n* [`needless_option_take`]\n  [#8665](https://github.com/rust-lang/rust-clippy/pull/8665)\n* [`bytes_count_to_len`]\n  [#8711](https://github.com/rust-lang/rust-clippy/pull/8711)\n* [`is_digit_ascii_radix`]\n  [#8624](https://github.com/rust-lang/rust-clippy/pull/8624)\n* [`await_holding_invalid_type`]\n  [#8707](https://github.com/rust-lang/rust-clippy/pull/8707)\n* [`trim_split_whitespace`]\n  [#8575](https://github.com/rust-lang/rust-clippy/pull/8575)\n* [`pub_use`]\n  [#8670](https://github.com/rust-lang/rust-clippy/pull/8670)\n* [`format_push_string`]\n  [#8626](https://github.com/rust-lang/rust-clippy/pull/8626)\n* [`empty_drop`]\n  [#8571](https://github.com/rust-lang/rust-clippy/pull/8571)\n* [`drop_non_drop`]\n  [#8630](https://github.com/rust-lang/rust-clippy/pull/8630)\n* [`forget_non_drop`]\n  [#8630](https://github.com/rust-lang/rust-clippy/pull/8630)\n\n### Moves and Deprecations\n\n* Move [`only_used_in_recursion`] to `nursery` (now allow-by-default)\n  [#8783](https://github.com/rust-lang/rust-clippy/pull/8783)\n* Move [`stable_sort_primitive`] to `pedantic` (now allow-by-default)\n  [#8716](https://github.com/rust-lang/rust-clippy/pull/8716)\n\n### Enhancements\n\n* Remove overlap between [`manual_split_once`] and [`needless_splitn`]\n  [#8631](https://github.com/rust-lang/rust-clippy/pull/8631)\n* [`map_identity`]: Now checks for needless `map_err`\n  [#8487](https://github.com/rust-lang/rust-clippy/pull/8487)\n* [`extra_unused_lifetimes`]: Now checks for impl lifetimes\n  [#8737](https://github.com/rust-lang/rust-clippy/pull/8737)\n* [`cast_possible_truncation`]: Now catches more cases with larger shift or divide operations\n  [#8687](https://github.com/rust-lang/rust-clippy/pull/8687)\n* [`identity_op`]: Now checks for modulo expressions\n  [#8519](https://github.com/rust-lang/rust-clippy/pull/8519)\n* [`panic`]: No longer lint in constant context\n  [#8592](https://github.com/rust-lang/rust-clippy/pull/8592)\n* [`manual_split_once`]: Now lints manual iteration of `splitn`\n  [#8717](https://github.com/rust-lang/rust-clippy/pull/8717)\n* [`self_named_module_files`], [`mod_module_files`]: Now handle relative module paths\n  [#8611](https://github.com/rust-lang/rust-clippy/pull/8611)\n* [`unsound_collection_transmute`]: Now has better size and alignment checks\n  [#8648](https://github.com/rust-lang/rust-clippy/pull/8648)\n* [`unnested_or_patterns`]: Ignore cases, where the suggestion would be longer\n  [#8619](https://github.com/rust-lang/rust-clippy/pull/8619)\n\n### False Positive Fixes\n\n* [`rest_pat_in_fully_bound_structs`]: Now ignores structs marked with `#[non_exhaustive]`\n  [#8690](https://github.com/rust-lang/rust-clippy/pull/8690)\n* [`needless_late_init`]: No longer lints `if let` statements, `let mut` bindings or instances that\n  changes the drop order significantly\n  [#8617](https://github.com/rust-lang/rust-clippy/pull/8617)\n* [`unnecessary_cast`]: No longer lints to casts to aliased or non-primitive types\n  [#8596](https://github.com/rust-lang/rust-clippy/pull/8596)\n* [`init_numbered_fields`]: No longer lints type aliases\n  [#8780](https://github.com/rust-lang/rust-clippy/pull/8780)\n* [`needless_option_as_deref`]: No longer lints for `as_deref_mut` on `Option` values that can't be moved\n  [#8646](https://github.com/rust-lang/rust-clippy/pull/8646)\n* [`mistyped_literal_suffixes`]: Now ignores float literals without an exponent\n  [#8742](https://github.com/rust-lang/rust-clippy/pull/8742)\n* [`undocumented_unsafe_blocks`]: Now ignores unsafe blocks from proc-macros and works better for sub-expressions\n  [#8450](https://github.com/rust-lang/rust-clippy/pull/8450)\n* [`same_functions_in_if_condition`]: Now allows different constants, even if they have the same value\n  [#8673](https://github.com/rust-lang/rust-clippy/pull/8673)\n* [`needless_match`]: Now checks for more complex types and ignores type coercion\n  [#8549](https://github.com/rust-lang/rust-clippy/pull/8549)\n* [`assertions_on_constants`]: Now ignores constants from `cfg!` macros\n  [#8614](https://github.com/rust-lang/rust-clippy/pull/8614)\n* [`indexing_slicing`]: Fix false positives with constant indices in\n  [#8588](https://github.com/rust-lang/rust-clippy/pull/8588)\n* [`iter_with_drain`]: Now ignores iterator references\n  [#8668](https://github.com/rust-lang/rust-clippy/pull/8668)\n* [`useless_attribute`]: Now allows [`redundant_pub_crate`] on `use` items\n  [#8743](https://github.com/rust-lang/rust-clippy/pull/8743)\n* [`cast_ptr_alignment`]: Now ignores expressions, when used for unaligned reads and writes\n  [#8632](https://github.com/rust-lang/rust-clippy/pull/8632)\n* [`wrong_self_convention`]: Now allows `&mut self` and no self as arguments for `is_*` methods\n  [#8738](https://github.com/rust-lang/rust-clippy/pull/8738)\n* [`mut_from_ref`]: Only lint in unsafe code\n  [#8647](https://github.com/rust-lang/rust-clippy/pull/8647)\n* [`redundant_pub_crate`]: Now allows macro exports\n  [#8736](https://github.com/rust-lang/rust-clippy/pull/8736)\n* [`needless_match`]: Ignores cases where the else block expression is different\n  [#8700](https://github.com/rust-lang/rust-clippy/pull/8700)\n* [`transmute_int_to_char`]: Now allows transmutations in `const` code\n  [#8610](https://github.com/rust-lang/rust-clippy/pull/8610)\n* [`manual_non_exhaustive`]: Ignores cases, where the enum value is used\n  [#8645](https://github.com/rust-lang/rust-clippy/pull/8645)\n* [`redundant_closure`]: Now ignores coerced closure\n  [#8431](https://github.com/rust-lang/rust-clippy/pull/8431)\n* [`identity_op`]: Is now ignored in cases where extra brackets would be needed\n  [#8730](https://github.com/rust-lang/rust-clippy/pull/8730)\n* [`let_unit_value`]: Now ignores cases which are used for type inference\n  [#8563](https://github.com/rust-lang/rust-clippy/pull/8563)\n\n### Suggestion Fixes/Improvements\n\n* [`manual_split_once`]: Fixed incorrect suggestions for single result accesses\n  [#8631](https://github.com/rust-lang/rust-clippy/pull/8631)\n* [`bytes_nth`]: Fix typos in the diagnostic message\n  [#8403](https://github.com/rust-lang/rust-clippy/pull/8403)\n* [`mistyped_literal_suffixes`]: Now suggests the correct integer types\n  [#8742](https://github.com/rust-lang/rust-clippy/pull/8742)\n* [`unnecessary_to_owned`]: Fixed suggestion based on the configured msrv\n  [#8692](https://github.com/rust-lang/rust-clippy/pull/8692)\n* [`single_element_loop`]: Improve lint for Edition 2021 arrays\n  [#8616](https://github.com/rust-lang/rust-clippy/pull/8616)\n* [`manual_bits`]: Now includes a cast for proper type conversion, when needed\n  [#8677](https://github.com/rust-lang/rust-clippy/pull/8677)\n* [`option_map_unit_fn`], [`result_map_unit_fn`]: Fix some incorrect suggestions\n  [#8584](https://github.com/rust-lang/rust-clippy/pull/8584)\n* [`collapsible_else_if`]: Add whitespace in suggestion\n  [#8729](https://github.com/rust-lang/rust-clippy/pull/8729)\n* [`transmute_bytes_to_str`]: Now suggest `from_utf8_unchecked` in `const` context\n  [#8612](https://github.com/rust-lang/rust-clippy/pull/8612)\n* [`map_clone`]: Improve message and suggestion based on the msrv\n  [#8688](https://github.com/rust-lang/rust-clippy/pull/8688)\n* [`needless_late_init`]: Now shows the `let` statement where it was first initialized\n  [#8779](https://github.com/rust-lang/rust-clippy/pull/8779)\n\n### ICE Fixes\n\n* [`only_used_in_recursion`]\n  [#8691](https://github.com/rust-lang/rust-clippy/pull/8691)\n* [`cast_slice_different_sizes`]\n  [#8720](https://github.com/rust-lang/rust-clippy/pull/8720)\n* [`iter_overeager_cloned`]\n  [#8602](https://github.com/rust-lang/rust-clippy/pull/8602)\n* [`undocumented_unsafe_blocks`]\n  [#8686](https://github.com/rust-lang/rust-clippy/pull/8686)\n\n## Rust 1.61\n\nReleased 2022-05-19\n\n[View all 60 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2022-02-11T16%3A54%3A41Z..2022-03-24T13%3A42%3A25Z+base%3Amaster)\n\n### New Lints\n\n* [`only_used_in_recursion`]\n  [#8422](https://github.com/rust-lang/rust-clippy/pull/8422)\n* [`cast_enum_truncation`]\n  [#8381](https://github.com/rust-lang/rust-clippy/pull/8381)\n* [`missing_spin_loop`]\n  [#8174](https://github.com/rust-lang/rust-clippy/pull/8174)\n* [`deref_by_slicing`]\n  [#8218](https://github.com/rust-lang/rust-clippy/pull/8218)\n* [`needless_match`]\n  [#8471](https://github.com/rust-lang/rust-clippy/pull/8471)\n* [`allow_attributes_without_reason`]\n  [#8504](https://github.com/rust-lang/rust-clippy/pull/8504)\n* [`print_in_format_impl`]\n  [#8253](https://github.com/rust-lang/rust-clippy/pull/8253)\n* [`unnecessary_find_map`]\n  [#8489](https://github.com/rust-lang/rust-clippy/pull/8489)\n* [`or_then_unwrap`]\n  [#8561](https://github.com/rust-lang/rust-clippy/pull/8561)\n* [`unnecessary_join`]\n  [#8579](https://github.com/rust-lang/rust-clippy/pull/8579)\n* [`iter_with_drain`]\n  [#8483](https://github.com/rust-lang/rust-clippy/pull/8483)\n* [`cast_enum_constructor`]\n  [#8562](https://github.com/rust-lang/rust-clippy/pull/8562)\n* [`cast_slice_different_sizes`]\n  [#8445](https://github.com/rust-lang/rust-clippy/pull/8445)\n\n### Moves and Deprecations\n\n* Moved [`transmute_undefined_repr`] to `nursery` (now allow-by-default)\n  [#8432](https://github.com/rust-lang/rust-clippy/pull/8432)\n* Moved [`try_err`] to `restriction`\n  [#8544](https://github.com/rust-lang/rust-clippy/pull/8544)\n* Move [`iter_with_drain`] to `nursery`\n  [#8541](https://github.com/rust-lang/rust-clippy/pull/8541)\n* Renamed `to_string_in_display` to [`recursive_format_impl`]\n  [#8188](https://github.com/rust-lang/rust-clippy/pull/8188)\n\n### Enhancements\n\n* [`dbg_macro`]: The lint level can now be set with crate attributes and works inside macros\n  [#8411](https://github.com/rust-lang/rust-clippy/pull/8411)\n* [`ptr_as_ptr`]: Now works inside macros\n  [#8442](https://github.com/rust-lang/rust-clippy/pull/8442)\n* [`use_self`]: Now works for variants in match expressions\n  [#8456](https://github.com/rust-lang/rust-clippy/pull/8456)\n* [`await_holding_lock`]: Now lints for `parking_lot::{Mutex, RwLock}`\n  [#8419](https://github.com/rust-lang/rust-clippy/pull/8419)\n* [`recursive_format_impl`]: Now checks for format calls on `self`\n  [#8188](https://github.com/rust-lang/rust-clippy/pull/8188)\n\n### False Positive Fixes\n\n* [`new_without_default`]: No longer lints for `new()` methods with `#[doc(hidden)]`\n  [#8472](https://github.com/rust-lang/rust-clippy/pull/8472)\n* [`transmute_undefined_repr`]: No longer lints for single field structs with `#[repr(C)]`,\n  generic parameters, wide pointers, unions, tuples and allow several forms of type erasure\n  [#8425](https://github.com/rust-lang/rust-clippy/pull/8425)\n  [#8553](https://github.com/rust-lang/rust-clippy/pull/8553)\n  [#8440](https://github.com/rust-lang/rust-clippy/pull/8440)\n  [#8547](https://github.com/rust-lang/rust-clippy/pull/8547)\n* [`match_single_binding`], [`match_same_arms`], [`match_as_ref`], [`match_bool`]: No longer\n  lint `match` expressions with `cfg`ed arms\n  [#8443](https://github.com/rust-lang/rust-clippy/pull/8443)\n* [`single_component_path_imports`]: No longer lint on macros\n  [#8537](https://github.com/rust-lang/rust-clippy/pull/8537)\n* [`ptr_arg`]: Allow `&mut` arguments for `Cow<_>`\n  [#8552](https://github.com/rust-lang/rust-clippy/pull/8552)\n* [`needless_borrow`]: No longer lints for method calls\n  [#8441](https://github.com/rust-lang/rust-clippy/pull/8441)\n* [`match_same_arms`]: Now ensures that interposing arm patterns don't overlap\n  [#8232](https://github.com/rust-lang/rust-clippy/pull/8232)\n* [`default_trait_access`]: Now allows `Default::default` in update expressions\n  [#8433](https://github.com/rust-lang/rust-clippy/pull/8433)\n\n### Suggestion Fixes/Improvements\n\n* [`redundant_slicing`]: Fixed suggestion for a method calls\n  [#8218](https://github.com/rust-lang/rust-clippy/pull/8218)\n* [`map_flatten`]: Long suggestions will now be split up into two help messages\n  [#8520](https://github.com/rust-lang/rust-clippy/pull/8520)\n* [`unnecessary_lazy_evaluations`]: Now shows suggestions for longer code snippets\n  [#8543](https://github.com/rust-lang/rust-clippy/pull/8543)\n* [`unnecessary_sort_by`]: Now suggests `Reverse` including the path\n  [#8462](https://github.com/rust-lang/rust-clippy/pull/8462)\n* [`search_is_some`]: More suggestions are now `MachineApplicable`\n  [#8536](https://github.com/rust-lang/rust-clippy/pull/8536)\n\n### Documentation Improvements\n\n* [`new_without_default`]: Document `pub` requirement for the struct and fields\n  [#8429](https://github.com/rust-lang/rust-clippy/pull/8429)\n\n## Rust 1.60\n\nReleased 2022-04-07\n\n[View all 73 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-12-31T17%3A53%3A37Z..2022-02-10T17%3A31%3A37Z+base%3Amaster)\n\n### New Lints\n\n* [`single_char_lifetime_names`]\n  [#8236](https://github.com/rust-lang/rust-clippy/pull/8236)\n* [`iter_overeager_cloned`]\n  [#8203](https://github.com/rust-lang/rust-clippy/pull/8203)\n* [`transmute_undefined_repr`]\n  [#8398](https://github.com/rust-lang/rust-clippy/pull/8398)\n* [`default_union_representation`]\n  [#8289](https://github.com/rust-lang/rust-clippy/pull/8289)\n* [`manual_bits`]\n  [#8213](https://github.com/rust-lang/rust-clippy/pull/8213)\n* [`borrow_as_ptr`]\n  [#8210](https://github.com/rust-lang/rust-clippy/pull/8210)\n\n### Moves and Deprecations\n\n* Moved [`disallowed_methods`] and [`disallowed_types`] to `style` (now warn-by-default)\n  [#8261](https://github.com/rust-lang/rust-clippy/pull/8261)\n* Rename `ref_in_deref` to [`needless_borrow`]\n  [#8217](https://github.com/rust-lang/rust-clippy/pull/8217)\n* Moved [`mutex_atomic`] to `nursery` (now allow-by-default)\n  [#8260](https://github.com/rust-lang/rust-clippy/pull/8260)\n\n### Enhancements\n\n* [`ptr_arg`]: Now takes the argument usage into account and lints for mutable references\n  [#8271](https://github.com/rust-lang/rust-clippy/pull/8271)\n* [`unused_io_amount`]: Now supports async read and write traits\n  [#8179](https://github.com/rust-lang/rust-clippy/pull/8179)\n* [`while_let_on_iterator`]: Improved detection to catch more cases\n  [#8221](https://github.com/rust-lang/rust-clippy/pull/8221)\n* [`trait_duplication_in_bounds`]: Now covers trait functions with `Self` bounds\n  [#8252](https://github.com/rust-lang/rust-clippy/pull/8252)\n* [`unwrap_used`]: Now works for `.get(i).unwrap()` and `.get_mut(i).unwrap()`\n  [#8372](https://github.com/rust-lang/rust-clippy/pull/8372)\n* [`map_clone`]: The suggestion takes `msrv` into account\n  [#8280](https://github.com/rust-lang/rust-clippy/pull/8280)\n* [`manual_bits`] and [`borrow_as_ptr`]: Now track the `clippy::msrv` attribute\n  [#8280](https://github.com/rust-lang/rust-clippy/pull/8280)\n* [`disallowed_methods`]: Now works for methods on primitive types\n  [#8112](https://github.com/rust-lang/rust-clippy/pull/8112)\n* [`not_unsafe_ptr_arg_deref`]: Now works for type aliases\n  [#8273](https://github.com/rust-lang/rust-clippy/pull/8273)\n* [`needless_question_mark`]: Now works for async functions\n  [#8311](https://github.com/rust-lang/rust-clippy/pull/8311)\n* [`iter_not_returning_iterator`]: Now handles type projections\n  [#8228](https://github.com/rust-lang/rust-clippy/pull/8228)\n* [`wrong_self_convention`]: Now detects wrong `self` references in more cases\n  [#8208](https://github.com/rust-lang/rust-clippy/pull/8208)\n* [`single_match`]: Now works for `match` statements with tuples\n  [#8322](https://github.com/rust-lang/rust-clippy/pull/8322)\n\n### False Positive Fixes\n\n* [`erasing_op`]: No longer triggers if the output type changes\n  [#8204](https://github.com/rust-lang/rust-clippy/pull/8204)\n* [`if_same_then_else`]: No longer triggers for `if let` statements\n  [#8297](https://github.com/rust-lang/rust-clippy/pull/8297)\n* [`manual_memcpy`]: No longer lints on `VecDeque`\n  [#8226](https://github.com/rust-lang/rust-clippy/pull/8226)\n* [`trait_duplication_in_bounds`]: Now takes path segments into account\n  [#8315](https://github.com/rust-lang/rust-clippy/pull/8315)\n* [`deref_addrof`]: No longer lints when the dereference or borrow occurs in different a context\n  [#8268](https://github.com/rust-lang/rust-clippy/pull/8268)\n* [`type_repetition_in_bounds`]: Now checks for full equality to prevent false positives\n  [#8224](https://github.com/rust-lang/rust-clippy/pull/8224)\n* [`ptr_arg`]: No longer lint for mutable references in traits\n  [#8369](https://github.com/rust-lang/rust-clippy/pull/8369)\n* [`implicit_clone`]: No longer lints for double references\n  [#8231](https://github.com/rust-lang/rust-clippy/pull/8231)\n* [`needless_lifetimes`]: No longer lints lifetimes for explicit `self` types\n  [#8278](https://github.com/rust-lang/rust-clippy/pull/8278)\n* [`op_ref`]: No longer lints in `BinOp` impl if that can cause recursion\n  [#8298](https://github.com/rust-lang/rust-clippy/pull/8298)\n* [`enum_variant_names`]: No longer triggers for empty variant names\n  [#8329](https://github.com/rust-lang/rust-clippy/pull/8329)\n* [`redundant_closure`]: No longer lints for `Arc<T>` or `Rc<T>`\n  [#8193](https://github.com/rust-lang/rust-clippy/pull/8193)\n* [`iter_not_returning_iterator`]: No longer lints on trait implementations but therefore on trait definitions\n  [#8228](https://github.com/rust-lang/rust-clippy/pull/8228)\n* [`single_match`]: No longer lints on exhaustive enum patterns without a wildcard\n  [#8322](https://github.com/rust-lang/rust-clippy/pull/8322)\n* [`manual_swap`]: No longer lints on cases that involve automatic dereferences\n  [#8220](https://github.com/rust-lang/rust-clippy/pull/8220)\n* [`useless_format`]: Now works for implicit named arguments\n  [#8295](https://github.com/rust-lang/rust-clippy/pull/8295)\n\n### Suggestion Fixes/Improvements\n\n* [`needless_borrow`]: Prevent mutable borrows being moved and suggest removing the borrow on method calls\n  [#8217](https://github.com/rust-lang/rust-clippy/pull/8217)\n* [`chars_next_cmp`]: Correctly escapes the suggestion\n  [#8376](https://github.com/rust-lang/rust-clippy/pull/8376)\n* [`explicit_write`]: Add suggestions for `write!`s with format arguments\n  [#8365](https://github.com/rust-lang/rust-clippy/pull/8365)\n* [`manual_memcpy`]: Suggests `copy_from_slice` when applicable\n  [#8226](https://github.com/rust-lang/rust-clippy/pull/8226)\n* [`or_fun_call`]: Improved suggestion display for long arguments\n  [#8292](https://github.com/rust-lang/rust-clippy/pull/8292)\n* [`unnecessary_cast`]: Now correctly includes the sign\n  [#8350](https://github.com/rust-lang/rust-clippy/pull/8350)\n* [`cmp_owned`]: No longer flips the comparison order\n  [#8299](https://github.com/rust-lang/rust-clippy/pull/8299)\n* [`explicit_counter_loop`]: Now correctly suggests `iter()` on references\n  [#8382](https://github.com/rust-lang/rust-clippy/pull/8382)\n\n### ICE Fixes\n\n* [`manual_split_once`]\n  [#8250](https://github.com/rust-lang/rust-clippy/pull/8250)\n\n### Documentation Improvements\n\n* [`map_flatten`]: Add documentation for the `Option` type\n  [#8354](https://github.com/rust-lang/rust-clippy/pull/8354)\n* Document that Clippy's driver might use a different code generation than rustc\n  [#8037](https://github.com/rust-lang/rust-clippy/pull/8037)\n* Clippy's lint list will now automatically focus the search box\n  [#8343](https://github.com/rust-lang/rust-clippy/pull/8343)\n\n### Others\n\n* Clippy now warns if we find multiple Clippy config files exist\n  [#8326](https://github.com/rust-lang/rust-clippy/pull/8326)\n\n## Rust 1.59\n\nReleased 2022-02-24\n\n[View all 94 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-11-04T12%3A40%3A18Z..2021-12-30T13%3A36%3A20Z+base%3Amaster)\n\n### New Lints\n\n* [`index_refutable_slice`]\n  [#7643](https://github.com/rust-lang/rust-clippy/pull/7643)\n* [`needless_splitn`]\n  [#7896](https://github.com/rust-lang/rust-clippy/pull/7896)\n* [`unnecessary_to_owned`]\n  [#7978](https://github.com/rust-lang/rust-clippy/pull/7978)\n* [`needless_late_init`]\n  [#7995](https://github.com/rust-lang/rust-clippy/pull/7995)\n* [`octal_escapes`] [#8007](https://github.com/rust-lang/rust-clippy/pull/8007)\n* [`return_self_not_must_use`]\n  [#8071](https://github.com/rust-lang/rust-clippy/pull/8071)\n* [`init_numbered_fields`]\n  [#8170](https://github.com/rust-lang/rust-clippy/pull/8170)\n\n### Moves and Deprecations\n\n* Move `if_then_panic` to `pedantic` and rename to [`manual_assert`] (now\n  allow-by-default) [#7810](https://github.com/rust-lang/rust-clippy/pull/7810)\n* Rename `disallow_type` to [`disallowed_types`] and `disallowed_method` to\n  [`disallowed_methods`]\n  [#7984](https://github.com/rust-lang/rust-clippy/pull/7984)\n* Move [`map_flatten`] to `complexity` (now warn-by-default)\n  [#8054](https://github.com/rust-lang/rust-clippy/pull/8054)\n\n### Enhancements\n\n* [`match_overlapping_arm`]: Fix false negative where after included ranges,\n  overlapping ranges weren't linted anymore\n  [#7909](https://github.com/rust-lang/rust-clippy/pull/7909)\n* [`deprecated_cfg_attr`]: Now takes the specified MSRV into account\n  [#7944](https://github.com/rust-lang/rust-clippy/pull/7944)\n* [`cast_lossless`]: Now also lints for `bool` to integer casts\n  [#7948](https://github.com/rust-lang/rust-clippy/pull/7948)\n* [`let_underscore_lock`]: Also emit lints for the `parking_lot` crate\n  [#7957](https://github.com/rust-lang/rust-clippy/pull/7957)\n* [`needless_borrow`]\n  [#7977](https://github.com/rust-lang/rust-clippy/pull/7977)\n    * Lint when a borrow is auto-dereffed more than once\n    * Lint in the trailing expression of a block for a match arm\n* [`strlen_on_c_strings`]\n  [8001](https://github.com/rust-lang/rust-clippy/pull/8001)\n    * Lint when used without a fully-qualified path\n    * Suggest removing the surrounding unsafe block when possible\n* [`non_ascii_literal`]: Now also lints on `char`s, not just `string`s\n  [#8034](https://github.com/rust-lang/rust-clippy/pull/8034)\n* [`single_char_pattern`]: Now also lints on `split_inclusive`, `split_once`,\n  `rsplit_once`, `replace`, and `replacen`\n  [#8077](https://github.com/rust-lang/rust-clippy/pull/8077)\n* [`unwrap_or_else_default`]: Now also lints on `std` constructors like\n  `Vec::new`, `HashSet::new`, and `HashMap::new`\n  [#8163](https://github.com/rust-lang/rust-clippy/pull/8163)\n* [`shadow_reuse`]: Now also lints on shadowed `if let` bindings, instead of\n  [`shadow_unrelated`]\n  [#8165](https://github.com/rust-lang/rust-clippy/pull/8165)\n\n### False Positive Fixes\n\n* [`or_fun_call`], [`unnecessary_lazy_evaluations`]: Improve heuristics, so that\n  cheap functions (e.g. calling `.len()` on a `Vec`) won't get linted anymore\n  [#7639](https://github.com/rust-lang/rust-clippy/pull/7639)\n* [`manual_split_once`]: No longer suggests code changing the original behavior\n  [#7896](https://github.com/rust-lang/rust-clippy/pull/7896)\n* Don't show [`no_effect`] or [`unnecessary_operation`] warning for unit struct\n  implementing `FnOnce`\n  [#7898](https://github.com/rust-lang/rust-clippy/pull/7898)\n* [`semicolon_if_nothing_returned`]: Fixed a bug, where the lint wrongly\n  triggered on `let-else` statements\n  [#7955](https://github.com/rust-lang/rust-clippy/pull/7955)\n* [`if_then_some_else_none`]: No longer lints if there is an early return\n  [#7980](https://github.com/rust-lang/rust-clippy/pull/7980)\n* [`needless_collect`]: No longer suggests removal of `collect` when removal\n  would create code requiring mutably borrowing a value multiple times\n  [#7982](https://github.com/rust-lang/rust-clippy/pull/7982)\n* [`shadow_same`]: Fix false positive for `async` function's params\n  [#7997](https://github.com/rust-lang/rust-clippy/pull/7997)\n* [`suboptimal_flops`]: No longer triggers in constant functions\n  [#8009](https://github.com/rust-lang/rust-clippy/pull/8009)\n* [`type_complexity`]: No longer lints on associated types in traits\n  [#8030](https://github.com/rust-lang/rust-clippy/pull/8030)\n* [`question_mark`]: No longer lints if returned object is not local\n  [#8080](https://github.com/rust-lang/rust-clippy/pull/8080)\n* [`option_if_let_else`]: No longer lint on complex sub-patterns\n  [#8086](https://github.com/rust-lang/rust-clippy/pull/8086)\n* [`blocks_in_if_conditions`]: No longer lints on empty closures\n  [#8100](https://github.com/rust-lang/rust-clippy/pull/8100)\n* [`enum_variant_names`]: No longer lint when first prefix is only a substring\n  of a camel-case word\n  [#8127](https://github.com/rust-lang/rust-clippy/pull/8127)\n* [`identity_op`]: Only lint on integral operands\n  [#8183](https://github.com/rust-lang/rust-clippy/pull/8183)\n\n### Suggestion Fixes/Improvements\n\n* [`search_is_some`]: Fix suggestion for `any()` not taking item by reference\n  [#7463](https://github.com/rust-lang/rust-clippy/pull/7463)\n* [`almost_swapped`]: Now detects if there is a `no_std` or `no_core` attribute\n  and adapts the suggestion accordingly\n  [#7877](https://github.com/rust-lang/rust-clippy/pull/7877)\n* [`redundant_pattern_matching`]: Fix suggestion for deref expressions\n  [#7949](https://github.com/rust-lang/rust-clippy/pull/7949)\n* [`explicit_counter_loop`]: Now also produces a suggestion for non-`usize`\n  types [#7950](https://github.com/rust-lang/rust-clippy/pull/7950)\n* [`manual_map`]: Fix suggestion when used with unsafe functions and blocks\n  [#7968](https://github.com/rust-lang/rust-clippy/pull/7968)\n* [`option_map_or_none`]: Suggest `map` over `and_then` when possible\n  [#7971](https://github.com/rust-lang/rust-clippy/pull/7971)\n* [`option_if_let_else`]: No longer expands macros in the suggestion\n  [#7974](https://github.com/rust-lang/rust-clippy/pull/7974)\n* [`iter_cloned_collect`]: Suggest `copied` over `cloned` when possible\n  [#8006](https://github.com/rust-lang/rust-clippy/pull/8006)\n* [`doc_markdown`]: No longer uses inline hints to improve readability of\n  suggestion [#8011](https://github.com/rust-lang/rust-clippy/pull/8011)\n* [`needless_question_mark`]: Now better explains the suggestion\n  [#8028](https://github.com/rust-lang/rust-clippy/pull/8028)\n* [`single_char_pattern`]: Escape backslash `\\` in suggestion\n  [#8067](https://github.com/rust-lang/rust-clippy/pull/8067)\n* [`needless_bool`]: Suggest `a != b` over `!(a == b)`\n  [#8117](https://github.com/rust-lang/rust-clippy/pull/8117)\n* [`iter_skip_next`]: Suggest to add a `mut` if it is necessary in order to\n  apply this lints suggestion\n  [#8133](https://github.com/rust-lang/rust-clippy/pull/8133)\n* [`neg_multiply`]: Now produces a suggestion\n  [#8144](https://github.com/rust-lang/rust-clippy/pull/8144)\n* [`needless_return`]: Now suggests the unit type `()` over an empty block `{}`\n  in match arms [#8185](https://github.com/rust-lang/rust-clippy/pull/8185)\n* [`suboptimal_flops`]: Now gives a syntactically correct suggestion for\n  `to_radians` and `to_degrees`\n  [#8187](https://github.com/rust-lang/rust-clippy/pull/8187)\n\n### ICE Fixes\n\n* [`undocumented_unsafe_blocks`]\n  [#7945](https://github.com/rust-lang/rust-clippy/pull/7945)\n  [#7988](https://github.com/rust-lang/rust-clippy/pull/7988)\n* [`unnecessary_cast`]\n  [#8167](https://github.com/rust-lang/rust-clippy/pull/8167)\n\n### Documentation Improvements\n\n* [`print_stdout`], [`print_stderr`], [`dbg_macro`]: Document how the lint level\n  can be changed crate-wide\n  [#8040](https://github.com/rust-lang/rust-clippy/pull/8040)\n* Added a note to the `README` that config changes don't apply to already\n  compiled code [#8175](https://github.com/rust-lang/rust-clippy/pull/8175)\n\n### Others\n\n* [Clippy's lint\n  list](https://rust-lang.github.io/rust-clippy/master/index.html) now displays\n  the version a lint was added. :tada:\n  [#7813](https://github.com/rust-lang/rust-clippy/pull/7813)\n* New and improved issue templates\n  [#8032](https://github.com/rust-lang/rust-clippy/pull/8032)\n* _Dev:_ Add `cargo dev lint` command, to run your modified Clippy version on a\n  file [#7917](https://github.com/rust-lang/rust-clippy/pull/7917)\n\n## Rust 1.58\n\nReleased 2022-01-13\n\n[View all 68 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-10-07T09%3A49%3A18Z..2021-11-04T12%3A20%3A12Z+base%3Amaster)\n\n### Rust 1.58.1\n\n* Move [`non_send_fields_in_send_ty`] to `nursery` (now allow-by-default)\n  [#8075](https://github.com/rust-lang/rust-clippy/pull/8075)\n* [`useless_format`]: Handle implicit named arguments\n  [#8295](https://github.com/rust-lang/rust-clippy/pull/8295)\n\n### New lints\n\n* [`transmute_num_to_bytes`]\n  [#7805](https://github.com/rust-lang/rust-clippy/pull/7805)\n* [`match_str_case_mismatch`]\n  [#7806](https://github.com/rust-lang/rust-clippy/pull/7806)\n* [`format_in_format_args`], [`to_string_in_format_args`]\n  [#7743](https://github.com/rust-lang/rust-clippy/pull/7743)\n* [`uninit_vec`]\n  [#7682](https://github.com/rust-lang/rust-clippy/pull/7682)\n* [`fn_to_numeric_cast_any`]\n  [#7705](https://github.com/rust-lang/rust-clippy/pull/7705)\n* [`undocumented_unsafe_blocks`]\n  [#7748](https://github.com/rust-lang/rust-clippy/pull/7748)\n* [`trailing_empty_array`]\n  [#7838](https://github.com/rust-lang/rust-clippy/pull/7838)\n* [`string_slice`]\n  [#7878](https://github.com/rust-lang/rust-clippy/pull/7878)\n\n### Moves or deprecations of lints\n\n* Move [`non_send_fields_in_send_ty`] to `suspicious`\n  [#7874](https://github.com/rust-lang/rust-clippy/pull/7874)\n* Move [`non_ascii_literal`] to `restriction`\n  [#7907](https://github.com/rust-lang/rust-clippy/pull/7907)\n\n### Changes that expand what code existing lints cover\n\n* [`question_mark`] now covers `Result`\n  [#7840](https://github.com/rust-lang/rust-clippy/pull/7840)\n* Make [`useless_format`] recognize bare `format!(\"\")`\n  [#7801](https://github.com/rust-lang/rust-clippy/pull/7801)\n* Lint on underscored variables with no side effects in [`no_effect`]\n  [#7775](https://github.com/rust-lang/rust-clippy/pull/7775)\n* Expand [`match_ref_pats`] to check for multiple reference patterns\n  [#7800](https://github.com/rust-lang/rust-clippy/pull/7800)\n\n### False positive fixes\n\n* Fix false positive of [`implicit_saturating_sub`] with `else` clause\n  [#7832](https://github.com/rust-lang/rust-clippy/pull/7832)\n* Fix [`question_mark`] when there is call in conditional predicate\n  [#7860](https://github.com/rust-lang/rust-clippy/pull/7860)\n* [`mut_mut`] no longer lints when type is defined in external macros\n  [#7795](https://github.com/rust-lang/rust-clippy/pull/7795)\n* Avoid [`eq_op`] in test functions\n  [#7811](https://github.com/rust-lang/rust-clippy/pull/7811)\n* [`cast_possible_truncation`] no longer lints when cast is coming from `signum`\n  method call [#7850](https://github.com/rust-lang/rust-clippy/pull/7850)\n* [`match_str_case_mismatch`] no longer lints on uncased characters\n  [#7865](https://github.com/rust-lang/rust-clippy/pull/7865)\n* [`ptr_arg`] no longer lints references to type aliases\n  [#7890](https://github.com/rust-lang/rust-clippy/pull/7890)\n* [`missing_safety_doc`] now also accepts \"implementation safety\" headers\n  [#7856](https://github.com/rust-lang/rust-clippy/pull/7856)\n* [`missing_safety_doc`] no longer lints if any parent has `#[doc(hidden)]`\n  attribute [#7849](https://github.com/rust-lang/rust-clippy/pull/7849)\n* [`if_not_else`] now ignores else-if statements\n  [#7895](https://github.com/rust-lang/rust-clippy/pull/7895)\n* Avoid linting [`cast_possible_truncation`] on bit-reducing operations\n  [#7819](https://github.com/rust-lang/rust-clippy/pull/7819)\n* Avoid linting [`field_reassign_with_default`] when `Drop` and `Copy` are\n  involved [#7794](https://github.com/rust-lang/rust-clippy/pull/7794)\n* [`unnecessary_sort_by`] now checks if argument implements `Ord` trait\n  [#7824](https://github.com/rust-lang/rust-clippy/pull/7824)\n* Fix false positive in [`match_overlapping_arm`]\n  [#7847](https://github.com/rust-lang/rust-clippy/pull/7847)\n* Prevent [`needless_lifetimes`] false positive in `async` function definition\n  [#7901](https://github.com/rust-lang/rust-clippy/pull/7901)\n\n### Suggestion fixes/improvements\n\n* Keep an initial `::` when [`doc_markdown`] suggests to use ticks\n  [#7916](https://github.com/rust-lang/rust-clippy/pull/7916)\n* Add a machine applicable suggestion for the [`doc_markdown`] missing backticks\n  lint [#7904](https://github.com/rust-lang/rust-clippy/pull/7904)\n* [`equatable_if_let`] no longer expands macros in the suggestion\n  [#7788](https://github.com/rust-lang/rust-clippy/pull/7788)\n* Make [`shadow_reuse`] suggestion less verbose\n  [#7782](https://github.com/rust-lang/rust-clippy/pull/7782)\n\n### ICE fixes\n\n* Fix ICE in [`enum_variant_names`]\n  [#7873](https://github.com/rust-lang/rust-clippy/pull/7873)\n* Fix ICE in [`undocumented_unsafe_blocks`]\n  [#7891](https://github.com/rust-lang/rust-clippy/pull/7891)\n\n### Documentation improvements\n\n* Fixed naive doc formatting for `#[must_use]` lints ([`must_use_unit`],\n  [`double_must_use`], [`must_use_candidate`], [`let_underscore_must_use`])\n  [#7827](https://github.com/rust-lang/rust-clippy/pull/7827)\n* Fix typo in example for [`match_result_ok`]\n  [#7815](https://github.com/rust-lang/rust-clippy/pull/7815)\n\n### Others\n\n* Allow giving reasons for [`disallowed_types`]\n  [#7791](https://github.com/rust-lang/rust-clippy/pull/7791)\n* Fix [`manual_assert`] and [`match_wild_err_arm`] for `#![no_std]` and Rust\n  2021. [#7851](https://github.com/rust-lang/rust-clippy/pull/7851)\n* Fix regression in [`semicolon_if_nothing_returned`] on macros containing while\n  loops [#7789](https://github.com/rust-lang/rust-clippy/pull/7789)\n* Added a new configuration `literal-suffix-style` to enforce a certain style\n  writing [`unseparated_literal_suffix`]\n  [#7726](https://github.com/rust-lang/rust-clippy/pull/7726)\n\n## Rust 1.57\n\nReleased 2021-12-02\n\n[View all 148 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-08-12T20%3A36%3A04Z..2021-11-03T17%3A57%3A59Z+base%3Amaster)\n\n### New Lints\n\n* [`negative_feature_names`]\n  [#7539](https://github.com/rust-lang/rust-clippy/pull/7539)\n* [`redundant_feature_names`]\n  [#7539](https://github.com/rust-lang/rust-clippy/pull/7539)\n* [`mod_module_files`]\n  [#7543](https://github.com/rust-lang/rust-clippy/pull/7543)\n* [`self_named_module_files`]\n  [#7543](https://github.com/rust-lang/rust-clippy/pull/7543)\n* [`manual_split_once`]\n  [#7565](https://github.com/rust-lang/rust-clippy/pull/7565)\n* [`derivable_impls`]\n  [#7570](https://github.com/rust-lang/rust-clippy/pull/7570)\n* [`needless_option_as_deref`]\n  [#7596](https://github.com/rust-lang/rust-clippy/pull/7596)\n* [`iter_not_returning_iterator`]\n  [#7610](https://github.com/rust-lang/rust-clippy/pull/7610)\n* [`same_name_method`]\n  [#7653](https://github.com/rust-lang/rust-clippy/pull/7653)\n* [`manual_assert`] [#7669](https://github.com/rust-lang/rust-clippy/pull/7669)\n* [`non_send_fields_in_send_ty`]\n  [#7709](https://github.com/rust-lang/rust-clippy/pull/7709)\n* [`equatable_if_let`]\n  [#7762](https://github.com/rust-lang/rust-clippy/pull/7762)\n\n### Moves and Deprecations\n\n* Move [`shadow_unrelated`] to `restriction`\n  [#7338](https://github.com/rust-lang/rust-clippy/pull/7338)\n* Move [`option_if_let_else`] to `nursery`\n  [#7568](https://github.com/rust-lang/rust-clippy/pull/7568)\n* Move [`branches_sharing_code`] to `nursery`\n  [#7595](https://github.com/rust-lang/rust-clippy/pull/7595)\n* Rename `if_let_some_result` to [`match_result_ok`] which now also handles\n  `while let` cases [#7608](https://github.com/rust-lang/rust-clippy/pull/7608)\n* Move [`many_single_char_names`] to `pedantic`\n  [#7671](https://github.com/rust-lang/rust-clippy/pull/7671)\n* Move [`float_cmp`] to `pedantic`\n  [#7692](https://github.com/rust-lang/rust-clippy/pull/7692)\n* Rename `box_vec` to [`box_collection`] and lint on more general cases\n  [#7693](https://github.com/rust-lang/rust-clippy/pull/7693)\n* Uplift `invalid_atomic_ordering` to rustc\n  [rust-lang/rust#84039](https://github.com/rust-lang/rust/pull/84039)\n\n### Enhancements\n\n* Rewrite the `shadow*` lints, so that they find a lot more shadows and are not\n  limited to certain patterns\n  [#7338](https://github.com/rust-lang/rust-clippy/pull/7338)\n* The `avoid-breaking-exported-api` configuration now also works for\n  [`box_collection`], [`redundant_allocation`], [`rc_buffer`], [`vec_box`],\n  [`option_option`], [`linkedlist`], [`rc_mutex`]\n  [#7560](https://github.com/rust-lang/rust-clippy/pull/7560)\n* [`unnecessary_unwrap`]: Now also checks for `expect`s\n  [#7584](https://github.com/rust-lang/rust-clippy/pull/7584)\n* [`disallowed_methods`]: Allow adding a reason that will be displayed with the\n  lint message\n  [#7621](https://github.com/rust-lang/rust-clippy/pull/7621)\n* [`approx_constant`]: Now checks the MSRV for `LOG10_2` and `LOG2_10`\n  [#7629](https://github.com/rust-lang/rust-clippy/pull/7629)\n* [`approx_constant`]: Add `TAU`\n  [#7642](https://github.com/rust-lang/rust-clippy/pull/7642)\n* [`needless_borrow`]: Now also lints on needless mutable borrows\n  [#7657](https://github.com/rust-lang/rust-clippy/pull/7657)\n* [`missing_safety_doc`]: Now also lints on unsafe traits\n  [#7734](https://github.com/rust-lang/rust-clippy/pull/7734)\n\n### False Positive Fixes\n\n* [`manual_map`]: No longer lints when the option is borrowed in the match and\n  also consumed in the arm\n  [#7531](https://github.com/rust-lang/rust-clippy/pull/7531)\n* [`filter_next`]: No longer lints if `filter` method is not the\n  `Iterator::filter` method\n  [#7562](https://github.com/rust-lang/rust-clippy/pull/7562)\n* [`manual_flatten`]: No longer lints if expression is used after `if let`\n  [#7566](https://github.com/rust-lang/rust-clippy/pull/7566)\n* [`option_if_let_else`]: Multiple fixes\n  [#7573](https://github.com/rust-lang/rust-clippy/pull/7573)\n    * `break` and `continue` statements local to the would-be closure are\n      allowed\n    * Don't lint in const contexts\n    * Don't lint when yield expressions are used\n    * Don't lint when the captures made by the would-be closure conflict with\n      the other branch\n    * Don't lint when a field of a local is used when the type could be\n      potentially moved from\n    * In some cases, don't lint when scrutinee expression conflicts with the\n      captures of the would-be closure\n* [`redundant_allocation`]: No longer lints on `Box<Box<dyn T>>` which replaces\n  wide pointers with thin pointers\n  [#7592](https://github.com/rust-lang/rust-clippy/pull/7592)\n* [`bool_assert_comparison`]: No longer lints on types that do not implement the\n  `Not` trait with `Output = bool`\n  [#7605](https://github.com/rust-lang/rust-clippy/pull/7605)\n* [`mut_range_bound`]: No longer lints on range bound mutations, that are\n  immediately followed by a `break;`\n  [#7607](https://github.com/rust-lang/rust-clippy/pull/7607)\n* [`mutable_key_type`]: Improve accuracy and document remaining false positives\n  and false negatives\n  [#7640](https://github.com/rust-lang/rust-clippy/pull/7640)\n* [`redundant_closure`]: Rewrite the lint to fix various false positives and\n  false negatives [#7661](https://github.com/rust-lang/rust-clippy/pull/7661)\n* [`large_enum_variant`]: No longer wrongly identifies the second largest\n  variant [#7677](https://github.com/rust-lang/rust-clippy/pull/7677)\n* [`needless_return`]: No longer lints on let-else expressions\n  [#7685](https://github.com/rust-lang/rust-clippy/pull/7685)\n* [`suspicious_else_formatting`]: No longer lints in proc-macros\n  [#7707](https://github.com/rust-lang/rust-clippy/pull/7707)\n* [`excessive_precision`]: No longer lints when in some cases the float was\n  already written in the shortest form\n  [#7722](https://github.com/rust-lang/rust-clippy/pull/7722)\n* [`doc_markdown`]: No longer lints on intra-doc links\n  [#7772](https://github.com/rust-lang/rust-clippy/pull/7772)\n\n### Suggestion Fixes/Improvements\n\n* [`unnecessary_operation`]: Recommend using an `assert!` instead of using a\n  function call in an indexing operation\n  [#7453](https://github.com/rust-lang/rust-clippy/pull/7453)\n* [`manual_split_once`]: Produce semantically equivalent suggestion when\n  `rsplitn` is used [#7663](https://github.com/rust-lang/rust-clippy/pull/7663)\n* [`while_let_on_iterator`]: Produce correct suggestion when using `&mut`\n  [#7690](https://github.com/rust-lang/rust-clippy/pull/7690)\n* [`manual_assert`]: No better handles complex conditions\n  [#7741](https://github.com/rust-lang/rust-clippy/pull/7741)\n* Correctly handle signs in exponents in numeric literals lints\n  [#7747](https://github.com/rust-lang/rust-clippy/pull/7747)\n* [`suspicious_map`]: Now also suggests to use `inspect` as an alternative\n  [#7770](https://github.com/rust-lang/rust-clippy/pull/7770)\n* Drop exponent from suggestion if it is 0 in numeric literals lints\n  [#7774](https://github.com/rust-lang/rust-clippy/pull/7774)\n\n### ICE Fixes\n\n* [`implicit_hasher`]\n  [#7761](https://github.com/rust-lang/rust-clippy/pull/7761)\n\n### Others\n\n* Clippy now uses the 2021\n  [Edition!](https://www.youtube.com/watch?v=q0aNduqb2Ro)\n  [#7664](https://github.com/rust-lang/rust-clippy/pull/7664)\n\n## Rust 1.56\n\nReleased 2021-10-21\n\n[View all 38 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-07-19T14%3A33%3A33Z..2021-08-12T09%3A28%3A38Z+base%3Amaster)\n\n### New Lints\n\n* [`unwrap_or_else_default`]\n  [#7516](https://github.com/rust-lang/rust-clippy/pull/7516)\n\n### Enhancements\n\n* [`needless_continue`]: Now also lints in `loop { continue; }` case\n  [#7477](https://github.com/rust-lang/rust-clippy/pull/7477)\n* [`disallowed_types`]: Now also primitive types can be disallowed\n  [#7488](https://github.com/rust-lang/rust-clippy/pull/7488)\n* [`manual_swap`]: Now also lints on xor swaps\n  [#7506](https://github.com/rust-lang/rust-clippy/pull/7506)\n* [`map_flatten`]: Now also lints on the `Result` type\n  [#7522](https://github.com/rust-lang/rust-clippy/pull/7522)\n* [`no_effect`]: Now also lints on inclusive ranges\n  [#7556](https://github.com/rust-lang/rust-clippy/pull/7556)\n\n### False Positive Fixes\n\n* [`nonstandard_macro_braces`]: No longer lints on similar named nested macros\n  [#7478](https://github.com/rust-lang/rust-clippy/pull/7478)\n* [`too_many_lines`]: No longer lints in closures to avoid duplicated diagnostics\n  [#7534](https://github.com/rust-lang/rust-clippy/pull/7534)\n* [`similar_names`]: No longer complains about `iter` and `item` being too\n  similar [#7546](https://github.com/rust-lang/rust-clippy/pull/7546)\n\n### Suggestion Fixes/Improvements\n\n* [`similar_names`]: No longer suggests to insert or add an underscore as a fix\n  [#7221](https://github.com/rust-lang/rust-clippy/pull/7221)\n* [`new_without_default`]: No longer shows the full qualified type path when\n  suggesting adding a `Default` implementation\n  [#7493](https://github.com/rust-lang/rust-clippy/pull/7493)\n* [`while_let_on_iterator`]: Now suggests re-borrowing mutable references\n  [#7520](https://github.com/rust-lang/rust-clippy/pull/7520)\n* [`extend_with_drain`]: Improve code suggestion for mutable and immutable\n  references [#7533](https://github.com/rust-lang/rust-clippy/pull/7533)\n* [`trivially_copy_pass_by_ref`]: Now properly handles `Self` type\n  [#7535](https://github.com/rust-lang/rust-clippy/pull/7535)\n* [`never_loop`]: Now suggests using `if let` instead of a `for` loop when\n  applicable [#7541](https://github.com/rust-lang/rust-clippy/pull/7541)\n\n### Documentation Improvements\n\n* Clippy now uses a lint to generate its lint documentation. [Lints all the way\n  down](https://en.wikipedia.org/wiki/Turtles_all_the_way_down).\n  [#7502](https://github.com/rust-lang/rust-clippy/pull/7502)\n* Reworked Clippy's website:\n  [#7172](https://github.com/rust-lang/rust-clippy/issues/7172)\n  [#7279](https://github.com/rust-lang/rust-clippy/pull/7279)\n  * Added applicability information about lints\n  * Added a link to jump into the implementation\n  * Improved loading times\n  * Adapted some styling\n* `cargo clippy --help` now also explains the `--fix` and `--no-deps` flag\n  [#7492](https://github.com/rust-lang/rust-clippy/pull/7492)\n* [`unnested_or_patterns`]: Removed `or_patterns` feature gate in the code\n  example [#7507](https://github.com/rust-lang/rust-clippy/pull/7507)\n\n## Rust 1.55\n\nReleased 2021-09-09\n\n[View all 83 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-06-03T07%3A23%3A59Z..2021-07-29T11%3A47%3A32Z+base%3Amaster)\n\n### Important Changes\n\n* Stabilized `cargo clippy --fix` :tada:\n  [#7405](https://github.com/rust-lang/rust-clippy/pull/7405)\n\n### New Lints\n\n* [`rc_mutex`]\n  [#7316](https://github.com/rust-lang/rust-clippy/pull/7316)\n* [`nonstandard_macro_braces`]\n  [#7299](https://github.com/rust-lang/rust-clippy/pull/7299)\n* [`strlen_on_c_strings`]\n  [#7243](https://github.com/rust-lang/rust-clippy/pull/7243)\n* [`self_named_constructors`]\n  [#7403](https://github.com/rust-lang/rust-clippy/pull/7403)\n* [`disallowed_script_idents`]\n  [#7400](https://github.com/rust-lang/rust-clippy/pull/7400)\n* [`disallowed_types`]\n  [#7315](https://github.com/rust-lang/rust-clippy/pull/7315)\n* [`missing_enforced_import_renames`]\n  [#7300](https://github.com/rust-lang/rust-clippy/pull/7300)\n* [`extend_with_drain`]\n  [#7270](https://github.com/rust-lang/rust-clippy/pull/7270)\n\n### Moves and Deprecations\n\n* Moved [`from_iter_instead_of_collect`] to `pedantic`\n  [#7375](https://github.com/rust-lang/rust-clippy/pull/7375)\n* Added `suspicious` as a new lint group for *code that is most likely wrong or useless*\n  [#7350](https://github.com/rust-lang/rust-clippy/pull/7350)\n  * Moved [`blanket_clippy_restriction_lints`] to `suspicious`\n  * Moved [`empty_loop`] to `suspicious`\n  * Moved [`eval_order_dependence`] to `suspicious`\n  * Moved [`float_equality_without_abs`] to `suspicious`\n  * Moved [`for_loops_over_fallibles`] to `suspicious`\n  * Moved [`misrefactored_assign_op`] to `suspicious`\n  * Moved [`mut_range_bound`] to `suspicious`\n  * Moved [`mutable_key_type`] to `suspicious`\n  * Moved [`suspicious_arithmetic_impl`] to `suspicious`\n  * Moved [`suspicious_assignment_formatting`] to `suspicious`\n  * Moved [`suspicious_else_formatting`] to `suspicious`\n  * Moved [`suspicious_map`] to `suspicious`\n  * Moved [`suspicious_op_assign_impl`] to `suspicious`\n  * Moved [`suspicious_unary_op_formatting`] to `suspicious`\n\n### Enhancements\n\n* [`while_let_on_iterator`]: Now suggests `&mut iter` inside closures\n  [#7262](https://github.com/rust-lang/rust-clippy/pull/7262)\n* [`doc_markdown`]:\n  * Now detects unbalanced ticks\n    [#7357](https://github.com/rust-lang/rust-clippy/pull/7357)\n  * Add `FreeBSD` to the default configuration as an allowed identifier\n    [#7334](https://github.com/rust-lang/rust-clippy/pull/7334)\n* [`wildcard_enum_match_arm`], [`match_wildcard_for_single_variants`]: Now allows wildcards for enums with unstable\n  or hidden variants\n  [#7407](https://github.com/rust-lang/rust-clippy/pull/7407)\n* [`redundant_allocation`]: Now additionally supports the `Arc<>` type\n  [#7308](https://github.com/rust-lang/rust-clippy/pull/7308)\n* [`disallowed_names`]: Now allows disallowed names in test code\n  [#7379](https://github.com/rust-lang/rust-clippy/pull/7379)\n* [`redundant_closure`]: Suggests `&mut` for `FnMut`\n  [#7437](https://github.com/rust-lang/rust-clippy/pull/7437)\n* [`disallowed_methods`], [`disallowed_types`]: The configuration values `disallowed-method` and `disallowed-type`\n  no longer require fully qualified paths\n  [#7345](https://github.com/rust-lang/rust-clippy/pull/7345)\n* [`zst_offset`]: Fixed lint invocation after it was accidentally suppressed\n  [#7396](https://github.com/rust-lang/rust-clippy/pull/7396)\n\n### False Positive Fixes\n\n* [`default_numeric_fallback`]: No longer lints on float literals as function arguments\n  [#7446](https://github.com/rust-lang/rust-clippy/pull/7446)\n* [`use_self`]: No longer lints on type parameters\n  [#7288](https://github.com/rust-lang/rust-clippy/pull/7288)\n* [`unimplemented`]: Now ignores the `assert` and `debug_assert` macros\n  [#7439](https://github.com/rust-lang/rust-clippy/pull/7439)\n* [`branches_sharing_code`]: Now always checks for block expressions\n  [#7462](https://github.com/rust-lang/rust-clippy/pull/7462)\n* [`field_reassign_with_default`]: No longer triggers in macros\n  [#7160](https://github.com/rust-lang/rust-clippy/pull/7160)\n* [`redundant_clone`]: No longer lints on required clones for borrowed data\n  [#7346](https://github.com/rust-lang/rust-clippy/pull/7346)\n* [`default_numeric_fallback`]: No longer triggers in external macros\n  [#7325](https://github.com/rust-lang/rust-clippy/pull/7325)\n* [`needless_bool`]: No longer lints in macros\n  [#7442](https://github.com/rust-lang/rust-clippy/pull/7442)\n* [`useless_format`]: No longer triggers when additional text is being appended\n  [#7442](https://github.com/rust-lang/rust-clippy/pull/7442)\n* [`assertions_on_constants`]: `cfg!(...)` is no longer considered to be a constant\n  [#7319](https://github.com/rust-lang/rust-clippy/pull/7319)\n\n### Suggestion Fixes/Improvements\n\n* [`needless_collect`]: Now show correct lint messages for shadowed values\n  [#7289](https://github.com/rust-lang/rust-clippy/pull/7289)\n* [`wrong_pub_self_convention`]: The deprecated message now suggest the correct configuration value\n  [#7382](https://github.com/rust-lang/rust-clippy/pull/7382)\n* [`semicolon_if_nothing_returned`]: Allow missing semicolon in blocks with only one expression\n  [#7326](https://github.com/rust-lang/rust-clippy/pull/7326)\n\n### ICE Fixes\n\n* [`zero_sized_map_values`]\n  [#7470](https://github.com/rust-lang/rust-clippy/pull/7470)\n* [`redundant_pattern_matching`]\n  [#7471](https://github.com/rust-lang/rust-clippy/pull/7471)\n* [`modulo_one`]\n  [#7473](https://github.com/rust-lang/rust-clippy/pull/7473)\n* [`use_self`]\n  [#7428](https://github.com/rust-lang/rust-clippy/pull/7428)\n\n## Rust 1.54\n\nReleased 2021-07-29\n\n[View all 74 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-04-27T23%3A51%3A18Z..2021-06-03T06%3A54%3A07Z+base%3Amaster)\n\n### New Lints\n\n- [`ref_binding_to_reference`]\n  [#7105](https://github.com/rust-lang/rust-clippy/pull/7105)\n- [`needless_bitwise_bool`]\n  [#7133](https://github.com/rust-lang/rust-clippy/pull/7133)\n- [`unused_async`] [#7225](https://github.com/rust-lang/rust-clippy/pull/7225)\n- [`manual_str_repeat`]\n  [#7265](https://github.com/rust-lang/rust-clippy/pull/7265)\n- [`suspicious_splitn`]\n  [#7292](https://github.com/rust-lang/rust-clippy/pull/7292)\n\n### Moves and Deprecations\n\n- Deprecate `pub_enum_variant_names` and `wrong_pub_self_convention` in favor of\n  the new `avoid-breaking-exported-api` config option (see\n  [Enhancements](#1-54-enhancements))\n  [#7187](https://github.com/rust-lang/rust-clippy/pull/7187)\n- Move [`inconsistent_struct_constructor`] to `pedantic`\n  [#7193](https://github.com/rust-lang/rust-clippy/pull/7193)\n- Move [`needless_borrow`] to `style` (now warn-by-default)\n  [#7254](https://github.com/rust-lang/rust-clippy/pull/7254)\n- Move [`suspicious_operation_groupings`] to `nursery`\n  [#7266](https://github.com/rust-lang/rust-clippy/pull/7266)\n- Move [`semicolon_if_nothing_returned`] to `pedantic`\n  [#7268](https://github.com/rust-lang/rust-clippy/pull/7268)\n\n### Enhancements <a name=\"1-54-enhancements\"></a>\n\n- [`while_let_on_iterator`]: Now also lints in nested loops\n  [#6966](https://github.com/rust-lang/rust-clippy/pull/6966)\n- [`single_char_pattern`]: Now also lints on `strip_prefix` and `strip_suffix`\n  [#7156](https://github.com/rust-lang/rust-clippy/pull/7156)\n- [`needless_collect`]: Now also lints on assignments with type annotations\n  [#7163](https://github.com/rust-lang/rust-clippy/pull/7163)\n- [`if_then_some_else_none`]: Now works with the MSRV config\n  [#7177](https://github.com/rust-lang/rust-clippy/pull/7177)\n- Add `avoid-breaking-exported-api` config option for the lints\n  [`enum_variant_names`], [`large_types_passed_by_value`],\n  [`trivially_copy_pass_by_ref`], [`unnecessary_wraps`],\n  [`upper_case_acronyms`], and [`wrong_self_convention`]. We recommend to set\n  this configuration option to `false` before a major release (1.0/2.0/...) to\n  clean up the API [#7187](https://github.com/rust-lang/rust-clippy/pull/7187)\n- [`needless_collect`]: Now lints on even more data structures\n  [#7188](https://github.com/rust-lang/rust-clippy/pull/7188)\n- [`missing_docs_in_private_items`]: No longer sees `#[<name> = \"<value>\"]` like\n  attributes as sufficient documentation\n  [#7281](https://github.com/rust-lang/rust-clippy/pull/7281)\n- [`needless_collect`], [`short_circuit_statement`], [`unnecessary_operation`]:\n  Now work as expected when used with `allow`\n  [#7282](https://github.com/rust-lang/rust-clippy/pull/7282)\n\n### False Positive Fixes\n\n- [`implicit_return`]: Now takes all diverging functions in account to avoid\n  false positives [#6951](https://github.com/rust-lang/rust-clippy/pull/6951)\n- [`while_let_on_iterator`]: No longer lints when the iterator is a struct field\n  and the struct is used in the loop\n  [#6966](https://github.com/rust-lang/rust-clippy/pull/6966)\n- [`multiple_inherent_impl`]: No longer lints with generic arguments\n  [#7089](https://github.com/rust-lang/rust-clippy/pull/7089)\n- [`comparison_chain`]: No longer lints in a `const` context\n  [#7118](https://github.com/rust-lang/rust-clippy/pull/7118)\n- [`while_immutable_condition`]: Fix false positive where mutation in the loop\n  variable wasn't picked up\n  [#7144](https://github.com/rust-lang/rust-clippy/pull/7144)\n- [`default_trait_access`]: No longer lints in macros\n  [#7150](https://github.com/rust-lang/rust-clippy/pull/7150)\n- [`needless_question_mark`]: No longer lints when the inner value is implicitly\n  dereferenced [#7165](https://github.com/rust-lang/rust-clippy/pull/7165)\n- [`unused_unit`]: No longer lints when multiple macro contexts are involved\n  [#7167](https://github.com/rust-lang/rust-clippy/pull/7167)\n- [`eval_order_dependence`]: Fix false positive in async context\n  [#7174](https://github.com/rust-lang/rust-clippy/pull/7174)\n- [`unnecessary_filter_map`]: No longer lints if the `filter_map` changes the\n  type [#7175](https://github.com/rust-lang/rust-clippy/pull/7175)\n- [`wrong_self_convention`]: No longer lints in trait implementations of\n  non-`Copy` types [#7182](https://github.com/rust-lang/rust-clippy/pull/7182)\n- [`suboptimal_flops`]: No longer lints on `powi(2)`\n  [#7201](https://github.com/rust-lang/rust-clippy/pull/7201)\n- [`wrong_self_convention`]: No longer lints if there is no implicit `self`\n  [#7215](https://github.com/rust-lang/rust-clippy/pull/7215)\n- [`option_if_let_else`]: No longer lints on `else if let` pattern\n  [#7216](https://github.com/rust-lang/rust-clippy/pull/7216)\n- [`use_self`], [`useless_conversion`]: Fix false positives when generic\n  arguments are involved\n  [#7223](https://github.com/rust-lang/rust-clippy/pull/7223)\n- [`manual_unwrap_or`]: Fix false positive with deref coercion\n  [#7233](https://github.com/rust-lang/rust-clippy/pull/7233)\n- [`similar_names`]: No longer lints on `wparam`/`lparam`\n  [#7255](https://github.com/rust-lang/rust-clippy/pull/7255)\n- [`redundant_closure`]: No longer lints on using the `vec![]` macro in a\n  closure [#7263](https://github.com/rust-lang/rust-clippy/pull/7263)\n\n### Suggestion Fixes/Improvements\n\n- [`implicit_return`]\n  [#6951](https://github.com/rust-lang/rust-clippy/pull/6951)\n    - Fix suggestion for async functions\n    - Improve suggestion with macros\n    - Suggest to change `break` to `return` when appropriate\n- [`while_let_on_iterator`]: Now suggests `&mut iter` when necessary\n  [#6966](https://github.com/rust-lang/rust-clippy/pull/6966)\n- [`match_single_binding`]: Improve suggestion when match scrutinee has side\n  effects [#7095](https://github.com/rust-lang/rust-clippy/pull/7095)\n- [`needless_borrow`]: Now suggests to also change usage sites as needed\n  [#7105](https://github.com/rust-lang/rust-clippy/pull/7105)\n- [`write_with_newline`]: Improve suggestion when only `\\n` is written to the\n  buffer [#7183](https://github.com/rust-lang/rust-clippy/pull/7183)\n- [`from_iter_instead_of_collect`]: The suggestion is now auto applicable also\n  when a `<_ as Trait>::_` is involved\n  [#7264](https://github.com/rust-lang/rust-clippy/pull/7264)\n- [`not_unsafe_ptr_arg_deref`]: Improved error message\n  [#7294](https://github.com/rust-lang/rust-clippy/pull/7294)\n\n### ICE Fixes\n\n- Fix ICE when running Clippy on `libstd`\n  [#7140](https://github.com/rust-lang/rust-clippy/pull/7140)\n- [`implicit_return`]\n  [#7242](https://github.com/rust-lang/rust-clippy/pull/7242)\n\n## Rust 1.53\n\nReleased 2021-06-17\n\n[View all 126 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-03-12T22%3A49%3A20Z..2021-04-27T14%3A38%3A20Z+base%3Amaster)\n\n### New Lints\n\n* [`option_filter_map`]\n  [#6342](https://github.com/rust-lang/rust-clippy/pull/6342)\n* [`branches_sharing_code`]\n  [#6463](https://github.com/rust-lang/rust-clippy/pull/6463)\n* [`needless_for_each`]\n  [#6706](https://github.com/rust-lang/rust-clippy/pull/6706)\n* [`if_then_some_else_none`]\n  [#6859](https://github.com/rust-lang/rust-clippy/pull/6859)\n* [`non_octal_unix_permissions`]\n  [#7001](https://github.com/rust-lang/rust-clippy/pull/7001)\n* [`unnecessary_self_imports`]\n  [#7072](https://github.com/rust-lang/rust-clippy/pull/7072)\n* [`bool_assert_comparison`]\n  [#7083](https://github.com/rust-lang/rust-clippy/pull/7083)\n* [`cloned_instead_of_copied`]\n  [#7098](https://github.com/rust-lang/rust-clippy/pull/7098)\n* [`flat_map_option`]\n  [#7101](https://github.com/rust-lang/rust-clippy/pull/7101)\n\n### Moves and Deprecations\n\n* Deprecate [`filter_map`] lint\n  [#7059](https://github.com/rust-lang/rust-clippy/pull/7059)\n* Move [`transmute_ptr_to_ptr`] to `pedantic`\n  [#7102](https://github.com/rust-lang/rust-clippy/pull/7102)\n\n### Enhancements\n\n* [`mem_replace_with_default`]: Also lint on common std constructors\n  [#6820](https://github.com/rust-lang/rust-clippy/pull/6820)\n* [`wrong_self_convention`]: Also lint on `to_*_mut` methods\n  [#6828](https://github.com/rust-lang/rust-clippy/pull/6828)\n* [`wildcard_enum_match_arm`], [`match_wildcard_for_single_variants`]:\n  [#6863](https://github.com/rust-lang/rust-clippy/pull/6863)\n    * Attempt to find a common path prefix in suggestion\n    * Don't lint on `Option` and `Result`\n    * Consider `Self` prefix\n* [`explicit_deref_methods`]: Also lint on chained `deref` calls\n  [#6865](https://github.com/rust-lang/rust-clippy/pull/6865)\n* [`or_fun_call`]: Also lint on `unsafe` blocks\n  [#6928](https://github.com/rust-lang/rust-clippy/pull/6928)\n* [`vec_box`], [`linkedlist`], [`option_option`]: Also lint in `const` and\n  `static` items [#6938](https://github.com/rust-lang/rust-clippy/pull/6938)\n* [`search_is_some`]: Also check for `is_none`\n  [#6942](https://github.com/rust-lang/rust-clippy/pull/6942)\n* [`string_lit_as_bytes`]: Also lint on `into_bytes`\n  [#6959](https://github.com/rust-lang/rust-clippy/pull/6959)\n* [`len_without_is_empty`]: Also lint if function signatures of `len` and\n  `is_empty` don't match\n  [#6980](https://github.com/rust-lang/rust-clippy/pull/6980)\n* [`redundant_pattern_matching`]: Also lint if the pattern is a `&` pattern\n  [#6991](https://github.com/rust-lang/rust-clippy/pull/6991)\n* [`clone_on_copy`]: Also lint on chained method calls taking `self` by value\n  [#7000](https://github.com/rust-lang/rust-clippy/pull/7000)\n* [`missing_panics_doc`]: Also lint on `assert_eq!` and `assert_ne!`\n  [#7029](https://github.com/rust-lang/rust-clippy/pull/7029)\n* [`needless_return`]: Also lint in `async` functions\n  [#7067](https://github.com/rust-lang/rust-clippy/pull/7067)\n* [`unused_io_amount`]: Also lint on expressions like `_.read().ok()?`\n  [#7100](https://github.com/rust-lang/rust-clippy/pull/7100)\n* [`iter_cloned_collect`]: Also lint on large arrays, since const-generics are\n  now stable [#7138](https://github.com/rust-lang/rust-clippy/pull/7138)\n\n### False Positive Fixes\n\n* [`upper_case_acronyms`]: No longer lints on public items\n  [#6805](https://github.com/rust-lang/rust-clippy/pull/6805)\n* [`suspicious_map`]: No longer lints when side effects may occur inside the\n  `map` call [#6831](https://github.com/rust-lang/rust-clippy/pull/6831)\n* [`manual_map`], [`manual_unwrap_or`]: No longer lints in `const` functions\n  [#6917](https://github.com/rust-lang/rust-clippy/pull/6917)\n* [`wrong_self_convention`]: Now respects `Copy` types\n  [#6924](https://github.com/rust-lang/rust-clippy/pull/6924)\n* [`needless_question_mark`]: No longer lints if the `?` and the `Some(..)` come\n  from different macro contexts [#6935](https://github.com/rust-lang/rust-clippy/pull/6935)\n* [`map_entry`]: Better detect if the entry API can be used\n  [#6937](https://github.com/rust-lang/rust-clippy/pull/6937)\n* [`or_fun_call`]: No longer lints on some `len` function calls\n  [#6950](https://github.com/rust-lang/rust-clippy/pull/6950)\n* [`new_ret_no_self`]: No longer lints when `Self` is returned with different\n  generic arguments [#6952](https://github.com/rust-lang/rust-clippy/pull/6952)\n* [`upper_case_acronyms`]: No longer lints on public items\n  [#6981](https://github.com/rust-lang/rust-clippy/pull/6981)\n* [`explicit_into_iter_loop`]: Only lint when `into_iter` is an implementation\n  of `IntoIterator` [#6982](https://github.com/rust-lang/rust-clippy/pull/6982)\n* [`expl_impl_clone_on_copy`]: Take generic constraints into account before\n  suggesting to use `derive` instead\n  [#6993](https://github.com/rust-lang/rust-clippy/pull/6993)\n* [`missing_panics_doc`]: No longer lints when only debug-assertions are used\n  [#6996](https://github.com/rust-lang/rust-clippy/pull/6996)\n* [`clone_on_copy`]: Only lint when using the `Clone` trait\n  [#7000](https://github.com/rust-lang/rust-clippy/pull/7000)\n* [`wrong_self_convention`]: No longer lints inside a trait implementation\n  [#7002](https://github.com/rust-lang/rust-clippy/pull/7002)\n* [`redundant_clone`]: No longer lints when the cloned value is modified while\n  the clone is in use\n  [#7011](https://github.com/rust-lang/rust-clippy/pull/7011)\n* [`same_item_push`]: No longer lints if the `Vec` is used in the loop body\n  [#7018](https://github.com/rust-lang/rust-clippy/pull/7018)\n* [`cargo_common_metadata`]: Remove author requirement\n  [#7026](https://github.com/rust-lang/rust-clippy/pull/7026)\n* [`panic_in_result_fn`]: No longer lints on `debug_assert` family\n  [#7060](https://github.com/rust-lang/rust-clippy/pull/7060)\n* [`panic`]: No longer wrongfully lints on `debug_assert` with message\n  [#7063](https://github.com/rust-lang/rust-clippy/pull/7063)\n* [`wrong_self_convention`]: No longer lints in trait implementations where no\n  `self` is involved [#7064](https://github.com/rust-lang/rust-clippy/pull/7064)\n* [`missing_const_for_fn`]: No longer lints when unstable `const` function is\n  involved [#7076](https://github.com/rust-lang/rust-clippy/pull/7076)\n* [`suspicious_else_formatting`]: Allow Allman style braces\n  [#7087](https://github.com/rust-lang/rust-clippy/pull/7087)\n* [`inconsistent_struct_constructor`]: No longer lints in macros\n  [#7097](https://github.com/rust-lang/rust-clippy/pull/7097)\n* [`single_component_path_imports`]: No longer lints on macro re-exports\n  [#7120](https://github.com/rust-lang/rust-clippy/pull/7120)\n\n### Suggestion Fixes/Improvements\n\n* [`redundant_pattern_matching`]: Add a note when applying this lint would\n  change the drop order\n  [#6568](https://github.com/rust-lang/rust-clippy/pull/6568)\n* [`write_literal`], [`print_literal`]: Add auto-applicable suggestion\n  [#6821](https://github.com/rust-lang/rust-clippy/pull/6821)\n* [`manual_map`]: Fix suggestion for complex `if let ... else` chains\n  [#6856](https://github.com/rust-lang/rust-clippy/pull/6856)\n* [`inconsistent_struct_constructor`]: Make lint description and message clearer\n  [#6892](https://github.com/rust-lang/rust-clippy/pull/6892)\n* [`map_entry`]: Now suggests `or_insert`, `insert_with` or `match _.entry(_)`\n  as appropriate [#6937](https://github.com/rust-lang/rust-clippy/pull/6937)\n* [`manual_flatten`]: Suggest to insert `copied` if necessary\n  [#6962](https://github.com/rust-lang/rust-clippy/pull/6962)\n* [`redundant_slicing`]: Fix suggestion when a re-borrow might be required or\n  when the value is from a macro call\n  [#6975](https://github.com/rust-lang/rust-clippy/pull/6975)\n* [`match_wildcard_for_single_variants`]: Fix suggestion for hidden variant\n  [#6988](https://github.com/rust-lang/rust-clippy/pull/6988)\n* [`clone_on_copy`]: Correct suggestion when the cloned value is a macro call\n  [#7000](https://github.com/rust-lang/rust-clippy/pull/7000)\n* [`manual_map`]: Fix suggestion at the end of an if chain\n  [#7004](https://github.com/rust-lang/rust-clippy/pull/7004)\n* Fix needless parenthesis output in multiple lint suggestions\n  [#7013](https://github.com/rust-lang/rust-clippy/pull/7013)\n* [`needless_collect`]: Better explanation in the lint message\n  [#7020](https://github.com/rust-lang/rust-clippy/pull/7020)\n* [`useless_vec`]: Now considers mutability\n  [#7036](https://github.com/rust-lang/rust-clippy/pull/7036)\n* [`useless_format`]: Wrap the content in braces if necessary\n  [#7092](https://github.com/rust-lang/rust-clippy/pull/7092)\n* [`single_match`]: Don't suggest an equality check for types which don't\n  implement `PartialEq`\n  [#7093](https://github.com/rust-lang/rust-clippy/pull/7093)\n* [`from_over_into`]: Mention type in help message\n  [#7099](https://github.com/rust-lang/rust-clippy/pull/7099)\n* [`manual_unwrap_or`]: Fix invalid code suggestion due to a macro call\n  [#7136](https://github.com/rust-lang/rust-clippy/pull/7136)\n\n### ICE Fixes\n\n* [`macro_use_imports`]\n  [#7022](https://github.com/rust-lang/rust-clippy/pull/7022)\n* [`missing_panics_doc`]\n  [#7034](https://github.com/rust-lang/rust-clippy/pull/7034)\n* [`tabs_in_doc_comments`]\n  [#7039](https://github.com/rust-lang/rust-clippy/pull/7039)\n* [`missing_const_for_fn`]\n  [#7128](https://github.com/rust-lang/rust-clippy/pull/7128)\n\n### Others\n\n* [Clippy's lint\n  list](https://rust-lang.github.io/rust-clippy/master/index.html) now supports\n  themes [#7030](https://github.com/rust-lang/rust-clippy/pull/7030)\n* Lints that were uplifted to `rustc` now mention the new `rustc` name in the\n  deprecation warning\n  [#7056](https://github.com/rust-lang/rust-clippy/pull/7056)\n\n## Rust 1.52\n\nReleased 2021-05-06\n\n[View all 102 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2021-02-03T15%3A59%3A06Z..2021-03-11T20%3A06%3A43Z+base%3Amaster)\n\n### New Lints\n\n* [`from_str_radix_10`]\n  [#6717](https://github.com/rust-lang/rust-clippy/pull/6717)\n* [`implicit_clone`]\n  [#6730](https://github.com/rust-lang/rust-clippy/pull/6730)\n* [`semicolon_if_nothing_returned`]\n  [#6681](https://github.com/rust-lang/rust-clippy/pull/6681)\n* [`manual_flatten`]\n  [#6646](https://github.com/rust-lang/rust-clippy/pull/6646)\n* [`inconsistent_struct_constructor`]\n  [#6769](https://github.com/rust-lang/rust-clippy/pull/6769)\n* [`iter_count`]\n  [#6791](https://github.com/rust-lang/rust-clippy/pull/6791)\n* [`default_numeric_fallback`]\n  [#6662](https://github.com/rust-lang/rust-clippy/pull/6662)\n* [`bytes_nth`]\n  [#6695](https://github.com/rust-lang/rust-clippy/pull/6695)\n* [`filter_map_identity`]\n  [#6685](https://github.com/rust-lang/rust-clippy/pull/6685)\n* [`manual_map`]\n  [#6573](https://github.com/rust-lang/rust-clippy/pull/6573)\n\n### Moves and Deprecations\n\n* Moved [`upper_case_acronyms`] to `pedantic`\n  [#6775](https://github.com/rust-lang/rust-clippy/pull/6775)\n* Moved [`manual_map`] to `nursery`\n  [#6796](https://github.com/rust-lang/rust-clippy/pull/6796)\n* Moved [`unnecessary_wraps`] to `pedantic`\n  [#6765](https://github.com/rust-lang/rust-clippy/pull/6765)\n* Moved [`trivial_regex`] to `nursery`\n  [#6696](https://github.com/rust-lang/rust-clippy/pull/6696)\n* Moved [`naive_bytecount`] to `pedantic`\n  [#6825](https://github.com/rust-lang/rust-clippy/pull/6825)\n* Moved [`upper_case_acronyms`] to `style`\n  [#6788](https://github.com/rust-lang/rust-clippy/pull/6788)\n* Moved [`manual_map`] to `style`\n  [#6801](https://github.com/rust-lang/rust-clippy/pull/6801)\n\n### Enhancements\n\n* [`disallowed_methods`]: Now supports functions in addition to methods\n  [#6674](https://github.com/rust-lang/rust-clippy/pull/6674)\n* [`upper_case_acronyms`]: Added a new configuration `upper-case-acronyms-aggressive` to\n  trigger the lint if there is more than one uppercase character next to each other\n  [#6788](https://github.com/rust-lang/rust-clippy/pull/6788)\n* [`collapsible_match`]: Now supports block comparison with different value names\n  [#6754](https://github.com/rust-lang/rust-clippy/pull/6754)\n* [`unnecessary_wraps`]: Will now suggest removing unnecessary wrapped return unit type, like `Option<()>`\n  [#6665](https://github.com/rust-lang/rust-clippy/pull/6665)\n* Improved value usage detection in closures\n  [#6698](https://github.com/rust-lang/rust-clippy/pull/6698)\n\n### False Positive Fixes\n\n* [`use_self`]: No longer lints in macros\n  [#6833](https://github.com/rust-lang/rust-clippy/pull/6833)\n* [`use_self`]: Fixed multiple false positives for: generics, associated types and derive implementations\n  [#6179](https://github.com/rust-lang/rust-clippy/pull/6179)\n* [`missing_inline_in_public_items`]: No longer lints for procedural macros\n  [#6814](https://github.com/rust-lang/rust-clippy/pull/6814)\n* [`inherent_to_string`]: No longer lints on functions with function generics\n  [#6771](https://github.com/rust-lang/rust-clippy/pull/6771)\n* [`doc_markdown`]: Add `OpenDNS` to the default configuration as an allowed identifier\n  [#6783](https://github.com/rust-lang/rust-clippy/pull/6783)\n* [`missing_panics_doc`]: No longer lints on [`unreachable!`](https://doc.rust-lang.org/std/macro.unreachable.html)\n  [#6700](https://github.com/rust-lang/rust-clippy/pull/6700)\n* [`collapsible_if`]: No longer lints on if statements with attributes\n  [#6701](https://github.com/rust-lang/rust-clippy/pull/6701)\n* [`match_same_arms`]: Only considers empty blocks as equal if the tokens contained are the same\n  [#6843](https://github.com/rust-lang/rust-clippy/pull/6843)\n* [`redundant_closure`]: Now ignores macros\n  [#6871](https://github.com/rust-lang/rust-clippy/pull/6871)\n* [`manual_map`]: Fixed false positives when control flow statements like `return`, `break` etc. are used\n  [#6801](https://github.com/rust-lang/rust-clippy/pull/6801)\n* [`vec_init_then_push`]: Fixed false positives for loops and if statements\n  [#6697](https://github.com/rust-lang/rust-clippy/pull/6697)\n* [`len_without_is_empty`]: Will now consider multiple impl blocks and `#[allow]` on\n  the `len` method as well as the type definition.\n  [#6853](https://github.com/rust-lang/rust-clippy/pull/6853)\n* [`let_underscore_drop`]: Only lints on types which implement `Drop`\n  [#6682](https://github.com/rust-lang/rust-clippy/pull/6682)\n* [`unit_arg`]: No longer lints on unit arguments when they come from a path expression.\n  [#6601](https://github.com/rust-lang/rust-clippy/pull/6601)\n* [`cargo_common_metadata`]: No longer lints if\n  [`publish = false`](https://doc.rust-lang.org/cargo/reference/manifest.html#the-publish-field)\n  is defined in the manifest\n  [#6650](https://github.com/rust-lang/rust-clippy/pull/6650)\n\n### Suggestion Fixes/Improvements\n\n* [`collapsible_match`]: Fixed lint message capitalization\n  [#6766](https://github.com/rust-lang/rust-clippy/pull/6766)\n* [`or_fun_call`]: Improved suggestions for `or_insert(vec![])`\n  [#6790](https://github.com/rust-lang/rust-clippy/pull/6790)\n* [`manual_map`]: No longer expands macros in the suggestions\n  [#6801](https://github.com/rust-lang/rust-clippy/pull/6801)\n* Aligned Clippy's lint messages with the rustc dev guide\n  [#6787](https://github.com/rust-lang/rust-clippy/pull/6787)\n\n### ICE Fixes\n\n* [`zero_sized_map_values`]\n  [#6866](https://github.com/rust-lang/rust-clippy/pull/6866)\n\n### Documentation Improvements\n\n* [`useless_format`]: Improved the documentation example\n  [#6854](https://github.com/rust-lang/rust-clippy/pull/6854)\n* Clippy's [`README.md`]: Includes a new subsection on running Clippy as a rustc wrapper\n  [#6782](https://github.com/rust-lang/rust-clippy/pull/6782)\n\n### Others\n* Running `cargo clippy` after `cargo check` now works as expected\n  (`cargo clippy` and `cargo check` no longer shares the same build cache)\n  [#6687](https://github.com/rust-lang/rust-clippy/pull/6687)\n* Cargo now re-runs Clippy if arguments after `--` provided to `cargo clippy` are changed.\n  [#6834](https://github.com/rust-lang/rust-clippy/pull/6834)\n* Extracted Clippy's `utils` module into the new `clippy_utils` crate\n  [#6756](https://github.com/rust-lang/rust-clippy/pull/6756)\n* Clippy lintcheck tool improvements\n  [#6800](https://github.com/rust-lang/rust-clippy/pull/6800)\n  [#6735](https://github.com/rust-lang/rust-clippy/pull/6735)\n  [#6764](https://github.com/rust-lang/rust-clippy/pull/6764)\n  [#6708](https://github.com/rust-lang/rust-clippy/pull/6708)\n  [#6780](https://github.com/rust-lang/rust-clippy/pull/6780)\n  [#6686](https://github.com/rust-lang/rust-clippy/pull/6686)\n\n## Rust 1.51\n\nReleased 2021-03-25\n\n[View all 78 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-12-21T15%3A43%3A04Z..2021-02-03T04%3A21%3A10Z+base%3Amaster)\n\n### New Lints\n\n* [`upper_case_acronyms`]\n  [#6475](https://github.com/rust-lang/rust-clippy/pull/6475)\n* [`from_over_into`] [#6476](https://github.com/rust-lang/rust-clippy/pull/6476)\n* [`case_sensitive_file_extension_comparisons`]\n  [#6500](https://github.com/rust-lang/rust-clippy/pull/6500)\n* [`needless_question_mark`]\n  [#6507](https://github.com/rust-lang/rust-clippy/pull/6507)\n* [`missing_panics_doc`]\n  [#6523](https://github.com/rust-lang/rust-clippy/pull/6523)\n* [`redundant_slicing`]\n  [#6528](https://github.com/rust-lang/rust-clippy/pull/6528)\n* [`vec_init_then_push`]\n  [#6538](https://github.com/rust-lang/rust-clippy/pull/6538)\n* [`ptr_as_ptr`] [#6542](https://github.com/rust-lang/rust-clippy/pull/6542)\n* [`collapsible_else_if`] (split out from `collapsible_if`)\n  [#6544](https://github.com/rust-lang/rust-clippy/pull/6544)\n* [`inspect_for_each`] [#6577](https://github.com/rust-lang/rust-clippy/pull/6577)\n* [`manual_filter_map`]\n  [#6591](https://github.com/rust-lang/rust-clippy/pull/6591)\n* [`exhaustive_enums`]\n  [#6617](https://github.com/rust-lang/rust-clippy/pull/6617)\n* [`exhaustive_structs`]\n  [#6617](https://github.com/rust-lang/rust-clippy/pull/6617)\n\n### Moves and Deprecations\n\n* Replace [`find_map`] with [`manual_find_map`]\n  [#6591](https://github.com/rust-lang/rust-clippy/pull/6591)\n* `unknown_clippy_lints` Now integrated in the `unknown_lints` rustc lint\n  [#6653](https://github.com/rust-lang/rust-clippy/pull/6653)\n\n### Enhancements\n\n* [`ptr_arg`] Now also suggests to use `&Path` instead of `&PathBuf`\n  [#6506](https://github.com/rust-lang/rust-clippy/pull/6506)\n* [`cast_ptr_alignment`] Also lint when the `pointer::cast` method is used\n  [#6557](https://github.com/rust-lang/rust-clippy/pull/6557)\n* [`collapsible_match`] Now also deals with `&` and `*` operators in the `match`\n  scrutinee [#6619](https://github.com/rust-lang/rust-clippy/pull/6619)\n\n### False Positive Fixes\n\n* [`similar_names`] Ignore underscore prefixed names\n  [#6403](https://github.com/rust-lang/rust-clippy/pull/6403)\n* [`print_literal`] and [`write_literal`] No longer lint numeric literals\n  [#6408](https://github.com/rust-lang/rust-clippy/pull/6408)\n* [`large_enum_variant`] No longer lints in external macros\n  [#6485](https://github.com/rust-lang/rust-clippy/pull/6485)\n* [`empty_enum`] Only lint if `never_type` feature is enabled\n  [#6513](https://github.com/rust-lang/rust-clippy/pull/6513)\n* [`field_reassign_with_default`] No longer lints in macros\n  [#6553](https://github.com/rust-lang/rust-clippy/pull/6553)\n* [`size_of_in_element_count`] No longer lints when dividing by element size\n  [#6578](https://github.com/rust-lang/rust-clippy/pull/6578)\n* [`needless_return`] No longer lints in macros\n  [#6586](https://github.com/rust-lang/rust-clippy/pull/6586)\n* [`match_overlapping_arm`] No longer lint when first arm is completely included\n  in second arm [#6603](https://github.com/rust-lang/rust-clippy/pull/6603)\n* [`doc_markdown`] Add `WebGL` to the default configuration as an allowed\n  identifier [#6605](https://github.com/rust-lang/rust-clippy/pull/6605)\n\n### Suggestion Fixes/Improvements\n\n* [`field_reassign_with_default`] Don't expand macro in lint suggestion\n  [#6531](https://github.com/rust-lang/rust-clippy/pull/6531)\n* [`match_like_matches_macro`] Strip references in suggestion\n  [#6532](https://github.com/rust-lang/rust-clippy/pull/6532)\n* [`single_match`] Suggest `if` over `if let` when possible\n  [#6574](https://github.com/rust-lang/rust-clippy/pull/6574)\n* `ref_in_deref` Use parentheses correctly in suggestion\n  [#6609](https://github.com/rust-lang/rust-clippy/pull/6609)\n* [`stable_sort_primitive`] Clarify error message\n  [#6611](https://github.com/rust-lang/rust-clippy/pull/6611)\n\n### ICE Fixes\n\n* [`zero_sized_map_values`]\n  [#6582](https://github.com/rust-lang/rust-clippy/pull/6582)\n\n### Documentation Improvements\n\n* Improve search performance on the Clippy website and make it possible to\n  directly search for lints on the GitHub issue tracker\n  [#6483](https://github.com/rust-lang/rust-clippy/pull/6483)\n* Clean up `README.md` by removing outdated paragraph\n  [#6488](https://github.com/rust-lang/rust-clippy/pull/6488)\n* [`await_holding_refcell_ref`] and [`await_holding_lock`]\n  [#6585](https://github.com/rust-lang/rust-clippy/pull/6585)\n* [`as_conversions`] [#6608](https://github.com/rust-lang/rust-clippy/pull/6608)\n\n### Others\n\n* Clippy now has a [Roadmap] for 2021. If you like to get involved in a bigger\n  project, take a look at the [Roadmap project page]. All issues listed there\n  are actively mentored\n  [#6462](https://github.com/rust-lang/rust-clippy/pull/6462)\n* The Clippy version number now corresponds to the Rust version number\n  [#6526](https://github.com/rust-lang/rust-clippy/pull/6526)\n* Fix oversight which caused Clippy to lint deps in some environments, where\n  `CLIPPY_TESTS=true` was set somewhere\n  [#6575](https://github.com/rust-lang/rust-clippy/pull/6575)\n* Add `cargo dev-lintcheck` tool to the Clippy Dev Tool\n  [#6469](https://github.com/rust-lang/rust-clippy/pull/6469)\n\n[Roadmap]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/proposals/roadmap-2021.md\n[Roadmap project page]: https://github.com/rust-lang/rust-clippy/projects/3\n\n## Rust 1.50\n\nReleased 2021-02-11\n\n[View all 119 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-11-06T18%3A32%3A40Z..2021-01-03T14%3A51%3A18Z+base%3Amaster)\n\n### New Lints\n\n* [`suspicious_operation_groupings`] [#6086](https://github.com/rust-lang/rust-clippy/pull/6086)\n* [`size_of_in_element_count`] [#6394](https://github.com/rust-lang/rust-clippy/pull/6394)\n* [`unnecessary_wraps`] [#6070](https://github.com/rust-lang/rust-clippy/pull/6070)\n* [`let_underscore_drop`] [#6305](https://github.com/rust-lang/rust-clippy/pull/6305)\n* [`collapsible_match`] [#6402](https://github.com/rust-lang/rust-clippy/pull/6402)\n* [`redundant_else`] [#6330](https://github.com/rust-lang/rust-clippy/pull/6330)\n* [`zero_sized_map_values`] [#6218](https://github.com/rust-lang/rust-clippy/pull/6218)\n* [`print_stderr`] [#6367](https://github.com/rust-lang/rust-clippy/pull/6367)\n* [`string_from_utf8_as_bytes`] [#6134](https://github.com/rust-lang/rust-clippy/pull/6134)\n\n### Moves and Deprecations\n\n* Previously deprecated [`str_to_string`] and [`string_to_string`] have been un-deprecated\n  as `restriction` lints [#6333](https://github.com/rust-lang/rust-clippy/pull/6333)\n* Deprecate `panic_params` lint. This is now available in rustc as `non_fmt_panics`\n  [#6351](https://github.com/rust-lang/rust-clippy/pull/6351)\n* Move [`map_err_ignore`] to `restriction`\n  [#6416](https://github.com/rust-lang/rust-clippy/pull/6416)\n* Move [`await_holding_refcell_ref`] to `pedantic`\n  [#6354](https://github.com/rust-lang/rust-clippy/pull/6354)\n* Move [`await_holding_lock`] to `pedantic`\n  [#6354](https://github.com/rust-lang/rust-clippy/pull/6354)\n\n### Enhancements\n\n* Add the `unreadable-literal-lint-fractions` configuration to disable\n  the `unreadable_literal` lint for fractions\n  [#6421](https://github.com/rust-lang/rust-clippy/pull/6421)\n* [`clone_on_copy`]: Now shows the type in the lint message\n  [#6443](https://github.com/rust-lang/rust-clippy/pull/6443)\n* [`redundant_pattern_matching`]: Now also lints on `std::task::Poll`\n  [#6339](https://github.com/rust-lang/rust-clippy/pull/6339)\n* [`redundant_pattern_matching`]: Additionally also lints on `std::net::IpAddr`\n  [#6377](https://github.com/rust-lang/rust-clippy/pull/6377)\n* [`search_is_some`]: Now suggests `contains` instead of `find(foo).is_some()`\n  [#6119](https://github.com/rust-lang/rust-clippy/pull/6119)\n* [`clone_double_ref`]: Now prints the reference type in the lint message\n  [#6442](https://github.com/rust-lang/rust-clippy/pull/6442)\n* [`modulo_one`]: Now also lints on -1.\n  [#6360](https://github.com/rust-lang/rust-clippy/pull/6360)\n* [`empty_loop`]: Now lints no_std crates, too\n  [#6205](https://github.com/rust-lang/rust-clippy/pull/6205)\n* [`or_fun_call`]: Now also lints when indexing `HashMap` or `BTreeMap`\n  [#6267](https://github.com/rust-lang/rust-clippy/pull/6267)\n* [`wrong_self_convention`]: Now also lints in trait definitions\n  [#6316](https://github.com/rust-lang/rust-clippy/pull/6316)\n* [`needless_borrow`]: Print the type in the lint message\n  [#6449](https://github.com/rust-lang/rust-clippy/pull/6449)\n\n[msrv_readme]: https://github.com/rust-lang/rust-clippy#specifying-the-minimum-supported-rust-version\n\n### False Positive Fixes\n\n* [`manual_range_contains`]: No longer lints in `const fn`\n  [#6382](https://github.com/rust-lang/rust-clippy/pull/6382)\n* [`unnecessary_lazy_evaluations`]: No longer lints if closure argument is used\n  [#6370](https://github.com/rust-lang/rust-clippy/pull/6370)\n* [`match_single_binding`]: Now ignores cases with `#[cfg()]` macros\n  [#6435](https://github.com/rust-lang/rust-clippy/pull/6435)\n* [`match_like_matches_macro`]: No longer lints on arms with attributes\n  [#6290](https://github.com/rust-lang/rust-clippy/pull/6290)\n* [`map_clone`]: No longer lints with deref and clone\n  [#6269](https://github.com/rust-lang/rust-clippy/pull/6269)\n* [`map_clone`]: No longer lints in the case of &mut\n  [#6301](https://github.com/rust-lang/rust-clippy/pull/6301)\n* [`needless_update`]: Now ignores `non_exhaustive` structs\n  [#6464](https://github.com/rust-lang/rust-clippy/pull/6464)\n* [`needless_collect`]: No longer lints when a collect is needed multiple times\n  [#6313](https://github.com/rust-lang/rust-clippy/pull/6313)\n* [`unnecessary_cast`] No longer lints cfg-dependent types\n  [#6369](https://github.com/rust-lang/rust-clippy/pull/6369)\n* [`declare_interior_mutable_const`] and [`borrow_interior_mutable_const`]:\n  Both now ignore enums with frozen variants\n  [#6110](https://github.com/rust-lang/rust-clippy/pull/6110)\n* [`field_reassign_with_default`] No longer lint for private fields\n  [#6537](https://github.com/rust-lang/rust-clippy/pull/6537)\n\n\n### Suggestion Fixes/Improvements\n\n* [`vec_box`]: Provide correct type scope suggestion\n  [#6271](https://github.com/rust-lang/rust-clippy/pull/6271)\n* [`manual_range_contains`]: Give correct suggestion when using floats\n  [#6320](https://github.com/rust-lang/rust-clippy/pull/6320)\n* [`unnecessary_lazy_evaluations`]: Don't always mark suggestion as MachineApplicable\n  [#6272](https://github.com/rust-lang/rust-clippy/pull/6272)\n* [`manual_async_fn`]: Improve suggestion formatting\n  [#6294](https://github.com/rust-lang/rust-clippy/pull/6294)\n* [`unnecessary_cast`]: Fix incorrectly formatted float literal suggestion\n  [#6362](https://github.com/rust-lang/rust-clippy/pull/6362)\n\n### ICE Fixes\n\n* Fix a crash in [`from_iter_instead_of_collect`]\n  [#6304](https://github.com/rust-lang/rust-clippy/pull/6304)\n* Fix a silent crash when parsing doc comments in [`needless_doctest_main`]\n  [#6458](https://github.com/rust-lang/rust-clippy/pull/6458)\n\n### Documentation Improvements\n\n* The lint website search has been improved ([#6477](https://github.com/rust-lang/rust-clippy/pull/6477)):\n  * Searching for lints with dashes and spaces is possible now. For example\n    `missing-errors-doc` and `missing errors doc` are now valid aliases for lint names\n  * Improved fuzzy search in lint descriptions\n* Various README improvements\n  [#6287](https://github.com/rust-lang/rust-clippy/pull/6287)\n* Add known problems to [`comparison_chain`] documentation\n  [#6390](https://github.com/rust-lang/rust-clippy/pull/6390)\n* Fix example used in [`cargo_common_metadata`]\n  [#6293](https://github.com/rust-lang/rust-clippy/pull/6293)\n* Improve [`map_clone`] documentation\n  [#6340](https://github.com/rust-lang/rust-clippy/pull/6340)\n\n### Others\n\n* You can now tell Clippy about the MSRV your project supports. Please refer to\n  the specific README section to learn more about MSRV support [here][msrv_readme]\n  [#6201](https://github.com/rust-lang/rust-clippy/pull/6201)\n* Add `--no-deps` option to avoid running on path dependencies in workspaces\n  [#6188](https://github.com/rust-lang/rust-clippy/pull/6188)\n\n## Rust 1.49\n\nReleased 2020-12-31\n\n[View all 107 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-09-24T14%3A05%3A12Z..2020-11-05T13%3A35%3A44Z+base%3Amaster)\n\n### New Lints\n\n* [`field_reassign_with_default`] [#5911](https://github.com/rust-lang/rust-clippy/pull/5911)\n* [`await_holding_refcell_ref`] [#6029](https://github.com/rust-lang/rust-clippy/pull/6029)\n* [`disallowed_methods`] [#6081](https://github.com/rust-lang/rust-clippy/pull/6081)\n* [`inline_asm_x86_att_syntax`] [#6092](https://github.com/rust-lang/rust-clippy/pull/6092)\n* [`inline_asm_x86_intel_syntax`] [#6092](https://github.com/rust-lang/rust-clippy/pull/6092)\n* [`from_iter_instead_of_collect`] [#6101](https://github.com/rust-lang/rust-clippy/pull/6101)\n* [`mut_mutex_lock`] [#6103](https://github.com/rust-lang/rust-clippy/pull/6103)\n* [`single_element_loop`] [#6109](https://github.com/rust-lang/rust-clippy/pull/6109)\n* [`manual_unwrap_or`] [#6123](https://github.com/rust-lang/rust-clippy/pull/6123)\n* [`large_types_passed_by_value`] [#6135](https://github.com/rust-lang/rust-clippy/pull/6135)\n* [`result_unit_err`] [#6157](https://github.com/rust-lang/rust-clippy/pull/6157)\n* [`ref_option_ref`] [#6165](https://github.com/rust-lang/rust-clippy/pull/6165)\n* [`manual_range_contains`] [#6177](https://github.com/rust-lang/rust-clippy/pull/6177)\n* [`unusual_byte_groupings`] [#6183](https://github.com/rust-lang/rust-clippy/pull/6183)\n* [`comparison_to_empty`] [#6226](https://github.com/rust-lang/rust-clippy/pull/6226)\n* [`map_collect_result_unit`] [#6227](https://github.com/rust-lang/rust-clippy/pull/6227)\n* [`manual_ok_or`] [#6233](https://github.com/rust-lang/rust-clippy/pull/6233)\n\n### Moves and Deprecations\n\n* Rename `single_char_push_str` to [`single_char_add_str`]\n  [#6037](https://github.com/rust-lang/rust-clippy/pull/6037)\n* Rename `zero_width_space` to [`invisible_characters`]\n  [#6105](https://github.com/rust-lang/rust-clippy/pull/6105)\n* Deprecate `drop_bounds` (uplifted)\n  [#6111](https://github.com/rust-lang/rust-clippy/pull/6111)\n* Move [`string_lit_as_bytes`] to `nursery`\n  [#6117](https://github.com/rust-lang/rust-clippy/pull/6117)\n* Move [`rc_buffer`] to `restriction`\n  [#6128](https://github.com/rust-lang/rust-clippy/pull/6128)\n\n### Enhancements\n\n* [`manual_memcpy`]: Also lint when there are loop counters (and produce a\n  reliable suggestion)\n  [#5727](https://github.com/rust-lang/rust-clippy/pull/5727)\n* [`single_char_add_str`]: Also lint on `String::insert_str`\n  [#6037](https://github.com/rust-lang/rust-clippy/pull/6037)\n* [`invisible_characters`]: Also lint the characters `\\u{AD}` and `\\u{2060}`\n  [#6105](https://github.com/rust-lang/rust-clippy/pull/6105)\n* [`eq_op`]: Also lint on the `assert_*!` macro family\n  [#6167](https://github.com/rust-lang/rust-clippy/pull/6167)\n* [`items_after_statements`]: Also lint in local macro expansions\n  [#6176](https://github.com/rust-lang/rust-clippy/pull/6176)\n* [`unnecessary_cast`]: Also lint casts on integer and float literals\n  [#6187](https://github.com/rust-lang/rust-clippy/pull/6187)\n* [`manual_unwrap_or`]: Also lint `Result::unwrap_or`\n  [#6190](https://github.com/rust-lang/rust-clippy/pull/6190)\n* [`match_like_matches_macro`]: Also lint when `match` has more than two arms\n  [#6216](https://github.com/rust-lang/rust-clippy/pull/6216)\n* [`integer_arithmetic`]: Better handle `/` an `%` operators\n  [#6229](https://github.com/rust-lang/rust-clippy/pull/6229)\n\n### False Positive Fixes\n\n* [`needless_lifetimes`]: Bail out if the function has a `where` clause with the\n  lifetime [#5978](https://github.com/rust-lang/rust-clippy/pull/5978)\n* [`explicit_counter_loop`]: No longer lints, when loop counter is used after it\n  is incremented [#6076](https://github.com/rust-lang/rust-clippy/pull/6076)\n* [`or_fun_call`]: Revert changes addressing the handling of `const fn`\n  [#6077](https://github.com/rust-lang/rust-clippy/pull/6077)\n* [`needless_range_loop`]: No longer lints, when the iterable is used in the\n  range [#6102](https://github.com/rust-lang/rust-clippy/pull/6102)\n* [`inconsistent_digit_grouping`]: Fix bug when using floating point exponent\n  [#6104](https://github.com/rust-lang/rust-clippy/pull/6104)\n* [`mistyped_literal_suffixes`]: No longer lints on the fractional part of a\n  float (e.g. `713.32_64`)\n  [#6114](https://github.com/rust-lang/rust-clippy/pull/6114)\n* [`invalid_regex`]: No longer lint on unicode characters within `bytes::Regex`\n  [#6132](https://github.com/rust-lang/rust-clippy/pull/6132)\n* [`boxed_local`]: No longer lints on `extern fn` arguments\n  [#6133](https://github.com/rust-lang/rust-clippy/pull/6133)\n* [`needless_lifetimes`]: Fix regression, where lifetime is used in `where`\n  clause [#6198](https://github.com/rust-lang/rust-clippy/pull/6198)\n\n### Suggestion Fixes/Improvements\n\n* [`unnecessary_sort_by`]: Avoid dereferencing the suggested closure parameter\n  [#6078](https://github.com/rust-lang/rust-clippy/pull/6078)\n* [`needless_arbitrary_self_type`]: Correctly handle expanded code\n  [#6093](https://github.com/rust-lang/rust-clippy/pull/6093)\n* [`useless_format`]: Preserve raw strings in suggestion\n  [#6151](https://github.com/rust-lang/rust-clippy/pull/6151)\n* [`empty_loop`]: Suggest alternatives\n  [#6162](https://github.com/rust-lang/rust-clippy/pull/6162)\n* [`borrowed_box`]: Correctly add parentheses in suggestion\n  [#6200](https://github.com/rust-lang/rust-clippy/pull/6200)\n* [`unused_unit`]: Improve suggestion formatting\n  [#6247](https://github.com/rust-lang/rust-clippy/pull/6247)\n\n### Documentation Improvements\n\n* Some doc improvements:\n    * [`rc_buffer`] [#6090](https://github.com/rust-lang/rust-clippy/pull/6090)\n    * [`empty_loop`] [#6162](https://github.com/rust-lang/rust-clippy/pull/6162)\n* [`doc_markdown`]: Document problematic link text style\n  [#6107](https://github.com/rust-lang/rust-clippy/pull/6107)\n\n## Rust 1.48\n\nReleased 2020-11-19\n\n[View all 99 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-08-11T13%3A14%3A38Z..2020-09-23T18%3A55%3A22Z+base%3Amaster)\n\n### New lints\n\n* [`self_assignment`] [#5894](https://github.com/rust-lang/rust-clippy/pull/5894)\n* [`unnecessary_lazy_evaluations`] [#5720](https://github.com/rust-lang/rust-clippy/pull/5720)\n* [`manual_strip`] [#6038](https://github.com/rust-lang/rust-clippy/pull/6038)\n* [`map_err_ignore`] [#5998](https://github.com/rust-lang/rust-clippy/pull/5998)\n* [`rc_buffer`] [#6044](https://github.com/rust-lang/rust-clippy/pull/6044)\n* `to_string_in_display` [#5831](https://github.com/rust-lang/rust-clippy/pull/5831)\n* `single_char_push_str` [#5881](https://github.com/rust-lang/rust-clippy/pull/5881)\n\n### Moves and Deprecations\n\n* Downgrade [`verbose_bit_mask`] to pedantic\n  [#6036](https://github.com/rust-lang/rust-clippy/pull/6036)\n\n### Enhancements\n\n* Extend [`precedence`] to handle chains of methods combined with unary negation\n  [#5928](https://github.com/rust-lang/rust-clippy/pull/5928)\n* [`useless_vec`]: add a configuration value for the maximum allowed size on the stack\n  [#5907](https://github.com/rust-lang/rust-clippy/pull/5907)\n* [`suspicious_arithmetic_impl`]: extend to implementations of `BitAnd`, `BitOr`, `BitXor`, `Rem`, `Shl`, and `Shr`\n  [#5884](https://github.com/rust-lang/rust-clippy/pull/5884)\n* `invalid_atomic_ordering`: detect misuse of `compare_exchange`, `compare_exchange_weak`, and `fetch_update`\n  [#6025](https://github.com/rust-lang/rust-clippy/pull/6025)\n* Avoid [`redundant_pattern_matching`] triggering in macros\n  [#6069](https://github.com/rust-lang/rust-clippy/pull/6069)\n* [`option_if_let_else`]: distinguish pure from impure `else` expressions\n  [#5937](https://github.com/rust-lang/rust-clippy/pull/5937)\n* [`needless_doctest_main`]: parse doctests instead of using textual search\n  [#5912](https://github.com/rust-lang/rust-clippy/pull/5912)\n* [`wildcard_imports`]: allow `prelude` to appear in any segment of an import\n  [#5929](https://github.com/rust-lang/rust-clippy/pull/5929)\n* Re-enable [`len_zero`] for ranges now that `range_is_empty` is stable\n  [#5961](https://github.com/rust-lang/rust-clippy/pull/5961)\n* [`option_as_ref_deref`]: catch fully-qualified calls to `Deref::deref` and `DerefMut::deref_mut`\n  [#5933](https://github.com/rust-lang/rust-clippy/pull/5933)\n\n### False Positive Fixes\n\n* [`useless_attribute`]: permit allowing [`wildcard_imports`] and [`enum_glob_use`]\n  [#5994](https://github.com/rust-lang/rust-clippy/pull/5994)\n* [`transmute_ptr_to_ptr`]: avoid suggesting dereferencing raw pointers in const contexts\n  [#5999](https://github.com/rust-lang/rust-clippy/pull/5999)\n* [`redundant_closure_call`]: take into account usages of the closure in nested functions and closures\n  [#5920](https://github.com/rust-lang/rust-clippy/pull/5920)\n* Fix false positive in [`borrow_interior_mutable_const`] when referencing a field behind a pointer\n  [#5949](https://github.com/rust-lang/rust-clippy/pull/5949)\n* [`doc_markdown`]: allow using \"GraphQL\" without backticks\n  [#5996](https://github.com/rust-lang/rust-clippy/pull/5996)\n* `to_string_in_display`: avoid linting when calling `to_string()` on anything that is not `self`\n  [#5971](https://github.com/rust-lang/rust-clippy/pull/5971)\n* [`indexing_slicing`] and [`out_of_bounds_indexing`] treat references to arrays as arrays\n  [#6034](https://github.com/rust-lang/rust-clippy/pull/6034)\n* [`should_implement_trait`]: ignore methods with lifetime parameters\n  [#5725](https://github.com/rust-lang/rust-clippy/pull/5725)\n* [`needless_return`]: avoid linting if a temporary borrows a local variable\n  [#5903](https://github.com/rust-lang/rust-clippy/pull/5903)\n* Restrict [`unnecessary_sort_by`] to non-reference, Copy types\n  [#6006](https://github.com/rust-lang/rust-clippy/pull/6006)\n* Avoid suggesting `from_bits`/`to_bits` in const contexts in [`transmute_int_to_float`]\n  [#5919](https://github.com/rust-lang/rust-clippy/pull/5919)\n* [`declare_interior_mutable_const`] and [`borrow_interior_mutable_const`]: improve detection of interior mutable types\n  [#6046](https://github.com/rust-lang/rust-clippy/pull/6046)\n\n### Suggestion Fixes/Improvements\n\n* [`let_and_return`]: add a cast to the suggestion when the return expression has adjustments\n  [#5946](https://github.com/rust-lang/rust-clippy/pull/5946)\n* [`useless_conversion`]: show the type in the error message\n  [#6035](https://github.com/rust-lang/rust-clippy/pull/6035)\n* [`unnecessary_mut_passed`]: discriminate between functions and methods in the error message\n  [#5892](https://github.com/rust-lang/rust-clippy/pull/5892)\n* [`float_cmp`] and [`float_cmp_const`]: change wording to make margin of error less ambiguous\n  [#6043](https://github.com/rust-lang/rust-clippy/pull/6043)\n* [`default_trait_access`]: do not use unnecessary type parameters in the suggestion\n  [#5993](https://github.com/rust-lang/rust-clippy/pull/5993)\n* [`collapsible_if`]: don't use expanded code in the suggestion\n  [#5992](https://github.com/rust-lang/rust-clippy/pull/5992)\n* Do not suggest empty format strings in [`print_with_newline`] and [`write_with_newline`]\n  [#6042](https://github.com/rust-lang/rust-clippy/pull/6042)\n* [`unit_arg`]: improve the readability of the suggestion\n  [#5931](https://github.com/rust-lang/rust-clippy/pull/5931)\n* [`stable_sort_primitive`]: print the type that is being sorted in the lint message\n  [#5935](https://github.com/rust-lang/rust-clippy/pull/5935)\n* Show line count and max lines in [`too_many_lines`] lint message\n  [#6009](https://github.com/rust-lang/rust-clippy/pull/6009)\n* Keep parentheses in the suggestion of [`useless_conversion`] where applicable\n  [#5900](https://github.com/rust-lang/rust-clippy/pull/5900)\n* [`option_map_unit_fn`] and [`result_map_unit_fn`]: print the unit type `()` explicitly\n  [#6024](https://github.com/rust-lang/rust-clippy/pull/6024)\n* [`redundant_allocation`]: suggest replacing `Rc<Box<T>>` with `Rc<T>`\n  [#5899](https://github.com/rust-lang/rust-clippy/pull/5899)\n* Make lint messages adhere to rustc dev guide conventions\n  [#5893](https://github.com/rust-lang/rust-clippy/pull/5893)\n\n### ICE Fixes\n\n* Fix ICE in [`repeat_once`]\n  [#5948](https://github.com/rust-lang/rust-clippy/pull/5948)\n\n### Documentation Improvements\n\n* [`mutable_key_type`]: explain potential for false positives when the interior mutable type is not accessed in the `Hash` implementation\n  [#6019](https://github.com/rust-lang/rust-clippy/pull/6019)\n* [`unnecessary_mut_passed`]: fix typo\n  [#5913](https://github.com/rust-lang/rust-clippy/pull/5913)\n* Add example of false positive to [`ptr_arg`] docs.\n  [#5885](https://github.com/rust-lang/rust-clippy/pull/5885)\n* [`box_vec`](https://rust-lang.github.io/rust-clippy/master/index.html#box_collection), [`vec_box`] and [`borrowed_box`]: add link to the documentation of `Box`\n  [#6023](https://github.com/rust-lang/rust-clippy/pull/6023)\n\n## Rust 1.47\n\nReleased 2020-10-08\n\n[View all 76 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-06-23T16%3A27%3A11Z..2020-08-11T12%3A52%3A41Z+base%3Amaster)\n\n### New lints\n\n* [`derive_ord_xor_partial_ord`] [#5848](https://github.com/rust-lang/rust-clippy/pull/5848)\n* [`trait_duplication_in_bounds`] [#5852](https://github.com/rust-lang/rust-clippy/pull/5852)\n* [`map_identity`] [#5694](https://github.com/rust-lang/rust-clippy/pull/5694)\n* [`unit_return_expecting_ord`] [#5737](https://github.com/rust-lang/rust-clippy/pull/5737)\n* [`pattern_type_mismatch`] [#4841](https://github.com/rust-lang/rust-clippy/pull/4841)\n* [`repeat_once`] [#5773](https://github.com/rust-lang/rust-clippy/pull/5773)\n* [`same_item_push`] [#5825](https://github.com/rust-lang/rust-clippy/pull/5825)\n* [`needless_arbitrary_self_type`] [#5869](https://github.com/rust-lang/rust-clippy/pull/5869)\n* [`match_like_matches_macro`] [#5769](https://github.com/rust-lang/rust-clippy/pull/5769)\n* [`stable_sort_primitive`] [#5809](https://github.com/rust-lang/rust-clippy/pull/5809)\n* [`blanket_clippy_restriction_lints`] [#5750](https://github.com/rust-lang/rust-clippy/pull/5750)\n* [`option_if_let_else`] [#5301](https://github.com/rust-lang/rust-clippy/pull/5301)\n\n### Moves and Deprecations\n\n* Deprecate [`regex_macro`] lint\n  [#5760](https://github.com/rust-lang/rust-clippy/pull/5760)\n* Move [`range_minus_one`] to `pedantic`\n  [#5752](https://github.com/rust-lang/rust-clippy/pull/5752)\n\n### Enhancements\n\n* Improve [`needless_collect`] by catching `collect` calls followed by `iter` or `into_iter` calls\n  [#5837](https://github.com/rust-lang/rust-clippy/pull/5837)\n* [`panic`], [`todo`], [`unimplemented`] and [`unreachable`] now detect calls with formatting\n  [#5811](https://github.com/rust-lang/rust-clippy/pull/5811)\n* Detect more cases of [`suboptimal_flops`] and [`imprecise_flops`]\n  [#5443](https://github.com/rust-lang/rust-clippy/pull/5443)\n* Handle asymmetrical implementations of `PartialEq` in [`cmp_owned`]\n  [#5701](https://github.com/rust-lang/rust-clippy/pull/5701)\n* Make it possible to allow [`unsafe_derive_deserialize`]\n  [#5870](https://github.com/rust-lang/rust-clippy/pull/5870)\n* Catch `ord.min(a).max(b)` where a < b in [`min_max`]\n  [#5871](https://github.com/rust-lang/rust-clippy/pull/5871)\n* Make [`clone_on_copy`] suggestion machine applicable\n  [#5745](https://github.com/rust-lang/rust-clippy/pull/5745)\n* Enable [`len_zero`] on ranges now that `is_empty` is stable on them\n  [#5961](https://github.com/rust-lang/rust-clippy/pull/5961)\n\n### False Positive Fixes\n\n* Avoid triggering [`or_fun_call`] with const fns that take no arguments\n  [#5889](https://github.com/rust-lang/rust-clippy/pull/5889)\n* Fix [`redundant_closure_call`] false positive for closures that have multiple calls\n  [#5800](https://github.com/rust-lang/rust-clippy/pull/5800)\n* Don't lint cases involving `ManuallyDrop` in [`redundant_clone`]\n  [#5824](https://github.com/rust-lang/rust-clippy/pull/5824)\n* Treat a single expression the same as a single statement in the 2nd arm of a match in [`single_match_else`]\n  [#5771](https://github.com/rust-lang/rust-clippy/pull/5771)\n* Don't trigger [`unnested_or_patterns`] if the feature `or_patterns` is not enabled\n  [#5758](https://github.com/rust-lang/rust-clippy/pull/5758)\n* Avoid linting if key borrows in [`unnecessary_sort_by`]\n  [#5756](https://github.com/rust-lang/rust-clippy/pull/5756)\n* Consider `Try` impl for `Poll` when generating suggestions in [`try_err`]\n  [#5857](https://github.com/rust-lang/rust-clippy/pull/5857)\n* Take input lifetimes into account in `manual_async_fn`\n  [#5859](https://github.com/rust-lang/rust-clippy/pull/5859)\n* Fix multiple false positives in [`type_repetition_in_bounds`] and add a configuration option\n  [#5761](https://github.com/rust-lang/rust-clippy/pull/5761)\n* Limit the [`suspicious_arithmetic_impl`] lint to one binary operation\n  [#5820](https://github.com/rust-lang/rust-clippy/pull/5820)\n\n### Suggestion Fixes/Improvements\n\n* Improve readability of [`shadow_unrelated`] suggestion by truncating the RHS snippet\n  [#5788](https://github.com/rust-lang/rust-clippy/pull/5788)\n* Suggest `filter_map` instead of `flat_map` when mapping to `Option` in [`map_flatten`]\n  [#5846](https://github.com/rust-lang/rust-clippy/pull/5846)\n* Ensure suggestion is shown correctly for long method call chains in [`iter_nth_zero`]\n  [#5793](https://github.com/rust-lang/rust-clippy/pull/5793)\n* Drop borrow operator in suggestions of [`redundant_pattern_matching`]\n  [#5815](https://github.com/rust-lang/rust-clippy/pull/5815)\n* Add suggestion for [`iter_skip_next`]\n  [#5843](https://github.com/rust-lang/rust-clippy/pull/5843)\n* Improve [`collapsible_if`] fix suggestion\n  [#5732](https://github.com/rust-lang/rust-clippy/pull/5732)\n\n### ICE Fixes\n\n* Fix ICE caused by [`needless_collect`]\n  [#5877](https://github.com/rust-lang/rust-clippy/pull/5877)\n* Fix ICE caused by [`unnested_or_patterns`]\n  [#5784](https://github.com/rust-lang/rust-clippy/pull/5784)\n\n### Documentation Improvements\n\n* Fix grammar of [`await_holding_lock`] documentation\n  [#5748](https://github.com/rust-lang/rust-clippy/pull/5748)\n\n### Others\n\n* Make lints adhere to the rustc dev guide\n  [#5888](https://github.com/rust-lang/rust-clippy/pull/5888)\n\n## Rust 1.46\n\nReleased 2020-08-27\n\n[View all 48 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-05-31T12%3A50%3A53Z..2020-06-23T15%3A00%3A32Z+base%3Amaster)\n\n### New lints\n\n* [`unnested_or_patterns`] [#5378](https://github.com/rust-lang/rust-clippy/pull/5378)\n* [`iter_next_slice`] [#5597](https://github.com/rust-lang/rust-clippy/pull/5597)\n* [`unnecessary_sort_by`] [#5623](https://github.com/rust-lang/rust-clippy/pull/5623)\n* [`vec_resize_to_zero`] [#5637](https://github.com/rust-lang/rust-clippy/pull/5637)\n\n### Moves and Deprecations\n\n* Move [`cast_ptr_alignment`] to pedantic [#5667](https://github.com/rust-lang/rust-clippy/pull/5667)\n\n### Enhancements\n\n* Improve [`mem_replace_with_uninit`] lint [#5695](https://github.com/rust-lang/rust-clippy/pull/5695)\n\n### False Positive Fixes\n\n* [`len_zero`]: Avoid linting ranges when the `range_is_empty` feature is not enabled\n  [#5656](https://github.com/rust-lang/rust-clippy/pull/5656)\n* [`let_and_return`]: Don't lint if a temporary borrow is involved\n  [#5680](https://github.com/rust-lang/rust-clippy/pull/5680)\n* [`reversed_empty_ranges`]: Avoid linting `N..N` in for loop arguments in\n  [#5692](https://github.com/rust-lang/rust-clippy/pull/5692)\n* [`if_same_then_else`]: Don't assume multiplication is always commutative\n  [#5702](https://github.com/rust-lang/rust-clippy/pull/5702)\n* [`disallowed_names`]: Remove `bar` from the default configuration\n  [#5712](https://github.com/rust-lang/rust-clippy/pull/5712)\n* [`redundant_pattern_matching`]: Avoid suggesting non-`const fn` calls in const contexts\n  [#5724](https://github.com/rust-lang/rust-clippy/pull/5724)\n\n### Suggestion Fixes/Improvements\n\n* Fix suggestion of [`unit_arg`] lint, so that it suggest semantic equivalent code\n  [#4455](https://github.com/rust-lang/rust-clippy/pull/4455)\n* Add auto applicable suggestion to [`macro_use_imports`]\n  [#5279](https://github.com/rust-lang/rust-clippy/pull/5279)\n\n### ICE Fixes\n\n* Fix ICE in the `consts` module of Clippy [#5709](https://github.com/rust-lang/rust-clippy/pull/5709)\n\n### Documentation Improvements\n\n* Improve code examples across multiple lints [#5664](https://github.com/rust-lang/rust-clippy/pull/5664)\n\n### Others\n\n* Introduce a `--rustc` flag to `clippy-driver`, which turns `clippy-driver`\n  into `rustc` and passes all the given arguments to `rustc`. This is especially\n  useful for tools that need the `rustc` version Clippy was compiled with,\n  instead of the Clippy version. E.g. `clippy-driver --rustc --version` will\n  print the output of `rustc --version`.\n  [#5178](https://github.com/rust-lang/rust-clippy/pull/5178)\n* New issue templates now make it easier to complain if Clippy is too annoying\n  or not annoying enough! [#5735](https://github.com/rust-lang/rust-clippy/pull/5735)\n\n## Rust 1.45\n\nReleased 2020-07-16\n\n[View all 81 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-04-18T20%3A18%3A04Z..2020-05-27T19%3A25%3A04Z+base%3Amaster)\n\n### New lints\n\n* [`match_wildcard_for_single_variants`] [#5582](https://github.com/rust-lang/rust-clippy/pull/5582)\n* [`unsafe_derive_deserialize`] [#5493](https://github.com/rust-lang/rust-clippy/pull/5493)\n* [`if_let_mutex`] [#5332](https://github.com/rust-lang/rust-clippy/pull/5332)\n* [`mismatched_target_os`] [#5506](https://github.com/rust-lang/rust-clippy/pull/5506)\n* [`await_holding_lock`] [#5439](https://github.com/rust-lang/rust-clippy/pull/5439)\n* [`match_on_vec_items`] [#5522](https://github.com/rust-lang/rust-clippy/pull/5522)\n* [`manual_async_fn`] [#5576](https://github.com/rust-lang/rust-clippy/pull/5576)\n* [`reversed_empty_ranges`] [#5583](https://github.com/rust-lang/rust-clippy/pull/5583)\n* [`manual_non_exhaustive`] [#5550](https://github.com/rust-lang/rust-clippy/pull/5550)\n\n### Moves and Deprecations\n\n* Downgrade [`match_bool`] to pedantic [#5408](https://github.com/rust-lang/rust-clippy/pull/5408)\n* Downgrade [`match_wild_err_arm`] to pedantic and update help messages. [#5622](https://github.com/rust-lang/rust-clippy/pull/5622)\n* Downgrade [`useless_let_if_seq`] to nursery. [#5599](https://github.com/rust-lang/rust-clippy/pull/5599)\n* Generalize `option_and_then_some` and rename to [`bind_instead_of_map`]. [#5529](https://github.com/rust-lang/rust-clippy/pull/5529)\n* Rename `identity_conversion` to [`useless_conversion`]. [#5568](https://github.com/rust-lang/rust-clippy/pull/5568)\n* Merge `block_in_if_condition_expr` and `block_in_if_condition_stmt` into [`blocks_in_if_conditions`].\n[#5563](https://github.com/rust-lang/rust-clippy/pull/5563)\n* Merge `option_map_unwrap_or`, `option_map_unwrap_or_else` and `result_map_unwrap_or_else` into [`map_unwrap_or`].\n[#5563](https://github.com/rust-lang/rust-clippy/pull/5563)\n* Merge `option_unwrap_used` and `result_unwrap_used` into [`unwrap_used`].\n[#5563](https://github.com/rust-lang/rust-clippy/pull/5563)\n* Merge `option_expect_used` and `result_expect_used` into [`expect_used`].\n[#5563](https://github.com/rust-lang/rust-clippy/pull/5563)\n* Merge `for_loop_over_option` and `for_loop_over_result` into [`for_loops_over_fallibles`].\n[#5563](https://github.com/rust-lang/rust-clippy/pull/5563)\n\n### Enhancements\n\n* Avoid running cargo lints when not enabled to improve performance. [#5505](https://github.com/rust-lang/rust-clippy/pull/5505)\n* Extend [`useless_conversion`] with `TryFrom` and `TryInto`. [#5631](https://github.com/rust-lang/rust-clippy/pull/5631)\n* Lint also in type parameters and where clauses in [`unused_unit`]. [#5592](https://github.com/rust-lang/rust-clippy/pull/5592)\n* Do not suggest deriving `Default` in [`new_without_default`]. [#5616](https://github.com/rust-lang/rust-clippy/pull/5616)\n\n### False Positive Fixes\n\n* [`while_let_on_iterator`] [#5525](https://github.com/rust-lang/rust-clippy/pull/5525)\n* [`empty_line_after_outer_attr`] [#5609](https://github.com/rust-lang/rust-clippy/pull/5609)\n* [`unnecessary_unwrap`] [#5558](https://github.com/rust-lang/rust-clippy/pull/5558)\n* [`comparison_chain`] [#5596](https://github.com/rust-lang/rust-clippy/pull/5596)\n* Don't trigger [`used_underscore_binding`] in await desugaring. [#5535](https://github.com/rust-lang/rust-clippy/pull/5535)\n* Don't trigger [`borrowed_box`] on mutable references. [#5491](https://github.com/rust-lang/rust-clippy/pull/5491)\n* Allow `1 << 0` in [`identity_op`]. [#5602](https://github.com/rust-lang/rust-clippy/pull/5602)\n* Allow `use super::*;` glob imports in [`wildcard_imports`]. [#5564](https://github.com/rust-lang/rust-clippy/pull/5564)\n* Whitelist more words in [`doc_markdown`]. [#5611](https://github.com/rust-lang/rust-clippy/pull/5611)\n* Skip dev and build deps in [`multiple_crate_versions`]. [#5636](https://github.com/rust-lang/rust-clippy/pull/5636)\n* Honor `allow` attribute on arguments in [`ptr_arg`]. [#5647](https://github.com/rust-lang/rust-clippy/pull/5647)\n* Honor lint level attributes for [`redundant_field_names`], [`just_underscores_and_digits`], [`many_single_char_names`]\nand [`similar_names`]. [#5651](https://github.com/rust-lang/rust-clippy/pull/5651)\n* Ignore calls to `len` in [`or_fun_call`]. [#4429](https://github.com/rust-lang/rust-clippy/pull/4429)\n\n### Suggestion Improvements\n\n* Simplify suggestions in [`manual_memcpy`]. [#5536](https://github.com/rust-lang/rust-clippy/pull/5536)\n* Fix suggestion in [`redundant_pattern_matching`] for macros. [#5511](https://github.com/rust-lang/rust-clippy/pull/5511)\n* Avoid suggesting `copied()` for mutable references in [`map_clone`]. [#5530](https://github.com/rust-lang/rust-clippy/pull/5530)\n* Improve help message for [`clone_double_ref`]. [#5547](https://github.com/rust-lang/rust-clippy/pull/5547)\n\n### ICE Fixes\n\n* Fix ICE caused in unwrap module. [#5590](https://github.com/rust-lang/rust-clippy/pull/5590)\n* Fix ICE on rustc test issue-69020-assoc-const-arith-overflow.rs [#5499](https://github.com/rust-lang/rust-clippy/pull/5499)\n\n### Documentation\n\n* Clarify the documentation of [`unnecessary_mut_passed`]. [#5639](https://github.com/rust-lang/rust-clippy/pull/5639)\n* Extend example for [`unneeded_field_pattern`]. [#5541](https://github.com/rust-lang/rust-clippy/pull/5541)\n\n## Rust 1.44\n\nReleased 2020-06-04\n\n[View all 124 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-03-05T17%3A30%3A53Z..2020-04-18T09%3A20%3A51Z+base%3Amaster)\n\n### New lints\n\n* [`explicit_deref_methods`] [#5226](https://github.com/rust-lang/rust-clippy/pull/5226)\n* [`implicit_saturating_sub`] [#5427](https://github.com/rust-lang/rust-clippy/pull/5427)\n* [`macro_use_imports`] [#5230](https://github.com/rust-lang/rust-clippy/pull/5230)\n* [`verbose_file_reads`] [#5272](https://github.com/rust-lang/rust-clippy/pull/5272)\n* [`future_not_send`] [#5423](https://github.com/rust-lang/rust-clippy/pull/5423)\n* [`redundant_pub_crate`] [#5319](https://github.com/rust-lang/rust-clippy/pull/5319)\n* [`large_const_arrays`] [#5248](https://github.com/rust-lang/rust-clippy/pull/5248)\n* [`result_map_or_into_option`] [#5415](https://github.com/rust-lang/rust-clippy/pull/5415)\n* [`redundant_allocation`] [#5349](https://github.com/rust-lang/rust-clippy/pull/5349)\n* [`fn_address_comparisons`] [#5294](https://github.com/rust-lang/rust-clippy/pull/5294)\n* [`vtable_address_comparisons`] [#5294](https://github.com/rust-lang/rust-clippy/pull/5294)\n\n\n### Moves and Deprecations\n\n* Deprecate [`replace_consts`] lint [#5380](https://github.com/rust-lang/rust-clippy/pull/5380)\n* Move [`cognitive_complexity`] to nursery [#5428](https://github.com/rust-lang/rust-clippy/pull/5428)\n* Move [`useless_transmute`] to nursery [#5364](https://github.com/rust-lang/rust-clippy/pull/5364)\n* Downgrade [`inefficient_to_string`] to pedantic [#5412](https://github.com/rust-lang/rust-clippy/pull/5412)\n* Downgrade [`option_option`] to pedantic [#5401](https://github.com/rust-lang/rust-clippy/pull/5401)\n* Downgrade [`unreadable_literal`] to pedantic [#5419](https://github.com/rust-lang/rust-clippy/pull/5419)\n* Downgrade [`let_unit_value`] to pedantic [#5409](https://github.com/rust-lang/rust-clippy/pull/5409)\n* Downgrade [`trivially_copy_pass_by_ref`] to pedantic [#5410](https://github.com/rust-lang/rust-clippy/pull/5410)\n* Downgrade [`implicit_hasher`] to pedantic [#5411](https://github.com/rust-lang/rust-clippy/pull/5411)\n\n### Enhancements\n\n* On _nightly_ you can now use `cargo clippy --fix -Z unstable-options` to\n  auto-fix lints that support this [#5363](https://github.com/rust-lang/rust-clippy/pull/5363)\n* Make [`redundant_clone`] also trigger on cases where the cloned value is not\n  consumed. [#5304](https://github.com/rust-lang/rust-clippy/pull/5304)\n* Expand [`integer_arithmetic`] to also disallow bit-shifting [#5430](https://github.com/rust-lang/rust-clippy/pull/5430)\n* [`option_as_ref_deref`] now detects more deref cases [#5425](https://github.com/rust-lang/rust-clippy/pull/5425)\n* [`large_enum_variant`] now report the sizes of the largest and second-largest variants [#5466](https://github.com/rust-lang/rust-clippy/pull/5466)\n* [`bool_comparison`] now also checks for inequality comparisons that can be\n  written more concisely [#5365](https://github.com/rust-lang/rust-clippy/pull/5365)\n* Expand [`clone_on_copy`] to work in method call arguments as well [#5441](https://github.com/rust-lang/rust-clippy/pull/5441)\n* [`redundant_pattern_matching`] now also handles `while let` [#5483](https://github.com/rust-lang/rust-clippy/pull/5483)\n* [`integer_arithmetic`] now also lints references of integers [#5329](https://github.com/rust-lang/rust-clippy/pull/5329)\n* Expand [`float_cmp_const`] to also work on arrays [#5345](https://github.com/rust-lang/rust-clippy/pull/5345)\n* Trigger [`map_flatten`] when map is called on an `Option` [#5473](https://github.com/rust-lang/rust-clippy/pull/5473)\n\n### False Positive Fixes\n\n* [`many_single_char_names`] [#5468](https://github.com/rust-lang/rust-clippy/pull/5468)\n* [`should_implement_trait`] [#5437](https://github.com/rust-lang/rust-clippy/pull/5437)\n* [`unused_self`] [#5387](https://github.com/rust-lang/rust-clippy/pull/5387)\n* [`redundant_clone`] [#5453](https://github.com/rust-lang/rust-clippy/pull/5453)\n* [`precedence`] [#5445](https://github.com/rust-lang/rust-clippy/pull/5445)\n* [`suspicious_op_assign_impl`] [#5424](https://github.com/rust-lang/rust-clippy/pull/5424)\n* [`needless_lifetimes`] [#5293](https://github.com/rust-lang/rust-clippy/pull/5293)\n* [`redundant_pattern`] [#5287](https://github.com/rust-lang/rust-clippy/pull/5287)\n* [`inconsistent_digit_grouping`] [#5451](https://github.com/rust-lang/rust-clippy/pull/5451)\n\n\n### Suggestion Improvements\n\n* Improved [`question_mark`] lint suggestion so that it doesn't add redundant `as_ref()` [#5481](https://github.com/rust-lang/rust-clippy/pull/5481)\n* Improve the suggested placeholder in [`option_map_unit_fn`] [#5292](https://github.com/rust-lang/rust-clippy/pull/5292)\n* Improve suggestion for [`match_single_binding`] when triggered inside a closure [#5350](https://github.com/rust-lang/rust-clippy/pull/5350)\n\n### ICE Fixes\n\n* Handle the unstable `trivial_bounds` feature [#5296](https://github.com/rust-lang/rust-clippy/pull/5296)\n* `shadow_*` lints [#5297](https://github.com/rust-lang/rust-clippy/pull/5297)\n\n### Documentation\n\n* Fix documentation generation for configurable lints [#5353](https://github.com/rust-lang/rust-clippy/pull/5353)\n* Update documentation for [`new_ret_no_self`] [#5448](https://github.com/rust-lang/rust-clippy/pull/5448)\n* The documentation for [`option_option`] now suggest using a tri-state enum [#5403](https://github.com/rust-lang/rust-clippy/pull/5403)\n* Fix bit mask example in [`verbose_bit_mask`] documentation [#5454](https://github.com/rust-lang/rust-clippy/pull/5454)\n* [`wildcard_imports`] documentation now mentions that `use ...::prelude::*` is\n  not linted [#5312](https://github.com/rust-lang/rust-clippy/pull/5312)\n\n## Rust 1.43\n\nReleased 2020-04-23\n\n[View all 91 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2020-01-26T16%3A01%3A11Z..2020-03-04T16%3A45%3A37Z+base%3Amaster)\n\n### New lints\n\n* [`imprecise_flops`] [#4897](https://github.com/rust-lang/rust-clippy/pull/4897)\n* [`suboptimal_flops`] [#4897](https://github.com/rust-lang/rust-clippy/pull/4897)\n* [`wildcard_imports`] [#5029](https://github.com/rust-lang/rust-clippy/pull/5029)\n* [`single_component_path_imports`] [#5058](https://github.com/rust-lang/rust-clippy/pull/5058)\n* [`match_single_binding`] [#5061](https://github.com/rust-lang/rust-clippy/pull/5061)\n* [`let_underscore_lock`] [#5101](https://github.com/rust-lang/rust-clippy/pull/5101)\n* [`struct_excessive_bools`] [#5125](https://github.com/rust-lang/rust-clippy/pull/5125)\n* [`fn_params_excessive_bools`] [#5125](https://github.com/rust-lang/rust-clippy/pull/5125)\n* [`option_env_unwrap`] [#5148](https://github.com/rust-lang/rust-clippy/pull/5148)\n* [`lossy_float_literal`] [#5202](https://github.com/rust-lang/rust-clippy/pull/5202)\n* [`rest_pat_in_fully_bound_structs`] [#5258](https://github.com/rust-lang/rust-clippy/pull/5258)\n\n### Moves and Deprecations\n\n* Move [`unneeded_field_pattern`] to pedantic group [#5200](https://github.com/rust-lang/rust-clippy/pull/5200)\n\n### Enhancements\n\n* Make [`missing_errors_doc`] lint also trigger on `async` functions\n  [#5181](https://github.com/rust-lang/rust-clippy/pull/5181)\n* Add more constants to [`approx_constant`] [#5193](https://github.com/rust-lang/rust-clippy/pull/5193)\n* Extend [`question_mark`] lint [#5266](https://github.com/rust-lang/rust-clippy/pull/5266)\n\n### False Positive Fixes\n\n* [`use_debug`] [#5047](https://github.com/rust-lang/rust-clippy/pull/5047)\n* [`unnecessary_unwrap`] [#5132](https://github.com/rust-lang/rust-clippy/pull/5132)\n* [`zero_prefixed_literal`] [#5170](https://github.com/rust-lang/rust-clippy/pull/5170)\n* [`missing_const_for_fn`] [#5216](https://github.com/rust-lang/rust-clippy/pull/5216)\n\n### Suggestion Improvements\n\n* Improve suggestion when blocks of code are suggested [#5134](https://github.com/rust-lang/rust-clippy/pull/5134)\n\n### ICE Fixes\n\n* `misc_early` lints [#5129](https://github.com/rust-lang/rust-clippy/pull/5129)\n* [`missing_errors_doc`] [#5213](https://github.com/rust-lang/rust-clippy/pull/5213)\n* Fix ICE when evaluating `usize`s [#5256](https://github.com/rust-lang/rust-clippy/pull/5256)\n\n### Documentation\n\n* Improve documentation of [`iter_nth_zero`]\n* Add documentation pages for stable releases [#5171](https://github.com/rust-lang/rust-clippy/pull/5171)\n\n### Others\n\n* Clippy now completely runs on GitHub Actions [#5190](https://github.com/rust-lang/rust-clippy/pull/5190)\n\n\n## Rust 1.42\n\nReleased 2020-03-12\n\n[View all 101 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-12-15T01%3A40%3A34Z..2020-01-26T11%3A22%3A13Z+base%3Amaster)\n\n### New lints\n\n* [`filetype_is_file`] [#4543](https://github.com/rust-lang/rust-clippy/pull/4543)\n* [`let_underscore_must_use`] [#4823](https://github.com/rust-lang/rust-clippy/pull/4823)\n* [`modulo_arithmetic`] [#4867](https://github.com/rust-lang/rust-clippy/pull/4867)\n* [`mem_replace_with_default`] [#4881](https://github.com/rust-lang/rust-clippy/pull/4881)\n* [`mutable_key_type`] [#4885](https://github.com/rust-lang/rust-clippy/pull/4885)\n* [`option_as_ref_deref`] [#4945](https://github.com/rust-lang/rust-clippy/pull/4945)\n* [`wildcard_in_or_patterns`] [#4960](https://github.com/rust-lang/rust-clippy/pull/4960)\n* [`iter_nth_zero`] [#4966](https://github.com/rust-lang/rust-clippy/pull/4966)\n* `invalid_atomic_ordering` [#4999](https://github.com/rust-lang/rust-clippy/pull/4999)\n* [`skip_while_next`] [#5067](https://github.com/rust-lang/rust-clippy/pull/5067)\n\n### Moves and Deprecations\n\n* Move [`transmute_float_to_int`] from nursery to complexity group\n  [#5015](https://github.com/rust-lang/rust-clippy/pull/5015)\n* Move [`range_plus_one`] to pedantic group [#5057](https://github.com/rust-lang/rust-clippy/pull/5057)\n* Move [`debug_assert_with_mut_call`] to nursery group [#5106](https://github.com/rust-lang/rust-clippy/pull/5106)\n* Deprecate `unused_label` [#4930](https://github.com/rust-lang/rust-clippy/pull/4930)\n\n### Enhancements\n\n* Lint vectored IO in [`unused_io_amount`] [#5027](https://github.com/rust-lang/rust-clippy/pull/5027)\n* Make [`vec_box`] configurable by adding a size threshold [#5081](https://github.com/rust-lang/rust-clippy/pull/5081)\n* Also lint constants in [`cmp_nan`] [#4910](https://github.com/rust-lang/rust-clippy/pull/4910)\n* Fix false negative in [`expect_fun_call`] [#4915](https://github.com/rust-lang/rust-clippy/pull/4915)\n* Fix false negative in [`redundant_clone`] [#5017](https://github.com/rust-lang/rust-clippy/pull/5017)\n\n### False Positive Fixes\n\n* [`map_clone`] [#4937](https://github.com/rust-lang/rust-clippy/pull/4937)\n* [`replace_consts`] [#4977](https://github.com/rust-lang/rust-clippy/pull/4977)\n* [`let_and_return`] [#5008](https://github.com/rust-lang/rust-clippy/pull/5008)\n* [`eq_op`] [#5079](https://github.com/rust-lang/rust-clippy/pull/5079)\n* [`possible_missing_comma`] [#5083](https://github.com/rust-lang/rust-clippy/pull/5083)\n* [`debug_assert_with_mut_call`] [#5106](https://github.com/rust-lang/rust-clippy/pull/5106)\n* Don't trigger [`let_underscore_must_use`] in external macros\n  [#5082](https://github.com/rust-lang/rust-clippy/pull/5082)\n* Don't trigger [`empty_loop`] in `no_std` crates [#5086](https://github.com/rust-lang/rust-clippy/pull/5086)\n\n### Suggestion Improvements\n\n* `option_map_unwrap_or` [#4634](https://github.com/rust-lang/rust-clippy/pull/4634)\n* [`wildcard_enum_match_arm`] [#4934](https://github.com/rust-lang/rust-clippy/pull/4934)\n* [`cognitive_complexity`] [#4935](https://github.com/rust-lang/rust-clippy/pull/4935)\n* [`decimal_literal_representation`] [#4956](https://github.com/rust-lang/rust-clippy/pull/4956)\n* `unknown_clippy_lints` [#4963](https://github.com/rust-lang/rust-clippy/pull/4963)\n* [`explicit_into_iter_loop`] [#4978](https://github.com/rust-lang/rust-clippy/pull/4978)\n* [`useless_attribute`] [#5022](https://github.com/rust-lang/rust-clippy/pull/5022)\n* `if_let_some_result` [#5032](https://github.com/rust-lang/rust-clippy/pull/5032)\n\n### ICE fixes\n\n* [`unsound_collection_transmute`] [#4975](https://github.com/rust-lang/rust-clippy/pull/4975)\n\n### Documentation\n\n* Improve documentation of [`empty_enum`], [`replace_consts`], [`redundant_clone`], and [`iterator_step_by_zero`]\n\n\n## Rust 1.41\n\nReleased 2020-01-30\n\n[View all 74 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-10-28T20%3A50%3A24Z..2019-12-12T00%3A53%3A03Z+base%3Amaster)\n\n* New Lints:\n  * [`exit`] [#4697](https://github.com/rust-lang/rust-clippy/pull/4697)\n  * [`to_digit_is_some`] [#4801](https://github.com/rust-lang/rust-clippy/pull/4801)\n  * [`tabs_in_doc_comments`] [#4806](https://github.com/rust-lang/rust-clippy/pull/4806)\n  * [`large_stack_arrays`] [#4807](https://github.com/rust-lang/rust-clippy/pull/4807)\n  * [`same_functions_in_if_condition`] [#4814](https://github.com/rust-lang/rust-clippy/pull/4814)\n  * [`zst_offset`] [#4816](https://github.com/rust-lang/rust-clippy/pull/4816)\n  * [`as_conversions`] [#4821](https://github.com/rust-lang/rust-clippy/pull/4821)\n  * [`missing_errors_doc`] [#4884](https://github.com/rust-lang/rust-clippy/pull/4884)\n  * [`transmute_float_to_int`] [#4889](https://github.com/rust-lang/rust-clippy/pull/4889)\n* Remove plugin interface, see\n  [Inside Rust Blog](https://blog.rust-lang.org/inside-rust/2019/11/04/Clippy-removes-plugin-interface.html) for\n  details [#4714](https://github.com/rust-lang/rust-clippy/pull/4714)\n* Move [`use_self`] to nursery group [#4863](https://github.com/rust-lang/rust-clippy/pull/4863)\n* Deprecate `into_iter_on_array` [#4788](https://github.com/rust-lang/rust-clippy/pull/4788)\n* Expand [`string_lit_as_bytes`] to also trigger when literal has escapes\n  [#4808](https://github.com/rust-lang/rust-clippy/pull/4808)\n* Fix false positive in `comparison_chain` [#4842](https://github.com/rust-lang/rust-clippy/pull/4842)\n* Fix false positive in `while_immutable_condition` [#4730](https://github.com/rust-lang/rust-clippy/pull/4730)\n* Fix false positive in `explicit_counter_loop` [#4803](https://github.com/rust-lang/rust-clippy/pull/4803)\n* Fix false positive in `must_use_candidate` [#4794](https://github.com/rust-lang/rust-clippy/pull/4794)\n* Fix false positive in `print_with_newline` and `write_with_newline`\n  [#4769](https://github.com/rust-lang/rust-clippy/pull/4769)\n* Fix false positive in `derive_hash_xor_eq` [#4766](https://github.com/rust-lang/rust-clippy/pull/4766)\n* Fix false positive in `missing_inline_in_public_items` [#4870](https://github.com/rust-lang/rust-clippy/pull/4870)\n* Fix false positive in `string_add` [#4880](https://github.com/rust-lang/rust-clippy/pull/4880)\n* Fix false positive in `float_arithmetic` [#4851](https://github.com/rust-lang/rust-clippy/pull/4851)\n* Fix false positive in `cast_sign_loss` [#4883](https://github.com/rust-lang/rust-clippy/pull/4883)\n* Fix false positive in `manual_swap` [#4877](https://github.com/rust-lang/rust-clippy/pull/4877)\n* Fix ICEs occurring while checking some block expressions [#4772](https://github.com/rust-lang/rust-clippy/pull/4772)\n* Fix ICE in `use_self` [#4776](https://github.com/rust-lang/rust-clippy/pull/4776)\n* Fix ICEs related to `const_generics` [#4780](https://github.com/rust-lang/rust-clippy/pull/4780)\n* Display help when running `clippy-driver` without arguments, instead of ICEing\n  [#4810](https://github.com/rust-lang/rust-clippy/pull/4810)\n* Clippy has its own ICE message now [#4588](https://github.com/rust-lang/rust-clippy/pull/4588)\n* Show deprecated lints in the documentation again [#4757](https://github.com/rust-lang/rust-clippy/pull/4757)\n* Improve Documentation by adding positive examples to some lints\n  [#4832](https://github.com/rust-lang/rust-clippy/pull/4832)\n\n## Rust 1.40\n\nReleased 2019-12-19\n\n[View all 76 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-09-23T06%3A18%3A04Z..2019-10-28T17%3A34%3A55Z+base%3Amaster)\n\n* New Lints:\n  * [`unneeded_wildcard_pattern`] [#4537](https://github.com/rust-lang/rust-clippy/pull/4537)\n  * [`needless_doctest_main`] [#4603](https://github.com/rust-lang/rust-clippy/pull/4603)\n  * [`suspicious_unary_op_formatting`] [#4615](https://github.com/rust-lang/rust-clippy/pull/4615)\n  * [`debug_assert_with_mut_call`] [#4680](https://github.com/rust-lang/rust-clippy/pull/4680)\n  * [`unused_self`] [#4619](https://github.com/rust-lang/rust-clippy/pull/4619)\n  * [`inefficient_to_string`] [#4683](https://github.com/rust-lang/rust-clippy/pull/4683)\n  * [`must_use_unit`] [#4560](https://github.com/rust-lang/rust-clippy/pull/4560)\n  * [`must_use_candidate`] [#4560](https://github.com/rust-lang/rust-clippy/pull/4560)\n  * [`double_must_use`] [#4560](https://github.com/rust-lang/rust-clippy/pull/4560)\n  * [`comparison_chain`] [#4569](https://github.com/rust-lang/rust-clippy/pull/4569)\n  * [`unsound_collection_transmute`] [#4592](https://github.com/rust-lang/rust-clippy/pull/4592)\n  * [`panic`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n  * [`unreachable`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n  * [`todo`] [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n  * `option_expect_used` [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n  * `result_expect_used` [#4657](https://github.com/rust-lang/rust-clippy/pull/4657)\n* Move `redundant_clone` to perf group [#4509](https://github.com/rust-lang/rust-clippy/pull/4509)\n* Move `manual_mul_add` to nursery group [#4736](https://github.com/rust-lang/rust-clippy/pull/4736)\n* Expand `unit_cmp` to also work with `assert_eq!`, `debug_assert_eq!`, `assert_ne!` and `debug_assert_ne!` [#4613](https://github.com/rust-lang/rust-clippy/pull/4613)\n* Expand `integer_arithmetic` to also detect mutating arithmetic like `+=` [#4585](https://github.com/rust-lang/rust-clippy/pull/4585)\n* Fix false positive in `nonminimal_bool` [#4568](https://github.com/rust-lang/rust-clippy/pull/4568)\n* Fix false positive in `missing_safety_doc` [#4611](https://github.com/rust-lang/rust-clippy/pull/4611)\n* Fix false positive in `cast_sign_loss` [#4614](https://github.com/rust-lang/rust-clippy/pull/4614)\n* Fix false positive in `redundant_clone` [#4509](https://github.com/rust-lang/rust-clippy/pull/4509)\n* Fix false positive in `try_err` [#4721](https://github.com/rust-lang/rust-clippy/pull/4721)\n* Fix false positive in `toplevel_ref_arg` [#4570](https://github.com/rust-lang/rust-clippy/pull/4570)\n* Fix false positive in `multiple_inherent_impl` [#4593](https://github.com/rust-lang/rust-clippy/pull/4593)\n* Improve more suggestions and tests in preparation for the unstable `cargo fix --clippy` [#4575](https://github.com/rust-lang/rust-clippy/pull/4575)\n* Improve suggestion for `zero_ptr` [#4599](https://github.com/rust-lang/rust-clippy/pull/4599)\n* Improve suggestion for `explicit_counter_loop` [#4691](https://github.com/rust-lang/rust-clippy/pull/4691)\n* Improve suggestion for `mul_add` [#4602](https://github.com/rust-lang/rust-clippy/pull/4602)\n* Improve suggestion for `assertions_on_constants` [#4635](https://github.com/rust-lang/rust-clippy/pull/4635)\n* Fix ICE in `use_self` [#4671](https://github.com/rust-lang/rust-clippy/pull/4671)\n* Fix ICE when encountering const casts [#4590](https://github.com/rust-lang/rust-clippy/pull/4590)\n\n## Rust 1.39\n\nReleased 2019-11-07\n\n[View all 100 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-08-11T19%3A21%3A38Z..2019-09-22T12%3A07%3A39Z+base%3Amaster)\n\n* New Lints:\n  * [`uninit_assumed_init`] [#4479](https://github.com/rust-lang/rust-clippy/pull/4479)\n  * [`flat_map_identity`] [#4231](https://github.com/rust-lang/rust-clippy/pull/4231)\n  * [`missing_safety_doc`] [#4535](https://github.com/rust-lang/rust-clippy/pull/4535)\n  * [`mem_replace_with_uninit`] [#4511](https://github.com/rust-lang/rust-clippy/pull/4511)\n  * [`suspicious_map`] [#4394](https://github.com/rust-lang/rust-clippy/pull/4394)\n  * `option_and_then_some` [#4386](https://github.com/rust-lang/rust-clippy/pull/4386)\n  * [`manual_saturating_arithmetic`] [#4498](https://github.com/rust-lang/rust-clippy/pull/4498)\n* Deprecate `unused_collect` lint. This is fully covered by rustc's `#[must_use]` on `collect` [#4348](https://github.com/rust-lang/rust-clippy/pull/4348)\n* Move `type_repetition_in_bounds` to pedantic group [#4403](https://github.com/rust-lang/rust-clippy/pull/4403)\n* Move `cast_lossless` to pedantic group [#4539](https://github.com/rust-lang/rust-clippy/pull/4539)\n* `temporary_cstring_as_ptr` now catches more cases [#4425](https://github.com/rust-lang/rust-clippy/pull/4425)\n* `use_self` now works in constructors, too [#4525](https://github.com/rust-lang/rust-clippy/pull/4525)\n* `cargo_common_metadata` now checks for license files [#4518](https://github.com/rust-lang/rust-clippy/pull/4518)\n* `cognitive_complexity` now includes the measured complexity in the warning message [#4469](https://github.com/rust-lang/rust-clippy/pull/4469)\n* Fix false positives in `block_in_if_*` lints [#4458](https://github.com/rust-lang/rust-clippy/pull/4458)\n* Fix false positive in `cast_lossless` [#4473](https://github.com/rust-lang/rust-clippy/pull/4473)\n* Fix false positive in `clone_on_copy` [#4411](https://github.com/rust-lang/rust-clippy/pull/4411)\n* Fix false positive in `deref_addrof` [#4487](https://github.com/rust-lang/rust-clippy/pull/4487)\n* Fix false positive in `too_many_lines` [#4490](https://github.com/rust-lang/rust-clippy/pull/4490)\n* Fix false positive in `new_ret_no_self` [#4365](https://github.com/rust-lang/rust-clippy/pull/4365)\n* Fix false positive in `manual_swap` [#4478](https://github.com/rust-lang/rust-clippy/pull/4478)\n* Fix false positive in `missing_const_for_fn` [#4450](https://github.com/rust-lang/rust-clippy/pull/4450)\n* Fix false positive in `extra_unused_lifetimes` [#4477](https://github.com/rust-lang/rust-clippy/pull/4477)\n* Fix false positive in `inherent_to_string` [#4460](https://github.com/rust-lang/rust-clippy/pull/4460)\n* Fix false positive in `map_entry` [#4495](https://github.com/rust-lang/rust-clippy/pull/4495)\n* Fix false positive in `unused_unit` [#4445](https://github.com/rust-lang/rust-clippy/pull/4445)\n* Fix false positive in `redundant_pattern` [#4489](https://github.com/rust-lang/rust-clippy/pull/4489)\n* Fix false positive in `wrong_self_convention` [#4369](https://github.com/rust-lang/rust-clippy/pull/4369)\n* Improve various suggestions and tests in preparation for the unstable `cargo fix --clippy` [#4558](https://github.com/rust-lang/rust-clippy/pull/4558)\n* Improve suggestions for `redundant_pattern_matching` [#4352](https://github.com/rust-lang/rust-clippy/pull/4352)\n* Improve suggestions for `explicit_write` [#4544](https://github.com/rust-lang/rust-clippy/pull/4544)\n* Improve suggestion for `or_fun_call` [#4522](https://github.com/rust-lang/rust-clippy/pull/4522)\n* Improve suggestion for `match_as_ref` [#4446](https://github.com/rust-lang/rust-clippy/pull/4446)\n* Improve suggestion for `unnecessary_fold_span` [#4382](https://github.com/rust-lang/rust-clippy/pull/4382)\n* Add suggestions for `unseparated_literal_suffix` [#4401](https://github.com/rust-lang/rust-clippy/pull/4401)\n* Add suggestions for `char_lit_as_u8` [#4418](https://github.com/rust-lang/rust-clippy/pull/4418)\n\n## Rust 1.38\n\nReleased 2019-09-26\n\n[View all 76 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-06-30T13%3A40%3A26Z..2019-08-11T09%3A47%3A27Z+base%3Amaster)\n\n* New Lints:\n  * [`main_recursion`] [#4203](https://github.com/rust-lang/rust-clippy/pull/4203)\n  * [`inherent_to_string`] [#4259](https://github.com/rust-lang/rust-clippy/pull/4259)\n  * [`inherent_to_string_shadow_display`] [#4259](https://github.com/rust-lang/rust-clippy/pull/4259)\n  * [`type_repetition_in_bounds`] [#3766](https://github.com/rust-lang/rust-clippy/pull/3766)\n  * [`try_err`] [#4222](https://github.com/rust-lang/rust-clippy/pull/4222)\n* Move `{unnecessary,panicking}_unwrap` out of nursery [#4307](https://github.com/rust-lang/rust-clippy/pull/4307)\n* Extend the `use_self` lint to suggest uses of `Self::Variant` [#4308](https://github.com/rust-lang/rust-clippy/pull/4308)\n* Improve suggestion for needless return [#4262](https://github.com/rust-lang/rust-clippy/pull/4262)\n* Add auto-fixable suggestion for `let_unit` [#4337](https://github.com/rust-lang/rust-clippy/pull/4337)\n* Fix false positive in `pub_enum_variant_names` and `enum_variant_names` [#4345](https://github.com/rust-lang/rust-clippy/pull/4345)\n* Fix false positive in `cast_ptr_alignment` [#4257](https://github.com/rust-lang/rust-clippy/pull/4257)\n* Fix false positive in `string_lit_as_bytes` [#4233](https://github.com/rust-lang/rust-clippy/pull/4233)\n* Fix false positive in `needless_lifetimes` [#4266](https://github.com/rust-lang/rust-clippy/pull/4266)\n* Fix false positive in `float_cmp` [#4275](https://github.com/rust-lang/rust-clippy/pull/4275)\n* Fix false positives in `needless_return` [#4274](https://github.com/rust-lang/rust-clippy/pull/4274)\n* Fix false negative in `match_same_arms` [#4246](https://github.com/rust-lang/rust-clippy/pull/4246)\n* Fix incorrect suggestion for `needless_bool` [#4335](https://github.com/rust-lang/rust-clippy/pull/4335)\n* Improve suggestion for `cast_ptr_alignment` [#4257](https://github.com/rust-lang/rust-clippy/pull/4257)\n* Improve suggestion for `single_char_literal` [#4361](https://github.com/rust-lang/rust-clippy/pull/4361)\n* Improve suggestion for `len_zero` [#4314](https://github.com/rust-lang/rust-clippy/pull/4314)\n* Fix ICE in `implicit_hasher` [#4268](https://github.com/rust-lang/rust-clippy/pull/4268)\n* Fix allow bug in `trivially_copy_pass_by_ref` [#4250](https://github.com/rust-lang/rust-clippy/pull/4250)\n\n## Rust 1.37\n\nReleased 2019-08-15\n\n[View all 72 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-05-19T08%3A11%3A23Z..2019-06-25T23%3A22%3A22Z+base%3Amaster)\n\n* New Lints:\n  * [`checked_conversions`] [#4088](https://github.com/rust-lang/rust-clippy/pull/4088)\n  * [`get_last_with_len`] [#3832](https://github.com/rust-lang/rust-clippy/pull/3832)\n  * [`integer_division`] [#4195](https://github.com/rust-lang/rust-clippy/pull/4195)\n* Renamed Lint: `const_static_lifetime` is now called [`redundant_static_lifetimes`].\n  The lint now covers statics in addition to consts [#4162](https://github.com/rust-lang/rust-clippy/pull/4162)\n* [`match_same_arms`] now warns for all identical arms, instead of only the first one [#4102](https://github.com/rust-lang/rust-clippy/pull/4102)\n* [`needless_return`] now works with void functions [#4220](https://github.com/rust-lang/rust-clippy/pull/4220)\n* Fix false positive in [`redundant_closure`] [#4190](https://github.com/rust-lang/rust-clippy/pull/4190)\n* Fix false positive in [`useless_attribute`] [#4107](https://github.com/rust-lang/rust-clippy/pull/4107)\n* Fix incorrect suggestion for [`float_cmp`] [#4214](https://github.com/rust-lang/rust-clippy/pull/4214)\n* Add suggestions for [`print_with_newline`] and [`write_with_newline`] [#4136](https://github.com/rust-lang/rust-clippy/pull/4136)\n* Improve suggestions for `option_map_unwrap_or_else` and `result_map_unwrap_or_else` [#4164](https://github.com/rust-lang/rust-clippy/pull/4164)\n* Improve suggestions for [`non_ascii_literal`] [#4119](https://github.com/rust-lang/rust-clippy/pull/4119)\n* Improve diagnostics for [`let_and_return`] [#4137](https://github.com/rust-lang/rust-clippy/pull/4137)\n* Improve diagnostics for [`trivially_copy_pass_by_ref`] [#4071](https://github.com/rust-lang/rust-clippy/pull/4071)\n* Add macro check for [`unreadable_literal`] [#4099](https://github.com/rust-lang/rust-clippy/pull/4099)\n\n## Rust 1.36\n\nReleased 2019-07-04\n\n[View all 81 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-04-10T09%3A41%3A56Z..2019-05-18T00%3A29%3A40Z+base%3Amaster)\n\n* New lints: [`find_map`], [`filter_map_next`] [#4039](https://github.com/rust-lang/rust-clippy/pull/4039)\n* New lint: [`path_buf_push_overwrite`] [#3954](https://github.com/rust-lang/rust-clippy/pull/3954)\n* Move `path_buf_push_overwrite` to the nursery [#4013](https://github.com/rust-lang/rust-clippy/pull/4013)\n* Split [`redundant_closure`] into [`redundant_closure`] and [`redundant_closure_for_method_calls`] [#4110](https://github.com/rust-lang/rust-clippy/pull/4101)\n* Allow allowing of [`toplevel_ref_arg`] lint [#4007](https://github.com/rust-lang/rust-clippy/pull/4007)\n* Fix false negative in [`or_fun_call`] pertaining to nested constructors [#4084](https://github.com/rust-lang/rust-clippy/pull/4084)\n* Fix false positive in [`or_fun_call`] pertaining to enum variant constructors [#4018](https://github.com/rust-lang/rust-clippy/pull/4018)\n* Fix false positive in [`useless_let_if_seq`] pertaining to interior mutability [#4035](https://github.com/rust-lang/rust-clippy/pull/4035)\n* Fix false positive in [`redundant_closure`] pertaining to non-function types [#4008](https://github.com/rust-lang/rust-clippy/pull/4008)\n* Fix false positive in [`let_and_return`] pertaining to attributes on `let`s [#4024](https://github.com/rust-lang/rust-clippy/pull/4024)\n* Fix false positive in [`module_name_repetitions`] lint pertaining to attributes [#4006](https://github.com/rust-lang/rust-clippy/pull/4006)\n* Fix false positive on [`assertions_on_constants`] pertaining to `debug_assert!` [#3989](https://github.com/rust-lang/rust-clippy/pull/3989)\n* Improve suggestion in [`map_clone`] to suggest `.copied()` where applicable  [#3970](https://github.com/rust-lang/rust-clippy/pull/3970) [#4043](https://github.com/rust-lang/rust-clippy/pull/4043)\n* Improve suggestion for [`search_is_some`] [#4049](https://github.com/rust-lang/rust-clippy/pull/4049)\n* Improve suggestion applicability for [`naive_bytecount`] [#3984](https://github.com/rust-lang/rust-clippy/pull/3984)\n* Improve suggestion applicability for [`while_let_loop`] [#3975](https://github.com/rust-lang/rust-clippy/pull/3975)\n* Improve diagnostics for [`too_many_arguments`] [#4053](https://github.com/rust-lang/rust-clippy/pull/4053)\n* Improve diagnostics for [`cast_lossless`] [#4021](https://github.com/rust-lang/rust-clippy/pull/4021)\n* Deal with macro checks in desugarings better [#4082](https://github.com/rust-lang/rust-clippy/pull/4082)\n* Add macro check for [`unnecessary_cast`]  [#4026](https://github.com/rust-lang/rust-clippy/pull/4026)\n* Remove [`approx_constant`]'s documentation's \"Known problems\" section. [#4027](https://github.com/rust-lang/rust-clippy/pull/4027)\n* Fix ICE in [`suspicious_else_formatting`] [#3960](https://github.com/rust-lang/rust-clippy/pull/3960)\n* Fix ICE in [`decimal_literal_representation`] [#3931](https://github.com/rust-lang/rust-clippy/pull/3931)\n\n\n## Rust 1.35\n\nReleased 2019-05-20\n\n[1fac380..37f5c1e](https://github.com/rust-lang/rust-clippy/compare/1fac380...37f5c1e)\n\n* New lint: `drop_bounds` to detect `T: Drop` bounds\n* Split [`redundant_closure`] into [`redundant_closure`] and [`redundant_closure_for_method_calls`] [#4110](https://github.com/rust-lang/rust-clippy/pull/4101)\n* Rename `cyclomatic_complexity` to [`cognitive_complexity`], start work on making lint more practical for Rust code\n* Move [`get_unwrap`] to the restriction category\n* Improve suggestions for [`iter_cloned_collect`]\n* Improve suggestions for [`cast_lossless`] to suggest suffixed literals\n* Fix false positives in [`print_with_newline`] and [`write_with_newline`] pertaining to raw strings\n* Fix false positive in [`needless_range_loop`] pertaining to structs without a `.iter()`\n* Fix false positive in [`bool_comparison`] pertaining to non-bool types\n* Fix false positive in [`redundant_closure`] pertaining to differences in borrows\n* Fix false positive in `option_map_unwrap_or` on non-copy types\n* Fix false positives in [`missing_const_for_fn`] pertaining to macros and trait method impls\n* Fix false positive in [`needless_pass_by_value`] pertaining to procedural macros\n* Fix false positive in [`needless_continue`] pertaining to loop labels\n* Fix false positive for [`boxed_local`] pertaining to arguments moved into closures\n* Fix false positive for [`use_self`] in nested functions\n* Fix suggestion for [`expect_fun_call`] (https://github.com/rust-lang/rust-clippy/pull/3846)\n* Fix suggestion for [`explicit_counter_loop`] to deal with parenthesizing range variables\n* Fix suggestion for [`single_char_pattern`] to correctly escape single quotes\n* Avoid triggering [`redundant_closure`] in macros\n* ICE fixes: [#3805](https://github.com/rust-lang/rust-clippy/pull/3805), [#3772](https://github.com/rust-lang/rust-clippy/pull/3772), [#3741](https://github.com/rust-lang/rust-clippy/pull/3741)\n\n## Rust 1.34\n\nReleased 2019-04-10\n\n[View all 61 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2019-01-17T17%3A45%3A39Z..2019-02-19T08%3A24%3A05Z+base%3Amaster)\n\n* New lint: [`assertions_on_constants`] to detect for example `assert!(true)`\n* New lint: [`dbg_macro`] to detect uses of the `dbg!` macro\n* New lint: [`missing_const_for_fn`] that can suggest functions to be made `const`\n* New lint: [`too_many_lines`] to detect functions with excessive LOC. It can be\n  configured using the `too-many-lines-threshold` configuration.\n* New lint: [`wildcard_enum_match_arm`] to check for wildcard enum matches using `_`\n* Expand `redundant_closure` to also work for methods (not only functions)\n* Fix ICEs in `vec_box`, `needless_pass_by_value` and `implicit_hasher`\n* Fix false positive in `cast_sign_loss`\n* Fix false positive in `integer_arithmetic`\n* Fix false positive in `unit_arg`\n* Fix false positives in `implicit_return`\n* Add suggestion to `explicit_write`\n* Improve suggestions for `question_mark` lint\n* Fix incorrect suggestion for `cast_lossless`\n* Fix incorrect suggestion for `expect_fun_call`\n* Fix incorrect suggestion for `needless_bool`\n* Fix incorrect suggestion for `needless_range_loop`\n* Fix incorrect suggestion for `use_self`\n* Fix incorrect suggestion for `while_let_on_iterator`\n* Clippy is now slightly easier to invoke in non-cargo contexts. See\n  [#3665][pull3665] for more details.\n* We now have [improved documentation][adding_lints] on how to add new lints\n\n## Rust 1.33\n\nReleased 2019-02-26\n\n[View all 120 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2018-11-28T06%3A19%3A50Z..2019-01-15T09%3A27%3A02Z+base%3Amaster)\n\n* New lints: [`implicit_return`], [`vec_box`], [`cast_ref_to_mut`]\n* The `rust-clippy` repository is now part of the `rust-lang` org.\n* Rename `stutter` to `module_name_repetitions`\n* Merge `new_without_default_derive` into `new_without_default` lint\n* Move `large_digit_groups` from `style` group to `pedantic`\n* Expand `bool_comparison` to check for `<`, `<=`, `>`, `>=`, and `!=`\n  comparisons against booleans\n* Expand `no_effect` to detect writes to constants such as `A_CONST.field = 2`\n* Expand `redundant_clone` to work on struct fields\n* Expand `suspicious_else_formatting` to detect `if .. {..} {..}`\n* Expand `use_self` to work on tuple structs and also in local macros\n* Fix ICE in `result_map_unit_fn` and `option_map_unit_fn`\n* Fix false positives in `implicit_return`\n* Fix false positives in `use_self`\n* Fix false negative in `clone_on_copy`\n* Fix false positive in `doc_markdown`\n* Fix false positive in `empty_loop`\n* Fix false positive in `if_same_then_else`\n* Fix false positive in `infinite_iter`\n* Fix false positive in `question_mark`\n* Fix false positive in `useless_asref`\n* Fix false positive in `wildcard_dependencies`\n* Fix false positive in `write_with_newline`\n* Add suggestion to `explicit_write`\n* Improve suggestions for `question_mark` lint\n* Fix incorrect suggestion for `get_unwrap`\n\n## Rust 1.32\n\nReleased 2019-01-17\n\n[View all 71 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2018-10-24T05%3A02%3A21Z..2018-11-27T17%3A29%3A34Z+base%3Amaster)\n\n* New lints: [`slow_vector_initialization`], `mem_discriminant_non_enum`,\n  [`redundant_clone`], [`wildcard_dependencies`],\n  [`into_iter_on_ref`], `into_iter_on_array`, [`deprecated_cfg_attr`],\n  [`cargo_common_metadata`]\n* Add support for `u128` and `i128` to integer related lints\n* Add float support to `mistyped_literal_suffixes`\n* Fix false positives in `use_self`\n* Fix false positives in `missing_comma`\n* Fix false positives in `new_ret_no_self`\n* Fix false positives in `possible_missing_comma`\n* Fix false positive in `integer_arithmetic` in constant items\n* Fix false positive in `needless_borrow`\n* Fix false positive in `out_of_bounds_indexing`\n* Fix false positive in `new_without_default_derive`\n* Fix false positive in `string_lit_as_bytes`\n* Fix false negative in `out_of_bounds_indexing`\n* Fix false negative in `use_self`. It will now also check existential types\n* Fix incorrect suggestion for `redundant_closure_call`\n* Fix various suggestions that contained expanded macros\n* Fix `bool_comparison` triggering 3 times on on on the same code\n* Expand `trivially_copy_pass_by_ref` to work on trait methods\n* Improve suggestion for `needless_range_loop`\n* Move `needless_pass_by_value` from `pedantic` group to `style`\n\n## Rust 1.31\n\nReleased 2018-12-06\n\n[125907ad..2e26fdc2](https://github.com/rust-lang/rust-clippy/compare/125907ad..2e26fdc2)\n\n* Clippy has been relicensed under a dual MIT / Apache license.\n  See [#3093](https://github.com/rust-lang/rust-clippy/issues/3093) for more\n  information.\n* With Rust 1.31, Clippy is no longer available via crates.io. The recommended\n  installation method is via `rustup component add clippy`.\n* New lints: [`redundant_pattern_matching`], [`unnecessary_filter_map`],\n  [`unused_unit`], [`map_flatten`], [`mem_replace_option_with_none`]\n* Fix ICE in `if_let_redundant_pattern_matching`\n* Fix ICE in `needless_pass_by_value` when encountering a generic function\n  argument with a lifetime parameter\n* Fix ICE in `needless_range_loop`\n* Fix ICE in `single_char_pattern` when encountering a constant value\n* Fix false positive in `assign_op_pattern`\n* Fix false positive in `boxed_local` on trait implementations\n* Fix false positive in `cmp_owned`\n* Fix false positive in `collapsible_if` when conditionals have comments\n* Fix false positive in `double_parens`\n* Fix false positive in `excessive_precision`\n* Fix false positive in `explicit_counter_loop`\n* Fix false positive in `fn_to_numeric_cast_with_truncation`\n* Fix false positive in `map_clone`\n* Fix false positive in `new_ret_no_self`\n* Fix false positive in `new_without_default` when `new` is unsafe\n* Fix false positive in `type_complexity` when using extern types\n* Fix false positive in `useless_format`\n* Fix false positive in `wrong_self_convention`\n* Fix incorrect suggestion for `excessive_precision`\n* Fix incorrect suggestion for `expect_fun_call`\n* Fix incorrect suggestion for `get_unwrap`\n* Fix incorrect suggestion for `useless_format`\n* `fn_to_numeric_cast_with_truncation` lint can be disabled again\n* Improve suggestions for `manual_memcpy`\n* Improve help message for `needless_lifetimes`\n\n## Rust 1.30\n\nReleased 2018-10-25\n\n[View all 88 merged pull requests](https://github.com/rust-lang/rust-clippy/pulls?q=merged%3A2018-08-02T16%3A54%3A12Z..2018-09-17T09%3A44%3A06Z+base%3Amaster)\n* Deprecate `assign_ops` lint\n* New lints: [`mistyped_literal_suffixes`], [`ptr_offset_with_cast`],\n  [`needless_collect`], [`copy_iterator`]\n* `cargo clippy -V` now includes the Clippy commit hash of the Rust\n  Clippy component\n* Fix ICE in `implicit_hasher`\n* Fix ICE when encountering `println!(\"{}\" a);`\n* Fix ICE when encountering a macro call in match statements\n* Fix false positive in `default_trait_access`\n* Fix false positive in `trivially_copy_pass_by_ref`\n* Fix false positive in `similar_names`\n* Fix false positive in `redundant_field_name`\n* Fix false positive in `expect_fun_call`\n* Fix false negative in `identity_conversion`\n* Fix false negative in `explicit_counter_loop`\n* Fix `range_plus_one` suggestion and false negative\n* `print_with_newline` / `write_with_newline`: don't warn about string with several `\\n`s in them\n* Fix `useless_attribute` to also whitelist `unused_extern_crates`\n* Fix incorrect suggestion for `single_char_pattern`\n* Improve suggestion for `identity_conversion` lint\n* Move `explicit_iter_loop` and `explicit_into_iter_loop` from `style` group to `pedantic`\n* Move `range_plus_one` and `range_minus_one` from `nursery` group to `complexity`\n* Move `shadow_unrelated` from `restriction` group to `pedantic`\n* Move `indexing_slicing` from `pedantic` group to `restriction`\n\n## Rust 1.29\n\nReleased 2018-09-13\n\n[v0.0.212...14207503](https://github.com/rust-lang/rust-clippy/compare/v0.0.212...14207503)\n\n* :tada: :tada: **Rust 1.29 is the first stable Rust that includes a bundled Clippy** :tada:\n  :tada:\n  You can now run `rustup component add clippy-preview` and then `cargo\n  clippy` to run Clippy. This should put an end to the continuous nightly\n  upgrades for Clippy users.\n* Clippy now follows the Rust versioning scheme instead of its own\n* Fix ICE when encountering a `while let (..) = x.iter()` construct\n* Fix false positives in `use_self`\n* Fix false positive in `trivially_copy_pass_by_ref`\n* Fix false positive in `useless_attribute` lint\n* Fix false positive in `print_literal`\n* Fix `use_self` regressions\n* Improve lint message for `neg_cmp_op_on_partial_ord`\n* Improve suggestion highlight for `single_char_pattern`\n* Improve suggestions for various print/write macro lints\n* Improve website header\n\n## 0.0.212 (2018-07-10)\n* Rustup to *rustc 1.29.0-nightly (e06c87544 2018-07-06)*\n\n## 0.0.211\n* Rustup to *rustc 1.28.0-nightly (e3bf634e0 2018-06-28)*\n\n## 0.0.210\n* Rustup to *rustc 1.28.0-nightly (01cc982e9 2018-06-24)*\n\n## 0.0.209\n* Rustup to *rustc 1.28.0-nightly (523097979 2018-06-18)*\n\n## 0.0.208\n* Rustup to *rustc 1.28.0-nightly (86a8f1a63 2018-06-17)*\n\n## 0.0.207\n* Rustup to *rustc 1.28.0-nightly (2a0062974 2018-06-09)*\n\n## 0.0.206\n* Rustup to *rustc 1.28.0-nightly (5bf68db6e 2018-05-28)*\n\n## 0.0.205\n* Rustup to *rustc 1.28.0-nightly (990d8aa74 2018-05-25)*\n* Rename `unused_lifetimes` to `extra_unused_lifetimes` because of naming conflict with new rustc lint\n\n## 0.0.204\n* Rustup to *rustc 1.28.0-nightly (71e87be38 2018-05-22)*\n\n## 0.0.203\n* Rustup to *rustc 1.28.0-nightly (a3085756e 2018-05-19)*\n* Clippy attributes are now of the form `clippy::cyclomatic_complexity` instead of `clippy(cyclomatic_complexity)`\n\n## 0.0.202\n* Rustup to *rustc 1.28.0-nightly (952f344cd 2018-05-18)*\n\n## 0.0.201\n* Rustup to *rustc 1.27.0-nightly (2f2a11dfc 2018-05-16)*\n\n## 0.0.200\n* Rustup to *rustc 1.27.0-nightly (9fae15374 2018-05-13)*\n\n## 0.0.199\n* Rustup to *rustc 1.27.0-nightly (ff2ac35db 2018-05-12)*\n\n## 0.0.198\n* Rustup to *rustc 1.27.0-nightly (acd3871ba 2018-05-10)*\n\n## 0.0.197\n* Rustup to *rustc 1.27.0-nightly (428ea5f6b 2018-05-06)*\n\n## 0.0.196\n* Rustup to *rustc 1.27.0-nightly (e82261dfb 2018-05-03)*\n\n## 0.0.195\n* Rustup to *rustc 1.27.0-nightly (ac3c2288f 2018-04-18)*\n\n## 0.0.194\n* Rustup to *rustc 1.27.0-nightly (bd40cbbe1 2018-04-14)*\n* New lints: [`cast_ptr_alignment`], [`transmute_ptr_to_ptr`], [`write_literal`], [`write_with_newline`], [`writeln_empty_string`]\n\n## 0.0.193\n* Rustup to *rustc 1.27.0-nightly (eeea94c11 2018-04-06)*\n\n## 0.0.192\n* Rustup to *rustc 1.27.0-nightly (fb44b4c0e 2018-04-04)*\n* New lint: [`print_literal`]\n\n## 0.0.191\n* Rustup to *rustc 1.26.0-nightly (ae544ee1c 2018-03-29)*\n* Lint audit; categorize lints as style, correctness, complexity, pedantic, nursery, restriction.\n\n## 0.0.190\n* Fix a bunch of intermittent cargo bugs\n\n## 0.0.189\n* Rustup to *rustc 1.26.0-nightly (5508b2714 2018-03-18)*\n\n## 0.0.188\n* Rustup to *rustc 1.26.0-nightly (392645394 2018-03-15)*\n* New lint: [`while_immutable_condition`]\n\n## 0.0.187\n* Rustup to *rustc 1.26.0-nightly (322d7f7b9 2018-02-25)*\n* New lints: [`redundant_field_names`], [`suspicious_arithmetic_impl`], [`suspicious_op_assign_impl`]\n\n## 0.0.186\n* Rustup to *rustc 1.25.0-nightly (0c6091fbd 2018-02-04)*\n* Various false positive fixes\n\n## 0.0.185\n* Rustup to *rustc 1.25.0-nightly (56733bc9f 2018-02-01)*\n* New lint: [`question_mark`]\n\n## 0.0.184\n* Rustup to *rustc 1.25.0-nightly (90eb44a58 2018-01-29)*\n* New lints: [`double_comparisons`], [`empty_line_after_outer_attr`]\n\n## 0.0.183\n* Rustup to *rustc 1.25.0-nightly (21882aad7 2018-01-28)*\n* New lint: [`misaligned_transmute`]\n\n## 0.0.182\n* Rustup to *rustc 1.25.0-nightly (a0dcecff9 2018-01-24)*\n* New lint: [`decimal_literal_representation`]\n\n## 0.0.181\n* Rustup to *rustc 1.25.0-nightly (97520ccb1 2018-01-21)*\n* New lints: [`else_if_without_else`], [`option_option`], [`unit_arg`], [`unnecessary_fold`]\n* Removed `unit_expr`\n* Various false positive fixes for [`needless_pass_by_value`]\n\n## 0.0.180\n* Rustup to *rustc 1.25.0-nightly (3f92e8d89 2018-01-14)*\n\n## 0.0.179\n* Rustup to *rustc 1.25.0-nightly (61452e506 2018-01-09)*\n\n## 0.0.178\n* Rustup to *rustc 1.25.0-nightly (ee220daca 2018-01-07)*\n\n## 0.0.177\n* Rustup to *rustc 1.24.0-nightly (250b49205 2017-12-21)*\n* New lint: [`match_as_ref`]\n\n## 0.0.176\n* Rustup to *rustc 1.24.0-nightly (0077d128d 2017-12-14)*\n\n## 0.0.175\n* Rustup to *rustc 1.24.0-nightly (bb42071f6 2017-12-01)*\n\n## 0.0.174\n* Rustup to *rustc 1.23.0-nightly (63739ab7b 2017-11-21)*\n\n## 0.0.173\n* Rustup to *rustc 1.23.0-nightly (33374fa9d 2017-11-20)*\n\n## 0.0.172\n* Rustup to *rustc 1.23.0-nightly (d0f8e2913 2017-11-16)*\n\n## 0.0.171\n* Rustup to *rustc 1.23.0-nightly (ff0f5de3b 2017-11-14)*\n\n## 0.0.170\n* Rustup to *rustc 1.23.0-nightly (d6b06c63a 2017-11-09)*\n\n## 0.0.169\n* Rustup to *rustc 1.23.0-nightly (3b82e4c74 2017-11-05)*\n* New lints: [`just_underscores_and_digits`], `result_map_unwrap_or_else`, [`transmute_bytes_to_str`]\n\n## 0.0.168\n* Rustup to *rustc 1.23.0-nightly (f0fe716db 2017-10-30)*\n\n## 0.0.167\n* Rustup to *rustc 1.23.0-nightly (90ef3372e 2017-10-29)*\n* New lints: `const_static_lifetime`, [`erasing_op`], [`fallible_impl_from`], [`println_empty_string`], [`useless_asref`]\n\n## 0.0.166\n* Rustup to *rustc 1.22.0-nightly (b7960878b 2017-10-18)*\n* New lints: [`explicit_write`], `identity_conversion`, [`implicit_hasher`], `invalid_ref`, [`option_map_or_none`],\n  [`range_minus_one`], [`range_plus_one`], [`transmute_int_to_bool`], [`transmute_int_to_char`],\n  [`transmute_int_to_float`]\n\n## 0.0.165\n* Rust upgrade to rustc 1.22.0-nightly (0e6f4cf51 2017-09-27)\n* New lint: [`mut_range_bound`]\n\n## 0.0.164\n* Update to *rustc 1.22.0-nightly (6c476ce46 2017-09-25)*\n* New lint: [`int_plus_one`]\n\n## 0.0.163\n* Update to *rustc 1.22.0-nightly (14039a42a 2017-09-22)*\n\n## 0.0.162\n* Update to *rustc 1.22.0-nightly (0701b37d9 2017-09-18)*\n* New lint: [`chars_last_cmp`]\n* Improved suggestions for [`needless_borrow`], [`ptr_arg`],\n\n## 0.0.161\n* Update to *rustc 1.22.0-nightly (539f2083d 2017-09-13)*\n\n## 0.0.160\n* Update to *rustc 1.22.0-nightly (dd08c3070 2017-09-12)*\n\n## 0.0.159\n* Update to *rustc 1.22.0-nightly (eba374fb2 2017-09-11)*\n* New lint: [`clone_on_ref_ptr`]\n\n## 0.0.158\n* New lint: [`manual_memcpy`]\n* [`cast_lossless`] no longer has redundant parentheses in its suggestions\n* Update to *rustc 1.22.0-nightly (dead08cb3 2017-09-08)*\n\n## 0.0.157 - 2017-09-04\n* Update to *rustc 1.22.0-nightly (981ce7d8d 2017-09-03)*\n* New lint: `unit_expr`\n\n## 0.0.156 - 2017-09-03\n* Update to *rustc 1.22.0-nightly (744dd6c1d 2017-09-02)*\n\n## 0.0.155\n* Update to *rustc 1.21.0-nightly (c11f689d2 2017-08-29)*\n* New lint: [`infinite_iter`], [`maybe_infinite_iter`], [`cast_lossless`]\n\n## 0.0.154\n* Update to *rustc 1.21.0-nightly (2c0558f63 2017-08-24)*\n* Fix [`use_self`] triggering inside derives\n* Add support for linting an entire workspace with `cargo clippy --all`\n* New lint: [`naive_bytecount`]\n\n## 0.0.153\n* Update to *rustc 1.21.0-nightly (8c303ed87 2017-08-20)*\n* New lint: [`use_self`]\n\n## 0.0.152\n* Update to *rustc 1.21.0-nightly (df511d554 2017-08-14)*\n\n## 0.0.151\n* Update to *rustc 1.21.0-nightly (13d94d5fa 2017-08-10)*\n\n## 0.0.150\n* Update to *rustc 1.21.0-nightly (215e0b10e 2017-08-08)*\n\n## 0.0.148\n* Update to *rustc 1.21.0-nightly (37c7d0ebb 2017-07-31)*\n* New lints: [`unreadable_literal`], [`inconsistent_digit_grouping`], [`large_digit_groups`]\n\n## 0.0.147\n* Update to *rustc 1.21.0-nightly (aac223f4f 2017-07-30)*\n\n## 0.0.146\n* Update to *rustc 1.21.0-nightly (52a330969 2017-07-27)*\n* Fixes false positives in `inline_always`\n* Fixes false negatives in `panic_params`\n\n## 0.0.145\n* Update to *rustc 1.20.0-nightly (afe145d22 2017-07-23)*\n\n## 0.0.144\n* Update to *rustc 1.20.0-nightly (086eaa78e 2017-07-15)*\n\n## 0.0.143\n* Update to *rustc 1.20.0-nightly (d84693b93 2017-07-09)*\n* Fix `cargo clippy` crashing on `dylib` projects\n* Fix false positives around `nested_while_let` and `never_loop`\n\n## 0.0.142\n* Update to *rustc 1.20.0-nightly (067971139 2017-07-02)*\n\n## 0.0.141\n* Rewrite of the `doc_markdown` lint.\n* Deprecated [`range_step_by_zero`]\n* New lint: [`iterator_step_by_zero`]\n* New lint: [`needless_borrowed_reference`]\n* Update to *rustc 1.20.0-nightly (69c65d296 2017-06-28)*\n\n## 0.0.140 - 2017-06-16\n* Update to *rustc 1.19.0-nightly (258ae6dd9 2017-06-15)*\n\n## 0.0.139 — 2017-06-10\n* Update to *rustc 1.19.0-nightly (4bf5c99af 2017-06-10)*\n* Fix bugs with for loop desugaring\n* Check for [`AsRef`]/[`AsMut`] arguments in [`wrong_self_convention`]\n\n## 0.0.138 — 2017-06-05\n* Update to *rustc 1.19.0-nightly (0418fa9d3 2017-06-04)*\n\n## 0.0.137 — 2017-06-05\n* Update to *rustc 1.19.0-nightly (6684d176c 2017-06-03)*\n\n## 0.0.136 — 2017—05—26\n* Update to *rustc 1.19.0-nightly (557967766 2017-05-26)*\n\n## 0.0.135 — 2017—05—24\n* Update to *rustc 1.19.0-nightly (5b13bff52 2017-05-23)*\n\n## 0.0.134 — 2017—05—19\n* Update to *rustc 1.19.0-nightly (0ed1ec9f9 2017-05-18)*\n\n## 0.0.133 — 2017—05—14\n* Update to *rustc 1.19.0-nightly (826d8f385 2017-05-13)*\n\n## 0.0.132 — 2017—05—05\n* Fix various bugs and some ices\n\n## 0.0.131 — 2017—05—04\n* Update to *rustc 1.19.0-nightly (2d4ed8e0c 2017-05-03)*\n\n## 0.0.130 — 2017—05—03\n* Update to *rustc 1.19.0-nightly (6a5fc9eec 2017-05-02)*\n\n## 0.0.129 — 2017-05-01\n* Update to *rustc 1.19.0-nightly (06fb4d256 2017-04-30)*\n\n## 0.0.128 — 2017-04-28\n* Update to *rustc 1.18.0-nightly (94e884b63 2017-04-27)*\n\n## 0.0.127 — 2017-04-27\n* Update to *rustc 1.18.0-nightly (036983201 2017-04-26)*\n* New lint: [`needless_continue`]\n\n## 0.0.126 — 2017-04-24\n* Update to *rustc 1.18.0-nightly (2bd4b5c6d 2017-04-23)*\n\n## 0.0.125 — 2017-04-19\n* Update to *rustc 1.18.0-nightly (9f2abadca 2017-04-18)*\n\n## 0.0.124 — 2017-04-16\n* Update to *rustc 1.18.0-nightly (d5cf1cb64 2017-04-15)*\n\n## 0.0.123 — 2017-04-07\n* Fix various false positives\n\n## 0.0.122 — 2017-04-07\n* Rustup to *rustc 1.18.0-nightly (91ae22a01 2017-04-05)*\n* New lint: [`op_ref`]\n\n## 0.0.121 — 2017-03-21\n* Rustup to *rustc 1.17.0-nightly (134c4a0f0 2017-03-20)*\n\n## 0.0.120 — 2017-03-17\n* Rustup to *rustc 1.17.0-nightly (0aeb9c129 2017-03-15)*\n\n## 0.0.119 — 2017-03-13\n* Rustup to *rustc 1.17.0-nightly (824c9ebbd 2017-03-12)*\n\n## 0.0.118 — 2017-03-05\n* Rustup to *rustc 1.17.0-nightly (b1e31766d 2017-03-03)*\n\n## 0.0.117 — 2017-03-01\n* Rustup to *rustc 1.17.0-nightly (be760566c 2017-02-28)*\n\n## 0.0.116 — 2017-02-28\n* Fix `cargo clippy` on 64 bit windows systems\n\n## 0.0.115 — 2017-02-27\n* Rustup to *rustc 1.17.0-nightly (60a0edc6c 2017-02-26)*\n* New lints: [`zero_ptr`], [`never_loop`], [`mut_from_ref`]\n\n## 0.0.114 — 2017-02-08\n* Rustup to *rustc 1.17.0-nightly (c49d10207 2017-02-07)*\n* Tests are now ui tests (testing the exact output of rustc)\n\n## 0.0.113 — 2017-02-04\n* Rustup to *rustc 1.16.0-nightly (eedaa94e3 2017-02-02)*\n* New lint: [`large_enum_variant`]\n* `explicit_into_iter_loop` provides suggestions\n\n## 0.0.112 — 2017-01-27\n* Rustup to *rustc 1.16.0-nightly (df8debf6d 2017-01-25)*\n\n## 0.0.111 — 2017-01-21\n* Rustup to *rustc 1.16.0-nightly (a52da95ce 2017-01-20)*\n\n## 0.0.110 — 2017-01-20\n* Add badges and categories to `Cargo.toml`\n\n## 0.0.109 — 2017-01-19\n* Update to *rustc 1.16.0-nightly (c07a6ae77 2017-01-17)*\n\n## 0.0.108 — 2017-01-12\n* Update to *rustc 1.16.0-nightly (2782e8f8f 2017-01-12)*\n\n## 0.0.107 — 2017-01-11\n* Update regex dependency\n* Fix FP when matching `&&mut` by `&ref`\n* Reintroduce `for (_, x) in &mut hash_map` -> `for x in hash_map.values_mut()`\n* New lints: [`unused_io_amount`], [`forget_ref`], [`short_circuit_statement`]\n\n## 0.0.106 — 2017-01-04\n* Fix FP introduced by rustup in [`wrong_self_convention`]\n\n## 0.0.105 — 2017-01-04\n* Update to *rustc 1.16.0-nightly (468227129 2017-01-03)*\n* New lints: [`deref_addrof`], [`double_parens`], [`pub_enum_variant_names`]\n* Fix suggestion in [`new_without_default`]\n* FP fix in [`absurd_extreme_comparisons`]\n\n## 0.0.104 — 2016-12-15\n* Update to *rustc 1.15.0-nightly (8f02c429a 2016-12-15)*\n\n## 0.0.103 — 2016-11-25\n* Update to *rustc 1.15.0-nightly (d5814b03e 2016-11-23)*\n\n## 0.0.102 — 2016-11-24\n* Update to *rustc 1.15.0-nightly (3bf2be9ce 2016-11-22)*\n\n## 0.0.101 — 2016-11-23\n* Update to *rustc 1.15.0-nightly (7b3eeea22 2016-11-21)*\n* New lint: [`string_extend_chars`]\n\n## 0.0.100 — 2016-11-20\n* Update to *rustc 1.15.0-nightly (ac635aa95 2016-11-18)*\n\n## 0.0.99 — 2016-11-18\n* Update to rustc 1.15.0-nightly (0ed951993 2016-11-14)\n* New lint: [`get_unwrap`]\n\n## 0.0.98 — 2016-11-08\n* Fixes an issue due to a change in how cargo handles `--sysroot`, which broke `cargo clippy`\n\n## 0.0.97 — 2016-11-03\n* For convenience, `cargo clippy` defines a `cargo-clippy` feature. This was\n  previously added for a short time under the name `clippy` but removed for\n  compatibility.\n* `cargo clippy --help` is more helping (and less helpful :smile:)\n* Rustup to *rustc 1.14.0-nightly (5665bdf3e 2016-11-02)*\n* New lints: [`if_let_redundant_pattern_matching`], [`partialeq_ne_impl`]\n\n## 0.0.96 — 2016-10-22\n* Rustup to *rustc 1.14.0-nightly (f09420685 2016-10-20)*\n* New lint: [`iter_skip_next`]\n\n## 0.0.95 — 2016-10-06\n* Rustup to *rustc 1.14.0-nightly (3210fd5c2 2016-10-05)*\n\n## 0.0.94 — 2016-10-04\n* Fixes bustage on Windows due to forbidden directory name\n\n## 0.0.93 — 2016-10-03\n* Rustup to *rustc 1.14.0-nightly (144af3e97 2016-10-02)*\n* `option_map_unwrap_or` and `option_map_unwrap_or_else` are now\n  allowed by default.\n* New lint: [`explicit_into_iter_loop`]\n\n## 0.0.92 — 2016-09-30\n* Rustup to *rustc 1.14.0-nightly (289f3a4ca 2016-09-29)*\n\n## 0.0.91 — 2016-09-28\n* Rustup to *rustc 1.13.0-nightly (d0623cf7b 2016-09-26)*\n\n## 0.0.90 — 2016-09-09\n* Rustup to *rustc 1.13.0-nightly (f1f40f850 2016-09-09)*\n\n## 0.0.89 — 2016-09-06\n* Rustup to *rustc 1.13.0-nightly (cbe4de78e 2016-09-05)*\n\n## 0.0.88 — 2016-09-04\n* Rustup to *rustc 1.13.0-nightly (70598e04f 2016-09-03)*\n* The following lints are not new but were only usable through the `clippy`\n  lint groups: [`filter_next`], `for_loop_over_option`,\n  `for_loop_over_result` and [`match_overlapping_arm`]. You should now be\n  able to `#[allow/deny]` them individually and they are available directly\n  through `cargo clippy`.\n\n## 0.0.87 — 2016-08-31\n* Rustup to *rustc 1.13.0-nightly (eac41469d 2016-08-30)*\n* New lints: [`builtin_type_shadow`]\n* Fix FP in [`zero_prefixed_literal`] and `0b`/`0o`\n\n## 0.0.86 — 2016-08-28\n* Rustup to *rustc 1.13.0-nightly (a23064af5 2016-08-27)*\n* New lints: [`missing_docs_in_private_items`], [`zero_prefixed_literal`]\n\n## 0.0.85 — 2016-08-19\n* Fix ICE with [`useless_attribute`]\n* [`useless_attribute`] ignores `unused_imports` on `use` statements\n\n## 0.0.84 — 2016-08-18\n* Rustup to *rustc 1.13.0-nightly (aef6971ca 2016-08-17)*\n\n## 0.0.83 — 2016-08-17\n* Rustup to *rustc 1.12.0-nightly (1bf5fa326 2016-08-16)*\n* New lints: [`print_with_newline`], [`useless_attribute`]\n\n## 0.0.82 — 2016-08-17\n* Rustup to *rustc 1.12.0-nightly (197be89f3 2016-08-15)*\n* New lint: [`module_inception`]\n\n## 0.0.81 — 2016-08-14\n* Rustup to *rustc 1.12.0-nightly (1deb02ea6 2016-08-12)*\n* New lints: [`eval_order_dependence`], [`mixed_case_hex_literals`], [`unseparated_literal_suffix`]\n* False positive fix in [`too_many_arguments`]\n* Addition of functionality to [`needless_borrow`]\n* Suggestions for [`clone_on_copy`]\n* Bug fix in [`wrong_self_convention`]\n* Doc improvements\n\n## 0.0.80 — 2016-07-31\n* Rustup to *rustc 1.12.0-nightly (1225e122f 2016-07-30)*\n* New lints: [`misrefactored_assign_op`], [`serde_api_misuse`]\n\n## 0.0.79 — 2016-07-10\n* Rustup to *rustc 1.12.0-nightly (f93aaf84c 2016-07-09)*\n* Major suggestions refactoring\n\n## 0.0.78 — 2016-07-02\n* Rustup to *rustc 1.11.0-nightly (01411937f 2016-07-01)*\n* New lints: [`wrong_transmute`], [`double_neg`], [`filter_map`]\n* For compatibility, `cargo clippy` does not defines the `clippy` feature\n  introduced in 0.0.76 anymore\n* [`collapsible_if`] now considers `if let`\n\n## 0.0.77 — 2016-06-21\n* Rustup to *rustc 1.11.0-nightly (5522e678b 2016-06-20)*\n* New lints: `stutter` and [`iter_nth`]\n\n## 0.0.76 — 2016-06-10\n* Rustup to *rustc 1.11.0-nightly (7d2f75a95 2016-06-09)*\n* `cargo clippy` now automatically defines the `clippy` feature\n* New lint: [`not_unsafe_ptr_arg_deref`]\n\n## 0.0.75 — 2016-06-08\n* Rustup to *rustc 1.11.0-nightly (763f9234b 2016-06-06)*\n\n## 0.0.74 — 2016-06-07\n* Fix bug with `cargo-clippy` JSON parsing\n* Add the `CLIPPY_DISABLE_DOCS_LINKS` environment variable to deactivate the\n  “for further information visit *lint-link*” message.\n\n## 0.0.73 — 2016-06-05\n* Fix false positives in [`useless_let_if_seq`]\n\n## 0.0.72 — 2016-06-04\n* Fix false positives in [`useless_let_if_seq`]\n\n## 0.0.71 — 2016-05-31\n* Rustup to *rustc 1.11.0-nightly (a967611d8 2016-05-30)*\n* New lint: [`useless_let_if_seq`]\n\n## 0.0.70 — 2016-05-28\n* Rustup to *rustc 1.10.0-nightly (7bddce693 2016-05-27)*\n* [`invalid_regex`] and [`trivial_regex`] can now warn on `RegexSet::new`,\n  `RegexBuilder::new` and byte regexes\n\n## 0.0.69 — 2016-05-20\n* Rustup to *rustc 1.10.0-nightly (476fe6eef 2016-05-21)*\n* [`used_underscore_binding`] has been made `Allow` temporarily\n\n## 0.0.68 — 2016-05-17\n* Rustup to *rustc 1.10.0-nightly (cd6a40017 2016-05-16)*\n* New lint: [`unnecessary_operation`]\n\n## 0.0.67 — 2016-05-12\n* Rustup to *rustc 1.10.0-nightly (22ac88f1a 2016-05-11)*\n\n## 0.0.66 — 2016-05-11\n* New `cargo clippy` subcommand\n* New lints: [`assign_op_pattern`], [`assign_ops`], [`needless_borrow`]\n\n## 0.0.65 — 2016-05-08\n* Rustup to *rustc 1.10.0-nightly (62e2b2fb7 2016-05-06)*\n* New lints: [`float_arithmetic`], [`integer_arithmetic`]\n\n## 0.0.64 — 2016-04-26\n* Rustup to *rustc 1.10.0-nightly (645dd013a 2016-04-24)*\n* New lints: `temporary_cstring_as_ptr`, [`unsafe_removed_from_name`], and [`mem_forget`]\n\n## 0.0.63 — 2016-04-08\n* Rustup to *rustc 1.9.0-nightly (7979dd608 2016-04-07)*\n\n## 0.0.62 — 2016-04-07\n* Rustup to *rustc 1.9.0-nightly (bf5da36f1 2016-04-06)*\n\n## 0.0.61 — 2016-04-03\n* Rustup to *rustc 1.9.0-nightly (5ab11d72c 2016-04-02)*\n* New lint: [`invalid_upcast_comparisons`]\n\n## 0.0.60 — 2016-04-01\n* Rustup to *rustc 1.9.0-nightly (e1195c24b 2016-03-31)*\n\n## 0.0.59 — 2016-03-31\n* Rustup to *rustc 1.9.0-nightly (30a3849f2 2016-03-30)*\n* New lints: [`logic_bug`], [`nonminimal_bool`]\n* Fixed: [`match_same_arms`] now ignores arms with guards\n* Improved: [`useless_vec`] now warns on `for … in vec![…]`\n\n## 0.0.58 — 2016-03-27\n* Rustup to *rustc 1.9.0-nightly (d5a91e695 2016-03-26)*\n* New lint: [`doc_markdown`]\n\n## 0.0.57 — 2016-03-27\n* Update to *rustc 1.9.0-nightly (a1e29daf1 2016-03-25)*\n* Deprecated lints: [`str_to_string`], [`string_to_string`], [`unstable_as_slice`], [`unstable_as_mut_slice`]\n* New lint: [`crosspointer_transmute`]\n\n## 0.0.56 — 2016-03-23\n* Update to *rustc 1.9.0-nightly (0dcc413e4 2016-03-22)*\n* New lints: [`many_single_char_names`] and [`similar_names`]\n\n## 0.0.55 — 2016-03-21\n* Update to *rustc 1.9.0-nightly (02310fd31 2016-03-19)*\n\n## 0.0.54 — 2016-03-16\n* Update to *rustc 1.9.0-nightly (c66d2380a 2016-03-15)*\n\n## 0.0.53 — 2016-03-15\n* Add a [configuration file]\n\n## ~~0.0.52~~\n\n## 0.0.51 — 2016-03-13\n* Add `str` to types considered by [`len_zero`]\n* New lints: [`indexing_slicing`]\n\n## 0.0.50 — 2016-03-11\n* Update to *rustc 1.9.0-nightly (c9629d61c 2016-03-10)*\n\n## 0.0.49 — 2016-03-09\n* Update to *rustc 1.9.0-nightly (eabfc160f 2016-03-08)*\n* New lints: [`overflow_check_conditional`], `unused_label`, [`new_without_default`]\n\n## 0.0.48 — 2016-03-07\n* Fixed: ICE in [`needless_range_loop`] with globals\n\n## 0.0.47 — 2016-03-07\n* Update to *rustc 1.9.0-nightly (998a6720b 2016-03-07)*\n* New lint: [`redundant_closure_call`]\n\n[`AsMut`]: https://doc.rust-lang.org/std/convert/trait.AsMut.html\n[`AsRef`]: https://doc.rust-lang.org/std/convert/trait.AsRef.html\n[configuration file]: ./rust-clippy#configuration\n[pull3665]: https://github.com/rust-lang/rust-clippy/pull/3665\n[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/book/src/development/adding_lints.md\n[`README.md`]: https://github.com/rust-lang/rust-clippy/blob/master/README.md\n[Clippy's lint list]: https://rust-lang.github.io/rust-clippy/master/index.html\n\n<!-- lint disable no-unused-definitions -->\n<!-- begin autogenerated links to lint list -->\n[`absolute_paths`]: https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths\n[`absurd_extreme_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons\n[`alloc_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#alloc_instead_of_core\n[`allow_attributes`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes\n[`allow_attributes_without_reason`]: https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason\n[`almost_complete_letter_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_letter_range\n[`almost_complete_range`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_complete_range\n[`almost_swapped`]: https://rust-lang.github.io/rust-clippy/master/index.html#almost_swapped\n[`approx_constant`]: https://rust-lang.github.io/rust-clippy/master/index.html#approx_constant\n[`arbitrary_source_item_ordering`]: https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering\n[`arc_with_non_send_sync`]: https://rust-lang.github.io/rust-clippy/master/index.html#arc_with_non_send_sync\n[`arithmetic_side_effects`]: https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects\n[`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n[`as_pointer_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_pointer_underscore\n[`as_ptr_cast_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_ptr_cast_mut\n[`as_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore\n[`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n[`assertions_on_result_states`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_result_states\n[`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n[`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n[`assigning_clones`]: https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones\n[`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async\n[`await_holding_invalid_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_invalid_type\n[`await_holding_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_lock\n[`await_holding_refcell_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#await_holding_refcell_ref\n[`bad_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#bad_bit_mask\n[`big_endian_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#big_endian_bytes\n[`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map\n[`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n[`blanket_clippy_restriction_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints\n[`block_in_if_condition_expr`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_expr\n[`block_in_if_condition_stmt`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_stmt\n[`blocks_in_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_conditions\n[`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n[`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n[`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n[`bool_to_int_with_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if\n[`borrow_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr\n[`borrow_deref_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_deref_ref\n[`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n[`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n[`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection\n[`box_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_default\n[`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n[`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n[`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\n[`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow\n[`byte_char_slices`]: https://rust-lang.github.io/rust-clippy/master/index.html#byte_char_slices\n[`bytes_count_to_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_count_to_len\n[`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n[`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n[`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n[`cast_abs_to_unsigned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_abs_to_unsigned\n[`cast_enum_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_constructor\n[`cast_enum_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation\n[`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n[`cast_nan_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_nan_to_int\n[`cast_possible_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\n[`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\n[`cast_precision_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_precision_loss\n[`cast_ptr_alignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ptr_alignment\n[`cast_ref_to_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ref_to_mut\n[`cast_sign_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\n[`cast_slice_different_sizes`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_different_sizes\n[`cast_slice_from_raw_parts`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_from_raw_parts\n[`cfg_not_test`]: https://rust-lang.github.io/rust-clippy/master/index.html#cfg_not_test\n[`char_lit_as_u8`]: https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8\n[`chars_last_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp\n[`chars_next_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp\n[`checked_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions\n[`clear_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#clear_with_drain\n[`clone_double_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_double_ref\n[`clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy\n[`clone_on_ref_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_ref_ptr\n[`cloned_instead_of_copied`]: https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied\n[`cmp_nan`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_nan\n[`cmp_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_null\n[`cmp_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#cmp_owned\n[`cognitive_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity\n[`collapsible_else_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\n[`collapsible_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\n[`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n[`collapsible_str_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_str_replace\n[`collection_is_never_read`]: https://rust-lang.github.io/rust-clippy/master/index.html#collection_is_never_read\n[`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n[`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n[`const_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_is_empty\n[`const_static_lifetime`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_static_lifetime\n[`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n[`crate_in_macro_def`]: https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def\n[`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n[`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n[`cyclomatic_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cyclomatic_complexity\n[`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n[`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call\n[`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n[`declare_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#declare_interior_mutable_const\n[`default_constructed_unit_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_constructed_unit_structs\n[`default_instead_of_iter_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_instead_of_iter_empty\n[`default_numeric_fallback`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback\n[`default_trait_access`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access\n[`default_union_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#default_union_representation\n[`deprecated_cfg_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_cfg_attr\n[`deprecated_clippy_cfg_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_clippy_cfg_attr\n[`deprecated_semver`]: https://rust-lang.github.io/rust-clippy/master/index.html#deprecated_semver\n[`deref_addrof`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_addrof\n[`deref_by_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#deref_by_slicing\n[`derivable_impls`]: https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n[`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n[`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n[`derive_partial_eq_without_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq\n[`derived_hash_with_manual_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derived_hash_with_manual_eq\n[`disallowed_macros`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros\n[`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n[`disallowed_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods\n[`disallowed_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names\n[`disallowed_script_idents`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents\n[`disallowed_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_type\n[`disallowed_types`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types\n[`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n[`doc_include_without_cfg`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_include_without_cfg\n[`doc_lazy_continuation`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_lazy_continuation\n[`doc_link_with_quotes`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_link_with_quotes\n[`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n[`doc_nested_refdefs`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_nested_refdefs\n[`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons\n[`double_ended_iterator_last`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_ended_iterator_last\n[`double_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_must_use\n[`double_neg`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_neg\n[`double_parens`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_parens\n[`drain_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#drain_collect\n[`drop_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_bounds\n[`drop_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy\n[`drop_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_non_drop\n[`drop_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_ref\n[`duplicate_mod`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_mod\n[`duplicate_underscore_argument`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_underscore_argument\n[`duplicated_attributes`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicated_attributes\n[`duration_subsec`]: https://rust-lang.github.io/rust-clippy/master/index.html#duration_subsec\n[`eager_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#eager_transmute\n[`else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n[`empty_docs`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_docs\n[`empty_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_drop\n[`empty_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum\n[`empty_enum_variants_with_brackets`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_enum_variants_with_brackets\n[`empty_line_after_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments\n[`empty_line_after_outer_attr`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr\n[`empty_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_loop\n[`empty_structs_with_brackets`]: https://rust-lang.github.io/rust-clippy/master/index.html#empty_structs_with_brackets\n[`enum_clike_unportable_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_clike_unportable_variant\n[`enum_glob_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use\n[`enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#enum_variant_names\n[`eq_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#eq_op\n[`equatable_if_let`]: https://rust-lang.github.io/rust-clippy/master/index.html#equatable_if_let\n[`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n[`err_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#err_expect\n[`error_impl_error`]: https://rust-lang.github.io/rust-clippy/master/index.html#error_impl_error\n[`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n[`excessive_nesting`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_nesting\n[`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n[`exhaustive_enums`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums\n[`exhaustive_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs\n[`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n[`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n[`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used\n[`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n[`explicit_auto_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref\n[`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n[`explicit_deref_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_methods\n[`explicit_into_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_into_iter_loop\n[`explicit_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\n[`explicit_write`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write\n[`extend_from_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#extend_from_slice\n[`extend_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#extend_with_drain\n[`extra_unused_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_lifetimes\n[`extra_unused_type_parameters`]: https://rust-lang.github.io/rust-clippy/master/index.html#extra_unused_type_parameters\n[`fallible_impl_from`]: https://rust-lang.github.io/rust-clippy/master/index.html#fallible_impl_from\n[`field_reassign_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#field_reassign_with_default\n[`field_scoped_visibility_modifiers`]: https://rust-lang.github.io/rust-clippy/master/index.html#field_scoped_visibility_modifiers\n[`filetype_is_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#filetype_is_file\n[`filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map\n[`filter_map_bool_then`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_bool_then\n[`filter_map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_identity\n[`filter_map_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_next\n[`filter_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#filter_next\n[`find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#find_map\n[`flat_map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#flat_map_identity\n[`flat_map_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#flat_map_option\n[`float_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_arithmetic\n[`float_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp\n[`float_cmp_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_cmp_const\n[`float_equality_without_abs`]: https://rust-lang.github.io/rust-clippy/master/index.html#float_equality_without_abs\n[`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n[`fn_null_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_null_check\n[`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n[`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n[`fn_to_numeric_cast_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any\n[`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n[`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n[`for_loop_over_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_option\n[`for_loop_over_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_result\n[`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n[`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n[`forget_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n[`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n[`format_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_collect\n[`format_in_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\n[`format_push_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string\n[`four_forward_slashes`]: https://rust-lang.github.io/rust-clippy/master/index.html#four_forward_slashes\n[`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n[`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n[`from_raw_with_void_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_raw_with_void_ptr\n[`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10\n[`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n[`get_first`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_first\n[`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n[`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n[`host_endian_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#host_endian_bytes\n[`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion\n[`identity_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n[`if_let_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_mutex\n[`if_let_redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_redundant_pattern_matching\n[`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n[`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n[`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n[`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n[`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n[`ignored_unit_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#ignored_unit_patterns\n[`impl_hash_borrow_with_str_and_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#impl_hash_borrow_with_str_and_bytes\n[`impl_trait_in_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params\n[`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n[`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n[`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n[`implicit_saturating_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_add\n[`implicit_saturating_sub`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_saturating_sub\n[`implied_bounds_in_impls`]: https://rust-lang.github.io/rust-clippy/master/index.html#implied_bounds_in_impls\n[`impossible_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#impossible_comparisons\n[`imprecise_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#imprecise_flops\n[`incompatible_msrv`]: https://rust-lang.github.io/rust-clippy/master/index.html#incompatible_msrv\n[`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n[`inconsistent_struct_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_struct_constructor\n[`incorrect_clone_impl_on_copy_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#incorrect_clone_impl_on_copy_type\n[`incorrect_partial_ord_impl_on_ord_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#incorrect_partial_ord_impl_on_ord_type\n[`index_refutable_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#index_refutable_slice\n[`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n[`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask\n[`ineffective_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_open_options\n[`inefficient_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inefficient_to_string\n[`infallible_destructuring_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#infallible_destructuring_match\n[`infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_iter\n[`infinite_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#infinite_loop\n[`inherent_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string\n[`inherent_to_string_shadow_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#inherent_to_string_shadow_display\n[`init_numbered_fields`]: https://rust-lang.github.io/rust-clippy/master/index.html#init_numbered_fields\n[`inline_always`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_always\n[`inline_asm_x86_att_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_att_syntax\n[`inline_asm_x86_intel_syntax`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_asm_x86_intel_syntax\n[`inline_fn_without_body`]: https://rust-lang.github.io/rust-clippy/master/index.html#inline_fn_without_body\n[`inspect_for_each`]: https://rust-lang.github.io/rust-clippy/master/index.html#inspect_for_each\n[`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one\n[`integer_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic\n[`integer_division`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_division\n[`integer_division_remainder_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_division_remainder_used\n[`into_iter_on_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_array\n[`into_iter_on_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref\n[`into_iter_without_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_without_iter\n[`invalid_atomic_ordering`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_atomic_ordering\n[`invalid_null_ptr_usage`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_null_ptr_usage\n[`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n[`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n[`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n[`invalid_utf8_in_unchecked`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_utf8_in_unchecked\n[`inverted_saturating_sub`]: https://rust-lang.github.io/rust-clippy/master/index.html#inverted_saturating_sub\n[`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n[`is_digit_ascii_radix`]: https://rust-lang.github.io/rust-clippy/master/index.html#is_digit_ascii_radix\n[`items_after_statements`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements\n[`items_after_test_module`]: https://rust-lang.github.io/rust-clippy/master/index.html#items_after_test_module\n[`iter_cloned_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_cloned_collect\n[`iter_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_count\n[`iter_filter_is_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_filter_is_ok\n[`iter_filter_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_filter_is_some\n[`iter_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_kv_map\n[`iter_next_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_loop\n[`iter_next_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_next_slice\n[`iter_not_returning_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_not_returning_iterator\n[`iter_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth\n[`iter_nth_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_nth_zero\n[`iter_on_empty_collections`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_on_empty_collections\n[`iter_on_single_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_on_single_items\n[`iter_out_of_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_out_of_bounds\n[`iter_over_hash_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_over_hash_type\n[`iter_overeager_cloned`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned\n[`iter_skip_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_next\n[`iter_skip_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_skip_zero\n[`iter_with_drain`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_with_drain\n[`iter_without_into_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#iter_without_into_iter\n[`iterator_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#iterator_step_by_zero\n[`join_absolute_paths`]: https://rust-lang.github.io/rust-clippy/master/index.html#join_absolute_paths\n[`just_underscores_and_digits`]: https://rust-lang.github.io/rust-clippy/master/index.html#just_underscores_and_digits\n[`large_const_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_const_arrays\n[`large_digit_groups`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_digit_groups\n[`large_enum_variant`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_enum_variant\n[`large_futures`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_futures\n[`large_include_file`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_include_file\n[`large_stack_arrays`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays\n[`large_stack_frames`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_frames\n[`large_types_passed_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#large_types_passed_by_value\n[`legacy_numeric_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants\n[`len_without_is_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_without_is_empty\n[`len_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#len_zero\n[`let_and_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\n[`let_underscore_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop\n[`let_underscore_future`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_future\n[`let_underscore_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_lock\n[`let_underscore_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_must_use\n[`let_underscore_untyped`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_untyped\n[`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n[`let_with_type_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_with_type_underscore\n[`lines_filter_map_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#lines_filter_map_ok\n[`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n[`lint_groups_priority`]: https://rust-lang.github.io/rust-clippy/master/index.html#lint_groups_priority\n[`literal_string_with_formatting_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#literal_string_with_formatting_args\n[`little_endian_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#little_endian_bytes\n[`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n[`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal\n[`macro_metavars_in_unsafe`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_metavars_in_unsafe\n[`macro_use_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#macro_use_imports\n[`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n[`manual_assert`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert\n[`manual_async_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_async_fn\n[`manual_bits`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_bits\n[`manual_c_str_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_c_str_literals\n[`manual_clamp`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_clamp\n[`manual_div_ceil`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_div_ceil\n[`manual_filter`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter\n[`manual_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_filter_map\n[`manual_find`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find\n[`manual_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_find_map\n[`manual_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_flatten\n[`manual_hash_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_hash_one\n[`manual_ignore_case_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ignore_case_cmp\n[`manual_inspect`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_inspect\n[`manual_instant_elapsed`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_instant_elapsed\n[`manual_is_ascii_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_ascii_check\n[`manual_is_finite`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_finite\n[`manual_is_infinite`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_infinite\n[`manual_is_power_of_two`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_power_of_two\n[`manual_is_variant_and`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_is_variant_and\n[`manual_let_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else\n[`manual_main_separator_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_main_separator_str\n[`manual_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_map\n[`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n[`manual_next_back`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_next_back\n[`manual_non_exhaustive`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_non_exhaustive\n[`manual_ok_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_err\n[`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n[`manual_pattern_char_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_pattern_char_comparison\n[`manual_range_contains`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n[`manual_range_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_patterns\n[`manual_rem_euclid`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_rem_euclid\n[`manual_retain`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_retain\n[`manual_rotate`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_rotate\n[`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n[`manual_slice_size_calculation`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_slice_size_calculation\n[`manual_split_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_split_once\n[`manual_str_repeat`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat\n[`manual_string_new`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_string_new\n[`manual_strip`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\n[`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n[`manual_try_fold`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_try_fold\n[`manual_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or\n[`manual_unwrap_or_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or_default\n[`manual_while_let_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_while_let_some\n[`many_single_char_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names\n[`map_all_any_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_all_any_identity\n[`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n[`map_collect_result_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_collect_result_unit\n[`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n[`map_err_ignore`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore\n[`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n[`map_identity`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_identity\n[`map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or\n[`map_with_unused_argument_over_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_with_unused_argument_over_ranges\n[`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n[`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool\n[`match_like_matches_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\n[`match_on_vec_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\n[`match_overlapping_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_overlapping_arm\n[`match_ref_pats`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_ref_pats\n[`match_result_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_result_ok\n[`match_same_arms`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms\n[`match_single_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_single_binding\n[`match_str_case_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_str_case_mismatch\n[`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n[`match_wildcard_for_single_variants`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants\n[`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n[`maybe_misused_cfg`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_misused_cfg\n[`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n[`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget\n[`mem_replace_option_with_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n[`mem_replace_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n[`mem_replace_with_uninit`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_uninit\n[`min_ident_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars\n[`min_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#min_max\n[`misaligned_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#misaligned_transmute\n[`mismatched_target_os`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatched_target_os\n[`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n[`misnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters\n[`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n[`missing_assert_message`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_assert_message\n[`missing_asserts_for_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_asserts_for_indexing\n[`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n[`missing_const_for_thread_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_thread_local\n[`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n[`missing_enforced_import_renames`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames\n[`missing_errors_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc\n[`missing_fields_in_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_fields_in_debug\n[`missing_inline_in_public_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items\n[`missing_panics_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc\n[`missing_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc\n[`missing_spin_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n[`missing_trait_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods\n[`missing_transmute_annotations`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_transmute_annotations\n[`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n[`mixed_attributes_style`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_attributes_style\n[`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n[`mixed_read_write_in_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_read_write_in_expression\n[`mod_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#mod_module_files\n[`module_inception`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n[`module_name_repetitions`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\n[`modulo_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#modulo_arithmetic\n[`modulo_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#modulo_one\n[`multi_assignments`]: https://rust-lang.github.io/rust-clippy/master/index.html#multi_assignments\n[`multiple_bound_locations`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_bound_locations\n[`multiple_crate_versions`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions\n[`multiple_inherent_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_inherent_impl\n[`multiple_unsafe_ops_per_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#multiple_unsafe_ops_per_block\n[`must_use_candidate`]: https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate\n[`must_use_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#must_use_unit\n[`mut_from_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_from_ref\n[`mut_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_mut\n[`mut_mutex_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_mutex_lock\n[`mut_range_bound`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_range_bound\n[`mutable_key_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key_type\n[`mutex_atomic`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic\n[`mutex_integer`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer\n[`naive_bytecount`]: https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount\n[`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n[`needless_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_as_bytes\n[`needless_bitwise_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bitwise_bool\n[`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n[`needless_bool_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool_assign\n[`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n[`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference\n[`needless_borrows_for_generic_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrows_for_generic_args\n[`needless_character_iteration`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_character_iteration\n[`needless_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect\n[`needless_continue`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_continue\n[`needless_doctest_main`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_doctest_main\n[`needless_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_else\n[`needless_for_each`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_for_each\n[`needless_if`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_if\n[`needless_late_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_late_init\n[`needless_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_lifetimes\n[`needless_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_match\n[`needless_maybe_sized`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_maybe_sized\n[`needless_option_as_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_as_deref\n[`needless_option_take`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_option_take\n[`needless_parens_on_range_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_parens_on_range_literals\n[`needless_pass_by_ref_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut\n[`needless_pass_by_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\n[`needless_pub_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_pub_self\n[`needless_question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark\n[`needless_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_range_loop\n[`needless_raw_string_hashes`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_raw_string_hashes\n[`needless_raw_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_raw_strings\n[`needless_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_return\n[`needless_return_with_question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_return_with_question_mark\n[`needless_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_splitn\n[`needless_update`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_update\n[`neg_cmp_op_on_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#neg_cmp_op_on_partial_ord\n[`neg_multiply`]: https://rust-lang.github.io/rust-clippy/master/index.html#neg_multiply\n[`negative_feature_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#negative_feature_names\n[`never_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#never_loop\n[`new_ret_no_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_ret_no_self\n[`new_without_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n[`new_without_default_derive`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default_derive\n[`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n[`no_effect_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_replace\n[`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n[`no_mangle_with_rust_abi`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi\n[`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n[`non_canonical_clone_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl\n[`non_canonical_partial_ord_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl\n[`non_minimal_cfg`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_minimal_cfg\n[`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n[`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty\n[`non_zero_suggestions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_zero_suggestions\n[`nonminimal_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool\n[`nonsensical_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonsensical_open_options\n[`nonstandard_macro_braces`]: https://rust-lang.github.io/rust-clippy/master/index.html#nonstandard_macro_braces\n[`not_unsafe_ptr_arg_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref\n[`obfuscated_if_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#obfuscated_if_else\n[`octal_escapes`]: https://rust-lang.github.io/rust-clippy/master/index.html#octal_escapes\n[`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n[`only_used_in_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\n[`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n[`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n[`option_as_ref_cloned`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_cloned\n[`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref\n[`option_env_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_env_unwrap\n[`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n[`option_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_filter_map\n[`option_if_let_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else\n[`option_map_or_err_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_err_ok\n[`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n[`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n[`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or\n[`option_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or_else\n[`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n[`option_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_unwrap_used\n[`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n[`or_then_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_then_unwrap\n[`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n[`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n[`overly_complex_bool_expr`]: https://rust-lang.github.io/rust-clippy/master/index.html#overly_complex_bool_expr\n[`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n[`panic_in_result_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn\n[`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n[`panicking_overflow_checks`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_overflow_checks\n[`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n[`partial_pub_fields`]: https://rust-lang.github.io/rust-clippy/master/index.html#partial_pub_fields\n[`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n[`partialeq_to_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_to_none\n[`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n[`path_ends_with_ext`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_ends_with_ext\n[`pathbuf_init_then_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#pathbuf_init_then_push\n[`pattern_type_mismatch`]: https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch\n[`permissions_set_readonly_false`]: https://rust-lang.github.io/rust-clippy/master/index.html#permissions_set_readonly_false\n[`pointers_in_nomem_asm_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#pointers_in_nomem_asm_block\n[`positional_named_format_parameters`]: https://rust-lang.github.io/rust-clippy/master/index.html#positional_named_format_parameters\n[`possible_missing_comma`]: https://rust-lang.github.io/rust-clippy/master/index.html#possible_missing_comma\n[`precedence`]: https://rust-lang.github.io/rust-clippy/master/index.html#precedence\n[`print_in_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_in_format_impl\n[`print_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_literal\n[`print_stderr`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_stderr\n[`print_stdout`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout\n[`print_with_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#print_with_newline\n[`println_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#println_empty_string\n[`ptr_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg\n[`ptr_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr\n[`ptr_cast_constness`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness\n[`ptr_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_eq\n[`ptr_offset_with_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast\n[`pub_enum_variant_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_enum_variant_names\n[`pub_underscore_fields`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields\n[`pub_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_use\n[`pub_with_shorthand`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand\n[`pub_without_shorthand`]: https://rust-lang.github.io/rust-clippy/master/index.html#pub_without_shorthand\n[`question_mark`]: https://rust-lang.github.io/rust-clippy/master/index.html#question_mark\n[`question_mark_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used\n[`range_minus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_minus_one\n[`range_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one\n[`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n[`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n[`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n[`rc_clone_in_vec_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_clone_in_vec_init\n[`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n[`read_line_without_trim`]: https://rust-lang.github.io/rust-clippy/master/index.html#read_line_without_trim\n[`read_zero_byte_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#read_zero_byte_vec\n[`readonly_write_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#readonly_write_lock\n[`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n[`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n[`redundant_as_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_as_str\n[`redundant_async_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_async_block\n[`redundant_at_rest_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_at_rest_pattern\n[`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n[`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n[`redundant_closure_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_call\n[`redundant_closure_for_method_calls`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls\n[`redundant_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_comparisons\n[`redundant_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\n[`redundant_feature_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_feature_names\n[`redundant_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names\n[`redundant_guards`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_guards\n[`redundant_locals`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_locals\n[`redundant_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern\n[`redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n[`redundant_pub_crate`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate\n[`redundant_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_slicing\n[`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n[`redundant_type_annotations`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_type_annotations\n[`ref_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr\n[`ref_binding_to_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_binding_to_reference\n[`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n[`ref_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option\n[`ref_option_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref\n[`ref_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_patterns\n[`regex_creation_in_loops`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_creation_in_loops\n[`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n[`renamed_function_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#renamed_function_params\n[`repeat_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once\n[`repeat_vec_with_capacity`]: https://rust-lang.github.io/rust-clippy/master/index.html#repeat_vec_with_capacity\n[`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n[`repr_packed_without_abi`]: https://rust-lang.github.io/rust-clippy/master/index.html#repr_packed_without_abi\n[`reserve_after_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#reserve_after_initialization\n[`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n[`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n[`result_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_filter_map\n[`result_large_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_large_err\n[`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n[`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n[`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n[`result_unit_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n[`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n[`return_self_not_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use\n[`reverse_range_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#reverse_range_loop\n[`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n[`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n[`same_item_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_item_push\n[`same_name_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_name_method\n[`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some\n[`seek_from_current`]: https://rust-lang.github.io/rust-clippy/master/index.html#seek_from_current\n[`seek_to_start_instead_of_rewind`]: https://rust-lang.github.io/rust-clippy/master/index.html#seek_to_start_instead_of_rewind\n[`self_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_assignment\n[`self_named_constructors`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_constructors\n[`self_named_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files\n[`semicolon_if_nothing_returned`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned\n[`semicolon_inside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_inside_block\n[`semicolon_outside_block`]: https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_outside_block\n[`separated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#separated_literal_suffix\n[`serde_api_misuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#serde_api_misuse\n[`set_contains_or_insert`]: https://rust-lang.github.io/rust-clippy/master/index.html#set_contains_or_insert\n[`shadow_reuse`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse\n[`shadow_same`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same\n[`shadow_unrelated`]: https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated\n[`short_circuit_statement`]: https://rust-lang.github.io/rust-clippy/master/index.html#short_circuit_statement\n[`should_assert_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_assert_eq\n[`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n[`should_panic_without_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_panic_without_expect\n[`significant_drop_in_scrutinee`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_in_scrutinee\n[`significant_drop_tightening`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening\n[`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n[`single_call_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn\n[`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n[`single_char_lifetime_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names\n[`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n[`single_char_push_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_push_str\n[`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n[`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop\n[`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n[`single_match_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else\n[`single_range_in_vec_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_range_in_vec_init\n[`size_of_in_element_count`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_in_element_count\n[`size_of_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#size_of_ref\n[`skip_while_next`]: https://rust-lang.github.io/rust-clippy/master/index.html#skip_while_next\n[`slow_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization\n[`stable_sort_primitive`]: https://rust-lang.github.io/rust-clippy/master/index.html#stable_sort_primitive\n[`std_instead_of_alloc`]: https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc\n[`std_instead_of_core`]: https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core\n[`str_split_at_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_split_at_newline\n[`str_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string\n[`string_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add\n[`string_add_assign`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_add_assign\n[`string_extend_chars`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_extend_chars\n[`string_from_utf8_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_from_utf8_as_bytes\n[`string_lit_as_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_as_bytes\n[`string_lit_chars_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_lit_chars_any\n[`string_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_slice\n[`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n[`strlen_on_c_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings\n[`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n[`struct_field_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_field_names\n[`stutter`]: https://rust-lang.github.io/rust-clippy/master/index.html#stutter\n[`suboptimal_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops\n[`suspicious_arithmetic_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl\n[`suspicious_assignment_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_assignment_formatting\n[`suspicious_command_arg_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_command_arg_space\n[`suspicious_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_doc_comments\n[`suspicious_else_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_else_formatting\n[`suspicious_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_map\n[`suspicious_op_assign_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_op_assign_impl\n[`suspicious_open_options`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_open_options\n[`suspicious_operation_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_operation_groupings\n[`suspicious_splitn`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_splitn\n[`suspicious_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_to_owned\n[`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n[`suspicious_xor_used_as_pow`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_xor_used_as_pow\n[`swap_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#swap_ptr_to_ref\n[`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n[`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n[`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n[`test_attr_in_doctest`]: https://rust-lang.github.io/rust-clippy/master/index.html#test_attr_in_doctest\n[`tests_outside_test_module`]: https://rust-lang.github.io/rust-clippy/master/index.html#tests_outside_test_module\n[`thread_local_initializer_can_be_made_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#thread_local_initializer_can_be_made_const\n[`to_digit_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some\n[`to_string_in_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_display\n[`to_string_in_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\n[`to_string_trait_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_string_trait_impl\n[`todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n[`too_long_first_doc_paragraph`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph\n[`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n[`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n[`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n[`trailing_empty_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#trailing_empty_array\n[`trait_duplication_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#trait_duplication_in_bounds\n[`transmute_bytes_to_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str\n[`transmute_float_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int\n[`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n[`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n[`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n[`transmute_int_to_non_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_non_zero\n[`transmute_null_to_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_null_to_fn\n[`transmute_num_to_bytes`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_num_to_bytes\n[`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n[`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref\n[`transmute_undefined_repr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_undefined_repr\n[`transmutes_expressible_as_ptr_casts`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmutes_expressible_as_ptr_casts\n[`transmuting_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmuting_null\n[`trim_split_whitespace`]: https://rust-lang.github.io/rust-clippy/master/index.html#trim_split_whitespace\n[`trivial_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivial_regex\n[`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref\n[`try_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#try_err\n[`tuple_array_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#tuple_array_conversions\n[`type_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_complexity\n[`type_id_on_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_id_on_box\n[`type_repetition_in_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#type_repetition_in_bounds\n[`unchecked_duration_subtraction`]: https://rust-lang.github.io/rust-clippy/master/index.html#unchecked_duration_subtraction\n[`unconditional_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion\n[`undocumented_unsafe_blocks`]: https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks\n[`undropped_manually_drops`]: https://rust-lang.github.io/rust-clippy/master/index.html#undropped_manually_drops\n[`unicode_not_nfc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unicode_not_nfc\n[`unimplemented`]: https://rust-lang.github.io/rust-clippy/master/index.html#unimplemented\n[`uninhabited_references`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninhabited_references\n[`uninit_assumed_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\n[`uninit_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec\n[`uninlined_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args\n[`unit_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_arg\n[`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n[`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash\n[`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n[`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n[`unnecessary_box_returns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_box_returns\n[`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n[`unnecessary_clippy_cfg`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_clippy_cfg\n[`unnecessary_fallible_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions\n[`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n[`unnecessary_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_find_map\n[`unnecessary_first_then_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_first_then_check\n[`unnecessary_fold`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fold\n[`unnecessary_get_then_check`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_get_then_check\n[`unnecessary_join`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_join\n[`unnecessary_lazy_evaluations`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations\n[`unnecessary_literal_bound`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_literal_bound\n[`unnecessary_literal_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_literal_unwrap\n[`unnecessary_map_on_constructor`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_on_constructor\n[`unnecessary_map_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_map_or\n[`unnecessary_min_or_max`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_min_or_max\n[`unnecessary_mut_passed`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed\n[`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n[`unnecessary_owned_empty_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_owned_empty_strings\n[`unnecessary_result_map_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_result_map_or_else\n[`unnecessary_safety_comment`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_comment\n[`unnecessary_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc\n[`unnecessary_self_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports\n[`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n[`unnecessary_struct_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_struct_initialization\n[`unnecessary_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\n[`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n[`unnecessary_wraps`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps\n[`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n[`unneeded_struct_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_struct_pattern\n[`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n[`unnested_or_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnested_or_patterns\n[`unreachable`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreachable\n[`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n[`unsafe_derive_deserialize`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_derive_deserialize\n[`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n[`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization\n[`unseparated_literal_suffix`]: https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix\n[`unsound_collection_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsound_collection_transmute\n[`unstable_as_mut_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#unstable_as_mut_slice\n[`unstable_as_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#unstable_as_slice\n[`unused_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\n[`unused_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_collect\n[`unused_enumerate_index`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_enumerate_index\n[`unused_format_specs`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_format_specs\n[`unused_io_amount`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n[`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n[`unused_peekable`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_peekable\n[`unused_result_ok`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_result_ok\n[`unused_rounding`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_rounding\n[`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\n[`unused_trait_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names\n[`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n[`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings\n[`unwrap_in_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result\n[`unwrap_or_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default\n[`unwrap_or_else_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_else_default\n[`unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n[`upper_case_acronyms`]: https://rust-lang.github.io/rust-clippy/master/index.html#upper_case_acronyms\n[`use_debug`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_debug\n[`use_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#use_self\n[`used_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding\n[`used_underscore_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_items\n[`useless_asref`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_asref\n[`useless_attribute`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_attribute\n[`useless_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion\n[`useless_format`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_format\n[`useless_let_if_seq`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq\n[`useless_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute\n[`useless_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#useless_vec\n[`vec_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_box\n[`vec_init_then_push`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_init_then_push\n[`vec_resize_to_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#vec_resize_to_zero\n[`verbose_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_bit_mask\n[`verbose_file_reads`]: https://rust-lang.github.io/rust-clippy/master/index.html#verbose_file_reads\n[`vtable_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#vtable_address_comparisons\n[`waker_clone_wake`]: https://rust-lang.github.io/rust-clippy/master/index.html#waker_clone_wake\n[`while_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_float\n[`while_immutable_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_immutable_condition\n[`while_let_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_loop\n[`while_let_on_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator\n[`wildcard_dependencies`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_dependencies\n[`wildcard_enum_match_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm\n[`wildcard_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_imports\n[`wildcard_in_or_patterns`]: https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_in_or_patterns\n[`write_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#write_literal\n[`write_with_newline`]: https://rust-lang.github.io/rust-clippy/master/index.html#write_with_newline\n[`writeln_empty_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#writeln_empty_string\n[`wrong_pub_self_convention`]: https://rust-lang.github.io/rust-clippy/master/index.html#wrong_pub_self_convention\n[`wrong_self_convention`]: https://rust-lang.github.io/rust-clippy/master/index.html#wrong_self_convention\n[`wrong_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#wrong_transmute\n[`zero_divided_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_divided_by_zero\n[`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n[`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n[`zero_repeat_side_effects`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_repeat_side_effects\n[`zero_sized_map_values`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_sized_map_values\n[`zero_width_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_width_space\n[`zombie_processes`]: https://rust-lang.github.io/rust-clippy/master/index.html#zombie_processes\n[`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n<!-- end autogenerated links to lint list -->\n<!-- begin autogenerated links to configuration documentation -->\n[`absolute-paths-allowed-crates`]: https://doc.rust-lang.org/clippy/lint_configuration.html#absolute-paths-allowed-crates\n[`absolute-paths-max-segments`]: https://doc.rust-lang.org/clippy/lint_configuration.html#absolute-paths-max-segments\n[`accept-comment-above-attributes`]: https://doc.rust-lang.org/clippy/lint_configuration.html#accept-comment-above-attributes\n[`accept-comment-above-statement`]: https://doc.rust-lang.org/clippy/lint_configuration.html#accept-comment-above-statement\n[`allow-comparison-to-zero`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-comparison-to-zero\n[`allow-dbg-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-dbg-in-tests\n[`allow-expect-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-expect-in-tests\n[`allow-indexing-slicing-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-indexing-slicing-in-tests\n[`allow-mixed-uninlined-format-args`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-mixed-uninlined-format-args\n[`allow-one-hash-in-raw-strings`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-one-hash-in-raw-strings\n[`allow-panic-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-panic-in-tests\n[`allow-print-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-print-in-tests\n[`allow-private-module-inception`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-private-module-inception\n[`allow-renamed-params-for`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-renamed-params-for\n[`allow-unwrap-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-unwrap-in-tests\n[`allow-useless-vec-in-tests`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allow-useless-vec-in-tests\n[`allowed-dotfiles`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allowed-dotfiles\n[`allowed-duplicate-crates`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allowed-duplicate-crates\n[`allowed-idents-below-min-chars`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allowed-idents-below-min-chars\n[`allowed-prefixes`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allowed-prefixes\n[`allowed-scripts`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allowed-scripts\n[`allowed-wildcard-imports`]: https://doc.rust-lang.org/clippy/lint_configuration.html#allowed-wildcard-imports\n[`arithmetic-side-effects-allowed`]: https://doc.rust-lang.org/clippy/lint_configuration.html#arithmetic-side-effects-allowed\n[`arithmetic-side-effects-allowed-binary`]: https://doc.rust-lang.org/clippy/lint_configuration.html#arithmetic-side-effects-allowed-binary\n[`arithmetic-side-effects-allowed-unary`]: https://doc.rust-lang.org/clippy/lint_configuration.html#arithmetic-side-effects-allowed-unary\n[`array-size-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#array-size-threshold\n[`avoid-breaking-exported-api`]: https://doc.rust-lang.org/clippy/lint_configuration.html#avoid-breaking-exported-api\n[`await-holding-invalid-types`]: https://doc.rust-lang.org/clippy/lint_configuration.html#await-holding-invalid-types\n[`cargo-ignore-publish`]: https://doc.rust-lang.org/clippy/lint_configuration.html#cargo-ignore-publish\n[`check-private-items`]: https://doc.rust-lang.org/clippy/lint_configuration.html#check-private-items\n[`cognitive-complexity-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#cognitive-complexity-threshold\n[`disallowed-macros`]: https://doc.rust-lang.org/clippy/lint_configuration.html#disallowed-macros\n[`disallowed-methods`]: https://doc.rust-lang.org/clippy/lint_configuration.html#disallowed-methods\n[`disallowed-names`]: https://doc.rust-lang.org/clippy/lint_configuration.html#disallowed-names\n[`disallowed-types`]: https://doc.rust-lang.org/clippy/lint_configuration.html#disallowed-types\n[`doc-valid-idents`]: https://doc.rust-lang.org/clippy/lint_configuration.html#doc-valid-idents\n[`enable-raw-pointer-heuristic-for-send`]: https://doc.rust-lang.org/clippy/lint_configuration.html#enable-raw-pointer-heuristic-for-send\n[`enforce-iter-loop-reborrow`]: https://doc.rust-lang.org/clippy/lint_configuration.html#enforce-iter-loop-reborrow\n[`enforced-import-renames`]: https://doc.rust-lang.org/clippy/lint_configuration.html#enforced-import-renames\n[`enum-variant-name-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#enum-variant-name-threshold\n[`enum-variant-size-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#enum-variant-size-threshold\n[`excessive-nesting-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#excessive-nesting-threshold\n[`future-size-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#future-size-threshold\n[`ignore-interior-mutability`]: https://doc.rust-lang.org/clippy/lint_configuration.html#ignore-interior-mutability\n[`large-error-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#large-error-threshold\n[`lint-inconsistent-struct-field-initializers`]: https://doc.rust-lang.org/clippy/lint_configuration.html#lint-inconsistent-struct-field-initializers\n[`literal-representation-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#literal-representation-threshold\n[`matches-for-let-else`]: https://doc.rust-lang.org/clippy/lint_configuration.html#matches-for-let-else\n[`max-fn-params-bools`]: https://doc.rust-lang.org/clippy/lint_configuration.html#max-fn-params-bools\n[`max-include-file-size`]: https://doc.rust-lang.org/clippy/lint_configuration.html#max-include-file-size\n[`max-struct-bools`]: https://doc.rust-lang.org/clippy/lint_configuration.html#max-struct-bools\n[`max-suggested-slice-pattern-length`]: https://doc.rust-lang.org/clippy/lint_configuration.html#max-suggested-slice-pattern-length\n[`max-trait-bounds`]: https://doc.rust-lang.org/clippy/lint_configuration.html#max-trait-bounds\n[`min-ident-chars-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#min-ident-chars-threshold\n[`missing-docs-in-crate-items`]: https://doc.rust-lang.org/clippy/lint_configuration.html#missing-docs-in-crate-items\n[`module-item-order-groupings`]: https://doc.rust-lang.org/clippy/lint_configuration.html#module-item-order-groupings\n[`msrv`]: https://doc.rust-lang.org/clippy/lint_configuration.html#msrv\n[`pass-by-value-size-limit`]: https://doc.rust-lang.org/clippy/lint_configuration.html#pass-by-value-size-limit\n[`pub-underscore-fields-behavior`]: https://doc.rust-lang.org/clippy/lint_configuration.html#pub-underscore-fields-behavior\n[`semicolon-inside-block-ignore-singleline`]: https://doc.rust-lang.org/clippy/lint_configuration.html#semicolon-inside-block-ignore-singleline\n[`semicolon-outside-block-ignore-multiline`]: https://doc.rust-lang.org/clippy/lint_configuration.html#semicolon-outside-block-ignore-multiline\n[`single-char-binding-names-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#single-char-binding-names-threshold\n[`source-item-ordering`]: https://doc.rust-lang.org/clippy/lint_configuration.html#source-item-ordering\n[`stack-size-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#stack-size-threshold\n[`standard-macro-braces`]: https://doc.rust-lang.org/clippy/lint_configuration.html#standard-macro-braces\n[`struct-field-name-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#struct-field-name-threshold\n[`suppress-restriction-lint-in-const`]: https://doc.rust-lang.org/clippy/lint_configuration.html#suppress-restriction-lint-in-const\n[`too-large-for-stack`]: https://doc.rust-lang.org/clippy/lint_configuration.html#too-large-for-stack\n[`too-many-arguments-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#too-many-arguments-threshold\n[`too-many-lines-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#too-many-lines-threshold\n[`trait-assoc-item-kinds-order`]: https://doc.rust-lang.org/clippy/lint_configuration.html#trait-assoc-item-kinds-order\n[`trivial-copy-size-limit`]: https://doc.rust-lang.org/clippy/lint_configuration.html#trivial-copy-size-limit\n[`type-complexity-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#type-complexity-threshold\n[`unnecessary-box-size`]: https://doc.rust-lang.org/clippy/lint_configuration.html#unnecessary-box-size\n[`unreadable-literal-lint-fractions`]: https://doc.rust-lang.org/clippy/lint_configuration.html#unreadable-literal-lint-fractions\n[`upper-case-acronyms-aggressive`]: https://doc.rust-lang.org/clippy/lint_configuration.html#upper-case-acronyms-aggressive\n[`vec-box-size-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#vec-box-size-threshold\n[`verbose-bit-mask-threshold`]: https://doc.rust-lang.org/clippy/lint_configuration.html#verbose-bit-mask-threshold\n[`warn-on-all-wildcard-imports`]: https://doc.rust-lang.org/clippy/lint_configuration.html#warn-on-all-wildcard-imports\n[`warn-unsafe-macro-metavars-in-private-macros`]: https://doc.rust-lang.org/clippy/lint_configuration.html#warn-unsafe-macro-metavars-in-private-macros\n<!-- end autogenerated links to configuration documentation -->\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1279296875,
          "content": "# The Rust Code of Conduct\n\nThe Code of Conduct for this repository [can be found online](https://www.rust-lang.org/conduct.html).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 12.4150390625,
          "content": "# Contributing to Clippy\n\nHello fellow Rustacean! Great to see your interest in compiler internals and lints!\n\n**First**: if you're unsure or afraid of _anything_, just ask or submit the issue or pull request anyway. You won't be\nyelled at for giving it your best effort. The worst that can happen is that you'll be politely asked to change\nsomething. We appreciate any sort of contributions, and don't want a wall of rules to get in the way of that.\n\nClippy welcomes contributions from everyone. There are many ways to contribute to Clippy and the following document\nexplains how you can contribute and how to get started.  If you have any questions about contributing or need help with\nanything, feel free to ask questions on issues or visit the `#clippy` on [Zulip].\n\nAll contributors are expected to follow the [Rust Code of Conduct].\n\n- [Contributing to Clippy](#contributing-to-clippy)\n  - [The Clippy book](#the-clippy-book)\n  - [High level approach](#high-level-approach)\n  - [Finding something to fix/improve](#finding-something-to-fiximprove)\n  - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n    - [IntelliJ Rust](#intellij-rust)\n    - [Rust Analyzer](#rust-analyzer)\n  - [How Clippy works](#how-clippy-works)\n  - [Issue and PR triage](#issue-and-pr-triage)\n  - [Contributions](#contributions)\n  - [License](#license)\n\n[Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/clippy\n[Rust Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n\n## The Clippy book\n\nIf you're new to Clippy and don't know where to start, the [Clippy book] includes\na [developer guide] and is a good place to start your journey.\n\n[Clippy book]: https://doc.rust-lang.org/nightly/clippy/index.html\n[developer guide]: https://doc.rust-lang.org/nightly/clippy/development/index.html\n\n## High level approach\n\n1. Find something to fix/improve\n2. Change code (likely some file in `clippy_lints/src/`)\n3. Follow the instructions in the [Basics docs](book/src/development/basics.md)\n   to get set up\n4. Run `cargo test` in the root directory and wiggle code until it passes\n5. Open a PR (also can be done after 2. if you run into problems)\n\n## Finding something to fix/improve\n\nAll issues on Clippy are mentored, if you want help simply ask someone from the\nClippy team directly by mentioning them in the issue or over on [Zulip]. All\ncurrently active team members can be found\n[here](https://github.com/rust-lang/rust-clippy/blob/master/triagebot.toml#L18)\n\nSome issues are easier than others. The [`good-first-issue`] label can be used to find the easy\nissues. You can use `@rustbot claim` to assign the issue to yourself.\n\nThere are also some abandoned PRs, marked with [`S-inactive-closed`].\nPretty often these PRs are nearly completed and just need some extra steps\n(formatting, addressing review comments, ...) to be merged. If you want to\ncomplete such a PR, please leave a comment in the PR and open a new one based\non it.\n\nIssues marked [`T-AST`] involve simple matching of the syntax tree structure,\nand are generally easier than [`T-middle`] issues, which involve types\nand resolved paths.\n\n[`T-AST`] issues will generally need you to match against a predefined syntax structure.\nTo figure out how this syntax structure is encoded in the AST, it is recommended to run\n`rustc -Z unpretty=ast-tree` on an example of the structure and compare with the [nodes in the AST docs].\nUsually the lint will end up to be a nested series of matches and ifs, [like so][deep-nesting].\nBut we can make it nest-less by using [let chains], [like this][nest-less].\n\n[`E-medium`] issues are generally pretty easy too, though it's recommended you work on an [`good-first-issue`]\nfirst. Sometimes they are only somewhat involved code wise, but not difficult per-se.\nNote that [`E-medium`] issues may require some knowledge of Clippy internals or some\ndebugging to find the actual problem behind the issue.\n\n[`T-middle`] issues can be more involved and require verifying types. The [`ty`] module contains a\nlot of methods that are useful, though one of the most useful would be `expr_ty` (gives the type of\nan AST expression). `match_def_path()` in Clippy's `utils` module can also be useful.\n\n[`good-first-issue`]: https://github.com/rust-lang/rust-clippy/labels/good-first-issue\n[`S-inactive-closed`]: https://github.com/rust-lang/rust-clippy/pulls?q=is%3Aclosed+label%3AS-inactive-closed\n[`T-AST`]: https://github.com/rust-lang/rust-clippy/labels/T-AST\n[`T-middle`]: https://github.com/rust-lang/rust-clippy/labels/T-middle\n[`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n[`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty\n[nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n[deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/mem_forget.rs#L31-L45\n[let chains]: https://github.com/rust-lang/rust/pull/94927\n[nest-less]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/bit_mask.rs#L133-L159\n\n## Getting code-completion for rustc internals to work\n\n### IntelliJ Rust\nUnfortunately, [`IntelliJ Rust`][IntelliJ_rust_homepage] does not (yet?) understand how Clippy uses compiler-internals\nusing `extern crate` and it also needs to be able to read the source files of the rustc-compiler which are not\navailable via a `rustup` component at the time of writing.\nTo work around this, you need to have a copy of the [rustc-repo][rustc_repo] available which can be obtained via\n`git clone https://github.com/rust-lang/rust/`.\nThen you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies\nwhich `IntelliJ Rust` will be able to understand.\nRun `cargo dev setup intellij --repo-path <repo-path>` where `<repo-path>` is a path to the rustc repo\nyou just cloned.\nThe command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\nClippy's `Cargo.toml`s and should allow `IntelliJ Rust` to understand most of the types that Clippy uses.\nJust make sure to remove the dependencies again before finally making a pull request!\n\n[rustc_repo]: https://github.com/rust-lang/rust/\n[IntelliJ_rust_homepage]: https://intellij-rust.github.io/\n\n### Rust Analyzer\nFor [`rust-analyzer`][ra_homepage] to work correctly make sure that in the `rust-analyzer` configuration you set\n\n```json\n{ \"rust-analyzer.rustc.source\": \"discover\" }\n```\n\nYou should be able to see information on things like `Expr` or `EarlyContext` now if you hover them, also\na lot more type hints.\n\nTo have `rust-analyzer` also work in the `clippy_dev` and `lintcheck` crates, add the following configuration\n\n```json\n{\n    \"rust-analyzer.linkedProjects\": [\n        \"./Cargo.toml\",\n        \"clippy_dev/Cargo.toml\",\n        \"lintcheck/Cargo.toml\",\n    ]\n}\n```\n\n[ra_homepage]: https://rust-analyzer.github.io/\n\n## How Clippy works\n\n[`clippy_lints/src/lib.rs`][lint_crate_entry] imports all the different lint modules and registers in the [`LintStore`].\nFor example, the [`else_if_without_else`][else_if_without_else] lint is registered like this:\n\n```rust\n// ./clippy_lints/src/lib.rs\n\n// ...\npub mod else_if_without_else;\n// ...\n\npub fn register_lints(store: &mut rustc_lint::LintStore, conf: &'static Conf) {\n    // ...\n    store.register_early_pass(|| Box::new(else_if_without_else::ElseIfWithoutElse));\n    // ...\n}\n```\n\nThe [`rustc_lint::LintStore`][`LintStore`] provides two methods to register lints:\n[register_early_pass][reg_early_pass] and [register_late_pass][reg_late_pass]. Both take an object\nthat implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in\nevery single lint. It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `cargo dev\nupdate_lints`. When you are writing your own lint, you can use that script to save you some time.\n\n```rust\n// ./clippy_lints/src/else_if_without_else.rs\n\nuse rustc_lint::{EarlyLintPass, EarlyContext};\n\n// ...\n\npub struct ElseIfWithoutElse;\n\n// ...\n\nimpl EarlyLintPass for ElseIfWithoutElse {\n    // ... the functions needed, to make the lint work\n}\n```\n\nThe difference between `EarlyLintPass` and `LateLintPass` is that the methods of the `EarlyLintPass` trait only provide\nAST information. The methods of the `LateLintPass` trait are executed after type checking and contain type information\nvia the `LateContext` parameter.\n\nThat's why the `else_if_without_else` example uses the `register_early_pass` function. Because the\n[actual lint logic][else_if_without_else] does not depend on any type information.\n\n[lint_crate_entry]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_lints/src/lib.rs\n[else_if_without_else]: https://github.com/rust-lang/rust-clippy/blob/4253aa7137cb7378acc96133c787e49a345c2b3c/clippy_lints/src/else_if_without_else.rs\n[`LintStore`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html\n[reg_early_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_early_pass\n[reg_late_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LintStore.html#method.register_late_pass\n[early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n[late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n\n## Issue and PR triage\n\nClippy is following the [Rust triage procedure][triage] for issues and pull\nrequests.\n\nHowever, we are a smaller project with all contributors being volunteers\ncurrently. Between writing new lints, fixing issues, reviewing pull requests and\nresponding to issues there may not always be enough time to stay on top of it\nall.\n\nOur highest priority is fixing [ICEs][I-ICE] and [bugs][C-bug], for example\nan ICE in a popular crate that many other crates depend on. We don't\nwant Clippy to crash on your code and we want it to be as reliable as the\nsuggestions from Rust compiler errors.\n\nWe have prioritization labels and a sync-blocker label, which are described below.\n- [P-low][p-low]: Requires attention (fix/response/evaluation) by a team member but isn't urgent.\n- [P-medium][p-medium]: Should be addressed by a team member until the next sync.\n- [P-high][p-high]: Should be immediately addressed and will require an out-of-cycle sync or a backport.\n- [L-sync-blocker][l-sync-blocker]: An issue that \"blocks\" a sync.\nOr rather: before the sync this should be addressed,\ne.g. by removing a lint again, so it doesn't hit beta/stable.\n\n[triage]: https://forge.rust-lang.org/release/triage-procedure.html\n[I-ICE]: https://github.com/rust-lang/rust-clippy/labels/I-ICE\n[C-bug]: https://github.com/rust-lang/rust-clippy/labels/C-bug\n[p-low]: https://github.com/rust-lang/rust-clippy/labels/P-low\n[p-medium]: https://github.com/rust-lang/rust-clippy/labels/P-medium\n[p-high]: https://github.com/rust-lang/rust-clippy/labels/P-high\n[l-sync-blocker]: https://github.com/rust-lang/rust-clippy/labels/L-sync-blocker\n\n## Contributions\n\nContributions to Clippy should be made in the form of GitHub pull requests. Each pull request will\nbe reviewed by a core contributor (someone with permission to land patches) and either landed in the\nmain tree or given feedback for changes that would be required.\n\nAll PRs should include a `changelog` entry with a short comment explaining the change. The rule of thumb is basically,\n\"what do you believe is important from an outsider's perspective?\" Often, PRs are only related to a single property of a\nlint, and then it's good to mention that one. Otherwise, it's better to include too much detail than too little.\n\nClippy's [changelog] is created from these comments. Every release, someone gets all merge commits with a\n`changelog: XYZ` entry and combines them into the changelog. This is a manual process.\n\nExamples:\n- New lint\n  ```\n  changelog: new lint: [`missing_trait_methods`]\n  ```\n- False positive fix\n  ```\n  changelog: Fix [`unused_peekable`] false positive when peeked in a closure or called as `f(&mut peekable)`\n  ```\n- Purely internal change\n  ```\n  changelog: none\n  ```\n\nNote this it is fine for a PR to include multiple `changelog` entries, e.g.:\n```\nchangelog: Something 1\nchangelog: Something 2\nchangelog: Something 3\n```\n\n[changelog]: CHANGELOG.md\n\n## License\n\nAll code in this repository is under the [Apache-2.0] or the [MIT] license.\n\n<!-- adapted from https://github.com/servo/servo/blob/master/CONTRIBUTING.md -->\n\n[Apache-2.0]: https://www.apache.org/licenses/LICENSE-2.0\n[MIT]: https://opensource.org/licenses/MIT\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.40234375,
          "content": "// REUSE-IgnoreStart\n\nCopyright 2014-2024 The Rust Project Developers\n\nLicensed under the Apache License, Version 2.0 <LICENSE-APACHE or\nhttp://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n<LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\noption. All files in the project carrying such notice may not be\ncopied, modified, or distributed except according to those terms.\n\n// REUSE-IgnoreEnd\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.0009765625,
          "content": "[package]\nname = \"clippy\"\n# begin autogenerated version\nversion = \"0.1.86\"\n# end autogenerated version\ndescription = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\nrepository = \"https://github.com/rust-lang/rust-clippy\"\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\nkeywords = [\"clippy\", \"lint\", \"plugin\"]\ncategories = [\"development-tools\", \"development-tools::cargo-plugins\"]\nbuild = \"build.rs\"\nedition = \"2021\"\npublish = false\n\n[[bin]]\nname = \"cargo-clippy\"\ntest = false\npath = \"src/main.rs\"\n\n[[bin]]\nname = \"clippy-driver\"\npath = \"src/driver.rs\"\n\n[dependencies]\nclippy_config = { path = \"clippy_config\" }\nclippy_lints = { path = \"clippy_lints\" }\nrustc_tools_util = \"0.4.0\"\ntempfile = { version = \"3.3\", optional = true }\ntermize = \"0.1\"\ncolor-print = \"0.3.4\"\nanstream = \"0.6.18\"\n\n[dev-dependencies]\ncargo_metadata = \"0.18.1\"\nui_test = \"0.26.4\"\nregex = \"1.5.5\"\nserde = { version = \"1.0.145\", features = [\"derive\"] }\nserde_json = \"1.0.122\"\ntoml = \"0.7.3\"\nwalkdir = \"2.3\"\nfiletime = \"0.2.9\"\nitertools = \"0.12\"\npulldown-cmark = { version = \"0.11\", default-features = false, features = [\"html\"] }\nrinja = { version = \"0.3\", default-features = false, features = [\"config\"] }\n\n# UI test dependencies\nclippy_utils = { path = \"clippy_utils\" }\nif_chain = \"1.0\"\nquote = \"1.0.25\"\nsyn = { version = \"2.0\", features = [\"full\"] }\nfutures = \"0.3\"\nparking_lot = \"0.12\"\ntokio = { version = \"1\", features = [\"io-util\"] }\n\n[build-dependencies]\nrustc_tools_util = \"0.4.0\"\n\n[features]\nintegration = [\"tempfile\"]\ninternal = [\"clippy_lints/internal\", \"tempfile\"]\n\n[package.metadata.rust-analyzer]\n# This package uses #[feature(rustc_private)]\nrustc_private = true\n\n[[test]]\nname = \"compile-test\"\nharness = false\n\n[[test]]\nname = \"dogfood\"\nharness = false\n\n# quine-mc_cluskey makes up a significant part of the runtime in dogfood\n# due to the number of conditions in the clippy_lints crate\n# and enabling optimizations for that specific dependency helps a bit\n# without increasing total build times.\n[profile.dev.package.quine-mc_cluskey]\nopt-level = 3\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.59765625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2014-2024 The Rust Project Developers\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0634765625,
          "content": "MIT License\n\nCopyright (c) 2014-2024 The Rust Project Developers\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.5478515625,
          "content": "# Clippy\n\n[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n\nA collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n\n[There are over 750 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n\nLints are divided into categories, each with a default [lint level](https://doc.rust-lang.org/rustc/lints/levels.html).\nYou can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category.\n\n| Category              | Description                                                                         | Default level |\n|-----------------------|-------------------------------------------------------------------------------------|---------------|\n| `clippy::all`         | all lints that are on by default (correctness, suspicious, style, complexity, perf) | **warn/deny** |\n| `clippy::correctness` | code that is outright wrong or useless                                              | **deny**      |\n| `clippy::suspicious`  | code that is most likely wrong or useless                                           | **warn**      |\n| `clippy::style`       | code that should be written in a more idiomatic way                                 | **warn**      |\n| `clippy::complexity`  | code that does something simple but in a complex way                                | **warn**      |\n| `clippy::perf`        | code that can be written to run faster                                              | **warn**      |\n| `clippy::pedantic`    | lints which are rather strict or have occasional false positives                    | allow         |\n| `clippy::restriction` | lints which prevent the use of language and library features[^restrict]             | allow         |\n| `clippy::nursery`     | new lints that are still under development                                          | allow         |\n| `clippy::cargo`       | lints for the cargo manifest                                                        | allow         |\n\nMore to come, please [file an issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n\nThe `restriction` category should, *emphatically*, not be enabled as a whole. The contained\nlints may lint against perfectly reasonable code, may not have an alternative suggestion,\nand may contradict any other lints (including other categories). Lints should be considered\non a case-by-case basis before enabling.\n\n[^restrict]: Some use cases for `restriction` lints include:\n    - Strict coding styles (e.g. [`clippy::else_if_without_else`]).\n    - Additional restrictions on CI (e.g. [`clippy::todo`]).\n    - Preventing panicking in certain functions (e.g. [`clippy::unwrap_used`]).\n    - Running a lint only on a subset of code (e.g. `#[forbid(clippy::float_arithmetic)]` on a module).\n\n[`clippy::else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n[`clippy::todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n[`clippy::unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used\n\n---\n\nTable of contents:\n\n* [Usage instructions](#usage)\n* [Configuration](#configuration)\n* [Contributing](#contributing)\n* [License](#license)\n\n## Usage\n\nBelow are instructions on how to use Clippy as a cargo subcommand,\nin projects that do not use cargo, or in Travis CI.\n\n### As a cargo subcommand (`cargo clippy`)\n\nOne way to use Clippy is by installing Clippy through rustup as a cargo\nsubcommand.\n\n#### Step 1: Install Rustup\n\nYou can install [Rustup](https://rustup.rs/) on supported platforms. This will help\nus install Clippy and its dependencies.\n\nIf you already have Rustup installed, update to ensure you have the latest\nRustup and compiler:\n\n```terminal\nrustup update\n```\n\n#### Step 2: Install Clippy\n\nOnce you have rustup and the latest stable release (at least Rust 1.29) installed, run the following command:\n\n```terminal\nrustup component add clippy\n```\n\nIf it says that it can't find the `clippy` component, please run `rustup self update`.\n\n#### Step 3: Run Clippy\n\nNow you can run Clippy by invoking the following command:\n\n```terminal\ncargo clippy\n```\n\n#### Automatically applying Clippy suggestions\n\nClippy can automatically apply some lint suggestions, just like the compiler. Note that `--fix` implies\n`--all-targets`, so it can fix as much code as it can.\n\n```terminal\ncargo clippy --fix\n```\n\n#### Workspaces\n\nAll the usual workspace options should work with Clippy. For example the following command\nwill run Clippy on the `example` crate:\n\n```terminal\ncargo clippy -p example\n```\n\nAs with `cargo check`, this includes dependencies that are members of the workspace, like path dependencies.\nIf you want to run Clippy **only** on the given crate, use the `--no-deps` option like this:\n\n```terminal\ncargo clippy -p example -- --no-deps\n```\n\n### Using `clippy-driver`\n\nClippy can also be used in projects that do not use cargo. To do so, run `clippy-driver`\nwith the same arguments you use for `rustc`. For example:\n\n```terminal\nclippy-driver --edition 2018 -Cpanic=abort foo.rs\n```\n\nNote that `clippy-driver` is designed for running Clippy only and should not be used as a general\nreplacement for `rustc`. `clippy-driver` may produce artifacts that are not optimized as expected,\nfor example.\n\n### Travis CI\n\nYou can add Clippy to Travis CI in the same way you use it locally:\n\n```yaml\nlanguage: rust\nrust:\n  - stable\n  - beta\nbefore_script:\n  - rustup component add clippy\nscript:\n  - cargo clippy\n  # if you want the build job to fail when encountering warnings, use\n  - cargo clippy -- -D warnings\n  # in order to also check tests and non-default crate features, use\n  - cargo clippy --all-targets --all-features -- -D warnings\n  - cargo test\n  # etc.\n```\n\nNote that adding `-D warnings` will cause your build to fail if **any** warnings are found in your code.\nThat includes warnings found by rustc (e.g. `dead_code`, etc.). If you want to avoid this and only cause\nan error for Clippy warnings, use `#![deny(clippy::all)]` in your code or `-D clippy::all` on the command\nline. (You can swap `clippy::all` with the specific lint category you are targeting.)\n\n## Configuration\n\n### Allowing/denying lints\n\nYou can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n\n* the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`).\n    Note that `rustc` has additional [lint groups](https://doc.rust-lang.org/rustc/lints/groups.html).\n\n* all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n    `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive\n    lints prone to false positives.\n\n* only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n\n* `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n\nNote: `allow` means to suppress the lint for your code. With `warn` the lint\nwill only emit a warning, while with `deny` the lint will emit an error, when\ntriggering for your code. An error causes Clippy to exit with an error code, so\nis useful in scripts like CI/CD.\n\nIf you do not want to include your lint levels in your code, you can globally\nenable/disable lints by passing extra flags to Clippy during the run:\n\nTo allow `lint_name`, run\n\n```terminal\ncargo clippy -- -A clippy::lint_name\n```\n\nAnd to warn on `lint_name`, run\n\n```terminal\ncargo clippy -- -W clippy::lint_name\n```\n\nThis also works with lint groups. For example, you\ncan run Clippy with warnings for all lints enabled:\n\n```terminal\ncargo clippy -- -W clippy::pedantic\n```\n\nIf you care only about a single lint, you can allow all others and then explicitly warn on\nthe lint(s) you are interested in:\n\n```terminal\ncargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n```\n\n### Configure the behavior of some lints\n\nSome lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a basic `variable =\nvalue` mapping e.g.\n\n```toml\navoid-breaking-exported-api = false\ndisallowed-names = [\"toto\", \"tata\", \"titi\"]\n```\n\nThe [table of configurations](https://doc.rust-lang.org/nightly/clippy/lint_configuration.html)\ncontains all config values, their default, and a list of lints they affect.\nEach [configurable lint](https://rust-lang.github.io/rust-clippy/master/index.html#Configuration)\n, also contains information about these values.\n\nFor configurations that are a list type with default values such as\n[disallowed-names](https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_names),\nyou can use the unique value `\"..\"` to extend the default values instead of replacing them.\n\n```toml\n# default of disallowed-names is [\"foo\", \"baz\", \"quux\"]\ndisallowed-names = [\"bar\", \"..\"] # -> [\"bar\", \"foo\", \"baz\", \"quux\"]\n```\n\n> **Note**\n>\n> `clippy.toml` or `.clippy.toml` cannot be used to allow/deny lints.\n\nTo deactivate the “for further information visit *lint-link*” message you can\ndefine the `CLIPPY_DISABLE_DOCS_LINKS` environment variable.\n\n### Specifying the minimum supported Rust version\n\nProjects that intend to support old versions of Rust can disable lints pertaining to newer features by\nspecifying the minimum supported Rust version (MSRV) in the Clippy configuration file.\n\n```toml\nmsrv = \"1.30.0\"\n```\n\nAlternatively, the [`rust-version` field](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field)\nin the `Cargo.toml` can be used.\n\n```toml\n# Cargo.toml\nrust-version = \"1.30\"\n```\n\nThe MSRV can also be specified as an attribute, like below.\n\n```rust,ignore\n#![feature(custom_inner_attributes)]\n#![clippy::msrv = \"1.30.0\"]\n\nfn main() {\n  ...\n}\n```\n\nYou can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\nis equivalent to `msrv = 1.30.0`.\n\nNote: `custom_inner_attributes` is an unstable feature, so it has to be enabled explicitly.\n\nLints that recognize this configuration option can be found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)\n\n## Contributing\n\nIf you want to contribute to Clippy, you can find more information in [CONTRIBUTING.md](https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md).\n\n## License\n\n<!-- REUSE-IgnoreStart -->\n\nCopyright 2014-2024 The Rust Project Developers\n\nLicensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n[https://www.apache.org/licenses/LICENSE-2.0](https://www.apache.org/licenses/LICENSE-2.0)> or the MIT license\n<LICENSE-MIT or [https://opensource.org/licenses/MIT](https://opensource.org/licenses/MIT)>, at your\noption. Files in the project may not be\ncopied, modified, or distributed except according to those terms.\n\n<!-- REUSE-IgnoreEnd -->\n"
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 0.2763671875,
          "content": "fn main() {\n    // Forward the profile to the main compilation\n    println!(\"cargo:rustc-env=PROFILE={}\", std::env::var(\"PROFILE\").unwrap());\n    // Don't rebuild even if nothing changed\n    println!(\"cargo:rerun-if-changed=build.rs\");\n    rustc_tools_util::setup_version_info!();\n}\n"
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.7265625,
          "content": "avoid-breaking-exported-api = false\n\nlint-inconsistent-struct-field-initializers = true\n\n[[disallowed-methods]]\npath = \"rustc_lint::context::LintContext::lint\"\nreason = \"this function does not add a link to our documentation, please use the `clippy_utils::diagnostics::span_lint*` functions instead\"\n\n[[disallowed-methods]]\npath = \"rustc_lint::context::LintContext::span_lint\"\nreason = \"this function does not add a link to our documentation, please use the `clippy_utils::diagnostics::span_lint*` functions instead\"\n\n[[disallowed-methods]]\npath = \"rustc_middle::ty::context::TyCtxt::node_span_lint\"\nreason = \"this function does not add a link to our documentation, please use the `clippy_utils::diagnostics::span_lint_hir*` functions instead\"\n"
        },
        {
          "name": "clippy_config",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy_dev",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy_dummy",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy_lints",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy_utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lintcheck",
          "type": "tree",
          "content": null
        },
        {
          "name": "rinja.toml",
          "type": "blob",
          "size": 0.05859375,
          "content": "[general]\ndirs = [\"util/gh-pages/\"]\nwhitespace = \"suppress\"\n"
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.2099609375,
          "content": "[toolchain]\n# begin autogenerated nightly\nchannel = \"nightly-2025-01-09\"\n# end autogenerated nightly\ncomponents = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]\nprofile = \"minimal\"\n"
        },
        {
          "name": "rustc_tools_util",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.22265625,
          "content": "max_width = 120\ncomment_width = 100\nmatch_block_trailing_comma = true\nwrap_comments = true\nedition = \"2021\"\nerror_on_line_overflow = true\nimports_granularity = \"Module\"\nversion = \"Two\"\nignore = [\"tests/ui/crashes/ice-10912.rs\"]\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "triagebot.toml",
          "type": "blob",
          "size": 0.833984375,
          "content": "[relabel]\nallow-unauthenticated = [\n    \"A-*\", \"C-*\", \"E-*\", \"I-*\", \"L-*\", \"P-*\", \"S-*\", \"T-*\",\n    \"good-first-issue\", \"beta-nominated\"\n]\n\n# Allows shortcuts like `@rustbot ready`\n#\n# See https://forge.rust-lang.org/triagebot/shortcuts.html\n[shortcut]\n\n# Have rustbot inform users about the *No Merge Policy*\n[no-merges]\nexclude_titles = [\"Rustup\"] # exclude syncs from rust-lang/rust\nlabels = [\"has-merge-commits\", \"S-waiting-on-author\"]\n\n[autolabel.\"S-waiting-on-review\"]\nnew_pr = true\n\n[assign]\ncontributing_url = \"https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md\"\nusers_on_vacation = [\n    \"matthiaskrgr\",\n]\n\n[assign.owners]\n\"/.github\" = [\"@flip1995\"]\n\"/book\" = [\"@flip1995\"]\n\"*\" = [\n    \"@Manishearth\",\n    \"@llogiq\",\n    \"@xFrednet\",\n    \"@Alexendoo\",\n    \"@dswij\",\n    \"@Jarcho\",\n    \"@blyxyas\",\n    \"@y21\",\n    \"@Centri3\",\n]\n"
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}