{
  "metadata": {
    "timestamp": 1736709465922,
    "page": 103,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjEwOA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "seanmonstar/reqwest",
      "stars": 10155,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": "target\nCargo.lock\n*.swp\n.idea"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 32.681640625,
          "content": "## v0.12.12\n\n- (wasm) Fix compilation by not compiler `tokio/time` on WASM.\n\n## v0.12.11\n\n- Fix decompression returning an error when HTTP/2 ends with an empty data frame.\n\n## v0.12.10\n\n- Add `ClientBuilder::connector_layer()` to allow customizing the connector stack.\n- Add `ClientBuilder::http2_max_header_list_size()` option.\n- Fix propagating body size hint (`content-length`) information when wrapping bodies.\n- Fix decompression of chunked bodies so the connections can be reused more often.\n\n## v0.12.9\n\n- Add `tls::CertificateRevocationLists` support.\n- Add crate features to enable webpki roots without selecting a rustls provider.\n- Fix `connection_verbose()` to output read logs.\n- Fix `multipart::Part::file()` to automatically include content-length.\n- Fix proxy to internally no longer cache system proxy settings.\n\n## v0.12.8\n\n- Add support for SOCKS4 proxies.\n- Add `multipart::Form::file()` method for adding files easily.\n- Add `Body::wrap()` to wrap any `http_body::Body` type.\n- Fix the pool configuration to use a timer to remove expired connections.\n\n\n## v0.12.7\n\n- Revert adding `impl Service<http::Request<_>>` for `Client`.\n\n## v0.12.6\n\n- Add support for `danger_accept_invalid_hostnames` for `rustls`.\n- Add `impl Service<http::Request<Body>>` for `Client` and `&'_ Client`.\n- Add support for `!Sync` bodies in `Body::wrap_stream()`.\n- Enable happy eyeballs when `hickory-dns` is used.\n- Fix `Proxy` so that `HTTP(S)_PROXY` values take precedence over `ALL_PROXY`.\n- Fix `blocking::RequestBuilder::header()` from unsetting `sensitive` on passed header values.\n\n## v0.12.5\n\n- Add `blocking::ClientBuilder::dns_resolver()` method to change DNS resolver in blocking client.\n- Add `http3` feature back, still requiring `reqwest_unstable`.\n- Add `rustls-tls-no-provider` Cargo feature to use rustls without a crypto provider.\n- Fix `Accept-Encoding` header combinations.\n- Fix http3 resolving IPv6 addresses.\n- Internal: upgrade to rustls 0.23.\n\n## v0.12.4\n\n- Add `zstd` support, enabled with `zstd` Cargo feature.\n- Add `ClientBuilder::read_timeout(Duration)`, which applies the duration for each read operation. The timeout resets after a successful read.\n\n## v0.12.3\n\n- Add `FromStr` for `dns::Name`.\n- Add `ClientBuilder::built_in_webpki_certs(bool)` to enable them separately.\n- Add `ClientBuilder::built_in_native_certs(bool)` to enable them separately.\n- Fix sending `content-length: 0` for GET requests.\n- Fix response body `content_length()` to return value when timeout is configured.\n- Fix `ClientBuilder::resolve()` to use lowercase domain names.\n\n## v0.12.2\n\n- Fix missing ALPN when connecting to socks5 proxy with rustls.\n- Fix TLS version limits with rustls.\n- Fix not detected ALPN h2 from server with native-tls.\n\n## v0.12.1\n\n- Fix `ClientBuilder::interface()` when no TLS is enabled.\n- Fix `TlsInfo::peer_certificate()` being truncated with rustls.\n- Fix panic if `http2` feature disabled but TLS negotiated h2 in ALPN.\n- Fix `Display` for `Error` to not include its source error.\n\n# v0.12.0\n\n- Upgrade to `hyper`, `http`, and `http-body` v1.\n- Add better support for converting to and from `http::Request` and `http::Response`.\n- Add `http2` optional cargo feature, default on.\n- Add `charset` optional cargo feature, default on.\n- Add `macos-system-configuration` cargo feature, default on.\n- Change all optional dependencies to no longer be exposed as implicit features.\n- Add `ClientBuilder::interface(str)` to specify the local interface to bind to.\n- Experimental: disables the `http3` feature temporarily.\n\n## v0.11.27\n\n- Add `hickory-dns` feature, deprecating `trust-dns`.\n- (wasm) Fix `Form::text()` to not set octet-stream for plain text fields.\n\n## v0.11.26\n\n- Revert `system-configuration` upgrade, which broke MSRV on macOS.\n\n## v0.11.25\n\n- Fix `Certificate::from_pem_bundle()` parsing.\n- Fix Apple linker errors from detecting system proxies.\n\n## v0.11.24\n\n- Add `Certificate::from_pem_bundle()` to add a bundle.\n- Add `http3_prior_knowledge()` to blocking client builder.\n- Remove `Sync` bounds requirement for `Body::wrap_stream()`.\n- Fix HTTP/2 to retry `REFUSED_STREAM` requests.\n- Fix instances of converting `Url` to `Uri` that could panic.\n\n## v0.11.23\n\n- Add `Proxy::custom_http_auth(val)` for setting the raw `Proxy-Authorization` header when connecting to proxies.\n- Fix redirect to reject locations that are not `http://` or `https://`.\n- Fix setting `nodelay` when TLS is enabled but URL is HTTP.\n- (wasm) Add `ClientBuilder::user_agent(val)`.\n- (wasm) add `multipart::Form::headers(headers)`.\n\n## v0.11.22\n\n- Fix compilation on Windows when `trust-dns` is enabled.\n\n## v0.11.21\n\n- Add automatically detecting macOS proxy settings.\n- Add `ClientBuilder::tls_info(bool)`, which will put `tls::TlsInfo` into the response extensions.\n- Fix trust-dns resolver from possible hangs.\n- Fix connect timeout to be split among multiple IP addresses.\n\n## v0.11.20\n\n- Fix `deflate` decompression back to using zlib, as outlined in the spec.\n\n## v0.11.19\n\n- Add `ClientBuilder::http1_ignore_invalid_headers_in_responses()` option.\n- Add `ClientBuilder::http1_allow_spaces_after_header_name_in_responses()` option.\n- Add support for `ALL_PROXY` environment variable.\n- Add support for `use_preconfigured_tls` when combined with HTTP/3.\n- Fix `deflate` decompression from using the zlib decoder.\n- Fix `Response::{text, text_with_charset}()` to strip BOM characters.\n- Fix a panic when HTTP/3 is used if UDP isn't able to connect.\n- Fix some dependencies for HTTP/3.\n- Increase MSRV to 1.63.\n\n## v0.11.18\n\n- Fix `RequestBuilder::json()` method from overriding a previously set `content-type` header. An existing value will be left in place.\n- Upgrade internal dependencies for rustls and compression.\n\n## v0.11.17\n\n- Upgrade internal dependencies of Experimental HTTP/3 to use quinn v0.9\n- (wasm) Fix blob url support\n\n## v0.11.16\n\n- Chore: set MSRV in `Cargo.toml`.\n- Docs: fix build on docs.rs\n\n## v0.11.15\n\n- Add `RequestBuilder` methods to split and reconstruct from its parts.\n- Add experimental HTTP/3 support.\n- Fix `connection_verbose` to log `write_vectored` calls.\n- (wasm) Make requests actually cancel if the future is dropped.\n\n## v0.11.14\n\n- Adds `Proxy::no_proxy(url)` that works like the NO_PROXY environment variable.\n- Adds `multipart::Part::headers(headers)` method to add custom headers.\n- (wasm) Add `Response::bytes_stream()`.\n- Perf: several internal optimizations reducing copies and memory allocations.\n\n## v0.11.13\n\n- Add `ClientBuilder::dns_resolver()` option for custom DNS resolvers.\n- Add `ClientBuilder::tls_sni(bool)` option to enable or disable TLS Server Name Indication.\n- Add `Identity::from_pkcs8_pem()` constructor when using `native-tls`.\n- Fix `redirect::Policy::limited(0)` from following any redirects.\n\n## v0.11.12\n\n- Add `ClientBuilder::resolve_to_addrs()` which allows a slice of IP addresses to be specified for a single host.\n- Add `Response::upgrade()` to await whether the server agrees to an HTTP upgrade.\n\n## v0.11.11\n\n- Add HTTP/2 keep-alive configuration methods on `ClientBuilder`.\n- Add `ClientBuilder::http1_allow_obsolete_multiline_headers_in_responses()`.\n- Add `impl Service<Request>` for `Client` and `&'_ Client`.\n- (wasm) Add `RequestBuilder::basic_auth()`.\n- Fix `RequestBuilder::header` to not override `sensitive` if user explicitly set on a `HeaderValue`.\n- Fix rustls parsing of elliptic curve private keys.\n- Fix Proxy URL parsing of some invalid targets.\n\n## v0.11.10\n\n- Add `Error::url()` to access the URL of an error.\n- Add `Response::extensions()` to access the `http::Extensions` of a response.\n- Fix `rustls-native-certs` to log an error instead of panicking when loading an invalid system certificate.\n- Fix passing Basic Authorization header to proxies.\n\n## v0.11.9\n\n- Add `ClientBuilder::http09_responses(bool)` option to allow receiving HTTP/0.9 responses.\n- Fix HTTP/2 to retry requests interrupted by an HTTP/2 graceful shutdown.\n- Fix proxy loading from environment variables to ignore empty values.\n\n## v0.11.8\n\n- Update internal webpki-roots dependency.\n\n## v0.11.7\n\n- Add `blocking::ClientBuilder::resolve()` option, matching the async builder.\n- Implement `From<tokio::fs::File>` for `Body`.\n- Fix `blocking` request-scoped timeout applying to bodies as well.\n- (wasm) Fix request bodies using multipart vs formdata.\n- Update internal `rustls` to 0.20.\n\n## v0.11.6\n\n- (wasm) Fix request bodies more.\n\n## v0.11.5\n\n- Add `ClientBuilder::http1_only()` method.\n- Add `tls::Version` type, and `ClientBuilder::min_tls_version()` and `ClientBuilder::max_tls_version()` methods.\n- Implement `TryFrom<Request>` for `http::Request`.\n- Implement `Clone` for `Identity`.\n- Fix `NO_PROXY`environment variable parsing to more closely match curl's. Comma-separated entries are now trimmed for whitespace, and `*` is allowed to match everything.\n- Fix redirection to respect `https_only` option.\n- (wasm) Add `Body::as_bytes()` method.\n- (wasm) Fix sometimes wrong conversation of bytes into a `JsValue`.\n- (wasm) Avoid dependency on serde-serialize feature.\n\n## v0.11.4\n\n- Add `ClientBuilder::resolve()` option to override DNS resolution for specific domains.\n- Add `native-tls-alpn` Cargo feature to use ALPN with the native-tls backend.\n- Add `ClientBuilder::deflate()` option and `deflate` Cargo feature to support decoding response bodies using deflate.\n- Add `RequestBuilder::version()` to allow setting the HTTP version of a request.\n- Fix allowing \"invalid\" certificates with the `rustls-tls` backend, when the server uses TLS v1.2 or v1.3.\n- (wasm) Add `try_clone` to `Request` and `RequestBuilder`\n\n## v0.11.3\n\n- Add `impl From<hyper::Body> for reqwest::Body`.\n- (wasm) Add credentials mode methods to `RequestBuilder`.\n\n## v0.11.2\n\n- Add `CookieStore` trait to customize the type that stores and retrieves cookies for a session.\n- Add `cookie::Jar` as a default `CookieStore`, easing creating some session cookies before creating the `Client`.\n- Add `ClientBuilder::http2_adaptive_window()` option to configure an adaptive HTTP2 flow control behavior.\n- Add `ClientBuilder::http2_max_frame_size()` option to adjust the maximum HTTP2 frame size that can be received.\n- Implement `IntoUrl` for `String`, making it more convenient to create requests with `format!`.\n\n## v0.11.1\n\n- Add `ClientBuilder::tls_built_in_root_certs()` option to disable built-in root certificates.\n- Fix `rustls-tls` glue to more often support ALPN to upgrade to HTTP/2.\n- Fix proxy parsing to assume `http://` if no scheme is found.\n- Fix connection pool idle reaping by enabling hyper's `runtime` feature.\n- (wasm) Add `Request::new()` constructor.\n\n# v0.11.0\n\n- Change `multipart` to be an optional cargo feature.\n- Remove deprecated methods.\n\n- Update to Tokio v1.0.\n- Update to Bytes v1.0.\n- Update to hyper v0.14.\n\n## v0.10.10\n\n- Add `tcp_keepalive` option to `blocking::ClientBuilder`.\n- Add `multipart::Part::stream_with_length` constructor, to create a streaming part with a known length.\n- Add `ClientBuilder::https_only` option, to allow requiring URLs to be `https`.\n- Change default `tcp_keepalive` value to be disabled.\n\n## v0.10.9\n\n- Add `rustls-tls-native-roots`, `rustls-tls-webpki-roots`, and `rustls-tls-manual-roots` Cargo features, to configure which certificate roots to use with rustls.\n- Add `ClientBuilder::tcp_keepalive()` method to enable TCP keepalive.\n- Add `ClientBuilder::http1_writev()` method to force enable or disable vectored writes.\n- Add `Error::is_connect()` method to identify if the error is related to connection-establishment.\n- Add `blocking::ClientBuilder::brotli()` method.\n- Windows: Update default protocol to HTTP for HTTPS system proxies, when a protocol is not specified.\n- (wasm) Add support for Cloudflare workers runtime.\n- (wasm) Add `ClientBuilder::default_headers()` method.\n- (wasm) Add `RequestBuilder::build()` method.\n\n## v0.10.8\n\n- Add `must_use` to `RequestBuilder` and `ClientBuilder`.\n- Fix Windows system proxy detection of Fiddler proxies.\n- (wasm) Add `headers` method to `RequestBuilder`.\n- (wasm) Add `execute` method to `Client`.\n- (wasm) Add `TryFrom<http::Request>` for `Request`.\n- (wasm) Fix checking for global `window` to work in non-browser environments.\n- (wasm) Fix sending of an empty body when not required.\n\n## v0.10.7\n\n- Add `NO_PROXY` environment variable support.\n- Add more `Error::{is_request, is_body, is_decode}` getters.\n- Add conversion of `reqwest::ClientBuilder` to `reqwest::blocking::ClientBuilder`.\n- Add `headers_mut()` to `reqwest::blocking::Response`.\n- (wasm) Add `form()`, `query()`, `multipart` and `bearer_auth()` to `RequestBuilder`.\n\n## v0.10.6\n\n- Changed handling of URLs that don't have `http:` or `https:` schemes, returning an error instead.\n- Fixed a potential hyper-rustls feature conflict.\n\n## v0.10.5\n\n- Add `ClientBuilder::pool_idle_timeout` option.\n- Add `ClientBuilder::pool_max_idle_per_host` option, deprecate `max_idle_per_host`.\n- Add `Response::content_length` for WASM target.\n- Enable TCP_NODELAY by default.\n- Implement `TryFrom<http::Request>` for `blocking::Request`.\n- Implement `TryFrom<http::Request>` for `Request`.\n  - Removes `From<http::Request>` for `Request`.\n  - This is technically a breaking change, but was a mistake. It was not valid to convert from an `http::Request` to a `reqwest::Request` in an infallible fashion. It would panic if the conversion was not possible. Instead, the implementation has been changed to `TryFrom` to indicate it could fail.\n\n## v0.10.4\n\n- Add `trust-dns` optional feature to change DNS resolver.\n- Add `bytes()` method to `reqwest::blocking::Response`.\n- Add `buffer()` method to `reqwest::blocking::Body`.\n- Implement `From<http::Request>` for `reqwest::Request`.\n\n## v0.10.3\n\n- Upgrade internal `rustls` version.\n\n## v0.10.2\n\n- Add Brotli support, enabled with the optional `brotli` feature.\n- Add `Client::use_preconfigured_tls(tls_connector)` allowing manual configuration of TLS options.\n- Implement `Default` for blocking `Client`, `ClientBuilder`, and `multipart::Form`.\n- (wasm) Add `Response::error_for_status()` method.\n- (wasm) Add `Response::json()` method.\n- (wasm) Implement `Default` for `Client` and `ClientBuilder`.\n\n## v0.10.1\n\n- Add `socks` optional feature to support SOCKS5 proxies.\n- Add `RequestBuilder::timeout()` to configure a timeout for a single request, instead of using the client's timeout.\n- Add `ClientBuilder::connection_verbose()` option to enable verbose IO logs.\n- (wasm) Add `RequestBuilder::fetch_mode_no_cors()` option.\n- (wasm) Add `Response::url()` getter method.\n\n# v0.10.0\n\n- Add `std::future::Future` support.\n- Add `wasm32-unknown-unknown` support (with fewer features).\n- Add ability to pass async `Response` as the `body` of another `Request`.\n- Add `Body::as_bytes()` method.\n- Add `Response::bytes_stream()` method to get body as an `impl Stream`.\n- Add `Request::try_clone()` method.\n\n- Change default `Client` API to async. The previous blocking client API is available at `reqwest::blocking`.\n- Change to no longer send a default `User-Agent` header. Add one via `ClientBuilder::user_agent()`.\n- Change to enable system/environment proxy detection by default.\n- Change `default-tls` feature to only include `ClientBuilder` options that both `native-tls` and `rustls` support.\n- Change default feature set to reduce unnecessary dependencies. Most features are disabled by default:\n  - `blocking`: The `reqwest::blocking` (synchronous) client API.\n  - `cookies`: Cookie store support.\n  - `gzip`: Automatic response body decompression.\n  - `json`: Request and response JSON body methods.\n  - `stream`: `futures::Stream` support.\n- Change `Error` internal design, removing several `Error::is_*` inspector methods.\n- Change Redirect API:\n  - Renamed types to be part of the `redirect` module (for example, `reqwest::RedirectPolicy` is now `reqwest::redirect::Policy`).\n  - Removed `loop_detected` and `too_many_redirect` methods from `redirect::Attempt`, replaced with a generic `error` method.\n  - The default policy no longer specifically looks for redirect loops (but they should be caught by the maximum limit).\n\n- Fix checking `HTTP_PROXY` environment variable if it the environment is from a CGI script.\n- Fix removal of username/password of parsed proxy URL.\n\n- Update `url` to v2.0.\n- Update `hyper` to v0.13.\n- Update `http` to v0.2.\n\n\n## v0.9.19\n\n- Add `ClientBuilder::use_sys_proxy()` to enable automatic detect of HTTP proxies configured on the system.\n- Add `ClientBuilder::no_proxy()` to disable system proxies. This is the default for 0.9, but will change to detecting system proxies by default in 0.10.\n- Add support for streaming request bodies in the async client.\n- Add `async::Response::text()` that returns a `Future` of the full body decoded to a `String`.\n- Add `Clone` for `Certificate`.\n\n## v0.9.18\n\n- Fix `Cookie` headers to no longer send as percent-encoded (instead, exactly as sent by the server).\n\n## v0.9.17\n\n- Fix `Cookie` headers to not include attributes from the `Set-Cookie` (like `HttpOnly`, `Secure`, etc.)\n\n## v0.9.16\n\n- Add `Response::text_with_charset()` to allow setting the default charset to decode.\n- Add `Error::source()` implementation.\n- Add `async::ClientBuilder::timeout()` option, will timeout the connect, request, and response body futures.\n- Fix gzip + chunked transfer encoding issue preventing connection reuse.\n- Fix `RequestBuilder::query()` to not add just `\"?\"` if the encoded query is empty.\n- Fix including new cookie headers when response is a redirect.\n\n## v0.9.15\n\n- Fix sending of \"appended\" request headers.\n\n## v0.9.14\n\n- Add optional support for SOCKS5 proxies, by enabling the `socks5` cargo feature.\n- Add Cookie Store support to `Client`, automatically handling cookies for a session.\n- Add `ClientBuilder::cookie_store(enable: bool)` method to enable a cookie store that persists across requests.\n- Add `Response::cookies()` accessor that allows iterating over response cookies.\n- Fix `Proxy` to check the URL for a username and password.\n\n## v0.9.13\n\n### Fixes\n\n- Fix panic on some invalid `Location` headers during redirects (error is logged and redirect response is returned instead).\n- Fix instance when server notices streaming request body is complete before reqwest does.\n\n## v0.9.12\n\n### Features\n\n- Add `ClientBuilder::tcp_nodelay()` to allow disabling Nagle's algorithm.\n- Add `ClientBuilder::max_idle_per_host()` to allow reducing the number of idle pooled connections.\n- Add `RequestBuilder::bearer_auth()` method to async builder.\n\n### Fixes\n\n- Fix capitalization error in async `RequestBuilder::basic_auth()`.\n- Fix ALPN causing issues when using a Proxy.\n\n## v0.9.11\n\n### Features\n\n- Add `multipart::Form::percent_encode_noop()` to allow for servers which don't support percent encoding of parameters.\n- Add `ClientBuilder::http1_title_case_headers()` to force request headers to use Title-Case.\n- Add `ClientBuilder::connect_timeout()` to allow setting only a connect timeout.\n\n## v0.9.10\n\n### Features\n\n- Add `ClientBuilder::local_address()` to bind to a local IP address.\n- Add `Response::error_for_status_ref()` to return an `Error` while borrowing a `Response`.\n\n### Fixes\n\n- Fix `Identity::from_pem` with `rustls-tls` backend when using RSA private keys.\n\n## v0.9.9\n\n### Features\n\n- Add `ClientBuilder::h2_prior_knowledge()` option to force HTTP2.\n- Add `Response::content_length()` to get the content-length of a response.\n- Enable ALPN h2 with the rustls-tls backend.\n\n## v0.9.8\n\n### Fixes\n\n- Revert default DNS resolver to `getaddrinfo` in a threadpool. There is now a `trust-dns` optional feature to enable the Trust-DNS resolver.\n- Detect `Certificate` and `Identity` errors at construction time.\n\n## v0.9.7\n\n### Fixes\n\n- Fix DNS resolver on Android (reverted back to `getaddrinfo`).\n- Fix sending unicode `filename`s in `multipart/form-data` requests.\n\n## v0.9.6\n\n### Features\n\n- Add `Proxy::basic_auth` method to support proxy authorization.\n- Add `rustls-tls` optional feature to use rustls instead of native-tls.\n- Add `try_clone` method to `Request` and `RequestBuilder`.\n- Add `reqwest::async::multipart` support, similar to the synchronous API.\n- Adds `default-tls-vendored` optional feature to vendor OpenSSL.\n\n### Fixes\n\n- Fix panic from top-level `reqwest::get` if client builder fails to build.\n- Removed timeout waiting for `reqwest::Client` runtime to startup.\n- Fix `RequestBuilder::headers` to properly append extra headers of the same name.\n\n\n### Performance\n\n- Replaced DNS threadpool using `getaddrinfo` with a non-blocking DNS resolver.\n\n## v0.9.5\n\n### Features\n\n- Adds `Response::remote_addr()` method to check the address of the connection used.\n- Adds `default-tls` crate feature, enabled by default, which allows users to *disable* TLS.\n\n## v0.9.4\n\n### Features\n\n- Adds `percent_encoding_path_segment` and `percent_encoding_attr_char` configuration to `multipart::Form`.\n\n### Fixes\n\n- Reverts `multipart::Form` default percent encoding format to `path-segment`.\n\n## v0.9.3\n\n### Features\n\n- Adds `multipart::Part::bytes()` to create a part of raw bytes.\n- Adds constructors for `Response` to help with testing.\n\n### Fixes\n\n- Properly percent-encoding more illegal characters in multipart filenames.\n- Ensure timed out requests cancel the associated async task.\n\n## v0.9.2\n\n### Fixes\n\n- Fix panic when `Location` header has UTF-8 characters.\n\n## v0.9.1\n\n### Fixes\n\n- Fix large request bodies failing because of improper handling of backpressure.\n- Remove body-related headers when redirect changes a `POST` into a `GET`.\n- Reduce memory size of `Response` and `Error` significantly.\n\n# v0.9.0\n\n### Features\n\n- Upgrade to `tokio` 0.1.\n- Upgrade to `hyper` 0.12.\n- Upgrade to `native-tls` 0.2.\n- Add `ClientBuilder::danger_accept_invalid_certs(bool)` to disable\n  certificate verification.\n- Add `RequestBuilder::bearer_auth(token)` to ease sending bearer tokens.\n- Add `headers()` and `headers_mut()` to `multipart::Part` to allow sending\n  extra headers for a specific part.\n- Moved `request::unstable::async` to `reqwest::async`.\n\n### Fixes\n\n- Fix panicking when passing a `Url` with a `file://` scheme. Instead, an\n  `Error` is returned.\n\n### Breaking Changes\n\n- Changed `ClientBuilder::danger_disable_hostname_verification()`\n  to `ClientBuilder::danger_accept_invalid_hostnames(bool)`.\n- Changed `ClientBuilder` to be a by-value builder instead of by-ref.\n\n  For single chains of method calls, this shouldn't affect you. For code that\n  conditionally uses the builder, this kind of change is needed:\n\n  ```rust\n  // Old\n  let mut builder = ClientBuilder::new();\n  if some_val {\n      builder.gzip(false);\n  }\n  let client = builder.build()?;\n\n  // New\n  let mut builder = ClientBuilder::new();\n  if some_val {\n      builder = builder.gzip(false);\n  }\n  let client = builder.build()?;\n  ```\n- Changed `RequestBuilder` to be a by-value builder of by-ref.\n\n  See the previous note about `ClientBuilder` for affected code and\n  how to change it.\n- Removed the `unstable` cargo-feature, and moved `reqwest::unstable::async`\n  to `reqwest::async`.\n- Changed `multipart::Part::mime()` to `mime_str()`.\n\n  ```rust\n  // Old\n  let part = multipart::Part::file(path)?\n      .mime(mime::TEXT_PLAIN);\n\n  // New\n  let part = multipart::Part::file(path)?\n      .mime_str(\"text/plain\")?;\n  ```\n- The upgrade to `hyper` 0.12 means a temporary removal of the typed headers.\n\n  The `RequestBuilder` has simple methods to set headers using strings, which\n  can work in most places.\n\n  ```rust\n  // Old\n  client\n      .get(\"https://hyper.rs\")\n      .header(UserAgent::new(\"hallo\"))\n      .send()?;\n\n  // New\n  client\n      .get(\"https://hyper.rs\")\n      .header(\"user-agent\", \"hallo\")\n      .send()?;\n  ```\n\n  To ease the transition, there is a `hyper-011` cargo-feature that can be\n  enabled.\n\n  ```toml\n  [dependencies]\n  reqwest = { version = \"0.9\", features = [\"hyper-011\"] }\n  ```\n\n  And then usage:\n\n  ```rust\n  client\n      .get(\"https://hyper.rs\")\n      .header_011(reqwest::hyper_011::header::UserAgent::new(\"hallo\"))\n      .send()?;\n  ```\n\n\n## v0.8.8\n\n- Fix docs.rs/reqwest build.\n\n## v0.8.7\n\n### Fixes\n\n- Send an extra CRLF at the end of multipart requests, since some servers expect it.\n- Removed internal dependency on `tokio-proto`, which removed unsafe `small-vec`\n  dependency.\n\n## v0.8.6\n\n### Features\n\n- Add `RedirectAttempt::status` to check status code that triggered redirect.\n- Add `RedirectPolicy::redirect` method publicly, to allow composing policies.\n\n## v0.8.5\n\n### Features\n\n- Try to auto-detect encoding in `Response::text()`.\n- Add `Certificate::from_pem` to load PEM encoded client certificates.\n- Allow unsized types in `query`, `form`, and `json`.\n- Add `unstable::async::RequestBuilder::query`, mirroring the stable builder method.\n\n## v0.8.4\n\n### Features\n\n- Add `RequestBuilder::query` to easily adjust query parameters of requests.\n\n## v0.8.3\n\n### Features\n\n- Upgrades internal log crate usage to v0.4\n\n## v0.8.2\n\n### Fixes\n\n- Enable hyper's `no_proto` config, fixing several bugs in hyper.\n\n## v0.8.1\n\n### Features\n\n- Add `ClientBuilder::default_headers` to set headers used for every request.\n- Add `async::ClientBuilder::dns_threads` to set number of threads use for DNS.\n- Add `Response::text` as shortcut to read the full body into a `String`.\n- Add `Response::copy_to` as shortcut for `std::io::copy`.\n\n# v0.8.0\n\n### Features\n\n- Client TLS Certificates (#43)\n- GZIP decoding has been added to the **async** Client (#161)\n- `ClientBuilder` and `RequestBuilder` hold their errors till consumed (#189)\n- `async::Response::body()` now returns a reference to the body instead of consuming the `Response`\n- A default timeout for `reqwest::Client` is used set to 30 seconds (#181)\n\n### Breaking Changes\n\n- `Client::new` no longer returns a `Result`.\n\n  To handle any panics that come from `Client::new`, the builder can be used instead.\n- `ClientBuilder` and `RequestBuilder` hold their errors till consumed (#189).\n\n  This means a bunch of `?` will be going away, but means using the builders will be far easier now. Any error encountered inside the builders will now be returned when the builder is consumed.\n\n  To get errors back immediately, the `Request` type can be used directly, by building pieces separately and calling setters.\n- `async::Response::body()` now returns a reference to the body instead of consuming the `Response`.\n- A default timeout for `reqwest::Client` is used set to 30 seconds (#181)\n\n  For uses where the timeout is too short, it can be changed on the `ClientBuilder`, using the `timeout` method. Passing `None` will disable the timeout, reverting to the pre-0.8 behavior.\n\n## v0.7.3\n\n### Features\n\n- `Proxy::custom(fn)` to allow dynamically picking a proxy URL\n\n### Fixes\n\n- fix occasional panic when program exits while `Client` or `Response` are dropping.\n\n## v0.7.2\n\n### Fixes\n\n- fix a panic when redirecting and a `Authorization<Basic>` header was added (https://github.com/seanmonstar/reqwest/commit/cf246d072badd9b31b487e7a0b00490e4cc9584f)\n- fix redirects so that a GET will follow 307/308 responses (https://github.com/seanmonstar/reqwest/commit/2d11a4bd7167e1bf3a35b62f5aeb36d5d294e56e)\n\n## v0.7.1\n\n### Fixes\n\n- fix remove accidental `println`s in the sending of a body\n- some documentation improvements\n\n# v0.7.0\n\n### Features\n\n- Proxy support (#30)\n- Self-signed TLS certificates (#97)\n- Disabling TLS hostname validation (#89)\n- A `Request` type that can be used instead of the `RequestBuilder` (#85)\n- Add `Response::error_for_status()` to easily convert 400 and 500 status responses into an `Error`  (#98)\n- Upgrade hyper to 0.11\n  - Synchronous `Client` remains.\n  - Timeouts now affect DNS and socket connection.\n  - Pool much better at evicting sockets when they die.\n  - An `unstable` Cargo feature to enable `reqwest::unstable::async`.\n- A huge docs improvement! \n\n### Fixes\n\n- Publicly exports `RedirectAction` and `RedirectAttempt`\n- `Error::get_ref` returns `Error + Send + Sync`\n\n### Breaking Changes\n\n- hyper has been upgraded to 0.11, so `header`, `StatusCode`, and `Method` have breaking changes.\n- `mime` has been upgraded to 0.3, with a very different API.\n- All configuration methods have been removed from the `Client`, and moved to the `ClientBuilder`.\n- The `HttpVersion` type was completely removed.\n- `Error::cause()` now returns `Error::get_ref().cause()`.\n- All methods on `Client` that start a `RequestBuilder` now return a `Result` immediately, instead of delaying the URL parse error for later.\n- The `RequestBuilder` methods all take `&mut self`, instead of moving the builder, and return `&mut Self`. (This shouldn't actually affect most people who are building a request in a single chain.)\n- `Response::status()` returns a `StatusCode` instead of `&StatusCode`.\n\n## v0.6.2\n\n### Features\n\n- adds `Client::referer(bool)` option to disable setting the `Referer` header during redirects (https://github.com/seanmonstar/reqwest/commit/bafcd7ae6fc232856dd6ddb8bf5b20dbbbfe0bc9)\n\n### Fixes\n\n- fixes filtering sensitive headers during redirects (https://github.com/seanmonstar/reqwest/issues/10)\n- fixes sending of the Referer to an HTTP site when coming from HTTPS, and removes username and fragment explicitly (https://github.com/seanmonstar/reqwest/commit/d8696045b4c6bc4d9e33789cff6a9e1fa75462d7)\n- documentation updates\n\n## v0.6.1\n\n### Features\n\n- adds `Error::get_ref` to get the underlying error that may have occurred. Includes a `'static` bounds, which allows for downcasting (as opposed to `Error::cause`).\n\n# v0.6.0\n\n### Features\n\n- Upgraded to serde `1.0`\n- Added a `url` [method](https://docs.rs/reqwest/0.6.0/reqwest/struct.Error.html#method.url) to `Error`, which returns a possible associated `Url` that occurred with this error.\n- Added `req.basic_auth(user, optional_pass)` [method](https://docs.rs/reqwest/0.6.0/reqwest/struct.RequestBuilder.html#method.basic_auth) to ease using `Basic` authentication.\n\n### Breaking Changes\n\n- The publicly exposed peer dependency serde was upgraded. It is now `serde@1.0`. Mismatched version will give a compiler error that a serde trait is not implemented.\n- `Error` is no longer an `enum`, but an opaque struct. Details about it can be checked with `std::error::Error::cause()`, and methods on `reqwest::Error` include `is_http()`, `is_serialization()`, and `is_redirect()`.\n- `RedirectPolicy::custom` receives different arguments, and returns different values. See the [docs](https://docs.rs/reqwest/0.6.0/reqwest/struct.RedirectPolicy.html#method.custom) for an example.\n\n## v0.5.2\n\n### Fixes\n\n- fix panic with Gzip decoder on an empty body (https://github.com/seanmonstar/reqwest/issues/82)\n\n## v0.5.1\n\n### Features\n\n- add `Clone` implementation for `Client`\n\n# v0.5.0\n\n### Features\n\n- Automatic GZIP decoding: By default, `Client` will try to decode any responses that appear to be gzip encoded (based on headers). This can be disabled via `client.gzip(false)` (https://github.com/seanmonstar/reqwest/commit/ab5e477a123319efd4b17f3666b41b44ec244bee)\n- Specify a timeout for requests using `client.timeout(duration)`. (https://github.com/seanmonstar/reqwest/commit/ec049fefbae7355f6e4ddbbc7ebedcadb30e1e04)\n- Request bodies with a known length can be constructed with `Body::sized()` (https://github.com/seanmonstar/reqwest/commit/82f1877d4b6cba2fac432670ec306160aee5c501)\n- Add `Client.put`, `Client.patch`, and `Client.delete` convenience methods (https://github.com/seanmonstar/reqwest/commit/c37b8aa0338ac4142763d206c6df79856915056d, https://github.com/seanmonstar/reqwest/commit/4d6582d22b23c27927e481a9c8a83ad08cfd1a2a, https://github.com/seanmonstar/reqwest/commit/a3983f3122b2d1495ea36bb5a8fd019a7605ae56)\n- Add `reqwest::mime` (https://github.com/seanmonstar/reqwest/commit/0615c6d65e03ba9cb5364169c9e74f4f2a91554b)\n\n### Breaking Changes\n\nThe only breaking change is a behavioral one, all programs should still compile without modification. The automatic GZIP decoding could interfere in cases where a user was expecting the GZIP bytes, either to save to a file or decode themselves. To restore this functionality, set `client.gzip(false)`. \n\n# v0.4.0\n\n- updated to serde 0.9\n\n# v0.3.0\n\n- updated to hyper 0.10\n\n# v0.2.0\n\n### Features\n- add `Response.json()` method (https://github.com/seanmonstar/reqwest/commit/2d10ecc99e2aaed66616294baaf65380b446e1c6)\n- add `RedirectPolicy` (https://github.com/seanmonstar/reqwest/commit/e92b3e862a1a94c0b4173a7d49a315bc121da31e)\n- set an `Accept: */*` header by default if no `Accept` header is set (https://github.com/seanmonstar/reqwest/commit/559ae8011a2c098f4fe1821ec1d3444a46f4bf5e)\n- add support for 307 and 308 redirects (https://github.com/seanmonstar/reqwest/commit/a54447c1d9c75dab639333265f51a91a43e99c2e)\n- implement `Sync` for `Client`, and `Send` for `RequestBuilder` and `Response` (https://github.com/seanmonstar/reqwest/commit/d18a53b3fcc81c4a60875755c8e95d777a343319)\n- implement `Send` for `Error` (https://github.com/seanmonstar/reqwest/commit/20b161096e67d22c962e69b2656ae9741ac73c25)\n- implement `std::fmt::Debug` for all public types (https://github.com/seanmonstar/reqwest/commit/d624b0ef29020c6085ec94651a990f58ccd684e2)\n\n### Breaking Changes\n- `Error::Serialize` now has a `Box<StdError + Send + Sync>` instead of `Box<StdError>`\n- `RequestBuilder` no longer has an associated lifetime (was `RequestBuilder<'a>`)\n\n# v0.1.0\n\nInitial release: http://seanmonstar.com/post/153221119046/introducing-reqwest\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 9.3447265625,
          "content": "[package]\nname = \"reqwest\"\nversion = \"0.12.12\"\ndescription = \"higher level HTTP client library\"\nkeywords = [\"http\", \"request\", \"client\"]\ncategories = [\"web-programming::http-client\", \"wasm\"]\nrepository = \"https://github.com/seanmonstar/reqwest\"\ndocumentation = \"https://docs.rs/reqwest\"\nauthors = [\"Sean McArthur <sean@seanmonstar.com>\"]\nreadme = \"README.md\"\nlicense = \"MIT OR Apache-2.0\"\nedition = \"2021\"\nrust-version = \"1.64.0\"\nautotests = true\n\n[package.metadata.docs.rs]\nall-features = true\nrustdoc-args = [\"--cfg\", \"docsrs\", \"--cfg\", \"reqwest_unstable\"]\ntargets = [\"x86_64-unknown-linux-gnu\", \"wasm32-unknown-unknown\"]\n\n[package.metadata.playground]\nfeatures = [\n    \"blocking\",\n    \"cookies\",\n    \"json\",\n    \"multipart\",\n]\n\n[features]\ndefault = [\"default-tls\", \"charset\", \"http2\", \"macos-system-configuration\"]\n\n# Note: this doesn't enable the 'native-tls' feature, which adds specific\n# functionality for it.\ndefault-tls = [\"dep:hyper-tls\", \"dep:native-tls-crate\", \"__tls\", \"dep:tokio-native-tls\"]\n\nhttp2 = [\"h2\", \"hyper/http2\", \"hyper-util/http2\", \"hyper-rustls?/http2\"]\n\n# Enables native-tls specific functionality not available by default.\nnative-tls = [\"default-tls\"]\nnative-tls-alpn = [\"native-tls\", \"native-tls-crate?/alpn\", \"hyper-tls?/alpn\"]\nnative-tls-vendored = [\"native-tls\", \"native-tls-crate?/vendored\"]\n\nrustls-tls = [\"rustls-tls-webpki-roots\"]\nrustls-tls-no-provider = [\"rustls-tls-manual-roots-no-provider\"]\n\nrustls-tls-manual-roots-no-provider = [\"__rustls\"]\nrustls-tls-webpki-roots-no-provider = [\"dep:webpki-roots\", \"hyper-rustls?/webpki-tokio\", \"__rustls\"]\nrustls-tls-native-roots-no-provider = [\"dep:rustls-native-certs\", \"hyper-rustls?/native-tokio\", \"__rustls\"]\n\nrustls-tls-manual-roots = [\"rustls-tls-manual-roots-no-provider\", \"__rustls-ring\"]\nrustls-tls-webpki-roots = [\"rustls-tls-webpki-roots-no-provider\", \"__rustls-ring\"]\nrustls-tls-native-roots = [\"rustls-tls-native-roots-no-provider\", \"__rustls-ring\"]\n\nblocking = [\"dep:futures-channel\", \"futures-channel?/sink\", \"futures-util/io\", \"futures-util/sink\", \"tokio/sync\"]\n\ncharset = [\"dep:encoding_rs\"]\n\ncookies = [\"dep:cookie_crate\", \"dep:cookie_store\"]\n\ngzip = [\"dep:async-compression\", \"async-compression?/gzip\", \"dep:tokio-util\"]\n\nbrotli = [\"dep:async-compression\", \"async-compression?/brotli\", \"dep:tokio-util\"]\n\nzstd = [\"dep:async-compression\", \"async-compression?/zstd\", \"dep:tokio-util\"]\n\ndeflate = [\"dep:async-compression\", \"async-compression?/zlib\", \"dep:tokio-util\"]\n\njson = [\"dep:serde_json\"]\n\nmultipart = [\"dep:mime_guess\"]\n\n# Deprecated, remove this feature while bumping minor versions.\ntrust-dns = []\nhickory-dns = [\"dep:hickory-resolver\"]\n\nstream = [\"tokio/fs\", \"dep:tokio-util\", \"dep:wasm-streams\"]\n\nsocks = [\"dep:tokio-socks\"]\n\n# Use the system's proxy configuration.\nmacos-system-configuration = [\"dep:system-configuration\"]\n\n# Experimental HTTP/3 client.\nhttp3 = [\"rustls-tls-manual-roots\", \"dep:h3\", \"dep:h3-quinn\", \"dep:quinn\", \"dep:slab\", \"dep:futures-channel\"]\n\n\n# Internal (PRIVATE!) features used to aid testing.\n# Don't rely on these whatsoever. They may disappear at any time.\n\n# Enables common types used for TLS. Useless on its own.\n__tls = [\"dep:rustls-pemfile\", \"tokio/io-util\"]\n\n# Enables common rustls code.\n# Equivalent to rustls-tls-manual-roots but shorter :)\n__rustls = [\"dep:hyper-rustls\", \"dep:tokio-rustls\", \"dep:rustls\", \"__tls\", \"dep:rustls-pemfile\", \"dep:rustls-pki-types\"]\n__rustls-ring = [\"hyper-rustls?/ring\", \"tokio-rustls?/ring\", \"rustls?/ring\", \"quinn?/ring\"]\n\n# When enabled, disable using the cached SYS_PROXIES.\n__internal_proxy_sys_no_cache = []\n\n[dependencies]\nbase64 = \"0.22\"\nhttp = \"1\"\nurl = \"2.4\"\nbytes = \"1.0\"\nserde = \"1.0\"\nserde_urlencoded = \"0.7.1\"\ntower-service = \"0.3\"\nfutures-core = { version = \"0.3.28\", default-features = false }\nfutures-util = { version = \"0.3.28\", default-features = false }\nsync_wrapper = { version = \"1.0\", features = [\"futures\"] }\n\n# Optional deps...\n\n## json\nserde_json = { version = \"1.0\", optional = true }\n## multipart\nmime_guess = { version = \"2.0\", default-features = false, optional = true }\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dependencies]\nencoding_rs = { version = \"0.8\", optional = true }\nhttp-body = \"1\"\nhttp-body-util = \"0.1\"\nhyper = { version = \"1.1\", features = [\"http1\", \"client\"] }\nhyper-util = { version = \"0.1.10\", features = [\"http1\", \"client\", \"client-legacy\", \"tokio\"] }\nh2 = { version = \"0.4\", optional = true }\nonce_cell = \"1.18\"\nlog = \"0.4.17\"\nmime = \"0.3.16\"\npercent-encoding = \"2.3\"\ntokio = { version = \"1.0\", default-features = false, features = [\"net\", \"time\"] }\ntower = { version = \"0.5.2\", default-features = false, features = [\"timeout\", \"util\"] }\npin-project-lite = \"0.2.11\"\nipnet = \"2.3\"\n\n# Optional deps...\nrustls-pemfile = { version = \"2\", optional = true }\n\n## default-tls\nhyper-tls = { version = \"0.6\", optional = true }\nnative-tls-crate = { version = \"0.2.10\", optional = true, package = \"native-tls\" }\ntokio-native-tls = { version = \"0.3.0\", optional = true }\n\n# rustls-tls\nhyper-rustls = { version = \"0.27.0\", default-features = false, optional = true, features = [\"http1\", \"tls12\"] }\nrustls = { version = \"0.23.4\", optional = true, default-features = false, features = [\"std\", \"tls12\"] }\nrustls-pki-types = { version = \"1.1.0\", features = [\"alloc\"] ,optional = true }\ntokio-rustls = { version = \"0.26\", optional = true, default-features = false, features = [\"tls12\"] }\nwebpki-roots = { version = \"0.26.0\", optional = true }\nrustls-native-certs = { version = \"0.8.0\", optional = true }\n\n## cookies\ncookie_crate = { version = \"0.18.0\", package = \"cookie\", optional = true }\ncookie_store = { version = \"0.21.0\", optional = true }\n\n## compression\nasync-compression = { version = \"0.4.0\", default-features = false, features = [\"tokio\"], optional = true }\ntokio-util = { version = \"0.7.9\", default-features = false, features = [\"codec\", \"io\"], optional = true }\n\n## socks\ntokio-socks = { version = \"0.5.2\", optional = true }\n\n## hickory-dns\nhickory-resolver = { version = \"0.24\", optional = true, features = [\"tokio-runtime\"] }\n\n# HTTP/3 experimental support\nh3 = { version = \"0.0.6\", optional = true }\nh3-quinn = { version = \"0.0.7\", optional = true }\nquinn = { version = \"0.11.1\", default-features = false, features = [\"rustls\", \"runtime-tokio\"], optional = true }\nslab = { version = \"0.4.9\", optional = true } # just to get minimal versions working with quinn\nfutures-channel = { version = \"0.3\", optional = true }\n\n[target.'cfg(not(target_arch = \"wasm32\"))'.dev-dependencies]\nenv_logger = \"0.10\"\nhyper = { version = \"1.1.0\", default-features = false, features = [\"http1\", \"http2\", \"client\", \"server\"] }\nhyper-util = { version = \"0.1.10\", features = [\"http1\", \"http2\", \"client\", \"client-legacy\", \"server-auto\", \"tokio\"] }\nserde = { version = \"1.0\", features = [\"derive\"] }\nlibflate = \"2.1\"\nbrotli_crate = { package = \"brotli\", version = \"6.0.0\" }\nzstd_crate = { package = \"zstd\", version = \"0.13\" }\ndoc-comment = \"0.3\"\ntokio = { version = \"1.0\", default-features = false, features = [\"macros\", \"rt-multi-thread\"] }\nfutures-util = { version = \"0.3.28\", default-features = false, features = [\"std\", \"alloc\"] }\nrustls = { version = \"0.23\", default-features = false, features = [\"ring\"] }\n\n[target.'cfg(windows)'.dependencies]\nwindows-registry = \"0.2\"\n\n[target.'cfg(target_os = \"macos\")'.dependencies]\nsystem-configuration = { version = \"0.6.0\", optional = true }\n\n# wasm\n\n[target.'cfg(target_arch = \"wasm32\")'.dependencies]\njs-sys = \"0.3.45\"\nserde_json = \"1.0\"\nwasm-bindgen = \"0.2.89\"\nwasm-bindgen-futures = \"0.4.18\"\nwasm-streams = { version = \"0.4\", optional = true }\n\n[target.'cfg(target_arch = \"wasm32\")'.dependencies.web-sys]\nversion = \"0.3.28\"\nfeatures = [\n    \"AbortController\",\n    \"AbortSignal\",\n    \"Headers\",\n    \"Request\",\n    \"RequestInit\",\n    \"RequestMode\",\n    \"Response\",\n    \"Window\",\n    \"FormData\",\n    \"Blob\",\n    \"BlobPropertyBag\",\n    \"ServiceWorkerGlobalScope\",\n    \"RequestCredentials\",\n    \"File\",\n    \"ReadableStream\"\n]\n\n[target.'cfg(target_arch = \"wasm32\")'.dev-dependencies]\nwasm-bindgen = { version = \"0.2.89\", features = [\"serde-serialize\"] }\nwasm-bindgen-test = \"0.3\"\n\n[dev-dependencies]\ntower = { version = \"0.5.2\", default-features = false, features = [\"limit\"] }\nnum_cpus = \"1.0\"\nlibc = \"0\"\n\n[lints.rust]\nunexpected_cfgs = { level = \"warn\", check-cfg = ['cfg(reqwest_unstable)'] }\n\n[[example]]\nname = \"blocking\"\npath = \"examples/blocking.rs\"\nrequired-features = [\"blocking\"]\n\n[[example]]\nname = \"json_dynamic\"\npath = \"examples/json_dynamic.rs\"\nrequired-features = [\"json\"]\n\n[[example]]\nname = \"json_typed\"\npath = \"examples/json_typed.rs\"\nrequired-features = [\"json\"]\n\n[[example]]\nname = \"tor_socks\"\npath = \"examples/tor_socks.rs\"\nrequired-features = [\"socks\"]\n\n[[example]]\nname = \"form\"\npath = \"examples/form.rs\"\n\n[[example]]\nname = \"simple\"\npath = \"examples/simple.rs\"\n\n[[example]]\nname = \"connect_via_lower_priority_tokio_runtime\"\npath = \"examples/connect_via_lower_priority_tokio_runtime.rs\"\n\n[[test]]\nname = \"blocking\"\npath = \"tests/blocking.rs\"\nrequired-features = [\"blocking\"]\n\n[[test]]\nname = \"cookie\"\npath = \"tests/cookie.rs\"\nrequired-features = [\"cookies\"]\n\n[[test]]\nname = \"gzip\"\npath = \"tests/gzip.rs\"\nrequired-features = [\"gzip\", \"stream\"]\n\n[[test]]\nname = \"brotli\"\npath = \"tests/brotli.rs\"\nrequired-features = [\"brotli\", \"stream\"]\n\n[[test]]\nname = \"zstd\"\npath = \"tests/zstd.rs\"\nrequired-features = [\"zstd\", \"stream\"]\n\n[[test]]\nname = \"deflate\"\npath = \"tests/deflate.rs\"\nrequired-features = [\"deflate\", \"stream\"]\n\n[[test]]\nname = \"multipart\"\npath = \"tests/multipart.rs\"\nrequired-features = [\"multipart\"]\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.5791015625,
          "content": "                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\n   To apply the Apache License to your work, attach the following\n   boilerplate notice, with the fields enclosed by brackets \"[]\"\n   replaced with your own identifying information. (Don't include\n   the brackets!)  The text should be enclosed in the appropriate\n   comment syntax for the file format. We also recommend that a\n   file or class name and description of purpose be included on the\n   same \"printed page\" as the copyright notice for easier\n   identification within third-party archives.\n\nCopyright 2016 Sean McArthur\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2016 Sean McArthur\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.55078125,
          "content": "# reqwest\n\n[![crates.io](https://img.shields.io/crates/v/reqwest.svg)](https://crates.io/crates/reqwest)\n[![Documentation](https://docs.rs/reqwest/badge.svg)](https://docs.rs/reqwest)\n[![MIT/Apache-2 licensed](https://img.shields.io/crates/l/reqwest.svg)](./LICENSE-APACHE)\n[![CI](https://github.com/seanmonstar/reqwest/workflows/CI/badge.svg)](https://github.com/seanmonstar/reqwest/actions?query=workflow%3ACI)\n\nAn ergonomic, batteries-included HTTP Client for Rust.\n\n- Async and blocking `Client`s\n- Plain bodies, JSON, urlencoded, multipart\n- Customizable redirect policy\n- HTTP Proxies\n- HTTPS via system-native TLS (or optionally, rustls)\n- Cookie Store\n- WASM\n\n\n## Example\n\nThis asynchronous example uses [Tokio](https://tokio.rs) and enables some\noptional features, so your `Cargo.toml` could look like this:\n\n```toml\n[dependencies]\nreqwest = { version = \"0.12\", features = [\"json\"] }\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\nAnd then the code:\n\n```rust,no_run\nuse std::collections::HashMap;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let resp = reqwest::get(\"https://httpbin.org/ip\")\n        .await?\n        .json::<HashMap<String, String>>()\n        .await?;\n    println!(\"{resp:#?}\");\n    Ok(())\n}\n```\n\n## Commercial Support\n\nFor private advice, support, reviews, access to the maintainer, and the like, reach out for [commercial support][sponsor].\n\n## Requirements\n\nOn Linux:\n\n- OpenSSL with headers. See https://docs.rs/openssl for supported versions\n  and more details. Alternatively you can enable the `native-tls-vendored`\n  feature to compile a copy of OpenSSL. Or, you can use [rustls](https://github.com/rustls/rustls)\n  via `rustls-tls` or other `rustls-tls-*` features.\n\nOn Windows and macOS:\n\n- Nothing.\n\nBy default, Reqwest uses [rust-native-tls](https://github.com/sfackler/rust-native-tls),\nwhich will use the operating system TLS framework if available, meaning Windows\nand macOS. On Linux, it will use the available OpenSSL or fail to build if\nnot found.\n\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://apache.org/licenses/LICENSE-2.0)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n\n## Sponsors\n\nSupport this project by becoming a [sponsor][].\n\n[sponsor]: https://seanmonstar.com/sponsor\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}