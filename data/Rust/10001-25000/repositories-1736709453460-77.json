{
  "metadata": {
    "timestamp": 1736709453460,
    "page": 77,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PyO3/pyo3",
      "stars": 12775,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "target\nCargo.lock\n/doc\n/gh-pages\nbuild/\n*.py[co]\n__pycache__/\n.cache\n.pytest_cache/\ndist/\n.tox/\n.mypy_cache/\n.hypothesis/\n.eggs/\nvenv*\nguide/book/\nguide/src/LICENSE-APACHE\nguide/src/LICENSE-MIT\n*.so\n*.out\n*.egg-info\nextensions/stamps/\npip-wheel-metadata\nvalgrind-python.supp\n*.pyd\nlcov.info\ncoverage.json\nnetlify_build/\n.nox/\n"
        },
        {
          "name": ".netlify",
          "type": "tree",
          "content": null
        },
        {
          "name": ".towncrier.template.md",
          "type": "blob",
          "size": 0.5380859375,
          "content": "{% for section_text, section in sections.items() %}{%- if section %}{{section_text}}{% endif -%}\n{% if section %}\n{% for category in ['packaging', 'added', 'changed', 'removed', 'fixed' ] if category in section %}\n### {{ definitions[category]['name'] }}\n\n{% if definitions[category]['showcontent'] %}\n{% for text, pull_requests in section[category].items() %}\n- {{ text }} {{ pull_requests|join(', ') }}\n{% endfor %}\n{% else %}\n- {{ section[category]['']|join(', ') }}\n{% endif %}\n\n{% endfor %}{% else %}No significant changes.{% endif %}{% endfor %}\n"
        },
        {
          "name": "Architecture.md",
          "type": "blob",
          "size": 9.8681640625,
          "content": "<!-- This file contains a rough overview of the PyO3 codebase. -->\n<!-- Please do not make descriptions too specific, so that we can easily -->\n<!-- keep this file in sync with the codebase. -->\n\n# PyO3: Architecture\n\nThis document roughly describes the high-level architecture of PyO3.\nIf you want to become familiar with the codebase you are in the right place!\n\n## Overview\n\nPyO3 provides a bridge between Rust and Python, based on the [Python/C API].\nThus, PyO3 has low-level bindings of these API as its core.\nOn top of that, we have higher-level bindings to operate Python objects safely.\nAlso, to define Python classes and functions in Rust code, we have `trait PyClass` and a set of\nprotocol traits (e.g., `PyIterProtocol`) for supporting object protocols (i.e., `__dunder__` methods).\nSince implementing `PyClass` requires lots of boilerplate, we have a proc-macro `#[pyclass]`.\n\nTo summarize, there are six main parts to the PyO3 codebase.\n\n1. [Low-level bindings of Python/C API.](#1-low-level-bindings-of-python-capi)\n   - [`pyo3-ffi`] and [`src/ffi`]\n2. [Bindings to Python objects.](#2-bindings-to-python-objects)\n   - [`src/instance.rs`] and [`src/types`]\n3. [`PyClass` and related functionalities.](#3-pyclass-and-related-functionalities)\n   - [`src/pycell.rs`], [`src/pyclass.rs`], and more\n4. [Procedural macros to simplify usage for users.](#4-procedural-macros-to-simplify-usage-for-users)\n   - [`src/impl_`], [`pyo3-macros`] and [`pyo3-macros-backend`]\n5. [`build.rs` and `pyo3-build-config`](#5-buildrs-and-pyo3-build-config)\n   - [`build.rs`](https://github.com/PyO3/pyo3/tree/main/build.rs)\n   - [`pyo3-build-config`]\n\n## 1. Low-level bindings of Python/C API\n\n[`pyo3-ffi`] contains wrappers of the [Python/C API]. This is currently done by hand rather than\nautomated tooling because:\n  - it gives us best control about how to adapt C conventions to Rust, and\n  - there are many Python interpreter versions we support in a single set of files.\n\nWe aim to provide straight-forward Rust wrappers resembling the file structure of [`cpython/Include`](https://github.com/python/cpython/tree/3.13/Include).\n\nWe are continuously updating the module to match the latest CPython version which PyO3 supports (i.e. as of time of writing Python 3.13). The tracking issue is [#1289](https://github.com/PyO3/pyo3/issues/1289), and contribution is welcome.\n\nIn the [`pyo3-ffi`] crate, there is lots of conditional compilation such as `#[cfg(Py_LIMITED_API)]`,\n`#[cfg(Py_3_7)]`, and `#[cfg(PyPy)]`.\n`Py_LIMITED_API` corresponds to `#define Py_LIMITED_API` macro in Python/C API.\nWith `Py_LIMITED_API`, we can build a Python-version-agnostic binary called an\n[abi3 wheel](https://pyo3.rs/latest/building-and-distribution.html#py_limited_apiabi3).\n`Py_3_7` means that the API is available from Python >= 3.7.\nThere are also `Py_3_8`, `Py_3_9`, and so on.\n`PyPy` means that the API definition is for PyPy.\nThose flags are set in [`build.rs`](#6-buildrs-and-pyo3-build-config).\n\n## 2. Bindings to Python objects\n\n[`src/types`] contains bindings to [built-in types](https://docs.python.org/3/library/stdtypes.html)\nof Python, such as `dict` and `list`.\nFor historical reasons, Python's `object` is called `PyAny` in PyO3 and located in [`src/types/any.rs`].\n\nCurrently, `PyAny` is a straightforward wrapper of `ffi::PyObject`, defined as:\n\n```rust\n#[repr(transparent)]\npub struct PyAny(UnsafeCell<ffi::PyObject>);\n```\n\nConcrete Python objects are implemented by wrapping `PyAny`, e.g.,:\n\n```rust\n#[repr(transparent)]\npub struct PyDict(PyAny);\n```\n\nThese types are not intended to be accessed directly, and instead are used through the `Py<T>` and `Bound<T>` smart pointers.\n\nWe have some macros in [`src/types/mod.rs`] which make it easier to implement APIs for concrete Python types.\n\n## 3. `PyClass` and related functionalities\n\n[`src/pycell.rs`], [`src/pyclass.rs`], and [`src/type_object.rs`] contain types and\ntraits to make `#[pyclass]` work.\nAlso, [`src/pyclass_init.rs`] and [`src/impl_/pyclass.rs`] have related functionalities.\n\nTo realize object-oriented programming in C, all Python objects have `ob_base: PyObject` as their\nfirst field in their structure definition. Thanks to this guarantee, casting `*mut A` to `*mut PyObject`\nis valid if `A` is a Python object.\n\nTo ensure this guarantee, we have a wrapper struct `PyCell<T>` in [`src/pycell.rs`] which is roughly:\n\n```rust\n#[repr(C)]\npub struct PyCell<T: PyClass> {\n    ob_base: crate::ffi::PyObject,\n    inner: T,\n}\n```\n\nThus, when copying a Rust struct to a Python object, we first allocate `PyCell` on the Python heap and then\nmove `T` into it.\nAlso, `PyCell` provides [RefCell](https://doc.rust-lang.org/std/cell/struct.RefCell.html)-like methods\nto ensure Rust's borrow rules.\nSee [the documentation](https://docs.rs/pyo3/latest/pyo3/pycell/struct.PyCell.html) for more.\n\n`PyCell<T>` requires that `T` implements `PyClass`.\nThis trait is somewhat complex and derives many traits, but the most important one is `PyTypeInfo`\nin [`src/type_object.rs`].\n`PyTypeInfo` is also implemented for built-in types.\nIn Python, all objects have their types, and types are also objects of `type`.\nFor example, you can see `type({})` shows `dict` and `type(type({}))` shows `type` in Python REPL.\n`T: PyTypeInfo` implies that `T` has a corresponding type object.\n\n### Protocol methods\n\nPython has some built-in special methods called dunder methods, such as `__iter__`.\nThey are called \"slots\" in the [abstract objects layer](https://docs.python.org/3/c-api/abstract.html) in\nPython/C API.\nWe provide a way to implement those protocols similarly, by recognizing special\nnames in `#[pymethods]`, with a few new ones for slots that can not be\nimplemented in Python, such as GC support.\n\n## 4. Procedural macros to simplify usage for users.\n\n[`pyo3-macros`] provides five proc-macro APIs: `pymodule`, `pyfunction`, `pyclass`,\n`pymethods`, and `#[derive(FromPyObject)]`.\n[`pyo3-macros-backend`] has the actual implementations of these APIs.\n[`src/impl_`] contains `#[doc(hidden)]` functionality used in code generated by these proc-macros,\nsuch as parsing function arguments.\n\n## 5. `build.rs` and `pyo3-build-config`\n\nPyO3 supports a wide range of OSes, interpreters and use cases. The correct environment must be\ndetected at build time in order to set up relevant conditional compilation correctly. This logic\nis captured in the [`pyo3-build-config`] crate, which is a `build-dependency` of `pyo3` and\n`pyo3-macros`, and can also be used by downstream users in the same way.\n\nIn [`pyo3-build-config`]'s `build.rs` the build environment is detected and inlined into the crate\nas a \"config file\". This works in all cases except for cross-compiling, where it is necessary to\ncapture this from the `pyo3` `build.rs` to get some extra environment variables that Cargo doesn't\nset for build dependencies.\n\nThe `pyo3` `build.rs` also runs some safety checks such as ensuring the Python version detected is\nactually supported.\n\nSome of the functionality of `pyo3-build-config`:\n- Find the interpreter for build and detect the Python version.\n  - We have to set some version flags like `#[cfg(Py_3_7)]`.\n  - If the interpreter is PyPy, we set `#[cfg(PyPy)`.\n  - If the `PYO3_CONFIG_FILE` environment variable is set then that file's contents will be used\n    instead of any detected configuration.\n  - If the `PYO3_NO_PYTHON` environment variable is set then the interpreter detection is bypassed\n    entirely and only abi3 extensions can be built.\n- Check if we are building a Python extension.\n  - If we are building an extension (e.g., Python library installable by `pip`),\n    we don't link `libpython`.\n    Currently we use the `extension-module` feature for this purpose. This may change in the future.\n    See [#1123](https://github.com/PyO3/pyo3/pull/1123).\n- Cross-compiling configuration\n  - If `TARGET` architecture and `HOST` architecture differ, we can find cross compile information\n    from environment variables (`PYO3_CROSS_LIB_DIR`, `PYO3_CROSS_PYTHON_VERSION` and\n    `PYO3_CROSS_PYTHON_IMPLEMENTATION`) or system files.\n    When cross compiling extension modules it is often possible to make it work without any\n    additional user input.\n  - When an experimental feature `generate-import-lib` is enabled, the `pyo3-ffi` build script can\n    generate `python3.dll` import libraries for Windows targets automatically via an external\n    [`python3-dll-a`] crate. This enables the users to cross compile Python extensions for Windows without\n    having to install any Windows Python libraries.\n\n<!-- External Links -->\n\n[python/c api]: https://docs.python.org/3/c-api/\n[`python3-dll-a`]: https://docs.rs/python3-dll-a/latest/python3_dll_a/\n\n<!-- Crates -->\n\n[`pyo3-macros`]: https://github.com/PyO3/pyo3/tree/main/pyo3-macros\n[`pyo3-macros-backend`]: https://github.com/PyO3/pyo3/tree/main/pyo3-macros-backend\n[`pyo3-build-config`]: https://github.com/PyO3/pyo3/tree/main/pyo3-build-config\n[`pyo3-ffi`]: https://github.com/PyO3/pyo3/tree/main/pyo3-ffi\n\n<!-- Directories -->\n\n[`src/class`]: https://github.com/PyO3/pyo3/tree/main/src/class\n[`src/ffi`]: https://github.com/PyO3/pyo3/tree/main/src/ffi\n[`src/types`]: https://github.com/PyO3/pyo3/tree/main/src/types\n\n<!-- Files -->\n\n[`src/impl_`]: https://github.com/PyO3/pyo3/blob/main/src/impl_\n[`src/instance.rs`]: https://github.com/PyO3/pyo3/tree/main/src/instance.rs\n[`src/pycell.rs`]: https://github.com/PyO3/pyo3/tree/main/src/pycell.rs\n[`src/pyclass.rs`]: https://github.com/PyO3/pyo3/tree/main/src/pyclass.rs\n[`src/pyclass_init.rs`]: https://github.com/PyO3/pyo3/tree/main/src/pyclass_init.rs\n[`src/pyclass_slot.rs`]: https://github.com/PyO3/pyo3/tree/main/src/pyclass_slot.rs\n[`src/type_object.rs`]: https://github.com/PyO3/pyo3/tree/main/src/type_object.rs\n[`src/class/methods.rs`]: https://github.com/PyO3/pyo3/tree/main/src/class/methods.rs\n[`src/class/impl_.rs`]: https://github.com/PyO3/pyo3/tree/main/src/class/impl_.rs\n[`src/types/any.rs`]: https://github.com/PyO3/pyo3/tree/main/src/types/any.rs\n[`src/types/mod.rs`]: https://github.com/PyO3/pyo3/tree/main/src/types/mod.rs\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 155.1884765625,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file. For help with updating to new\nPyO3 versions, please see the [migration guide](https://pyo3.rs/latest/migration.html).\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\nTo see unreleased changes, please see the [CHANGELOG on the main branch guide](https://pyo3.rs/main/changelog.html).\n\n<!-- towncrier release notes start -->\n\n## [0.23.3] - 2024-12-03\n\n### Packaging\n\n- Bump optional `python3-dll-a` dependency to 0.2.11. [#4749](https://github.com/PyO3/pyo3/pull/4749)\n\n### Fixed\n\n- Fix unresolved symbol link failures on Windows when compiling for Python 3.13t with `abi3` features enabled. [#4733](https://github.com/PyO3/pyo3/pull/4733)\n- Fix unresolved symbol link failures on Windows when compiling for Python 3.13t using the `generate-import-lib` feature. [#4749](https://github.com/PyO3/pyo3/pull/4749)\n- Fix compile-time regression in PyO3 0.23.0 where changing `PYO3_CONFIG_FILE` would not reconfigure PyO3 for the new interpreter. [#4758](https://github.com/PyO3/pyo3/pull/4758)\n\n\n## [0.23.2] - 2024-11-25\n\n### Added\n\n- Add `IntoPyObjectExt` trait. [#4708](https://github.com/PyO3/pyo3/pull/4708)\n\n### Fixed\n\n- Fix compile failures when building for free-threaded Python when the `abi3` or `abi3-pyxx` features are enabled. [#4719](https://github.com/PyO3/pyo3/pull/4719)\n- Fix `ambiguous_associated_items` lint error in `#[pyclass]` and `#[derive(IntoPyObject)]` macros. [#4725](https://github.com/PyO3/pyo3/pull/4725)\n\n\n## [0.23.1] - 2024-11-16\n\nRe-release of 0.23.0 with fixes to docs.rs build.\n\n## [0.23.0] - 2024-11-15\n\n### Packaging\n\n- Drop support for PyPy 3.7 and 3.8. [#4582](https://github.com/PyO3/pyo3/pull/4582)\n- Extend range of supported versions of `hashbrown` optional dependency to include version 0.15. [#4604](https://github.com/PyO3/pyo3/pull/4604)\n- Bump minimum version of `eyre` optional dependency to 0.6.8. [#4617](https://github.com/PyO3/pyo3/pull/4617)\n- Bump minimum version of `hashbrown` optional dependency to 0.14.5. [#4617](https://github.com/PyO3/pyo3/pull/4617)\n- Bump minimum version of `indexmap` optional dependency to 2.5.0. [#4617](https://github.com/PyO3/pyo3/pull/4617)\n- Bump minimum version of `num-complex` optional dependency to 0.4.6. [#4617](https://github.com/PyO3/pyo3/pull/4617)\n- Bump minimum version of `chrono-tz` optional dependency to 0.10. [#4617](https://github.com/PyO3/pyo3/pull/4617)\n- Support free-threaded Python 3.13t. [#4588](https://github.com/PyO3/pyo3/pull/4588)\n\n### Added\n\n- Add `IntoPyObject` (fallible) conversion trait to convert from Rust to Python values. [#4060](https://github.com/PyO3/pyo3/pull/4060)\n- Add `#[pyclass(str=\"<format string>\")]` option to generate `__str__` based on a `Display` implementation or format string. [#4233](https://github.com/PyO3/pyo3/pull/4233)\n- Implement `PartialEq` for `Bound<'py, PyInt>` with `u8`, `u16`, `u32`, `u64`, `u128`, `usize`, `i8`, `i16`, `i32`, `i64`, `i128` and `isize`. [#4317](https://github.com/PyO3/pyo3/pull/4317)\n- Implement `PartialEq<f64>` and `PartialEq<f32>` for `Bound<'py, PyFloat>`. [#4348](https://github.com/PyO3/pyo3/pull/4348)\n- Add `as_super` and `into_super` methods for `Bound<T: PyClass>`. [#4351](https://github.com/PyO3/pyo3/pull/4351)\n- Add FFI definitions `PyCFunctionFast` and `PyCFunctionFastWithKeywords` [#4415](https://github.com/PyO3/pyo3/pull/4415)\n- Add FFI definitions for `PyMutex` on Python 3.13 and newer. [#4421](https://github.com/PyO3/pyo3/pull/4421)\n- Add `PyDict::locked_for_each` to iterate efficiently on freethreaded Python. [#4439](https://github.com/PyO3/pyo3/pull/4439)\n- Add FFI definitions `PyObject_GetOptionalAttr`, `PyObject_GetOptionalAttrString`, `PyObject_HasAttrWithError`, `PyObject_HasAttrStringWithError`, `Py_CONSTANT_*` constants, `Py_GetConstant`, `Py_GetConstantBorrowed`, and `PyType_GetModuleByDef` on Python 3.13 and newer. [#4447](https://github.com/PyO3/pyo3/pull/4447)\n- Add FFI definitions for the Python critical section API available on Python 3.13 and newer. [#4477](https://github.com/PyO3/pyo3/pull/4477)\n- Add derive macro for `IntoPyObject`. [#4495](https://github.com/PyO3/pyo3/pull/4495)\n- Add `Borrowed::as_ptr`. [#4520](https://github.com/PyO3/pyo3/pull/4520)\n- Add FFI definition for `PyImport_AddModuleRef`. [#4529](https://github.com/PyO3/pyo3/pull/4529)\n- Add `PyAnyMethods::try_iter`. [#4553](https://github.com/PyO3/pyo3/pull/4553)\n- Add `pyo3::sync::with_critical_section`, a wrapper around the Python Critical Section API added in Python 3.13. [#4587](https://github.com/PyO3/pyo3/pull/4587)\n- Add `#[pymodule(gil_used = false)]` option to declare that a module supports the free-threaded build. [#4588](https://github.com/PyO3/pyo3/pull/4588)\n- Add `PyModule::gil_used` method to declare that a module supports the free-threaded build. [#4588](https://github.com/PyO3/pyo3/pull/4588)\n- Add FFI definition `PyDateTime_CAPSULE_NAME`. [#4634](https://github.com/PyO3/pyo3/pull/4634)\n- Add `PyMappingProxy` type to represent the `mappingproxy` Python class. [#4644](https://github.com/PyO3/pyo3/pull/4644)\n- Add FFI definitions `PyList_Extend` and `PyList_Clear`. [#4667](https://github.com/PyO3/pyo3/pull/4667)\n- Add derive macro for `IntoPyObjectRef`. [#4674](https://github.com/PyO3/pyo3/pull/4674)\n- Add `pyo3::sync::OnceExt` and `pyo3::sync::OnceLockExt` traits. [#4676](https://github.com/PyO3/pyo3/pull/4676)\n\n### Changed\n\n- Prefer `IntoPyObject` over `IntoPy<Py<PyAny>>>` for `#[pyfunction]` and `#[pymethods]` return types. [#4060](https://github.com/PyO3/pyo3/pull/4060)\n- Report multiple errors from `#[pyclass]` and `#[pyo3(..)]` attributes. [#4243](https://github.com/PyO3/pyo3/pull/4243)\n- Nested declarative `#[pymodule]` are automatically treated as submodules (no `PyInit_` entrypoint is created). [#4308](https://github.com/PyO3/pyo3/pull/4308)\n- Deprecate `PyAnyMethods::is_ellipsis` (`Py::is_ellipsis` was deprecated in PyO3 0.20). [#4322](https://github.com/PyO3/pyo3/pull/4322)\n- Deprecate `PyLong` in favor of `PyInt`. [#4347](https://github.com/PyO3/pyo3/pull/4347)\n- Rename `IntoPyDict::into_py_dict_bound` to `IntoPyDict::into_py_dict`. [#4388](https://github.com/PyO3/pyo3/pull/4388)\n- `PyModule::from_code` now expects `&CStr` as arguments instead of `&str`. [#4404](https://github.com/PyO3/pyo3/pull/4404)\n- Use \"fastcall\" Python calling convention for `#[pyfunction]`s when compiling on abi3 for Python 3.10 and up. [#4415](https://github.com/PyO3/pyo3/pull/4415)\n- Remove `Copy` and `Clone` from `PyObject` struct FFI definition. [#4434](https://github.com/PyO3/pyo3/pull/4434)\n- `Python::eval` and `Python::run` now take a `&CStr` instead of `&str`. [#4435](https://github.com/PyO3/pyo3/pull/4435)\n- Deprecate `IPowModulo`, `PyClassAttributeDef`, `PyGetterDef`, `PyMethodDef`, `PyMethodDefType`, and `PySetterDef` from PyO3's public API. [#4441](https://github.com/PyO3/pyo3/pull/4441)\n- `IntoPyObject` impls for `Vec<u8>`, `&[u8]`, `[u8; N]`, `Cow<[u8]>` and `SmallVec<[u8; N]>` now convert into Python `bytes` rather than a `list` of integers. [#4442](https://github.com/PyO3/pyo3/pull/4442)\n- Emit a compile-time error when attempting to subclass a class that doesn't allow subclassing. [#4453](https://github.com/PyO3/pyo3/pull/4453)\n- `IntoPyDict::into_py_dict` is now fallible due to `IntoPyObject` migration. [#4493](https://github.com/PyO3/pyo3/pull/4493)\n- The `abi3` feature will now override config files provided via `PYO3_BUILD_CONFIG`. [#4497](https://github.com/PyO3/pyo3/pull/4497)\n- Disable the `GILProtected` struct on free-threaded Python. [#4504](https://github.com/PyO3/pyo3/pull/4504)\n- Updated FFI definitions for functions and struct fields that have been deprecated or removed from CPython. [#4534](https://github.com/PyO3/pyo3/pull/4534)\n- Disable `PyListMethods::get_item_unchecked` on free-threaded Python. [#4539](https://github.com/PyO3/pyo3/pull/4539)\n- Add `GILOnceCell::import`. [#4542](https://github.com/PyO3/pyo3/pull/4542)\n- Deprecate `PyAnyMethods::iter` in favour of `PyAnyMethods::try_iter`. [#4553](https://github.com/PyO3/pyo3/pull/4553)\n- The `#[pyclass]` macro now requires a types to be `Sync`. (Except for `#[pyclass(unsendable)]` types). [#4566](https://github.com/PyO3/pyo3/pull/4566)\n- `PyList::new` and `PyTuple::new` are now fallible due to `IntoPyObject` migration. [#4580](https://github.com/PyO3/pyo3/pull/4580)\n- `PyErr::matches` is now fallible due to `IntoPyObject` migration. [#4595](https://github.com/PyO3/pyo3/pull/4595)\n- Deprecate `ToPyObject` in favour of `IntoPyObject` [#4595](https://github.com/PyO3/pyo3/pull/4595)\n- Deprecate `PyWeakrefMethods::get_option`. [#4597](https://github.com/PyO3/pyo3/pull/4597)\n- Seal `PyWeakrefMethods` trait. [#4598](https://github.com/PyO3/pyo3/pull/4598)\n- Remove `PyNativeTypeInitializer` and `PyObjectInit` from the PyO3 public API. [#4611](https://github.com/PyO3/pyo3/pull/4611)\n- Deprecate `IntoPy` in favor of `IntoPyObject` [#4618](https://github.com/PyO3/pyo3/pull/4618)\n- Eagerly normalize exceptions in `PyErr::take()` and `PyErr::fetch()` on Python 3.11 and older. [#4655](https://github.com/PyO3/pyo3/pull/4655)\n- Move `IntoPy::type_output` to `IntoPyObject::type_output`. [#4657](https://github.com/PyO3/pyo3/pull/4657)\n- Change return type of `PyMapping::keys`, `PyMapping::values` and `PyMapping::items` to `Bound<'py, PyList>` instead of `Bound<'py, PySequence>`. [#4661](https://github.com/PyO3/pyo3/pull/4661)\n- Complex enums now allow field types that either implement `IntoPyObject` by reference or by value together with `Clone`. This makes `Py<T>` available as field type. [#4694](https://github.com/PyO3/pyo3/pull/4694)\n\n\n### Removed\n\n- Remove all functionality deprecated in PyO3 0.20. [#4322](https://github.com/PyO3/pyo3/pull/4322)\n- Remove all functionality deprecated in PyO3 0.21. [#4323](https://github.com/PyO3/pyo3/pull/4323)\n- Deprecate `PyUnicode` in favour of `PyString`. [#4370](https://github.com/PyO3/pyo3/pull/4370)\n- Remove deprecated `gil-refs` feature. [#4378](https://github.com/PyO3/pyo3/pull/4378)\n- Remove private FFI definitions `_Py_IMMORTAL_REFCNT`, `_Py_IsImmortal`, `_Py_TPFLAGS_STATIC_BUILTIN`, `_Py_Dealloc`, `_Py_IncRef`, `_Py_DecRef`. [#4447](https://github.com/PyO3/pyo3/pull/4447)\n- Remove private FFI definitions `_Py_c_sum`, `_Py_c_diff`, `_Py_c_neg`, `_Py_c_prod`, `_Py_c_quot`, `_Py_c_pow`, `_Py_c_abs`. [#4521](https://github.com/PyO3/pyo3/pull/4521)\n- Remove `_borrowed` methods of `PyWeakRef` and `PyWeakRefProxy`. [#4528](https://github.com/PyO3/pyo3/pull/4528)\n- Removed private FFI definition `_PyErr_ChainExceptions`. [#4534](https://github.com/PyO3/pyo3/pull/4534)\n\n### Fixed\n\n- Fix invalid library search path `lib_dir` when cross-compiling. [#4389](https://github.com/PyO3/pyo3/pull/4389)\n- Fix FFI definition `Py_Is` for PyPy on 3.10 to call the function defined by PyPy. [#4447](https://github.com/PyO3/pyo3/pull/4447)\n- Fix compile failure when using `#[cfg]` attributes for simple enum variants. [#4509](https://github.com/PyO3/pyo3/pull/4509)\n- Fix compiler warning for `non_snake_case` method names inside `#[pymethods]` generated code. [#4567](https://github.com/PyO3/pyo3/pull/4567)\n- Fix compile error with `#[derive(FromPyObject)]` generic struct with trait bounds. [#4645](https://github.com/PyO3/pyo3/pull/4645)\n- Fix compile error for `#[classmethod]` and `#[staticmethod]` on magic methods. [#4654](https://github.com/PyO3/pyo3/pull/4654)\n- Fix compile warning for `unsafe_op_in_unsafe_fn` in generated macro code. [#4674](https://github.com/PyO3/pyo3/pull/4674)\n- Fix incorrect deprecation warning for `#[pyclass] enum`s with custom `__eq__` implementation. [#4692](https://github.com/PyO3/pyo3/pull/4692)\n- Fix `non_upper_case_globals` lint firing for generated `__match_args__` on complex enums. [#4705](https://github.com/PyO3/pyo3/pull/4705)\n\n## [0.22.5] - 2024-10-15\n\n### Fixed\n\n- Fix regression in 0.22.4 of naming collision in `__clear__` slot and `clear` method generated code. [#4619](https://github.com/PyO3/pyo3/pull/4619)\n\n\n## [0.22.4] - 2024-10-12\n\n### Added\n\n- Add FFI definition `PyWeakref_GetRef` and `compat::PyWeakref_GetRef`. [#4528](https://github.com/PyO3/pyo3/pull/4528)\n\n### Changed\n\n- Deprecate `_borrowed` methods on `PyWeakRef` and `PyWeakrefProxy` (just use the owning forms). [#4590](https://github.com/PyO3/pyo3/pull/4590)\n\n### Fixed\n\n- Revert removal of private FFI function `_PyLong_NumBits` on Python 3.13 and later. [#4450](https://github.com/PyO3/pyo3/pull/4450)\n- Fix `__traverse__` functions for base classes not being called by subclasses created with `#[pyclass(extends = ...)]`. [#4563](https://github.com/PyO3/pyo3/pull/4563)\n- Fix regression in 0.22.3 failing compiles under `#![forbid(unsafe_code)]`. [#4574](https://github.com/PyO3/pyo3/pull/4574)\n- Fix `create_exception` macro triggering lint and compile errors due to interaction with `gil-refs` feature. [#4589](https://github.com/PyO3/pyo3/pull/4589)\n- Workaround possible use-after-free in `_borrowed` methods on `PyWeakRef` and `PyWeakrefProxy` by leaking their contents. [#4590](https://github.com/PyO3/pyo3/pull/4590)\n- Fix crash calling `PyType_GetSlot` on static types before Python 3.10. [#4599](https://github.com/PyO3/pyo3/pull/4599)\n\n\n## [0.22.3] - 2024-09-15\n\n### Added\n\n- Add `pyo3::ffi::compat` namespace with compatibility shims for C API functions added in recent versions of Python.\n- Add FFI definition `PyDict_GetItemRef` on Python 3.13 and newer, and `compat::PyDict_GetItemRef` for all versions. [#4355](https://github.com/PyO3/pyo3/pull/4355)\n- Add FFI definition `PyList_GetItemRef` on Python 3.13 and newer, and `pyo3_ffi::compat::PyList_GetItemRef` for all versions. [#4410](https://github.com/PyO3/pyo3/pull/4410)\n- Add FFI definitions `compat::Py_NewRef` and `compat::Py_XNewRef`. [#4445](https://github.com/PyO3/pyo3/pull/4445)\n- Add FFI definitions `compat::PyObject_CallNoArgs` and `compat::PyObject_CallMethodNoArgs`. [#4461](https://github.com/PyO3/pyo3/pull/4461)\n- Add `GilOnceCell<Py<T>>::clone_ref`. [#4511](https://github.com/PyO3/pyo3/pull/4511)\n\n### Changed\n\n- Improve error messages for `#[pyfunction]` defined inside `#[pymethods]`. [#4349](https://github.com/PyO3/pyo3/pull/4349)\n- Improve performance of calls to Python by using the vectorcall calling convention where possible. [#4456](https://github.com/PyO3/pyo3/pull/4456)\n- Mention the type name in the exception message when trying to instantiate a class with no constructor defined. [#4481](https://github.com/PyO3/pyo3/pull/4481)\n\n### Removed\n\n- Remove private FFI definition `_Py_PackageContext`. [#4420](https://github.com/PyO3/pyo3/pull/4420)\n\n### Fixed\n\n- Fix compile failure in declarative `#[pymodule]` under presence of `#![no_implicit_prelude]`. [#4328](https://github.com/PyO3/pyo3/pull/4328)\n- Fix use of borrowed reference in `PyDict::get_item` (unsafe in free-threaded Python). [#4355](https://github.com/PyO3/pyo3/pull/4355)\n- Fix `#[pyclass(eq)]` macro hygiene issues for structs and enums. [#4359](https://github.com/PyO3/pyo3/pull/4359)\n- Fix hygiene/span issues of `#[pyfunction]` and `#[pymethods]` generated code which affected expansion in `macro_rules` context. [#4382](https://github.com/PyO3/pyo3/pull/4382)\n- Fix `unsafe_code` lint error in `#[pyclass]` generated code. [#4396](https://github.com/PyO3/pyo3/pull/4396)\n- Fix async functions returning a tuple only returning the first element to Python. [#4407](https://github.com/PyO3/pyo3/pull/4407)\n- Fix use of borrowed reference in `PyList::get_item` (unsafe in free-threaded Python). [#4410](https://github.com/PyO3/pyo3/pull/4410)\n- Correct FFI definition `PyArg_ParseTupleAndKeywords` to take `*const *const c_char` instead of `*mut *mut c_char` on Python 3.13 and up. [#4420](https://github.com/PyO3/pyo3/pull/4420)\n- Fix a soundness bug with `PyClassInitializer`: panic if adding subclass to existing instance via `PyClassInitializer::from(Py<BaseClass>).add_subclass(SubClass)`. [#4454](https://github.com/PyO3/pyo3/pull/4454)\n- Fix illegal reference counting op inside implementation of `__traverse__` handlers. [#4479](https://github.com/PyO3/pyo3/pull/4479)\n\n## [0.22.2] - 2024-07-17\n\n### Packaging\n\n- Require opt-in to freethreaded Python using the `UNSAFE_PYO3_BUILD_FREE_THREADED=1` environment variable (it is not yet supported by PyO3). [#4327](https://github.com/PyO3/pyo3/pull/4327)\n\n### Changed\n\n- Use FFI function calls for reference counting on all abi3 versions. [#4324](https://github.com/PyO3/pyo3/pull/4324)\n- `#[pymodule(...)]` now directly accepts all relevant `#[pyo3(...)]` options. [#4330](https://github.com/PyO3/pyo3/pull/4330)\n\n### Fixed\n\n- Fix compile failure in declarative `#[pymodule]` under presence of `#![no_implicit_prelude]`. [#4328](https://github.com/PyO3/pyo3/pull/4328)\n- Fix compile failure due to c-string literals on Rust < 1.79. [#4353](https://github.com/PyO3/pyo3/pull/4353)\n\n## [0.22.1] - 2024-07-06\n\n### Added\n\n- Add `#[pyo3(submodule)]` option for declarative `#[pymodule]`s. [#4301](https://github.com/PyO3/pyo3/pull/4301)\n- Implement `PartialEq<bool>` for `Bound<'py, PyBool>`. [#4305](https://github.com/PyO3/pyo3/pull/4305)\n\n### Fixed\n\n- Return `NotImplemented` instead of raising `TypeError` from generated equality method when comparing different types. [#4287](https://github.com/PyO3/pyo3/pull/4287)\n- Handle full-path `#[pyo3::prelude::pymodule]` and similar for `#[pyclass]` and `#[pyfunction]` in declarative modules. [#4288](https://github.com/PyO3/pyo3/pull/4288)\n- Fix 128-bit int regression on big-endian platforms with Python <3.13. [#4291](https://github.com/PyO3/pyo3/pull/4291)\n- Stop generating code that will never be covered with declarative modules. [#4297](https://github.com/PyO3/pyo3/pull/4297)\n- Fix invalid deprecation warning for trailing optional on `#[setter]` function. [#4304](https://github.com/PyO3/pyo3/pull/4304)\n\n## [0.22.0] - 2024-06-24\n\n### Packaging\n\n- Update `heck` dependency to 0.5. [#3966](https://github.com/PyO3/pyo3/pull/3966)\n- Extend range of supported versions of `chrono-tz` optional dependency to include version 0.10. [#4061](https://github.com/PyO3/pyo3/pull/4061)\n- Update MSRV to 1.63. [#4129](https://github.com/PyO3/pyo3/pull/4129)\n- Add optional `num-rational` feature to add conversions with Python's `fractions.Fraction`. [#4148](https://github.com/PyO3/pyo3/pull/4148)\n- Support Python 3.13. [#4184](https://github.com/PyO3/pyo3/pull/4184)\n\n### Added\n\n- Add `PyWeakref`, `PyWeakrefReference` and `PyWeakrefProxy`. [#3835](https://github.com/PyO3/pyo3/pull/3835)\n- Support `#[pyclass]` on enums that have tuple variants. [#4072](https://github.com/PyO3/pyo3/pull/4072)\n- Add support for scientific notation in `Decimal` conversion. [#4079](https://github.com/PyO3/pyo3/pull/4079)\n- Add `pyo3_disable_reference_pool` conditional compilation flag to avoid the overhead of the global reference pool at the cost of known limitations as explained in the performance section of the guide. [#4095](https://github.com/PyO3/pyo3/pull/4095)\n- Add `#[pyo3(constructor = (...))]` to customize the generated constructors for complex enum variants. [#4158](https://github.com/PyO3/pyo3/pull/4158)\n- Add `PyType::module`, which always matches Python `__module__`. [#4196](https://github.com/PyO3/pyo3/pull/4196)\n- Add `PyType::fully_qualified_name` which matches the \"fully qualified name\" defined in [PEP 737](https://peps.python.org/pep-0737). [#4196](https://github.com/PyO3/pyo3/pull/4196)\n- Add `PyTypeMethods::mro` and `PyTypeMethods::bases`. [#4197](https://github.com/PyO3/pyo3/pull/4197)\n- Add `#[pyclass(ord)]` to implement ordering based on `PartialOrd`. [#4202](https://github.com/PyO3/pyo3/pull/4202)\n- Implement `ToPyObject` and `IntoPy<PyObject>` for `PyBackedStr` and `PyBackedBytes`. [#4205](https://github.com/PyO3/pyo3/pull/4205)\n- Add `#[pyclass(hash)]` option to implement `__hash__` in terms of the `Hash` implementation [#4206](https://github.com/PyO3/pyo3/pull/4206)\n- Add `#[pyclass(eq)]` option to generate `__eq__` based on `PartialEq`, and `#[pyclass(eq_int)]` for simple enums to implement equality based on their discriminants. [#4210](https://github.com/PyO3/pyo3/pull/4210)\n- Implement `From<Bound<'py, T>>` for `PyClassInitializer<T>`. [#4214](https://github.com/PyO3/pyo3/pull/4214)\n- Add `as_super` methods to `PyRef` and `PyRefMut` for accesing the base class by reference. [#4219](https://github.com/PyO3/pyo3/pull/4219)\n- Implement `PartialEq<str>` for `Bound<'py, PyString>`. [#4245](https://github.com/PyO3/pyo3/pull/4245)\n- Implement `PyModuleMethods::filename` on PyPy. [#4249](https://github.com/PyO3/pyo3/pull/4249)\n- Implement `PartialEq<[u8]>` for `Bound<'py, PyBytes>`. [#4250](https://github.com/PyO3/pyo3/pull/4250)\n- Add `pyo3_ffi::c_str` macro to create `&'static CStr` on Rust versions which don't have 1.77's `c\"\"` literals. [#4255](https://github.com/PyO3/pyo3/pull/4255)\n- Support `bool` conversion with `numpy` 2.0's `numpy.bool` type [#4258](https://github.com/PyO3/pyo3/pull/4258)\n- Add `PyAnyMethods::{bitnot, matmul, floor_div, rem, divmod}`. [#4264](https://github.com/PyO3/pyo3/pull/4264)\n\n### Changed\n\n- Change the type of `PySliceIndices::slicelength` and the `length` parameter of `PySlice::indices()`. [#3761](https://github.com/PyO3/pyo3/pull/3761)\n- Deprecate implicit default for trailing optional arguments [#4078](https://github.com/PyO3/pyo3/pull/4078)\n- `Clone`ing pointers into the Python heap has been moved behind the `py-clone` feature, as it must panic without the GIL being held as a soundness fix. [#4095](https://github.com/PyO3/pyo3/pull/4095)\n- Add `#[track_caller]` to all `Py<T>`, `Bound<'py, T>` and `Borrowed<'a, 'py, T>` methods which can panic. [#4098](https://github.com/PyO3/pyo3/pull/4098)\n- Change `PyAnyMethods::dir` to be fallible and return `PyResult<Bound<'py, PyList>>` (and similar for `PyAny::dir`). [#4100](https://github.com/PyO3/pyo3/pull/4100)\n- The global reference pool (to track pending reference count decrements) is now initialized lazily to avoid the overhead of taking a mutex upon function entry when the functionality is not actually used. [#4178](https://github.com/PyO3/pyo3/pull/4178)\n- Emit error messages when using `weakref` or `dict` when compiling for `abi3` for Python older than 3.9. [#4194](https://github.com/PyO3/pyo3/pull/4194)\n- Change `PyType::name` to always match Python `__name__`. [#4196](https://github.com/PyO3/pyo3/pull/4196)\n- Remove CPython internal ffi call for complex number including: add, sub, mul, div, neg, abs, pow. Added PyAnyMethods::{abs, pos, neg} [#4201](https://github.com/PyO3/pyo3/pull/4201)\n- Deprecate implicit integer comparision for simple enums in favor of `#[pyclass(eq_int)]`. [#4210](https://github.com/PyO3/pyo3/pull/4210)\n- Set the `module=` attribute of declarative modules' child `#[pymodule]`s and `#[pyclass]`es. [#4213](https://github.com/PyO3/pyo3/pull/4213)\n- Set the `module` option for complex enum variants from the value set on the complex enum `module`. [#4228](https://github.com/PyO3/pyo3/pull/4228)\n- Respect the Python \"limited API\" when building for the `abi3` feature on PyPy or GraalPy. [#4237](https://github.com/PyO3/pyo3/pull/4237)\n- Optimize code generated by `#[pyo3(get)]` on `#[pyclass]` fields. [#4254](https://github.com/PyO3/pyo3/pull/4254)\n- `PyCFunction::new`, `PyCFunction::new_with_keywords` and `PyCFunction::new_closure` now take `&'static CStr` name and doc arguments (previously was `&'static str`). [#4255](https://github.com/PyO3/pyo3/pull/4255)\n- The `experimental-declarative-modules` feature is now stabilized and available by default. [#4257](https://github.com/PyO3/pyo3/pull/4257)\n\n### Fixed\n\n- Fix panic when `PYO3_CROSS_LIB_DIR` is set to a missing path. [#4043](https://github.com/PyO3/pyo3/pull/4043)\n- Fix a compile error when exporting an exception created with `create_exception!` living in a different Rust module using the `declarative-module` feature. [#4086](https://github.com/PyO3/pyo3/pull/4086)\n- Fix FFI definitions of `PY_VECTORCALL_ARGUMENTS_OFFSET` and `PyVectorcall_NARGS` to fix a false-positive assertion. [#4104](https://github.com/PyO3/pyo3/pull/4104)\n- Disable `PyUnicode_DATA` on PyPy: not exposed by PyPy. [#4116](https://github.com/PyO3/pyo3/pull/4116)\n- Correctly handle `#[pyo3(from_py_with = ...)]` attribute on dunder (`__magic__`) method arguments instead of silently ignoring it. [#4117](https://github.com/PyO3/pyo3/pull/4117)\n- Fix a compile error when declaring a standalone function or class method with a Python name that is a Rust keyword. [#4226](https://github.com/PyO3/pyo3/pull/4226)\n- Fix declarative modules discarding doc comments on the `mod` node. [#4236](https://github.com/PyO3/pyo3/pull/4236)\n- Fix `__dict__` attribute missing for `#[pyclass(dict)]` instances when building for `abi3` on Python 3.9. [#4251](https://github.com/PyO3/pyo3/pull/4251)\n\n## [0.21.2] - 2024-04-16\n\n### Changed\n\n- Deprecate the `PySet::empty()` gil-ref constructor. [#4082](https://github.com/PyO3/pyo3/pull/4082)\n\n### Fixed\n\n- Fix compile error for `async fn` in `#[pymethods]` with a `&self` receiver and more than one additional argument. [#4035](https://github.com/PyO3/pyo3/pull/4035)\n- Improve error message for wrong receiver type in `__traverse__`. [#4045](https://github.com/PyO3/pyo3/pull/4045)\n- Fix compile error when exporting a `#[pyclass]` living in a different Rust module using the `experimental-declarative-modules` feature. [#4054](https://github.com/PyO3/pyo3/pull/4054)\n- Fix `missing_docs` lint triggering on documented `#[pymodule]` functions. [#4067](https://github.com/PyO3/pyo3/pull/4067)\n- Fix undefined symbol errors for extension modules on AIX (by linking `libpython`). [#4073](https://github.com/PyO3/pyo3/pull/4073)\n\n## [0.21.1] - 2024-04-01\n\n### Added\n\n- Implement `Send` and `Sync` for `PyBackedStr` and `PyBackedBytes`. [#4007](https://github.com/PyO3/pyo3/pull/4007)\n- Implement `Clone`, `Debug`, `PartialEq`, `Eq`, `PartialOrd`, `Ord` and `Hash` implementation for `PyBackedBytes` and `PyBackedStr`, and `Display` for `PyBackedStr`. [#4020](https://github.com/PyO3/pyo3/pull/4020)\n- Add `import_exception_bound!` macro to import exception types without generating GIL Ref functionality for them. [#4027](https://github.com/PyO3/pyo3/pull/4027)\n\n### Changed\n\n- Emit deprecation warning for uses of GIL Refs as `#[setter]` function arguments. [#3998](https://github.com/PyO3/pyo3/pull/3998)\n- Add `#[inline]` hints on many `Bound` and `Borrowed` methods. [#4024](https://github.com/PyO3/pyo3/pull/4024)\n\n### Fixed\n\n- Handle `#[pyo3(from_py_with = \"\")]` in `#[setter]` methods [#3995](https://github.com/PyO3/pyo3/pull/3995)\n- Allow extraction of `&Bound` in `#[setter]` methods. [#3998](https://github.com/PyO3/pyo3/pull/3998)\n- Fix some uncovered code blocks emitted by `#[pymodule]`, `#[pyfunction]` and `#[pyclass]` macros. [#4009](https://github.com/PyO3/pyo3/pull/4009)\n- Fix typo in the panic message when a class referenced in `pyo3::import_exception!` does not exist. [#4012](https://github.com/PyO3/pyo3/pull/4012)\n- Fix compile error when using an async `#[pymethod]` with a receiver and additional arguments. [#4015](https://github.com/PyO3/pyo3/pull/4015)\n\n\n## [0.21.0] - 2024-03-25\n\n### Added\n\n- Add support for GraalPy (24.0 and up). [#3247](https://github.com/PyO3/pyo3/pull/3247)\n- Add `PyMemoryView` type. [#3514](https://github.com/PyO3/pyo3/pull/3514)\n- Allow `async fn` in for `#[pyfunction]` and `#[pymethods]`, with the `experimental-async` feature. [#3540](https://github.com/PyO3/pyo3/pull/3540) [#3588](https://github.com/PyO3/pyo3/pull/3588) [#3599](https://github.com/PyO3/pyo3/pull/3599) [#3931](https://github.com/PyO3/pyo3/pull/3931)\n- Implement `PyTypeInfo` for `PyEllipsis`, `PyNone` and `PyNotImplemented`. [#3577](https://github.com/PyO3/pyo3/pull/3577)\n- Support `#[pyclass]` on enums that have non-unit variants. [#3582](https://github.com/PyO3/pyo3/pull/3582)\n- Support `chrono` feature with `abi3` feature. [#3664](https://github.com/PyO3/pyo3/pull/3664)\n- `FromPyObject`, `IntoPy<PyObject>` and `ToPyObject` are implemented on `std::duration::Duration` [#3670](https://github.com/PyO3/pyo3/pull/3670)\n- Add `PyString::to_cow`. Add `Py<PyString>::to_str`, `Py<PyString>::to_cow`, and `Py<PyString>::to_string_lossy`, as ways to access Python string data safely beyond the GIL lifetime. [#3677](https://github.com/PyO3/pyo3/pull/3677)\n- Add `Bound<T>` and `Borrowed<T>` smart pointers as a new API for accessing Python objects. [#3686](https://github.com/PyO3/pyo3/pull/3686)\n- Add `PyNativeType::as_borrowed` to convert \"GIL refs\" to the new `Bound` smart pointer. [#3692](https://github.com/PyO3/pyo3/pull/3692)\n- Add `FromPyObject::extract_bound` method, to migrate `FromPyObject` implementations to the Bound API. [#3706](https://github.com/PyO3/pyo3/pull/3706)\n- Add `gil-refs` feature to allow continued use of the deprecated GIL Refs APIs. [#3707](https://github.com/PyO3/pyo3/pull/3707)\n- Add methods to `PyAnyMethods` for binary operators (`add`, `sub`, etc.) [#3712](https://github.com/PyO3/pyo3/pull/3712)\n- Add `chrono-tz` feature allowing conversion between `chrono_tz::Tz` and `zoneinfo.ZoneInfo` [#3730](https://github.com/PyO3/pyo3/pull/3730)\n- Add FFI definition `PyType_GetModuleByDef`. [#3734](https://github.com/PyO3/pyo3/pull/3734)\n- Conversion between `std::time::SystemTime` and `datetime.datetime` [#3736](https://github.com/PyO3/pyo3/pull/3736)\n- Add `Py::as_any` and `Py::into_any`. [#3785](https://github.com/PyO3/pyo3/pull/3785)\n- Add `PyStringMethods::encode_utf8`. [#3801](https://github.com/PyO3/pyo3/pull/3801)\n- Add `PyBackedStr` and `PyBackedBytes`, as alternatives to `&str` and `&bytes` where a Python object owns the data. [#3802](https://github.com/PyO3/pyo3/pull/3802) [#3991](https://github.com/PyO3/pyo3/pull/3991)\n- Allow `#[pymodule]` macro on Rust `mod` blocks, with the `experimental-declarative-modules` feature. [#3815](https://github.com/PyO3/pyo3/pull/3815)\n- Implement `ExactSizeIterator` for `set` and `frozenset` iterators on `abi3` feature. [#3849](https://github.com/PyO3/pyo3/pull/3849)\n- Add `Py::drop_ref` to explicitly drop a `Py`` and immediately decrease the Python reference count if the GIL is already held. [#3871](https://github.com/PyO3/pyo3/pull/3871)\n- Allow `#[pymodule]` macro on single argument functions that take `&Bound<'_, PyModule>`. [#3905](https://github.com/PyO3/pyo3/pull/3905)\n- Implement `FromPyObject` for `Cow<str>`. [#3928](https://github.com/PyO3/pyo3/pull/3928)\n- Implement `Default` for `GILOnceCell`. [#3971](https://github.com/PyO3/pyo3/pull/3971)\n- Add `PyDictMethods::into_mapping`, `PyListMethods::into_sequence` and `PyTupleMethods::into_sequence`. [#3982](https://github.com/PyO3/pyo3/pull/3982)\n\n### Changed\n\n- `PyDict::from_sequence` now takes a single argument of type `&PyAny` (previously took two arguments `Python` and `PyObject`). [#3532](https://github.com/PyO3/pyo3/pull/3532)\n- Deprecate `Py::is_ellipsis` and `PyAny::is_ellipsis` in favour of `any.is(py.Ellipsis())`. [#3577](https://github.com/PyO3/pyo3/pull/3577)\n- Split some `PyTypeInfo` functionality into new traits `HasPyGilRef` and `PyTypeCheck`. [#3600](https://github.com/PyO3/pyo3/pull/3600)\n- Deprecate `PyTryFrom` and `PyTryInto` traits in favor of `any.downcast()` via the `PyTypeCheck` and `PyTypeInfo` traits. [#3601](https://github.com/PyO3/pyo3/pull/3601)\n- Allow async methods to accept `&self`/`&mut self` [#3609](https://github.com/PyO3/pyo3/pull/3609)\n- `FromPyObject` for set types now also accept `frozenset` objects as input. [#3632](https://github.com/PyO3/pyo3/pull/3632)\n- `FromPyObject` for `bool` now also accepts NumPy's `bool_` as input. [#3638](https://github.com/PyO3/pyo3/pull/3638)\n- Add `AsRefSource` associated type to `PyNativeType`. [#3653](https://github.com/PyO3/pyo3/pull/3653)\n- Rename `.is_true` to `.is_truthy` on `PyAny` and `Py<PyAny>` to clarify that the test is not based on identity with or equality to the True singleton. [#3657](https://github.com/PyO3/pyo3/pull/3657)\n- `PyType::name` is now `PyType::qualname` whereas `PyType::name` efficiently accesses the full name which includes the module name. [#3660](https://github.com/PyO3/pyo3/pull/3660)\n- The `Iter(A)NextOutput` types are now deprecated and `__(a)next__` can directly return anything which can be converted into Python objects, i.e. awaitables do not need to be wrapped into `IterANextOutput` or `Option` any more. `Option` can still be used as well and returning `None` will trigger the fast path for `__next__`, stopping iteration without having to raise a `StopIteration` exception. [#3661](https://github.com/PyO3/pyo3/pull/3661)\n- Implement `FromPyObject` on `chrono::DateTime<Tz>` for all `Tz`, not just `FixedOffset` and `Utc`. [#3663](https://github.com/PyO3/pyo3/pull/3663)\n- Add lifetime parameter to `PyTzInfoAccess` trait. For the deprecated gil-ref API, the trait is now implemented for `&'py PyTime` and `&'py PyDateTime` instead of `PyTime` and `PyDate`. [#3679](https://github.com/PyO3/pyo3/pull/3679)\n- Calls to `__traverse__` become no-ops for unsendable pyclasses if on the wrong thread, thereby avoiding hard aborts at the cost of potential leakage. [#3689](https://github.com/PyO3/pyo3/pull/3689)\n- Include `PyNativeType` in `pyo3::prelude`. [#3692](https://github.com/PyO3/pyo3/pull/3692)\n- Improve performance of `extract::<i64>` (and other integer types) by avoiding call to `__index__()` converting the value to an integer for 3.10+. Gives performance improvement of around 30% for successful extraction. [#3742](https://github.com/PyO3/pyo3/pull/3742)\n- Relax bound of `FromPyObject` for `Py<T>` to just `T: PyTypeCheck`. [#3776](https://github.com/PyO3/pyo3/pull/3776)\n- `PySet` and `PyFrozenSet` iterators now always iterate the equivalent of `iter(set)`. (A \"fast path\" with no noticeable performance benefit was removed.) [#3849](https://github.com/PyO3/pyo3/pull/3849)\n- Move implementations of `FromPyObject` for `&str`, `Cow<str>`, `&[u8]` and `Cow<[u8]>` onto a temporary trait `FromPyObjectBound` when `gil-refs` feature is deactivated. [#3928](https://github.com/PyO3/pyo3/pull/3928)\n- Deprecate `GILPool`, `Python::with_pool`, and `Python::new_pool`. [#3947](https://github.com/PyO3/pyo3/pull/3947)\n\n### Removed\n\n- Remove all functionality deprecated in PyO3 0.19. [#3603](https://github.com/PyO3/pyo3/pull/3603)\n\n### Fixed\n\n- Match PyPy 7.3.14 in removing PyPy-only symbol `Py_MAX_NDIMS` in favour of `PyBUF_MAX_NDIM`. [#3757](https://github.com/PyO3/pyo3/pull/3757)\n- Fix segmentation fault using `datetime` types when an invalid `datetime` module is on sys.path. [#3818](https://github.com/PyO3/pyo3/pull/3818)\n- Fix `non_local_definitions` lint warning triggered by many PyO3 macros. [#3901](https://github.com/PyO3/pyo3/pull/3901)\n- Disable `PyCode` and `PyCode_Type` on PyPy: `PyCode_Type` is not exposed by PyPy. [#3934](https://github.com/PyO3/pyo3/pull/3934)\n\n## [0.21.0-beta.0] - 2024-03-10\n\nPrerelease of PyO3 0.21. See [the GitHub diff](https://github.com/pyo3/pyo3/compare/v0.21.0-beta.0...v0.21.0) for what changed between 0.21.0-beta.0 and the final release.\n\n## [0.20.3] - 2024-02-23\n\n### Packaging\n\n- Add `portable-atomic` dependency. [#3619](https://github.com/PyO3/pyo3/pull/3619)\n- Check maximum version of Python at build time and for versions not yet supported require opt-in to the `abi3` stable ABI by the environment variable `PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1`. [#3821](https://github.com/PyO3/pyo3/pull/3821)\n\n### Fixed\n\n- Use `portable-atomic` to support platforms without 64-bit atomics. [#3619](https://github.com/PyO3/pyo3/pull/3619)\n- Fix compilation failure with `either` feature enabled without `experimental-inspect` enabled. [#3834](https://github.com/PyO3/pyo3/pull/3834)\n\n## [0.20.2] - 2024-01-04\n\n### Packaging\n\n- Pin `pyo3` and `pyo3-ffi` dependencies on `pyo3-build-config` to require the same patch version, i.e. `pyo3` 0.20.2 requires _exactly_ `pyo3-build-config` 0.20.2. [#3721](https://github.com/PyO3/pyo3/pull/3721)\n\n### Fixed\n\n- Fix compile failure when building `pyo3` 0.20.0 with latest `pyo3-build-config` 0.20.X. [#3724](https://github.com/PyO3/pyo3/pull/3724)\n- Fix docs.rs build. [#3722](https://github.com/PyO3/pyo3/pull/3722)\n\n## [0.20.1] - 2023-12-30\n\n### Added\n\n- Add optional `either` feature to add conversions for `either::Either<L, R>` sum type. [#3456](https://github.com/PyO3/pyo3/pull/3456)\n- Add optional `smallvec` feature to add conversions for `smallvec::SmallVec`. [#3507](https://github.com/PyO3/pyo3/pull/3507)\n- Add `take` and `into_inner` methods to `GILOnceCell` [#3556](https://github.com/PyO3/pyo3/pull/3556)\n- `#[classmethod]` methods can now also receive `Py<PyType>` as their first argument. [#3587](https://github.com/PyO3/pyo3/pull/3587)\n- `#[pyfunction(pass_module)]` can now also receive `Py<PyModule>` as their first argument. [#3587](https://github.com/PyO3/pyo3/pull/3587)\n- Add `traverse` method to `GILProtected`. [#3616](https://github.com/PyO3/pyo3/pull/3616)\n- Added `abi3-py312` feature [#3687](https://github.com/PyO3/pyo3/pull/3687)\n\n### Fixed\n\n- Fix minimum version specification for optional `chrono` dependency. [#3512](https://github.com/PyO3/pyo3/pull/3512)\n- Silenced new `clippy::unnecessary_fallible_conversions` warning when using a `Py<Self>` `self` receiver. [#3564](https://github.com/PyO3/pyo3/pull/3564)\n\n\n## [0.20.0] - 2023-10-11\n\n### Packaging\n\n- Dual-license PyO3 under either the Apache 2.0 OR the MIT license. This makes the project GPLv2 compatible. [#3108](https://github.com/PyO3/pyo3/pull/3108)\n- Update MSRV to Rust 1.56. [#3208](https://github.com/PyO3/pyo3/pull/3208)\n- Bump `indoc` dependency to 2.0 and `unindent` dependency to 0.2. [#3237](https://github.com/PyO3/pyo3/pull/3237)\n- Bump `syn` dependency to 2.0. [#3239](https://github.com/PyO3/pyo3/pull/3239)\n- Drop support for debug builds of Python 3.7. [#3387](https://github.com/PyO3/pyo3/pull/3387)\n- Bump `chrono` optional dependency to require 0.4.25 or newer. [#3427](https://github.com/PyO3/pyo3/pull/3427)\n- Support Python 3.12. [#3488](https://github.com/PyO3/pyo3/pull/3488)\n\n### Added\n\n- Support `__lt__`, `__le__`, `__eq__`, `__ne__`, `__gt__` and `__ge__` in `#[pymethods]`. [#3203](https://github.com/PyO3/pyo3/pull/3203)\n- Add FFI definition `Py_GETENV`. [#3336](https://github.com/PyO3/pyo3/pull/3336)\n- Add `as_ptr` and `into_ptr` inherent methods for `Py`, `PyAny`, `PyRef`, and `PyRefMut`. [#3359](https://github.com/PyO3/pyo3/pull/3359)\n- Implement `DoubleEndedIterator` for `PyTupleIterator` and `PyListIterator`. [#3366](https://github.com/PyO3/pyo3/pull/3366)\n- Add `#[pyclass(rename_all = \"...\")]` option: this allows renaming all getters and setters of a struct, or all variants of an enum. Available renaming rules are: `\"camelCase\"`, `\"kebab-case\"`, `\"lowercase\"`, `\"PascalCase\"`, `\"SCREAMING-KEBAB-CASE\"`, `\"SCREAMING_SNAKE_CASE\"`, `\"snake_case\"`, `\"UPPERCASE\"`. [#3384](https://github.com/PyO3/pyo3/pull/3384)\n- Add FFI definitions `PyObject_GC_IsTracked` and `PyObject_GC_IsFinalized` on Python 3.9 and up (PyPy 3.10 and up). [#3403](https://github.com/PyO3/pyo3/pull/3403)\n- Add types for `None`, `Ellipsis`, and `NotImplemented`. [#3408](https://github.com/PyO3/pyo3/pull/3408)\n- Add FFI definitions for the `Py_mod_multiple_interpreters` constant and its possible values. [#3494](https://github.com/PyO3/pyo3/pull/3494)\n- Add FFI definitions for `PyInterpreterConfig` struct, its constants and `Py_NewInterpreterFromConfig`. [#3502](https://github.com/PyO3/pyo3/pull/3502)\n\n### Changed\n\n- Change `PySet::discard` to return `PyResult<bool>` (previously returned nothing). [#3281](https://github.com/PyO3/pyo3/pull/3281)\n- Optimize implmentation of `IntoPy` for Rust tuples to Python tuples. [#3321](https://github.com/PyO3/pyo3/pull/3321)\n- Change `PyDict::get_item` to no longer suppress arbitrary exceptions (the return type is now `PyResult<Option<&PyAny>>` instead of `Option<&PyAny>`), and deprecate `PyDict::get_item_with_error`. [#3330](https://github.com/PyO3/pyo3/pull/3330)\n- Deprecate FFI definitions which are deprecated in Python 3.12. [#3336](https://github.com/PyO3/pyo3/pull/3336)\n- `AsPyPointer` is now an `unsafe trait`. [#3358](https://github.com/PyO3/pyo3/pull/3358)\n- Accept all `os.PathLike` values in implementation of `FromPyObject` for `PathBuf`. [#3374](https://github.com/PyO3/pyo3/pull/3374)\n- Add `__builtins__` to globals in `py.run()` and `py.eval()` if they're missing. [#3378](https://github.com/PyO3/pyo3/pull/3378)\n- Optimize implementation of `FromPyObject` for `BigInt` and `BigUint`. [#3379](https://github.com/PyO3/pyo3/pull/3379)\n- `PyIterator::from_object` and `PyByteArray::from` now take a single argument of type `&PyAny` (previously took two arguments `Python` and `AsPyPointer`). [#3389](https://github.com/PyO3/pyo3/pull/3389)\n- Replace `AsPyPointer` with `AsRef<PyAny>` as a bound in the blanket implementation of `From<&T> for PyObject`. [#3391](https://github.com/PyO3/pyo3/pull/3391)\n- Replace blanket `impl IntoPy<PyObject> for &T where T: AsPyPointer` with implementations of `impl IntoPy<PyObject>` for `&PyAny`, `&T where T: AsRef<PyAny>`, and `&Py<T>`. [#3393](https://github.com/PyO3/pyo3/pull/3393)\n- Preserve `std::io::Error` kind in implementation of `From<std::io::IntoInnerError>` for `PyErr` [#3396](https://github.com/PyO3/pyo3/pull/3396)\n- Try to select a relevant `ErrorKind` in implementation of `From<PyErr>` for `OSError` subclass. [#3397](https://github.com/PyO3/pyo3/pull/3397)\n- Retrieve the original `PyErr` in implementation of `From<std::io::Error>` for `PyErr` if the `std::io::Error` has been built using a Python exception (previously would create a new exception wrapping the `std::io::Error`). [#3402](https://github.com/PyO3/pyo3/pull/3402)\n- `#[pymodule]` will now return the same module object on repeated import by the same Python interpreter, on Python 3.9 and up. [#3446](https://github.com/PyO3/pyo3/pull/3446)\n- Truncate leap-seconds and warn when converting `chrono` types to Python `datetime` types (`datetime` cannot represent leap-seconds). [#3458](https://github.com/PyO3/pyo3/pull/3458)\n- `Err` returned from `#[pyfunction]` will now have a non-None `__context__` if called from inside a `catch` block. [#3455](https://github.com/PyO3/pyo3/pull/3455)\n- Deprecate undocumented `#[__new__]` form of `#[new]` attribute. [#3505](https://github.com/PyO3/pyo3/pull/3505)\n\n### Removed\n\n- Remove all functionality deprecated in PyO3 0.18, including `#[args]` attribute for `#[pymethods]`. [#3232](https://github.com/PyO3/pyo3/pull/3232)\n- Remove `IntoPyPointer` trait in favour of `into_ptr` inherent methods. [#3385](https://github.com/PyO3/pyo3/pull/3385)\n\n### Fixed\n\n- Handle exceptions properly in `PySet::discard`. [#3281](https://github.com/PyO3/pyo3/pull/3281)\n- The `PyTupleIterator` type returned by `PyTuple::iter` is now public and hence can be named by downstream crates. [#3366](https://github.com/PyO3/pyo3/pull/3366)\n- Linking of `PyOS_FSPath` on PyPy. [#3374](https://github.com/PyO3/pyo3/pull/3374)\n- Fix memory leak in `PyTypeBuilder::build`. [#3401](https://github.com/PyO3/pyo3/pull/3401)\n- Disable removed FFI definitions `_Py_GetAllocatedBlocks`, `_PyObject_GC_Malloc`, and `_PyObject_GC_Calloc` on Python 3.11 and up. [#3403](https://github.com/PyO3/pyo3/pull/3403)\n- Fix `ResourceWarning` and crashes related to GC when running with debug builds of CPython. [#3404](https://github.com/PyO3/pyo3/pull/3404)\n- Some-wrapping of `Option<T>` default arguments will no longer re-wrap `Some(T)` or expressions evaluating to `None`. [#3461](https://github.com/PyO3/pyo3/pull/3461)\n- Fix `IterNextOutput::Return` not returning a value on PyPy. [#3471](https://github.com/PyO3/pyo3/pull/3471)\n- Emit compile errors instead of ignoring macro invocations inside `#[pymethods]` blocks. [#3491](https://github.com/PyO3/pyo3/pull/3491)\n- Emit error on invalid arguments to `#[new]`, `#[classmethod]`, `#[staticmethod]`, and `#[classattr]`. [#3484](https://github.com/PyO3/pyo3/pull/3484)\n- Disable `PyMarshal_WriteObjectToString` from `PyMarshal_ReadObjectFromString` with the `abi3` feature. [#3490](https://github.com/PyO3/pyo3/pull/3490)\n- Fix FFI definitions for `_PyFrameEvalFunction` on Python 3.11 and up (it now receives a `_PyInterpreterFrame` opaque struct). [#3500](https://github.com/PyO3/pyo3/pull/3500)\n\n\n## [0.19.2] - 2023-08-01\n\n### Added\n\n- Add FFI definitions `PyState_AddModule`, `PyState_RemoveModule` and `PyState_FindModule` for PyPy 3.9 and up. [#3295](https://github.com/PyO3/pyo3/pull/3295)\n- Add FFI definitions `_PyObject_CallFunction_SizeT` and `_PyObject_CallMethod_SizeT`. [#3297](https://github.com/PyO3/pyo3/pull/3297)\n- Add a \"performance\" section to the guide collecting performance-related tricks and problems. [#3304](https://github.com/PyO3/pyo3/pull/3304)\n- Add `PyErr::Display` for all Python versions, and FFI symbol `PyErr_DisplayException` for Python 3.12. [#3334](https://github.com/PyO3/pyo3/pull/3334)\n- Add FFI definition `PyType_GetDict()` for Python 3.12. [#3339](https://github.com/PyO3/pyo3/pull/3339)\n- Add `PyAny::downcast_exact`. [#3346](https://github.com/PyO3/pyo3/pull/3346)\n- Add `PySlice::full()` to construct a full slice (`::`). [#3353](https://github.com/PyO3/pyo3/pull/3353)\n\n### Changed\n\n- Update `PyErr` for 3.12 betas to avoid deprecated ffi methods. [#3306](https://github.com/PyO3/pyo3/pull/3306)\n- Update FFI definitions of `object.h` for Python 3.12.0b4. [#3335](https://github.com/PyO3/pyo3/pull/3335)\n- Update `pyo3::ffi` struct definitions to be compatible with 3.12.0b4. [#3342](https://github.com/PyO3/pyo3/pull/3342)\n- Optimize conversion of `float` to `f64` (and `PyFloat::value`) on non-abi3 builds. [#3345](https://github.com/PyO3/pyo3/pull/3345)\n\n### Fixed\n\n- Fix timezone conversion bug for FixedOffset datetimes that were being incorrectly converted to and from UTC. [#3269](https://github.com/PyO3/pyo3/pull/3269)\n- Fix `SystemError` raised in `PyUnicodeDecodeError_Create` on PyPy 3.10. [#3297](https://github.com/PyO3/pyo3/pull/3297)\n- Correct FFI definition `Py_EnterRecursiveCall` to return `c_int` (was incorrectly returning `()`). [#3300](https://github.com/PyO3/pyo3/pull/3300)\n- Fix case where `PyErr::matches` and `PyErr::is_instance` returned results inconsistent with `PyErr::get_type`. [#3313](https://github.com/PyO3/pyo3/pull/3313)\n- Fix loss of panic message in `PanicException` when unwinding after the exception was \"normalized\". [#3326](https://github.com/PyO3/pyo3/pull/3326)\n- Fix `PyErr::from_value` and `PyErr::into_value` losing traceback on conversion. [#3328](https://github.com/PyO3/pyo3/pull/3328)\n- Fix reference counting of immortal objects on Python 3.12.0b4. [#3335](https://github.com/PyO3/pyo3/pull/3335)\n\n\n## [0.19.1] - 2023-07-03\n\n### Packaging\n\n- Extend range of supported versions of `hashbrown` optional dependency to include version 0.14 [#3258](https://github.com/PyO3/pyo3/pull/3258)\n- Extend range of supported versions of `indexmap` optional dependency to include version 2. [#3277](https://github.com/PyO3/pyo3/pull/3277)\n- Support PyPy 3.10. [#3289](https://github.com/PyO3/pyo3/pull/3289)\n\n### Added\n\n- Add `pyo3::types::PyFrozenSetBuilder` to allow building a `PyFrozenSet` item by item. [#3156](https://github.com/PyO3/pyo3/pull/3156)\n- Add support for converting to and from Python's `ipaddress.IPv4Address`/`ipaddress.IPv6Address` and `std::net::IpAddr`. [#3197](https://github.com/PyO3/pyo3/pull/3197)\n- Add support for `num-bigint` feature in combination with `abi3`. [#3198](https://github.com/PyO3/pyo3/pull/3198)\n- Add `PyErr_GetRaisedException()`, `PyErr_SetRaisedException()` to FFI definitions for Python 3.12 and later. [#3248](https://github.com/PyO3/pyo3/pull/3248)\n- Add `Python::with_pool` which is a safer but more limited alternative to `Python::new_pool`. [#3263](https://github.com/PyO3/pyo3/pull/3263)\n- Add `PyDict::get_item_with_error` on PyPy. [#3270](https://github.com/PyO3/pyo3/pull/3270)\n- Allow `#[new]` methods may to return `Py<Self>` in order to return existing instances. [#3287](https://github.com/PyO3/pyo3/pull/3287)\n\n### Fixed\n\n- Fix conversion of classes implementing `__complex__` to `Complex` when using `abi3` or PyPy. [#3185](https://github.com/PyO3/pyo3/pull/3185)\n- Stop suppressing unrelated exceptions in `PyAny::hasattr`. [#3271](https://github.com/PyO3/pyo3/pull/3271)\n- Fix memory leak when creating `PySet` or `PyFrozenSet` or returning types converted into these internally, e.g. `HashSet` or `BTreeSet`. [#3286](https://github.com/PyO3/pyo3/pull/3286)\n\n\n## [0.19.0] - 2023-05-31\n\n### Packaging\n\n- Correct dependency on syn to version 1.0.85 instead of the incorrect version 1.0.56. [#3152](https://github.com/PyO3/pyo3/pull/3152)\n\n### Added\n\n- Accept `text_signature` option (and automatically generate signature) for `#[new]` in `#[pymethods]`. [#2980](https://github.com/PyO3/pyo3/pull/2980)\n- Add support for converting to and from Python's `decimal.Decimal` and `rust_decimal::Decimal`. [#3016](https://github.com/PyO3/pyo3/pull/3016)\n- Add `#[pyo3(from_item_all)]` when deriving `FromPyObject` to specify `get_item` as getter for all fields. [#3120](https://github.com/PyO3/pyo3/pull/3120)\n- Add `pyo3::exceptions::PyBaseExceptionGroup` for Python 3.11, and corresponding FFI definition `PyExc_BaseExceptionGroup`. [#3141](https://github.com/PyO3/pyo3/pull/3141)\n- Accept `#[new]` with `#[classmethod]` to create a constructor which receives a (subtype's) class/`PyType` as its first argument. [#3157](https://github.com/PyO3/pyo3/pull/3157)\n- Add `PyClass::get` and `Py::get` for GIL-indepedent access to classes with `#[pyclass(frozen)]`. [#3158](https://github.com/PyO3/pyo3/pull/3158)\n- Add `PyAny::is_exact_instance` and `PyAny::is_exact_instance_of`. [#3161](https://github.com/PyO3/pyo3/pull/3161)\n\n### Changed\n\n- `PyAny::is_instance_of::<T>(obj)` is now equivalent to `T::is_type_of(obj)`, and now returns `bool` instead of `PyResult<bool>`. [#2881](https://github.com/PyO3/pyo3/pull/2881)\n- Deprecate `text_signature` option on `#[pyclass]` structs. [#2980](https://github.com/PyO3/pyo3/pull/2980)\n- No longer wrap `anyhow::Error`/`eyre::Report` containing a basic `PyErr` without a chain in a `PyRuntimeError`. [#3004](https://github.com/PyO3/pyo3/pull/3004)\n- - Change `#[getter]` and `#[setter]` to use a common call \"trampoline\" to slightly reduce generated code size and compile times. [#3029](https://github.com/PyO3/pyo3/pull/3029)\n- Improve default values for str, numbers and bool in automatically-generated `text_signature`. [#3050](https://github.com/PyO3/pyo3/pull/3050)\n- Improve default value for `None` in automatically-generated `text_signature`. [#3066](https://github.com/PyO3/pyo3/pull/3066)\n- Rename `PySequence::list` and `PySequence::tuple` to `PySequence::to_list` and `PySequence::to_tuple`. (The old names continue to exist as deprecated forms.) [#3111](https://github.com/PyO3/pyo3/pull/3111)\n- Extend the lifetime of the GIL token returned by `PyRef::py` and `PyRefMut::py` to match the underlying borrow. [#3131](https://github.com/PyO3/pyo3/pull/3131)\n- Safe access to the GIL, for example via `Python::with_gil`, is now locked inside of implementations of the `__traverse__` slot. [#3168](https://github.com/PyO3/pyo3/pull/3168)\n\n### Removed\n\n- Remove all functionality deprecated in PyO3 0.17, most prominently `Python::acquire_gil` is replaced by `Python::with_gil`. [#2981](https://github.com/PyO3/pyo3/pull/2981)\n\n### Fixed\n\n- Correct FFI definitions `PyGetSetDef`, `PyMemberDef`, `PyStructSequence_Field` and `PyStructSequence_Desc` to have `*const c_char` members for `name` and `doc` (not `*mut c_char`). [#3036](https://github.com/PyO3/pyo3/pull/3036)\n- Fix panic on `fmt::Display`, instead return `\"<unprintable object>\"` string and report error via `sys.unraisablehook()` [#3062](https://github.com/PyO3/pyo3/pull/3062)\n- Fix a compile error of \"temporary value dropped while borrowed\" when `#[pyfunction]`s take references into `#[pyclass]`es [#3142](https://github.com/PyO3/pyo3/pull/3142)\n- Fix crashes caused by PyO3 applying deferred reference count updates when entering a `__traverse__` implementation. [#3168](https://github.com/PyO3/pyo3/pull/3168)\n- Forbid running the `Drop` implementations of unsendable classes on other threads. [#3176](https://github.com/PyO3/pyo3/pull/3176)\n- Fix a compile error when `#[pymethods]` items come from somewhere else (for example, as a macro argument) and a custom receiver like `Py<Self>` is used. [#3178](https://github.com/PyO3/pyo3/pull/3178)\n\n\n## [0.18.3] - 2023-04-13\n\n### Added\n\n- Add `GILProtected<T>` to mediate concurrent access to a value using Python's global interpreter lock (GIL). [#2975](https://github.com/PyO3/pyo3/pull/2975)\n- Support `PyASCIIObject` / `PyUnicode` and associated methods on big-endian architectures. [#3015](https://github.com/PyO3/pyo3/pull/3015)\n- Add FFI definition `_PyDict_Contains_KnownHash()` for CPython 3.10 and up. [#3088](https://github.com/PyO3/pyo3/pull/3088)\n\n### Fixed\n\n- Fix compile error for `#[pymethods]` and `#[pyfunction]` called \"output\". [#3022](https://github.com/PyO3/pyo3/pull/3022)\n- Fix compile error in generated code for magic methods implemented as a `#[staticmethod]`. [#3055](https://github.com/PyO3/pyo3/pull/3055)\n- Fix `is_instance` for `PyDateTime` (would incorrectly check for a `PyDate`). [#3071](https://github.com/PyO3/pyo3/pull/3071)\n- Fix upstream deprecation of `PyUnicode_InternImmortal` since Python 3.10. [#3071](https://github.com/PyO3/pyo3/pull/3087)\n\n\n## [0.18.2] - 2023-03-24\n\n### Packaging\n\n- Disable default features of `chrono` to avoid depending on `time` v0.1.x. [#2939](https://github.com/PyO3/pyo3/pull/2939)\n\n### Added\n\n- Implement `IntoPy<PyObject>`, `ToPyObject` and `FromPyObject` for `Cow<[u8]>` to efficiently handle both `bytes` and `bytearray` objects. [#2899](https://github.com/PyO3/pyo3/pull/2899)\n- Implement `IntoPy<PyObject>`, `ToPyObject` and `FromPyObject` for `Cell<T>`. [#3014](https://github.com/PyO3/pyo3/pull/3014)\n- Add `PyList::to_tuple()`, as a convenient and efficient conversion from lists to tuples. [#3042](https://github.com/PyO3/pyo3/pull/3042)\n- Add `PyTuple::to_list()`, as a convenient and efficient conversion from tuples to lists. [#3044](https://github.com/PyO3/pyo3/pull/3044)\n\n### Changed\n\n- Optimize `PySequence` conversion for `list` and `tuple` inputs. [#2944](https://github.com/PyO3/pyo3/pull/2944)\n- Improve exception raised when creating `#[pyclass]` type object fails during module import. [#2947](https://github.com/PyO3/pyo3/pull/2947)\n- Optimize `PyMapping` conversion for `dict` inputs. [#2954](https://github.com/PyO3/pyo3/pull/2954)\n- Allow `create_exception!` to take a `dotted.module` to place the exception in a submodule. [#2979](https://github.com/PyO3/pyo3/pull/2979)\n\n### Fixed\n\n- Fix a reference counting race condition affecting `PyObject`s cloned in `allow_threads` blocks. [#2952](https://github.com/PyO3/pyo3/pull/2952)\n- Fix `clippy::redundant_closure` lint on default arguments in `#[pyo3(signature = (...))]` annotations. [#2990](https://github.com/PyO3/pyo3/pull/2990)\n- Fix `non_snake_case` lint on generated code in `#[pyfunction]` macro. [#2993](https://github.com/PyO3/pyo3/pull/2993)\n- Fix some FFI definitions for the upcoming PyPy 3.10 release. [#3031](https://github.com/PyO3/pyo3/pull/3031)\n\n\n## [0.18.1] - 2023-02-07\n\n### Added\n\n- Add `PyErr::write_unraisable()`. [#2889](https://github.com/PyO3/pyo3/pull/2889)\n- Add `Python::Ellipsis()` and `PyAny::is_ellipsis()` methods. [#2911](https://github.com/PyO3/pyo3/pull/2911)\n- Add `PyDict::update()` and `PyDict::update_if_missing()` methods. [#2912](https://github.com/PyO3/pyo3/pull/2912)\n\n### Changed\n\n- FFI definition `PyIter_Check` on CPython 3.7 is now implemented as `hasattr(type(obj), \"__next__\")`, which works correctly on all platforms and adds support for `abi3`. [#2914](https://github.com/PyO3/pyo3/pull/2914)\n- Warn about unknown config keys in `PYO3_CONFIG_FILE` instead of denying. [#2926](https://github.com/PyO3/pyo3/pull/2926)\n\n### Fixed\n\n- Send errors returned by `__releasebuffer__` to `sys.unraisablehook` rather than causing `SystemError`. [#2886](https://github.com/PyO3/pyo3/pull/2886)\n- Fix downcast to `PyIterator` succeeding for Python classes which did not implement `__next__`. [#2914](https://github.com/PyO3/pyo3/pull/2914)\n- Fix segfault in `__traverse__` when visiting `None` fields of `Option<T: AsPyPointer>`. [#2921](https://github.com/PyO3/pyo3/pull/2921)\n- Fix `#[pymethods(crate = \"...\")]` option being ignored. [#2923](https://github.com/PyO3/pyo3/pull/2923)\n- Link against `pythonXY_d.dll` for debug Python builds on Windows. [#2937](https://github.com/PyO3/pyo3/pull/2937)\n\n\n## [0.18.0] - 2023-01-17\n\n### Packaging\n\n- Relax `indexmap` optional depecency to allow `>= 1.6, < 2`. [#2849](https://github.com/PyO3/pyo3/pull/2849)\n- Relax `hashbrown` optional dependency to allow `>= 0.9, < 0.14`. [#2875](https://github.com/PyO3/pyo3/pull/2875)\n- Update `memoffset` dependency to 0.8. [#2875](https://github.com/PyO3/pyo3/pull/2875)\n\n### Added\n\n- Add `GILOnceCell::get_or_try_init` for fallible `GILOnceCell` initialization. [#2398](https://github.com/PyO3/pyo3/pull/2398)\n- Add experimental feature `experimental-inspect` with `type_input()` and `type_output()` helpers to get the Python type of any Python-compatible object. [#2490](https://github.com/PyO3/pyo3/pull/2490) [#2882](https://github.com/PyO3/pyo3/pull/2882)\n- The `#[pyclass]` macro can now take `get_all` and `set_all` to create getters and setters for every field. [#2692](https://github.com/PyO3/pyo3/pull/2692)\n- Add `#[pyo3(signature = (...))]` option for `#[pyfunction]` and `#[pymethods]`. [#2702](https://github.com/PyO3/pyo3/pull/2702)\n- `pyo3-build-config`: rebuild when `PYO3_ENVIRONMENT_SIGNATURE` environment variable value changes. [#2727](https://github.com/PyO3/pyo3/pull/2727)\n- Add conversions between non-zero int types in `std::num` and Python `int`. [#2730](https://github.com/PyO3/pyo3/pull/2730)\n- Add `Py::downcast()` as a companion to `PyAny::downcast()`, as well as `downcast_unchecked()` for both types. [#2734](https://github.com/PyO3/pyo3/pull/2734)\n- Add types for all built-in `Warning` classes as well as `PyErr::warn_explicit`. [#2742](https://github.com/PyO3/pyo3/pull/2742)\n- Add `abi3-py311` feature. [#2776](https://github.com/PyO3/pyo3/pull/2776)\n- Add FFI definition `_PyErr_ChainExceptions()` for CPython. [#2788](https://github.com/PyO3/pyo3/pull/2788)\n- Add FFI definitions `PyVectorcall_NARGS` and `PY_VECTORCALL_ARGUMENTS_OFFSET` for PyPy 3.8 and up. [#2811](https://github.com/PyO3/pyo3/pull/2811)\n- Add `PyList::get_item_unchecked` for PyPy. [#2827](https://github.com/PyO3/pyo3/pull/2827)\n\n### Changed\n\n- PyO3's macros now emit a much nicer error message if function return values don't implement the required trait(s). [#2664](https://github.com/PyO3/pyo3/pull/2664)\n- Use a TypeError, rather than a ValueError, when refusing to treat a str as a Vec. [#2685](https://github.com/PyO3/pyo3/pull/2685)\n- Change `PyCFunction::new_closure` to take `name` and `doc` arguments. [#2686](https://github.com/PyO3/pyo3/pull/2686)\n- `PyType::is_subclass`, `PyErr::is_instance` and `PyAny::is_instance` now take `&PyAny` instead of `&PyType` arguments, so that they work with objects that pretend to be types using `__subclasscheck__` and `__instancecheck__`. [#2695](https://github.com/PyO3/pyo3/pull/2695)\n- Deprecate `#[args]` attribute and passing \"args\" specification directly to `#[pyfunction]` in favor of the new `#[pyo3(signature = (...))]` option. [#2702](https://github.com/PyO3/pyo3/pull/2702)\n- Deprecate required arguments after `Option<T>` arguments to `#[pyfunction]` and `#[pymethods]` without also using `#[pyo3(signature)]` to specify whether the arguments should be required or have defaults. [#2703](https://github.com/PyO3/pyo3/pull/2703)\n- Change `#[pyfunction]` and `#[pymethods]` to use a common call \"trampoline\" to slightly reduce generated code size and compile times. [#2705](https://github.com/PyO3/pyo3/pull/2705)\n- `PyAny::cast_as()` and `Py::cast_as()` are now deprecated in favor of `PyAny::downcast()` and the new `Py::downcast()`. [#2734](https://github.com/PyO3/pyo3/pull/2734)\n- Relax lifetime bounds on `PyAny::downcast()`. [#2734](https://github.com/PyO3/pyo3/pull/2734)\n- Automatically generate `__text_signature__` for all Python functions created using `#[pyfunction]` and `#[pymethods]`. [#2784](https://github.com/PyO3/pyo3/pull/2784)\n- Accept any iterator in `PySet::new` and `PyFrozenSet::new`. [#2795](https://github.com/PyO3/pyo3/pull/2795)\n- Mixing `#[cfg(...)]` and `#[pyo3(...)]` attributes on `#[pyclass]` struct fields will now work. [#2796](https://github.com/PyO3/pyo3/pull/2796)\n- Re-enable `PyFunction` on when building for abi3 or PyPy. [#2838](https://github.com/PyO3/pyo3/pull/2838)\n- Improve `derive(FromPyObject)` to use `intern!` when applicable for `#[pyo3(item)]`. [#2879](https://github.com/PyO3/pyo3/pull/2879)\n\n### Removed\n\n- Remove the deprecated `pyproto` feature, `#[pyproto]` macro, and all accompanying APIs. [#2587](https://github.com/PyO3/pyo3/pull/2587)\n- Remove all functionality deprecated in PyO3 0.16. [#2843](https://github.com/PyO3/pyo3/pull/2843)\n\n### Fixed\n\n- Disable `PyModule::filename` on PyPy. [#2715](https://github.com/PyO3/pyo3/pull/2715)\n- `PyCodeObject` is now once again defined with fields on Python 3.7. [#2726](https://github.com/PyO3/pyo3/pull/2726)\n- Raise a `TypeError` if `#[new]` pymethods with no arguments receive arguments when called from Python. [#2749](https://github.com/PyO3/pyo3/pull/2749)\n- Use the `NOARGS` argument calling convention for methods that have a single `py: Python` argument (as a performance optimization). [#2760](https://github.com/PyO3/pyo3/pull/2760)\n- Fix truncation of `isize` values to `c_long` in `PySlice::new`. [#2769](https://github.com/PyO3/pyo3/pull/2769)\n- Fix soundness issue with FFI definition `PyUnicodeDecodeError_Create` on PyPy leading to indeterminate behavior (typically a `TypeError`). [#2772](https://github.com/PyO3/pyo3/pull/2772)\n- Allow functions taking `**kwargs` to accept keyword arguments which share a name with a positional-only argument (as permitted by PEP 570). [#2800](https://github.com/PyO3/pyo3/pull/2800)\n- Fix unresolved symbol for `PyObject_Vectorcall` on PyPy 3.9 and up. [#2811](https://github.com/PyO3/pyo3/pull/2811)\n- Fix memory leak in `PyCFunction::new_closure`. [#2842](https://github.com/PyO3/pyo3/pull/2842)\n\n\n## [0.17.3] - 2022-11-01\n\n### Packaging\n\n- Support Python 3.11. (Previous versions of PyO3 0.17 have been tested against Python 3.11 release candidates and are expected to be compatible, this is the first version tested against Python 3.11.0.) [#2708](https://github.com/PyO3/pyo3/pull/2708)\n\n### Added\n\n- Implemented `ExactSizeIterator` for `PyListIterator`, `PyDictIterator`, `PySetIterator` and `PyFrozenSetIterator`. [#2676](https://github.com/PyO3/pyo3/pull/2676)\n\n### Fixed\n\n- Fix regression of `impl FromPyObject for [T; N]` no longer accepting types passing `PySequence_Check`, e.g. NumPy arrays, since version 0.17.0. This the same fix that was applied `impl FromPyObject for Vec<T>` in version 0.17.1 extended to fixed-size arrays. [#2675](https://github.com/PyO3/pyo3/pull/2675)\n- Fix UB in `FunctionDescription::extract_arguments_fastcall` due to creating slices from a null pointer. [#2687](https://github.com/PyO3/pyo3/pull/2687)\n\n\n## [0.17.2] - 2022-10-04\n\n### Packaging\n\n- Added optional `chrono` feature to convert `chrono` types into types in the `datetime` module. [#2612](https://github.com/PyO3/pyo3/pull/2612)\n\n### Added\n\n- Add support for `num-bigint` feature on `PyPy`. [#2626](https://github.com/PyO3/pyo3/pull/2626)\n\n### Fixed\n\n- Correctly implement `__richcmp__` for enums, fixing `__ne__` returning always returning `True`. [#2622](https://github.com/PyO3/pyo3/pull/2622)\n- Fix compile error since 0.17.0 with `Option<&SomePyClass>` argument with a default. [#2630](https://github.com/PyO3/pyo3/pull/2630)\n- Fix regression of `impl FromPyObject for Vec<T>` no longer accepting types passing `PySequence_Check`, e.g. NumPy arrays, since 0.17.0. [#2631](https://github.com/PyO3/pyo3/pull/2631)\n\n## [0.17.1] - 2022-08-28\n\n### Fixed\n\n- Fix visibility of `PyDictItems`, `PyDictKeys`, and `PyDictValues` types added in PyO3 0.17.0.\n- Fix compile failure when using `#[pyo3(from_py_with = \"...\")]` attribute on an argument of type `Option<T>`. [#2592](https://github.com/PyO3/pyo3/pull/2592)\n- Fix clippy `redundant-closure` lint on `**kwargs` arguments for `#[pyfunction]` and `#[pymethods]`. [#2595](https://github.com/PyO3/pyo3/pull/2595)\n\n## [0.17.0] - 2022-08-23\n\n### Packaging\n\n- Update inventory dependency to `0.3` (the `multiple-pymethods` feature now requires Rust 1.62 for correctness). [#2492](https://github.com/PyO3/pyo3/pull/2492)\n\n### Added\n\n- Add `timezone_utc`. [#1588](https://github.com/PyO3/pyo3/pull/1588)\n- Implement `ToPyObject` for `[T; N]`. [#2313](https://github.com/PyO3/pyo3/pull/2313)\n- Add `PyDictKeys`, `PyDictValues` and `PyDictItems` Rust types. [#2358](https://github.com/PyO3/pyo3/pull/2358)\n- Add `append_to_inittab`. [#2377](https://github.com/PyO3/pyo3/pull/2377)\n- Add FFI definition `PyFrame_GetCode`. [#2406](https://github.com/PyO3/pyo3/pull/2406)\n- Add `PyCode` and `PyFrame` high level objects. [#2408](https://github.com/PyO3/pyo3/pull/2408)\n- Add FFI definitions `Py_fstring_input`, `sendfunc`, and `_PyErr_StackItem`. [#2423](https://github.com/PyO3/pyo3/pull/2423)\n- Add `PyDateTime::new_with_fold`, `PyTime::new_with_fold`, `PyTime::get_fold`, and `PyDateTime::get_fold` for PyPy. [#2428](https://github.com/PyO3/pyo3/pull/2428)\n- Add `#[pyclass(frozen)]`. [#2448](https://github.com/PyO3/pyo3/pull/2448)\n- Accept `#[pyo3(name)]` on enum variants. [#2457](https://github.com/PyO3/pyo3/pull/2457)\n- Add `CompareOp::matches` to implement `__richcmp__` as the result of a Rust `std::cmp::Ordering` comparison. [#2460](https://github.com/PyO3/pyo3/pull/2460)\n- Add `PySuper` type. [#2486](https://github.com/PyO3/pyo3/pull/2486)\n- Support PyPy on Windows with the `generate-import-lib` feature. [#2506](https://github.com/PyO3/pyo3/pull/2506)\n- Add FFI definitions `Py_EnterRecursiveCall` and `Py_LeaveRecursiveCall`. [#2511](https://github.com/PyO3/pyo3/pull/2511)\n- Add `PyDict::get_item_with_error`. [#2536](https://github.com/PyO3/pyo3/pull/2536)\n- Add `#[pyclass(sequence)]` option. [#2567](https://github.com/PyO3/pyo3/pull/2567)\n\n### Changed\n\n- Change datetime constructors taking a `tzinfo` to take `Option<&PyTzInfo>` instead of `Option<&PyObject>`: `PyDateTime::new`, `PyDateTime::new_with_fold`, `PyTime::new`, and `PyTime::new_with_fold`. [#1588](https://github.com/PyO3/pyo3/pull/1588)\n- Move `PyTypeObject::type_object` method to the `PyTypeInfo` trait, and deprecate the `PyTypeObject` trait. [#2287](https://github.com/PyO3/pyo3/pull/2287)\n- Methods of `Py` and `PyAny` now accept `impl IntoPy<Py<PyString>>` rather than just `&str` to allow use of the `intern!` macro. [#2312](https://github.com/PyO3/pyo3/pull/2312)\n- Change the deprecated `pyproto` feature to be opt-in instead of opt-out. [#2322](https://github.com/PyO3/pyo3/pull/2322)\n- Emit better error messages when `#[pyfunction]` return types do not implement `IntoPy`. [#2326](https://github.com/PyO3/pyo3/pull/2326)\n- Require `T: IntoPy` for `impl<T, const N: usize> IntoPy<PyObject> for [T; N]` instead of `T: ToPyObject`. [#2326](https://github.com/PyO3/pyo3/pull/2326)\n- Deprecate the `ToBorrowedObject` trait. [#2333](https://github.com/PyO3/pyo3/pull/2333)\n- Iterators over `PySet` and `PyDict` will now panic if the underlying collection is mutated during the iteration. [#2380](https://github.com/PyO3/pyo3/pull/2380)\n- Iterators over `PySet` and `PyDict` will now panic if the underlying collection is mutated during the iteration. [#2380](https://github.com/PyO3/pyo3/pull/2380)\n- Allow `#[classattr]` methods to be fallible. [#2385](https://github.com/PyO3/pyo3/pull/2385)\n- Prevent multiple `#[pymethods]` with the same name for a single `#[pyclass]`. [#2399](https://github.com/PyO3/pyo3/pull/2399)\n- Fixup `lib_name` when using `PYO3_CONFIG_FILE`. [#2404](https://github.com/PyO3/pyo3/pull/2404)\n- Add a message to the `ValueError` raised by the `#[derive(FromPyObject)]` implementation for a tuple struct. [#2414](https://github.com/PyO3/pyo3/pull/2414)\n- Allow `#[classattr]` methods to take `Python` argument. [#2456](https://github.com/PyO3/pyo3/pull/2456)\n- Rework `PyCapsule` type to resolve soundness issues: [#2485](https://github.com/PyO3/pyo3/pull/2485)\n  - `PyCapsule::new` and `PyCapsule::new_with_destructor` now take `name: Option<CString>` instead of `&CStr`.\n  - The destructor `F` in `PyCapsule::new_with_destructor` must now be `Send`.\n  - `PyCapsule::get_context` deprecated in favor of `PyCapsule::context` which doesn't take a `py: Python<'_>` argument.\n  - `PyCapsule::set_context` no longer takes a `py: Python<'_>` argument.\n  - `PyCapsule::name` now returns `PyResult<Option<&CStr>>` instead of `&CStr`.\n- `FromPyObject::extract` for `Vec<T>` no longer accepts Python `str` inputs. [#2500](https://github.com/PyO3/pyo3/pull/2500)\n- Ensure each `#[pymodule]` is only initialized once. [#2523](https://github.com/PyO3/pyo3/pull/2523)\n- `pyo3_build_config::add_extension_module_link_args` now also emits linker arguments for `wasm32-unknown-emscripten`. [#2538](https://github.com/PyO3/pyo3/pull/2538)\n- Type checks for `PySequence` and `PyMapping` now require inputs to inherit from (or register with) `collections.abc.Sequence` and `collections.abc.Mapping` respectively. [#2477](https://github.com/PyO3/pyo3/pull/2477)\n- Disable `PyFunction` on when building for abi3 or PyPy. [#2542](https://github.com/PyO3/pyo3/pull/2542)\n- Deprecate `Python::acquire_gil`. [#2549](https://github.com/PyO3/pyo3/pull/2549)\n\n### Removed\n\n- Remove all functionality deprecated in PyO3 0.15. [#2283](https://github.com/PyO3/pyo3/pull/2283)\n- Make the `Dict`, `WeakRef` and `BaseNativeType` members of the `PyClass` private implementation details. [#2572](https://github.com/PyO3/pyo3/pull/2572)\n\n### Fixed\n\n- Enable incorrectly disabled FFI definition `PyThreadState_DeleteCurrent`. [#2357](https://github.com/PyO3/pyo3/pull/2357)\n- Fix `wrap_pymodule` interactions with name resolution rules: it no longer \"sees through\" glob imports of `use submodule::*` when `submodule::submodule` is a `#[pymodule]`. [#2363](https://github.com/PyO3/pyo3/pull/2363)\n- Correct FFI definition `PyEval_EvalCodeEx` to take `*const *mut PyObject` array arguments instead of `*mut *mut PyObject`. [#2368](https://github.com/PyO3/pyo3/pull/2368)\n- Fix \"raw-ident\" structs (e.g. `#[pyclass] struct r#RawName`) incorrectly having `r#` at the start of the class name created in Python. [#2395](https://github.com/PyO3/pyo3/pull/2395)\n- Correct FFI definition `Py_tracefunc` to be `unsafe extern \"C\" fn` (was previously safe). [#2407](https://github.com/PyO3/pyo3/pull/2407)\n- Fix compile failure with `#[pyo3(from_py_with = \"...\")]` annotations on a field in a `#[derive(FromPyObject)]` struct. [#2414](https://github.com/PyO3/pyo3/pull/2414)\n- Fix FFI definitions `_PyDateTime_BaseTime` and `_PyDateTime_BaseDateTime` lacking leading underscores in their names. [#2421](https://github.com/PyO3/pyo3/pull/2421)\n- Remove FFI definition `PyArena` on Python 3.10 and up. [#2421](https://github.com/PyO3/pyo3/pull/2421)\n- Fix FFI definition `PyCompilerFlags` missing member `cf_feature_version` on Python 3.8 and up. [#2423](https://github.com/PyO3/pyo3/pull/2423)\n- Fix FFI definition `PyAsyncMethods` missing member `am_send` on Python 3.10 and up. [#2423](https://github.com/PyO3/pyo3/pull/2423)\n- Fix FFI definition `PyGenObject` having multiple incorrect members on various Python versions. [#2423](https://github.com/PyO3/pyo3/pull/2423)\n- Fix FFI definition `PySyntaxErrorObject` missing members `end_lineno` and `end_offset` on Python 3.10 and up. [#2423](https://github.com/PyO3/pyo3/pull/2423)\n- Fix FFI definition `PyHeapTypeObject` missing member `ht_module` on Python 3.9 and up. [#2423](https://github.com/PyO3/pyo3/pull/2423)\n- Fix FFI definition `PyFrameObject` having multiple incorrect members on various Python versions. [#2424](https://github.com/PyO3/pyo3/pull/2424) [#2434](https://github.com/PyO3/pyo3/pull/2434)\n- Fix FFI definition `PyTypeObject` missing deprecated field `tp_print` on Python 3.8. [#2428](https://github.com/PyO3/pyo3/pull/2428)\n- Fix FFI definitions `PyDateTime_CAPI`. `PyDateTime_Date`, `PyASCIIObject`, `PyBaseExceptionObject`, `PyListObject`, and `PyTypeObject` on PyPy. [#2428](https://github.com/PyO3/pyo3/pull/2428)\n- Fix FFI definition `_inittab` field `initfunc` typo'd as `initfun`. [#2431](https://github.com/PyO3/pyo3/pull/2431)\n- Fix FFI definitions `_PyDateTime_BaseTime` and `_PyDateTime_BaseDateTime` incorrectly having `fold` member. [#2432](https://github.com/PyO3/pyo3/pull/2432)\n- Fix FFI definitions `PyTypeObject`. `PyHeapTypeObject`, and `PyCFunctionObject` having incorrect members on PyPy 3.9. [#2433](https://github.com/PyO3/pyo3/pull/2433)\n- Fix FFI definition `PyGetSetDef` to have `*const c_char` for `doc` member (not `*mut c_char`). [#2439](https://github.com/PyO3/pyo3/pull/2439)\n- Fix `#[pyo3(from_py_with = \"...\")]` being ignored for 1-element tuple structs and transparent structs. [#2440](https://github.com/PyO3/pyo3/pull/2440)\n- Use `memoffset` to avoid UB when computing `PyCell` layout. [#2450](https://github.com/PyO3/pyo3/pull/2450)\n- Fix incorrect enum names being returned by the generated `repr` for enums renamed by `#[pyclass(name = \"...\")]` [#2457](https://github.com/PyO3/pyo3/pull/2457)\n- Fix `PyObject_CallNoArgs` incorrectly being available when building for abi3 on Python 3.9. [#2476](https://github.com/PyO3/pyo3/pull/2476)\n- Fix several clippy warnings generated by `#[pyfunction]` arguments. [#2503](https://github.com/PyO3/pyo3/pull/2503)\n\n## [0.16.6] - 2022-08-23\n\n### Changed\n\n- Fix soundness issues with `PyCapsule` type with select workarounds. Users are encourage to upgrade to PyO3 0.17 at their earliest convenience which contains API breakages which fix the issues in a long-term fashion. [#2522](https://github.com/PyO3/pyo3/pull/2522)\n  - `PyCapsule::new` and `PyCapsule::new_with_destructor` now take ownership of a copy of the `name` to resolve a possible use-after-free.\n  - `PyCapsule::name` now returns an empty `CStr` instead of dereferencing a null pointer if the capsule has no name.\n  - The destructor `F` in `PyCapsule::new_with_destructor` will never be called if the capsule is deleted from a thread other than the one which the capsule was created in (a warning will be emitted).\n- Panics during drop of panic payload caught by PyO3 will now abort. [#2544](https://github.com/PyO3/pyo3/pull/2544)\n\n## [0.16.5] - 2022-05-15\n\n### Added\n\n- Add an experimental `generate-import-lib` feature to support auto-generating non-abi3 python import libraries for Windows targets. [#2364](https://github.com/PyO3/pyo3/pull/2364)\n- Add FFI definition `Py_ExitStatusException`. [#2374](https://github.com/PyO3/pyo3/pull/2374)\n\n### Changed\n\n- Deprecate experimental `generate-abi3-import-lib` feature in favor of the new `generate-import-lib` feature. [#2364](https://github.com/PyO3/pyo3/pull/2364)\n\n### Fixed\n\n- Added missing `warn_default_encoding` field to `PyConfig` on 3.10+. The previously missing field could result in incorrect behavior or crashes. [#2370](https://github.com/PyO3/pyo3/pull/2370)\n- Fixed order of `pathconfig_warnings` and `program_name` fields of `PyConfig` on 3.10+. Previously, the order of the fields was swapped and this could lead to incorrect behavior or crashes. [#2370](https://github.com/PyO3/pyo3/pull/2370)\n\n## [0.16.4] - 2022-04-14\n\n### Added\n\n- Add `PyTzInfoAccess` trait for safe access to time zone information. [#2263](https://github.com/PyO3/pyo3/pull/2263)\n- Add an experimental `generate-abi3-import-lib` feature to auto-generate `python3.dll` import libraries for Windows. [#2282](https://github.com/PyO3/pyo3/pull/2282)\n- Add FFI definitions for `PyDateTime_BaseTime` and `PyDateTime_BaseDateTime`. [#2294](https://github.com/PyO3/pyo3/pull/2294)\n\n### Changed\n\n- Improved performance of failing calls to `FromPyObject::extract` which is common when functions accept multiple distinct types. [#2279](https://github.com/PyO3/pyo3/pull/2279)\n- Default to \"m\" ABI tag when choosing `libpython` link name for CPython 3.7 on Unix. [#2288](https://github.com/PyO3/pyo3/pull/2288)\n- Allow to compile \"abi3\" extensions without a working build host Python interpreter. [#2293](https://github.com/PyO3/pyo3/pull/2293)\n\n### Fixed\n\n- Crates depending on PyO3 can collect code coverage via LLVM instrumentation using stable Rust. [#2286](https://github.com/PyO3/pyo3/pull/2286)\n- Fix segfault when calling FFI methods `PyDateTime_DATE_GET_TZINFO` or `PyDateTime_TIME_GET_TZINFO` on `datetime` or `time` without a tzinfo. [#2289](https://github.com/PyO3/pyo3/pull/2289)\n- Fix directory names starting with the letter `n` breaking serialization of the interpreter configuration on Windows since PyO3 0.16.3. [#2299](https://github.com/PyO3/pyo3/pull/2299)\n\n## [0.16.3] - 2022-04-05\n\n### Packaging\n\n- Extend `parking_lot` dependency supported versions to include 0.12. [#2239](https://github.com/PyO3/pyo3/pull/2239)\n\n### Added\n\n- Add methods to `pyo3_build_config::InterpreterConfig` to run Python scripts using the configured executable. [#2092](https://github.com/PyO3/pyo3/pull/2092)\n- Add `as_bytes` method to `Py<PyBytes>`. [#2235](https://github.com/PyO3/pyo3/pull/2235)\n- Add FFI definitions for `PyType_FromModuleAndSpec`, `PyType_GetModule`, `PyType_GetModuleState` and `PyModule_AddType`. [#2250](https://github.com/PyO3/pyo3/pull/2250)\n- Add `pyo3_build_config::cross_compiling_from_to` as a helper to detect when PyO3 is cross-compiling. [#2253](https://github.com/PyO3/pyo3/pull/2253)\n- Add `#[pyclass(mapping)]` option to leave sequence slots empty in container implementations. [#2265](https://github.com/PyO3/pyo3/pull/2265)\n- Add `PyString::intern` to enable usage of the Python's built-in string interning. [#2268](https://github.com/PyO3/pyo3/pull/2268)\n- Add `intern!` macro which can be used to amortize the cost of creating Python strings by storing them inside a `GILOnceCell`. [#2269](https://github.com/PyO3/pyo3/pull/2269)\n- Add `PYO3_CROSS_PYTHON_IMPLEMENTATION` environment variable for selecting the default cross Python implementation. [#2272](https://github.com/PyO3/pyo3/pull/2272)\n\n### Changed\n\n- Allow `#[pyo3(crate = \"...\", text_signature = \"...\")]` options to be used directly in `#[pyclass(crate = \"...\", text_signature = \"...\")]`. [#2234](https://github.com/PyO3/pyo3/pull/2234)\n- Make `PYO3_CROSS_LIB_DIR` environment variable optional when cross compiling. [#2241](https://github.com/PyO3/pyo3/pull/2241)\n- Mark `METH_FASTCALL` calling convention as limited API on Python 3.10. [#2250](https://github.com/PyO3/pyo3/pull/2250)\n- Deprecate `pyo3_build_config::cross_compiling` in favor of `pyo3_build_config::cross_compiling_from_to`. [#2253](https://github.com/PyO3/pyo3/pull/2253)\n\n### Fixed\n\n- Fix `abi3-py310` feature: use Python 3.10 ABI when available instead of silently falling back to the 3.9 ABI. [#2242](https://github.com/PyO3/pyo3/pull/2242)\n- Use shared linking mode when cross compiling against a [Framework bundle](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/FrameworkAnatomy.html) for macOS. [#2233](https://github.com/PyO3/pyo3/pull/2233)\n- Fix panic during compilation when `PYO3_CROSS_LIB_DIR` is set for some host/target combinations. [#2232](https://github.com/PyO3/pyo3/pull/2232)\n- Correct dependency version for `syn` to require minimal patch version 1.0.56. [#2240](https://github.com/PyO3/pyo3/pull/2240)\n\n## [0.16.2] - 2022-03-15\n\n### Packaging\n\n- Warn when modules are imported on PyPy 3.7 versions older than PyPy 7.3.8, as they are known to have binary compatibility issues. [#2217](https://github.com/PyO3/pyo3/pull/2217)\n- Ensure build script of `pyo3-ffi` runs before that of `pyo3` to fix cross compilation. [#2224](https://github.com/PyO3/pyo3/pull/2224)\n\n## [0.16.1] - 2022-03-05\n\n### Packaging\n\n- Extend `hashbrown` optional dependency supported versions to include 0.12. [#2197](https://github.com/PyO3/pyo3/pull/2197)\n\n### Fixed\n\n- Fix incorrect platform detection for Windows in `pyo3-build-config`. [#2198](https://github.com/PyO3/pyo3/pull/2198)\n- Fix regression from 0.16 preventing cross compiling to aarch64 macOS. [#2201](https://github.com/PyO3/pyo3/pull/2201)\n\n## [0.16.0] - 2022-02-27\n\n### Packaging\n\n- Update MSRV to Rust 1.48. [#2004](https://github.com/PyO3/pyo3/pull/2004)\n- Update `indoc` optional dependency to 1.0. [#2004](https://github.com/PyO3/pyo3/pull/2004)\n- Drop support for Python 3.6, remove `abi3-py36` feature. [#2006](https://github.com/PyO3/pyo3/pull/2006)\n- `pyo3-build-config` no longer enables the `resolve-config` feature by default. [#2008](https://github.com/PyO3/pyo3/pull/2008)\n- Update `inventory` optional dependency to 0.2. [#2019](https://github.com/PyO3/pyo3/pull/2019)\n- Drop `paste` dependency. [#2081](https://github.com/PyO3/pyo3/pull/2081)\n- The bindings found in `pyo3::ffi` are now a re-export of a separate `pyo3-ffi` crate. [#2126](https://github.com/PyO3/pyo3/pull/2126)\n- Support PyPy 3.9. [#2143](https://github.com/PyO3/pyo3/pull/2143)\n\n### Added\n\n- Add `PyCapsule` type exposing the [Capsule API](https://docs.python.org/3/c-api/capsule.html#capsules). [#1980](https://github.com/PyO3/pyo3/pull/1980)\n- Add `pyo3_build_config::Sysconfigdata` and supporting APIs. [#1996](https://github.com/PyO3/pyo3/pull/1996)\n- Add `Py::setattr` method. [#2009](https://github.com/PyO3/pyo3/pull/2009)\n- Add `#[pyo3(crate = \"some::path\")]` option to all attribute macros (except the deprecated `#[pyproto]`). [#2022](https://github.com/PyO3/pyo3/pull/2022)\n- Enable `create_exception!` macro to take an optional docstring. [#2027](https://github.com/PyO3/pyo3/pull/2027)\n- Enable `#[pyclass]` for fieldless (aka C-like) enums. [#2034](https://github.com/PyO3/pyo3/pull/2034)\n- Add buffer magic methods `__getbuffer__` and `__releasebuffer__` to `#[pymethods]`. [#2067](https://github.com/PyO3/pyo3/pull/2067)\n- Add support for paths in `wrap_pyfunction` and `wrap_pymodule`. [#2081](https://github.com/PyO3/pyo3/pull/2081)\n- Enable `wrap_pyfunction!` to wrap a `#[pyfunction]` implemented in a different Rust module or crate. [#2091](https://github.com/PyO3/pyo3/pull/2091)\n- Add `PyAny::contains` method (`in` operator for `PyAny`). [#2115](https://github.com/PyO3/pyo3/pull/2115)\n- Add `PyMapping::contains` method (`in` operator for `PyMapping`). [#2133](https://github.com/PyO3/pyo3/pull/2133)\n- Add garbage collection magic magic methods `__traverse__` and `__clear__` to `#[pymethods]`. [#2159](https://github.com/PyO3/pyo3/pull/2159)\n- Add support for `from_py_with` on struct tuples and enums to override the default from-Python conversion. [#2181](https://github.com/PyO3/pyo3/pull/2181)\n- Add `eq`, `ne`, `lt`, `le`, `gt`, `ge` methods to `PyAny` that wrap `rich_compare`. [#2175](https://github.com/PyO3/pyo3/pull/2175)\n- Add `Py::is` and `PyAny::is` methods to check for object identity. [#2183](https://github.com/PyO3/pyo3/pull/2183)\n- Add support for the `__getattribute__` magic method. [#2187](https://github.com/PyO3/pyo3/pull/2187)\n\n### Changed\n\n- `PyType::is_subclass`, `PyErr::is_instance` and `PyAny::is_instance` now operate run-time type object instead of a type known at compile-time. The old behavior is still available as `PyType::is_subclass_of`, `PyErr::is_instance_of` and `PyAny::is_instance_of`.  [#1985](https://github.com/PyO3/pyo3/pull/1985)\n- Rename some methods on `PyErr` (the old names are just marked deprecated for now): [#2026](https://github.com/PyO3/pyo3/pull/2026)\n  - `pytype` -> `get_type`\n  - `pvalue` -> `value` (and deprecate equivalent `instance`)\n  - `ptraceback` -> `traceback`\n  - `from_instance` -> `from_value`\n  - `into_instance` -> `into_value`\n- `PyErr::new_type` now takes an optional docstring and now returns `PyResult<Py<PyType>>` rather than a `ffi::PyTypeObject` pointer. [#2027](https://github.com/PyO3/pyo3/pull/2027)\n- Deprecate `PyType::is_instance`; it is inconsistent with other `is_instance` methods in PyO3. Instead of `typ.is_instance(obj)`, use `obj.is_instance(typ)`. [#2031](https://github.com/PyO3/pyo3/pull/2031)\n- `__getitem__`, `__setitem__` and `__delitem__` in `#[pymethods]` now implement both a Python mapping and sequence by default. [#2065](https://github.com/PyO3/pyo3/pull/2065)\n- Improve performance and error messages for `#[derive(FromPyObject)]` for enums. [#2068](https://github.com/PyO3/pyo3/pull/2068)\n- Reduce generated LLVM code size (to improve compile times) for:\n  - internal `handle_panic` helper [#2074](https://github.com/PyO3/pyo3/pull/2074) [#2158](https://github.com/PyO3/pyo3/pull/2158)\n  - `#[pyfunction]` and `#[pymethods]` argument extraction [#2075](https://github.com/PyO3/pyo3/pull/2075) [#2085](https://github.com/PyO3/pyo3/pull/2085)\n  - `#[pyclass]` type object creation [#2076](https://github.com/PyO3/pyo3/pull/2076) [#2081](https://github.com/PyO3/pyo3/pull/2081) [#2157](https://github.com/PyO3/pyo3/pull/2157)\n- Respect Rust privacy rules for items wrapped with `wrap_pyfunction` and `wrap_pymodule`. [#2081](https://github.com/PyO3/pyo3/pull/2081)\n- Add modulo argument to `__ipow__` magic method. [#2083](https://github.com/PyO3/pyo3/pull/2083)\n- Fix FFI definition for `_PyCFunctionFast`. [#2126](https://github.com/PyO3/pyo3/pull/2126)\n- `PyDateTimeAPI` and `PyDateTime_TimeZone_UTC` are now unsafe functions instead of statics. [#2126](https://github.com/PyO3/pyo3/pull/2126)\n- `PyDateTimeAPI` does not implicitly call `PyDateTime_IMPORT` anymore to reflect the original Python API more closely. Before the first call to `PyDateTime_IMPORT` a null pointer is returned. Therefore before calling any of the following FFI functions `PyDateTime_IMPORT` must be called to avoid undefined behavior: [#2126](https://github.com/PyO3/pyo3/pull/2126)\n  - `PyDateTime_TimeZone_UTC`\n  - `PyDate_Check`\n  - `PyDate_CheckExact`\n  - `PyDateTime_Check`\n  - `PyDateTime_CheckExact`\n  - `PyTime_Check`\n  - `PyTime_CheckExact`\n  - `PyDelta_Check`\n  - `PyDelta_CheckExact`\n  - `PyTZInfo_Check`\n  - `PyTZInfo_CheckExact`\n  - `PyDateTime_FromTimestamp`\n  - `PyDate_FromTimestamp`\n- Deprecate the `gc` option for `pyclass` (e.g. `#[pyclass(gc)]`). Just implement a `__traverse__` `#[pymethod]`. [#2159](https://github.com/PyO3/pyo3/pull/2159)\n- The `ml_meth` field of `PyMethodDef` is now represented by the `PyMethodDefPointer` union. [2166](https://github.com/PyO3/pyo3/pull/2166)\n- Deprecate the `#[pyproto]` traits. [#2173](https://github.com/PyO3/pyo3/pull/2173)\n\n### Removed\n\n- Remove all functionality deprecated in PyO3 0.14. [#2007](https://github.com/PyO3/pyo3/pull/2007)\n- Remove `Default` impl for `PyMethodDef`. [#2166](https://github.com/PyO3/pyo3/pull/2166)\n- Remove `PartialEq` impl for `Py` and `PyAny` (use the new `is` instead). [#2183](https://github.com/PyO3/pyo3/pull/2183)\n\n### Fixed\n\n- Fix undefined symbol for `PyObject_HasAttr` on PyPy. [#2025](https://github.com/PyO3/pyo3/pull/2025)\n- Fix memory leak in `PyErr::into_value`. [#2026](https://github.com/PyO3/pyo3/pull/2026)\n- Fix clippy warning `needless-option-as-deref` in code generated by `#[pyfunction]` and `#[pymethods]`. [#2040](https://github.com/PyO3/pyo3/pull/2040)\n- Fix undefined behavior in `PySlice::indices`. [#2061](https://github.com/PyO3/pyo3/pull/2061)\n- Fix the `wrap_pymodule!` macro using the wrong name for a `#[pymodule]` with a `#[pyo3(name = \"..\")]` attribute. [#2081](https://github.com/PyO3/pyo3/pull/2081)\n- Fix magic methods in `#[pymethods]` accepting implementations with the wrong number of arguments. [#2083](https://github.com/PyO3/pyo3/pull/2083)\n- Fix panic in `#[pyfunction]` generated code when a required argument following an `Option` was not provided.  [#2093](https://github.com/PyO3/pyo3/pull/2093)\n- Fixed undefined behavior caused by incorrect `ExactSizeIterator` implementations. [#2124](https://github.com/PyO3/pyo3/pull/2124)\n- Fix missing FFI definition `PyCMethod_New` on Python 3.9 and up. [#2143](https://github.com/PyO3/pyo3/pull/2143)\n- Add missing FFI definitions `_PyLong_NumBits` and `_PyLong_AsByteArray` on PyPy. [#2146](https://github.com/PyO3/pyo3/pull/2146)\n- Fix memory leak in implementation of `AsPyPointer` for `Option<T>`. [#2160](https://github.com/PyO3/pyo3/pull/2160)\n- Fix FFI definition of `_PyLong_NumBits` to return `size_t` instead of `c_int`. [#2161](https://github.com/PyO3/pyo3/pull/2161)\n- Fix `TypeError` thrown when argument parsing failed missing the originating causes. [2177](https://github.com/PyO3/pyo3/pull/2178)\n\n## [0.15.2] - 2022-04-14\n\n### Packaging\n\n- Backport of PyPy 3.9 support from PyO3 0.16. [#2262](https://github.com/PyO3/pyo3/pull/2262)\n\n## [0.15.1] - 2021-11-19\n\n### Added\n\n- Add implementations for `Py::as_ref` and `Py::into_ref` for `Py<PySequence>`, `Py<PyIterator>` and `Py<PyMapping>`. [#1682](https://github.com/PyO3/pyo3/pull/1682)\n- Add `PyTraceback` type to represent and format Python tracebacks. [#1977](https://github.com/PyO3/pyo3/pull/1977)\n\n### Changed\n\n- `#[classattr]` constants with a known magic method name (which is lowercase) no longer trigger lint warnings expecting constants to be uppercase. [#1969](https://github.com/PyO3/pyo3/pull/1969)\n\n### Fixed\n\n- Fix creating `#[classattr]` by functions with the name of a known magic method. [#1969](https://github.com/PyO3/pyo3/pull/1969)\n- Fix use of `catch_unwind` in `allow_threads` which can cause fatal crashes. [#1989](https://github.com/PyO3/pyo3/pull/1989)\n- Fix build failure on PyPy when abi3 features are activated. [#1991](https://github.com/PyO3/pyo3/pull/1991)\n- Fix mingw platform detection. [#1993](https://github.com/PyO3/pyo3/pull/1993)\n- Fix panic in `__get__` implementation when accessing descriptor on type object. [#1997](https://github.com/PyO3/pyo3/pull/1997)\n\n## [0.15.0] - 2021-11-03\n\n### Packaging\n\n- `pyo3`'s `Cargo.toml` now advertises `links = \"python\"` to inform Cargo that it links against *libpython*. [#1819](https://github.com/PyO3/pyo3/pull/1819)\n- Added optional `anyhow` feature to convert `anyhow::Error` into `PyErr`. [#1822](https://github.com/PyO3/pyo3/pull/1822)\n- Support Python 3.10. [#1889](https://github.com/PyO3/pyo3/pull/1889)\n- Added optional `eyre` feature to convert `eyre::Report` into `PyErr`. [#1893](https://github.com/PyO3/pyo3/pull/1893)\n- Support PyPy 3.8. [#1948](https://github.com/PyO3/pyo3/pull/1948)\n\n### Added\n\n- Add `PyList::get_item_unchecked` and `PyTuple::get_item_unchecked` to get items without bounds checks. [#1733](https://github.com/PyO3/pyo3/pull/1733)\n- Support `#[doc = include_str!(...)]` attributes on Rust 1.54 and up. [#1746](https://github.com/PyO3/pyo3/issues/1746)\n- Add `PyAny::py` as a convenience for `PyNativeType::py`. [#1751](https://github.com/PyO3/pyo3/pull/1751)\n- Add implementation of `std::ops::Index<usize>` for `PyList`, `PyTuple` and `PySequence`. [#1825](https://github.com/PyO3/pyo3/pull/1825)\n- Add range indexing implementations of `std::ops::Index` for `PyList`, `PyTuple` and `PySequence`. [#1829](https://github.com/PyO3/pyo3/pull/1829)\n- Add `PyMapping` type to represent the Python mapping protocol. [#1844](https://github.com/PyO3/pyo3/pull/1844)\n- Add commonly-used sequence methods to `PyList` and `PyTuple`. [#1849](https://github.com/PyO3/pyo3/pull/1849)\n- Add `as_sequence` methods to `PyList` and `PyTuple`. [#1860](https://github.com/PyO3/pyo3/pull/1860)\n- Add support for magic methods in `#[pymethods]`, intended as a replacement for `#[pyproto]`. [#1864](https://github.com/PyO3/pyo3/pull/1864)\n- Add `abi3-py310` feature. [#1889](https://github.com/PyO3/pyo3/pull/1889)\n- Add `PyCFunction::new_closure` to create a Python function from a Rust closure. [#1901](https://github.com/PyO3/pyo3/pull/1901)\n- Add support for positional-only arguments in `#[pyfunction]`. [#1925](https://github.com/PyO3/pyo3/pull/1925)\n- Add `PyErr::take` to attempt to fetch a Python exception if present. [#1957](https://github.com/PyO3/pyo3/pull/1957)\n\n### Changed\n\n- `PyList`, `PyTuple` and `PySequence`'s APIs now accepts only `usize` indices instead of `isize`.\n  [#1733](https://github.com/PyO3/pyo3/pull/1733), [#1802](https://github.com/PyO3/pyo3/pull/1802),\n  [#1803](https://github.com/PyO3/pyo3/pull/1803)\n- `PyList::get_item` and `PyTuple::get_item` now return `PyResult<&PyAny>` instead of panicking. [#1733](https://github.com/PyO3/pyo3/pull/1733)\n- `PySequence::in_place_repeat` and `PySequence::in_place_concat` now return `PyResult<&PySequence>` instead of `PyResult<()>`, which is needed in case of immutable sequences such as tuples. [#1803](https://github.com/PyO3/pyo3/pull/1803)\n- `PySequence::get_slice` now returns `PyResult<&PySequence>` instead of `PyResult<&PyAny>`. [#1829](https://github.com/PyO3/pyo3/pull/1829)\n- Deprecate `PyTuple::split_from`. [#1804](https://github.com/PyO3/pyo3/pull/1804)\n- Deprecate `PyTuple::slice`, new method `PyTuple::get_slice` added with `usize` indices. [#1828](https://github.com/PyO3/pyo3/pull/1828)\n- Deprecate FFI definitions `PyParser_SimpleParseStringFlags`, `PyParser_SimpleParseStringFlagsFilename`, `PyParser_SimpleParseFileFlags` when building for Python 3.9. [#1830](https://github.com/PyO3/pyo3/pull/1830)\n- Mark FFI definitions removed in Python 3.10 `PyParser_ASTFromString`, `PyParser_ASTFromStringObject`, `PyParser_ASTFromFile`, `PyParser_ASTFromFileObject`, `PyParser_SimpleParseStringFlags`, `PyParser_SimpleParseStringFlagsFilename`, `PyParser_SimpleParseFileFlags`, `PyParser_SimpleParseString`, `PyParser_SimpleParseFile`, `Py_SymtableString`, and `Py_SymtableStringObject`. [#1830](https://github.com/PyO3/pyo3/pull/1830)\n- `#[pymethods]` now handles magic methods similarly to `#[pyproto]`. In the future, `#[pyproto]` may be deprecated. [#1864](https://github.com/PyO3/pyo3/pull/1864)\n- Deprecate FFI definitions `PySys_AddWarnOption`, `PySys_AddWarnOptionUnicode` and `PySys_HasWarnOptions`. [#1887](https://github.com/PyO3/pyo3/pull/1887)\n- Deprecate `#[call]` attribute in favor of using `fn __call__`. [#1929](https://github.com/PyO3/pyo3/pull/1929)\n- Fix missing FFI definition `_PyImport_FindExtensionObject` on Python 3.10. [#1942](https://github.com/PyO3/pyo3/pull/1942)\n- Change `PyErr::fetch` to panic in debug mode if no exception is present. [#1957](https://github.com/PyO3/pyo3/pull/1957)\n\n### Fixed\n\n- Fix building with a conda environment on Windows. [#1873](https://github.com/PyO3/pyo3/pull/1873)\n- Fix panic on Python 3.6 when calling `Python::with_gil` with Python initialized but threading not initialized. [#1874](https://github.com/PyO3/pyo3/pull/1874)\n- Fix incorrect linking to version-specific DLL instead of `python3.dll` when cross-compiling to Windows with `abi3`. [#1880](https://github.com/PyO3/pyo3/pull/1880)\n- Fix FFI definition for `PyTuple_ClearFreeList` incorrectly being present for Python 3.9 and up. [#1887](https://github.com/PyO3/pyo3/pull/1887)\n- Fix panic in generated `#[derive(FromPyObject)]` for enums. [#1888](https://github.com/PyO3/pyo3/pull/1888)\n- Fix cross-compiling to Python 3.7 builds with the \"m\" abi flag. [#1908](https://github.com/PyO3/pyo3/pull/1908)\n- Fix `__mod__` magic method fallback to `__rmod__`. [#1934](https://github.com/PyO3/pyo3/pull/1934).\n- Fix missing FFI definition `_PyImport_FindExtensionObject` on Python 3.10. [#1942](https://github.com/PyO3/pyo3/pull/1942)\n\n## [0.14.5] - 2021-09-05\n\n### Added\n\n- Make `pyo3_build_config::InterpreterConfig` and subfields public. [#1848](https://github.com/PyO3/pyo3/pull/1848)\n- Add `resolve-config` feature to the `pyo3-build-config` to control whether its build script does anything. [#1856](https://github.com/PyO3/pyo3/pull/1856)\n\n### Fixed\n\n- Fix 0.14.4 compile regression on `s390x-unknown-linux-gnu` target. [#1850](https://github.com/PyO3/pyo3/pull/1850)\n\n## [0.14.4] - 2021-08-29\n\n### Changed\n\n- Mark `PyString::data` as `unsafe` and disable it and some supporting PyUnicode FFI APIs (which depend on a C bitfield) on big-endian targets. [#1834](https://github.com/PyO3/pyo3/pull/1834)\n\n## [0.14.3] - 2021-08-22\n\n### Added\n\n- Add `PyString::data` to access the raw bytes stored in a Python string. [#1794](https://github.com/PyO3/pyo3/pull/1794)\n\n### Fixed\n\n- Raise `AttributeError` to avoid panic when calling `del` on a `#[setter]` defined class property. [#1779](https://github.com/PyO3/pyo3/pull/1779)\n- Restrict FFI definitions `PyGILState_Check` and `Py_tracefunc` to the unlimited API. [#1787](https://github.com/PyO3/pyo3/pull/1787)\n- Add missing `_type` field to `PyStatus` struct definition. [#1791](https://github.com/PyO3/pyo3/pull/1791)\n- Reduce lower bound `num-complex` optional dependency to support interop with `rust-numpy` and `ndarray` when building with the MSRV of 1.41 [#1799](https://github.com/PyO3/pyo3/pull/1799)\n- Fix memory leak in `Python::run_code`. [#1806](https://github.com/PyO3/pyo3/pull/1806)\n- Fix memory leak in `PyModule::from_code`. [#1810](https://github.com/PyO3/pyo3/pull/1810)\n- Remove use of `pyo3::` in `pyo3::types::datetime` which broke builds using `-Z avoid-dev-deps` [#1811](https://github.com/PyO3/pyo3/pull/1811)\n\n## [0.14.2] - 2021-08-09\n\n### Added\n\n- Add `indexmap` feature to add `ToPyObject`, `IntoPy` and `FromPyObject` implementations for `indexmap::IndexMap`. [#1728](https://github.com/PyO3/pyo3/pull/1728)\n- Add `pyo3_build_config::add_extension_module_link_args` to use in build scripts to set linker arguments (for macOS). [#1755](https://github.com/PyO3/pyo3/pull/1755)\n- Add `Python::with_gil_unchecked` unsafe variation of `Python::with_gil` to allow obtaining a `Python` in scenarios where `Python::with_gil` would fail. [#1769](https://github.com/PyO3/pyo3/pull/1769)\n\n### Changed\n\n- `PyErr::new` no longer acquires the Python GIL internally. [#1724](https://github.com/PyO3/pyo3/pull/1724)\n- Reverted PyO3 0.14.0's use of `cargo:rustc-cdylib-link-arg` in its build script, as Cargo unintentionally allowed crates to pass linker args to downstream crates in this way. Projects supporting macOS may need to restore `.cargo/config.toml` files. [#1755](https://github.com/PyO3/pyo3/pull/1755)\n\n### Fixed\n\n- Fix regression in 0.14.0 rejecting usage of `#[doc(hidden)]` on structs and functions annotated with PyO3 macros. [#1722](https://github.com/PyO3/pyo3/pull/1722)\n- Fix regression in 0.14.0 leading to incorrect code coverage being computed for `#[pyfunction]`s. [#1726](https://github.com/PyO3/pyo3/pull/1726)\n- Fix incorrect FFI definition of `Py_Buffer` on PyPy. [#1737](https://github.com/PyO3/pyo3/pull/1737)\n- Fix incorrect calculation of `dictoffset` on 32-bit Windows. [#1475](https://github.com/PyO3/pyo3/pull/1475)\n- Fix regression in 0.13.2 leading to linking to incorrect Python library on Windows \"gnu\" targets. [#1759](https://github.com/PyO3/pyo3/pull/1759)\n- Fix compiler warning: deny trailing semicolons in expression macro. [#1762](https://github.com/PyO3/pyo3/pull/1762)\n- Fix incorrect FFI definition of `Py_DecodeLocale`. The 2nd argument is now `*mut Py_ssize_t` instead of `Py_ssize_t`. [#1766](https://github.com/PyO3/pyo3/pull/1766)\n\n## [0.14.1] - 2021-07-04\n\n### Added\n\n- Implement `IntoPy<PyObject>` for `&PathBuf` and `&OsString`. [#1712](https://github.com/PyO3/pyo3/pull/1712)\n\n### Fixed\n\n- Fix crashes on PyPy due to incorrect definitions of `PyList_SET_ITEM`. [#1713](https://github.com/PyO3/pyo3/pull/1713)\n\n## [0.14.0] - 2021-07-03\n\n### Packaging\n\n- Update `num-bigint` optional dependency to 0.4. [#1481](https://github.com/PyO3/pyo3/pull/1481)\n- Update `num-complex` optional dependency to 0.4. [#1482](https://github.com/PyO3/pyo3/pull/1482)\n- Extend `hashbrown` optional dependency supported versions to include 0.11. [#1496](https://github.com/PyO3/pyo3/pull/1496)\n- Support PyPy 3.7. [#1538](https://github.com/PyO3/pyo3/pull/1538)\n\n### Added\n\n- Extend conversions for `[T; N]` to all `N` using const generics (on Rust 1.51 and up). [#1128](https://github.com/PyO3/pyo3/pull/1128)\n- Add conversions between `OsStr`/ `OsString` and Python strings. [#1379](https://github.com/PyO3/pyo3/pull/1379)\n- Add conversions between `Path`/ `PathBuf` and Python strings (and `pathlib.Path` objects). [#1379](https://github.com/PyO3/pyo3/pull/1379) [#1654](https://github.com/PyO3/pyo3/pull/1654)\n- Add a new set of `#[pyo3(...)]` attributes to control various PyO3 macro functionality:\n  - `#[pyo3(from_py_with = \"...\")]` function arguments and struct fields to override the default from-Python conversion. [#1411](https://github.com/PyO3/pyo3/pull/1411)\n  - `#[pyo3(name = \"...\")]` for setting Python names. [#1567](https://github.com/PyO3/pyo3/pull/1567)\n  - `#[pyo3(text_signature = \"...\")]` for setting text signature. [#1658](https://github.com/PyO3/pyo3/pull/1658)\n- Add FFI definition `PyCFunction_CheckExact` for Python 3.9 and later. [#1425](https://github.com/PyO3/pyo3/pull/1425)\n- Add FFI definition `Py_IS_TYPE`. [#1429](https://github.com/PyO3/pyo3/pull/1429)\n- Add FFI definition `_Py_InitializeMain`. [#1473](https://github.com/PyO3/pyo3/pull/1473)\n- Add FFI definitions from `cpython/import.h`.[#1475](https://github.com/PyO3/pyo3/pull/1475)\n- Add tuple and unit struct support for `#[pyclass]` macro. [#1504](https://github.com/PyO3/pyo3/pull/1504)\n- Add FFI definition `PyDateTime_TimeZone_UTC`. [#1572](https://github.com/PyO3/pyo3/pull/1572)\n- Add support for `#[pyclass(extends=Exception)]`. [#1591](https://github.com/PyO3/pyo3/pull/1591)\n- Add `PyErr::cause` and `PyErr::set_cause`. [#1679](https://github.com/PyO3/pyo3/pull/1679)\n- Add FFI definitions from `cpython/pystate.h`. [#1687](https://github.com/PyO3/pyo3/pull/1687/)\n- Add `wrap_pyfunction!` macro to `pyo3::prelude`. [#1695](https://github.com/PyO3/pyo3/pull/1695)\n\n### Changed\n\n- Allow only one `#[pymethods]` block per `#[pyclass]` by default, to remove the dependency on `inventory`. Add a `multiple-pymethods` feature to opt-in the original behavior and dependency on `inventory`. [#1457](https://github.com/PyO3/pyo3/pull/1457)\n- Change `PyTimeAccess::get_fold` to return a `bool` instead of a `u8`. [#1397](https://github.com/PyO3/pyo3/pull/1397)\n- Deprecate FFI definition `PyCFunction_Call` for Python 3.9 and up. [#1425](https://github.com/PyO3/pyo3/pull/1425)\n- Deprecate FFI definition `PyModule_GetFilename`. [#1425](https://github.com/PyO3/pyo3/pull/1425)\n- The `auto-initialize` feature is no longer enabled by default. [#1443](https://github.com/PyO3/pyo3/pull/1443)\n- Change `PyCFunction::new` and `PyCFunction::new_with_keywords` to take `&'static str` arguments rather than implicitly copying (and leaking) them. [#1450](https://github.com/PyO3/pyo3/pull/1450)\n- Deprecate `PyModule::call`, `PyModule::call0`, `PyModule::call1` and `PyModule::get`. [#1492](https://github.com/PyO3/pyo3/pull/1492)\n- Add length information to `PyBufferError`s raised from `PyBuffer::copy_to_slice` and `PyBuffer::copy_from_slice`. [#1534](https://github.com/PyO3/pyo3/pull/1534)\n- Automatically set `-undefined` and `dynamic_lookup` linker arguments on macOS with the `extension-module` feature. [#1539](https://github.com/PyO3/pyo3/pull/1539)\n- Deprecate `#[pyproto]` methods which are easier to implement as `#[pymethods]`: [#1560](https://github.com/PyO3/pyo3/pull/1560)\n  - `PyBasicProtocol::__bytes__` and `PyBasicProtocol::__format__`\n  - `PyContextProtocol::__enter__` and `PyContextProtocol::__exit__`\n  - `PyDescrProtocol::__delete__` and `PyDescrProtocol::__set_name__`\n  - `PyMappingProtocol::__reversed__`\n  - `PyNumberProtocol::__complex__` and `PyNumberProtocol::__round__`\n  - `PyAsyncProtocol::__aenter__` and `PyAsyncProtocol::__aexit__`\n- Deprecate several attributes in favor of the new `#[pyo3(...)]` options:\n  - `#[name = \"...\"]`, replaced by `#[pyo3(name = \"...\")]` [#1567](https://github.com/PyO3/pyo3/pull/1567)\n  - `#[pyfn(m, \"name\")]`, replaced by `#[pyfn(m)] #[pyo3(name = \"...\")]`. [#1610](https://github.com/PyO3/pyo3/pull/1610)\n  - `#[pymodule(name)]`, replaced by `#[pymodule] #[pyo3(name = \"...\")]` [#1650](https://github.com/PyO3/pyo3/pull/1650)\n  - `#[text_signature = \"...\"]`, replaced by `#[pyo3(text_signature = \"...\")]`. [#1658](https://github.com/PyO3/pyo3/pull/1658)\n- Reduce LLVM line counts to improve compilation times. [#1604](https://github.com/PyO3/pyo3/pull/1604)\n- No longer call `PyEval_InitThreads` in `#[pymodule]` init code. [#1630](https://github.com/PyO3/pyo3/pull/1630)\n- Use `METH_FASTCALL` argument passing convention, when possible, to improve `#[pyfunction]` and method performance.\n  [#1619](https://github.com/PyO3/pyo3/pull/1619), [#1660](https://github.com/PyO3/pyo3/pull/1660)\n- Filter sysconfigdata candidates by architecture when cross-compiling. [#1626](https://github.com/PyO3/pyo3/pull/1626)\n\n### Removed\n\n- Remove deprecated exception names `BaseException` etc. [#1426](https://github.com/PyO3/pyo3/pull/1426)\n- Remove deprecated methods `Python::is_instance`, `Python::is_subclass`, `Python::release`, `Python::xdecref`, and `Py::from_owned_ptr_or_panic`. [#1426](https://github.com/PyO3/pyo3/pull/1426)\n- Remove many FFI definitions which never existed in the Python C-API:\n  - (previously deprecated) `PyGetSetDef_INIT`, `PyGetSetDef_DICT`, `PyCoro_Check`, `PyCoroWrapper_Check`, and `PyAsyncGen_Check` [#1426](https://github.com/PyO3/pyo3/pull/1426)\n  - `PyMethodDef_INIT` [#1426](https://github.com/PyO3/pyo3/pull/1426)\n  - `PyTypeObject_INIT` [#1429](https://github.com/PyO3/pyo3/pull/1429)\n  - `PyObject_Check`, `PySuper_Check`, and `FreeFunc` [#1438](https://github.com/PyO3/pyo3/pull/1438)\n  - `PyModuleDef_INIT` [#1630](https://github.com/PyO3/pyo3/pull/1630)\n- Remove pyclass implementation details from `PyTypeInfo`:\n  - `Type`, `DESCRIPTION`, and `FLAGS` [#1456](https://github.com/PyO3/pyo3/pull/1456)\n  - `BaseType`, `BaseLayout`, `Layout`, `Initializer` [#1596](https://github.com/PyO3/pyo3/pull/1596)\n- Remove `PYO3_CROSS_INCLUDE_DIR` environment variable and the associated C header parsing functionality. [#1521](https://github.com/PyO3/pyo3/pull/1521)\n- Remove `raw_pycfunction!` macro. [#1619](https://github.com/PyO3/pyo3/pull/1619)\n- Remove `PyClassAlloc` trait. [#1657](https://github.com/PyO3/pyo3/pull/1657)\n- Remove `PyList::get_parked_item`. [#1664](https://github.com/PyO3/pyo3/pull/1664)\n\n### Fixed\n\n- Remove FFI definition `PyCFunction_ClearFreeList` for Python 3.9 and later. [#1425](https://github.com/PyO3/pyo3/pull/1425)\n- `PYO3_CROSS_LIB_DIR` environment variable no long required when compiling for x86-64 Python from macOS arm64 and reverse. [#1428](https://github.com/PyO3/pyo3/pull/1428)\n- Fix FFI definition `_PyEval_RequestCodeExtraIndex`, which took an argument of the wrong type. [#1429](https://github.com/PyO3/pyo3/pull/1429)\n- Fix FFI definition `PyIndex_Check` missing with the `abi3` feature. [#1436](https://github.com/PyO3/pyo3/pull/1436)\n- Fix incorrect `TypeError` raised when keyword-only argument passed along with a positional argument in `*args`. [#1440](https://github.com/PyO3/pyo3/pull/1440)\n- Fix inability to use a named lifetime for `&PyTuple` of `*args` in `#[pyfunction]`. [#1440](https://github.com/PyO3/pyo3/pull/1440)\n- Fix use of Python argument for `#[pymethods]` inside macro expansions. [#1505](https://github.com/PyO3/pyo3/pull/1505)\n- No longer include `__doc__` in `__all__` generated for `#[pymodule]`. [#1509](https://github.com/PyO3/pyo3/pull/1509)\n- Always use cross-compiling configuration if any of the `PYO3_CROSS` family of environment variables are set. [#1514](https://github.com/PyO3/pyo3/pull/1514)\n- Support `EnvironmentError`, `IOError`, and `WindowsError` on PyPy. [#1533](https://github.com/PyO3/pyo3/pull/1533)\n- Fix unnecessary rebuilds when cycling between `cargo check` and `cargo clippy` in a Python virtualenv. [#1557](https://github.com/PyO3/pyo3/pull/1557)\n- Fix segfault when dereferencing `ffi::PyDateTimeAPI` without the GIL. [#1563](https://github.com/PyO3/pyo3/pull/1563)\n- Fix memory leak in `FromPyObject` implementations for `u128` and `i128`. [#1638](https://github.com/PyO3/pyo3/pull/1638)\n- Fix `#[pyclass(extends=PyDict)]` leaking the dict contents on drop. [#1657](https://github.com/PyO3/pyo3/pull/1657)\n- Fix segfault when calling `PyList::get_item` with negative indices. [#1668](https://github.com/PyO3/pyo3/pull/1668)\n- Fix FFI definitions of `PyEval_SetProfile`/`PyEval_SetTrace` to take `Option<Py_tracefunc>` parameters. [#1692](https://github.com/PyO3/pyo3/pull/1692)\n- Fix `ToPyObject` impl for `HashSet` to accept non-default hashers. [#1702](https://github.com/PyO3/pyo3/pull/1702)\n\n## [0.13.2] - 2021-02-12\n\n### Packaging\n\n- Lower minimum supported Rust version to 1.41. [#1421](https://github.com/PyO3/pyo3/pull/1421)\n\n### Added\n\n- Add unsafe API `with_embedded_python_interpreter` to initialize a Python interpreter, execute a closure, and finalize the interpreter. [#1355](https://github.com/PyO3/pyo3/pull/1355)\n- Add `serde` feature which provides implementations of `Serialize` and `Deserialize` for `Py<T>`. [#1366](https://github.com/PyO3/pyo3/pull/1366)\n- Add FFI definition `_PyCFunctionFastWithKeywords` on Python 3.7 and up. [#1384](https://github.com/PyO3/pyo3/pull/1384)\n- Add `PyDateTime::new_with_fold` method. [#1398](https://github.com/PyO3/pyo3/pull/1398)\n- Add `size_hint` impls for `{PyDict,PyList,PySet,PyTuple}Iterator`s. [#1699](https://github.com/PyO3/pyo3/pull/1699)\n\n### Changed\n\n- `prepare_freethreaded_python` will no longer register an `atexit` handler to call `Py_Finalize`. This resolves a number of issues with incompatible C extensions causing crashes at finalization. [#1355](https://github.com/PyO3/pyo3/pull/1355)\n- Mark `PyLayout::py_init`, `PyClassDict::clear_dict`, and `opt_to_pyobj` safe, as they do not perform any unsafe operations. [#1404](https://github.com/PyO3/pyo3/pull/1404)\n\n### Fixed\n\n- Fix support for using `r#raw_idents` as argument names in pyfunctions. [#1383](https://github.com/PyO3/pyo3/pull/1383)\n- Fix typo in FFI definition for `PyFunction_GetCode` (was incorrectly `PyFunction_Code`). [#1387](https://github.com/PyO3/pyo3/pull/1387)\n- Fix FFI definitions `PyMarshal_WriteObjectToString` and `PyMarshal_ReadObjectFromString` as available in limited API. [#1387](https://github.com/PyO3/pyo3/pull/1387)\n- Fix FFI definitions `PyListObject` and those from `funcobject.h` as requiring non-limited API. [#1387](https://github.com/PyO3/pyo3/pull/1387)\n- Fix unqualified `Result` usage in `pyobject_native_type_base`. [#1402](https://github.com/PyO3/pyo3/pull/1402)\n- Fix build on systems where the default Python encoding is not UTF-8. [#1405](https://github.com/PyO3/pyo3/pull/1405)\n- Fix build on mingw / MSYS2. [#1423](https://github.com/PyO3/pyo3/pull/1423)\n\n## [0.13.1] - 2021-01-10\n\n### Added\n\n- Add support for `#[pyclass(dict)]` and `#[pyclass(weakref)]` with the `abi3` feature on Python 3.9 and up. [#1342](https://github.com/PyO3/pyo3/pull/1342)\n- Add FFI definitions `PyOS_BeforeFork`, `PyOS_AfterFork_Parent`, `PyOS_AfterFork_Child` for Python 3.7 and up. [#1348](https://github.com/PyO3/pyo3/pull/1348)\n- Add an `auto-initialize` feature to control whether PyO3 should automatically initialize an embedded Python interpreter. For compatibility this feature is enabled by default in PyO3 0.13.1, but is planned to become opt-in from PyO3 0.14.0. [#1347](https://github.com/PyO3/pyo3/pull/1347)\n- Add support for cross-compiling to Windows without needing `PYO3_CROSS_INCLUDE_DIR`. [#1350](https://github.com/PyO3/pyo3/pull/1350)\n\n### Deprecated\n\n- Deprecate FFI definitions `PyEval_CallObjectWithKeywords`, `PyEval_CallObject`, `PyEval_CallFunction`, `PyEval_CallMethod` when building for Python 3.9. [#1338](https://github.com/PyO3/pyo3/pull/1338)\n- Deprecate FFI definitions `PyGetSetDef_DICT` and `PyGetSetDef_INIT` which have never been in the Python API. [#1341](https://github.com/PyO3/pyo3/pull/1341)\n- Deprecate FFI definitions `PyGen_NeedsFinalizing`, `PyImport_Cleanup` (removed in 3.9), and `PyOS_InitInterrupts` (3.10). [#1348](https://github.com/PyO3/pyo3/pull/1348)\n- Deprecate FFI definition `PyOS_AfterFork` for Python 3.7 and up. [#1348](https://github.com/PyO3/pyo3/pull/1348)\n- Deprecate FFI definitions `PyCoro_Check`, `PyAsyncGen_Check`, and `PyCoroWrapper_Check`, which have never been in the Python API (for the first two, it is possible to use `PyCoro_CheckExact` and `PyAsyncGen_CheckExact` instead; these are the actual functions provided by the Python API). [#1348](https://github.com/PyO3/pyo3/pull/1348)\n- Deprecate FFI definitions for `PyUnicode_FromUnicode`, `PyUnicode_AsUnicode` and `PyUnicode_AsUnicodeAndSize`, which will be removed from 3.12 and up due to [PEP 623](https://www.python.org/dev/peps/pep-0623/). [#1370](https://github.com/PyO3/pyo3/pull/1370)\n\n### Removed\n\n- Remove FFI definition `PyFrame_ClearFreeList` when building for Python 3.9. [#1341](https://github.com/PyO3/pyo3/pull/1341)\n- Remove FFI definition `_PyDict_Contains` when building for Python 3.10. [#1341](https://github.com/PyO3/pyo3/pull/1341)\n- Remove FFI definitions `PyGen_NeedsFinalizing` and `PyImport_Cleanup` (for 3.9 and up), and `PyOS_InitInterrupts` (3.10). [#1348](https://github.com/PyO3/pyo3/pull/1348)\n\n### Fixed\n\n- Stop including `Py_TRACE_REFS` config setting automatically if `Py_DEBUG` is set on Python 3.8 and up. [#1334](https://github.com/PyO3/pyo3/pull/1334)\n- Remove `#[deny(warnings)]` attribute (and instead refuse warnings only in CI). [#1340](https://github.com/PyO3/pyo3/pull/1340)\n- Fix deprecation warning for missing `__module__` with `#[pyclass]`. [#1343](https://github.com/PyO3/pyo3/pull/1343)\n- Correct return type of `PyFrozenSet::empty` to `&PyFrozenSet` (was incorrectly `&PySet`). [#1351](https://github.com/PyO3/pyo3/pull/1351)\n- Fix missing `Py_INCREF` on heap type objects on Python versions before 3.8. [#1365](https://github.com/PyO3/pyo3/pull/1365)\n\n## [0.13.0] - 2020-12-22\n\n### Packaging\n\n- Drop support for Python 3.5 (as it is now end-of-life). [#1250](https://github.com/PyO3/pyo3/pull/1250)\n- Bump minimum supported Rust version to 1.45. [#1272](https://github.com/PyO3/pyo3/pull/1272)\n- Bump indoc dependency to 1.0. [#1272](https://github.com/PyO3/pyo3/pull/1272)\n- Bump paste dependency to 1.0. [#1272](https://github.com/PyO3/pyo3/pull/1272)\n- Rename internal crates `pyo3cls` and `pyo3-derive-backend` to `pyo3-macros` and `pyo3-macros-backend` respectively. [#1317](https://github.com/PyO3/pyo3/pull/1317)\n\n### Added\n\n- Add support for building for CPython limited API. Opting-in to the limited API enables a single extension wheel built with PyO3 to be installable on multiple Python versions. This required a few minor changes to runtime behavior of of PyO3 `#[pyclass]` types. See the migration guide for full details. [#1152](https://github.com/PyO3/pyo3/pull/1152)\n  - Add feature flags `abi3-py36`, `abi3-py37`, `abi3-py38` etc. to set the minimum Python version when using the limited API. [#1263](https://github.com/PyO3/pyo3/pull/1263)\n- Add argument names to `TypeError` messages generated by pymethod wrappers. [#1212](https://github.com/PyO3/pyo3/pull/1212)\n- Add FFI definitions for PEP 587 \"Python Initialization Configuration\". [#1247](https://github.com/PyO3/pyo3/pull/1247)\n- Add FFI definitions for `PyEval_SetProfile` and `PyEval_SetTrace`. [#1255](https://github.com/PyO3/pyo3/pull/1255)\n- Add FFI definitions for context.h functions (`PyContext_New`, etc). [#1259](https://github.com/PyO3/pyo3/pull/1259)\n- Add `PyAny::is_instance` method. [#1276](https://github.com/PyO3/pyo3/pull/1276)\n- Add support for conversion between `char` and `PyString`. [#1282](https://github.com/PyO3/pyo3/pull/1282)\n- Add FFI definitions for `PyBuffer_SizeFromFormat`, `PyObject_LengthHint`, `PyObject_CallNoArgs`, `PyObject_CallOneArg`, `PyObject_CallMethodNoArgs`, `PyObject_CallMethodOneArg`, `PyObject_VectorcallDict`, and `PyObject_VectorcallMethod`. [#1287](https://github.com/PyO3/pyo3/pull/1287)\n- Add conversions between `u128`/`i128` and `PyLong` for PyPy. [#1310](https://github.com/PyO3/pyo3/pull/1310)\n- Add `Python::version` and `Python::version_info` to get the running interpreter version. [#1322](https://github.com/PyO3/pyo3/pull/1322)\n- Add conversions for tuples of length 10, 11, and 12. [#1454](https://github.com/PyO3/pyo3/pull/1454)\n\n### Changed\n\n- Change return type of `PyType::name` from `Cow<str>` to `PyResult<&str>`. [#1152](https://github.com/PyO3/pyo3/pull/1152)\n- `#[pyclass(subclass)]` is now required for subclassing from Rust (was previously just required for subclassing from Python). [#1152](https://github.com/PyO3/pyo3/pull/1152)\n- Change `PyIterator` to be consistent with other native types: it is now used as `&PyIterator` instead of `PyIterator<'a>`. [#1176](https://github.com/PyO3/pyo3/pull/1176)\n- Change formatting of `PyDowncastError` messages to be closer to Python's builtin error messages. [#1212](https://github.com/PyO3/pyo3/pull/1212)\n- Change `Debug` and `Display` impls for `PyException` to be consistent with `PyAny`. [#1275](https://github.com/PyO3/pyo3/pull/1275)\n- Change `Debug` impl of `PyErr` to output more helpful information (acquiring the GIL if necessary). [#1275](https://github.com/PyO3/pyo3/pull/1275)\n- Rename `PyTypeInfo::is_instance` and `PyTypeInfo::is_exact_instance` to `PyTypeInfo::is_type_of` and `PyTypeInfo::is_exact_type_of`. [#1278](https://github.com/PyO3/pyo3/pull/1278)\n- Optimize `PyAny::call0`, `Py::call0` and `PyAny::call_method0` and `Py::call_method0` on Python 3.9 and up. [#1287](https://github.com/PyO3/pyo3/pull/1285)\n- Require double-quotes for pyclass name argument e.g `#[pyclass(name = \"MyClass\")]`. [#1303](https://github.com/PyO3/pyo3/pull/1303)\n\n### Deprecated\n\n- Deprecate `Python::is_instance`, `Python::is_subclass`, `Python::release`, and `Python::xdecref`. [#1292](https://github.com/PyO3/pyo3/pull/1292)\n\n### Removed\n\n- Remove deprecated ffi definitions `PyUnicode_AsUnicodeCopy`, `PyUnicode_GetMax`, `_Py_CheckRecursionLimit`, `PyObject_AsCharBuffer`, `PyObject_AsReadBuffer`, `PyObject_CheckReadBuffer` and `PyObject_AsWriteBuffer`, which will be removed in Python 3.10. [#1217](https://github.com/PyO3/pyo3/pull/1217)\n- Remove unused `python3` feature. [#1235](https://github.com/PyO3/pyo3/pull/1235)\n\n### Fixed\n\n- Fix missing field in `PyCodeObject` struct (`co_posonlyargcount`) - caused invalid access to other fields in Python >3.7. [#1260](https://github.com/PyO3/pyo3/pull/1260)\n- Fix building for `x86_64-unknown-linux-musl` target from `x86_64-unknown-linux-gnu` host. [#1267](https://github.com/PyO3/pyo3/pull/1267)\n- Fix `#[text_signature]` interacting badly with rust `r#raw_identifiers`. [#1286](https://github.com/PyO3/pyo3/pull/1286)\n- Fix FFI definitions for `PyObject_Vectorcall` and `PyVectorcall_Call`. [#1287](https://github.com/PyO3/pyo3/pull/1285)\n- Fix building with Anaconda python inside a virtualenv. [#1290](https://github.com/PyO3/pyo3/pull/1290)\n- Fix definition of opaque FFI types. [#1312](https://github.com/PyO3/pyo3/pull/1312)\n- Fix using custom error type in pyclass `#[new]` methods. [#1319](https://github.com/PyO3/pyo3/pull/1319)\n\n## [0.12.4] - 2020-11-28\n\n### Fixed\n\n- Fix reference count bug in implementation of `From<Py<T>>` for `PyObject`, a regression introduced in PyO3 0.12. [#1297](https://github.com/PyO3/pyo3/pull/1297)\n\n## [0.12.3] - 2020-10-12\n\n### Fixed\n\n- Fix support for Rust versions 1.39 to 1.44, broken by an incorrect internal update to paste 1.0 which was done in PyO3 0.12.2. [#1234](https://github.com/PyO3/pyo3/pull/1234)\n\n## [0.12.2] - 2020-10-12\n\n### Added\n\n- Add support for keyword-only arguments without default values in `#[pyfunction]`. [#1209](https://github.com/PyO3/pyo3/pull/1209)\n- Add `Python::check_signals` as a safe a wrapper for `PyErr_CheckSignals`. [#1214](https://github.com/PyO3/pyo3/pull/1214)\n\n### Fixed\n\n- Fix invalid document for protocol methods. [#1169](https://github.com/PyO3/pyo3/pull/1169)\n- Hide docs of PyO3 private implementation details in `pyo3::class::methods`. [#1169](https://github.com/PyO3/pyo3/pull/1169)\n- Fix unnecessary rebuild on PATH changes when the python interpreter is provided by PYO3_PYTHON. [#1231](https://github.com/PyO3/pyo3/pull/1231)\n\n## [0.12.1] - 2020-09-16\n\n### Fixed\n\n- Fix building for a 32-bit Python on 64-bit Windows with a 64-bit Rust toolchain. [#1179](https://github.com/PyO3/pyo3/pull/1179)\n- Fix building on platforms where `c_char` is `u8`. [#1182](https://github.com/PyO3/pyo3/pull/1182)\n\n## [0.12.0] - 2020-09-12\n\n### Added\n\n- Add FFI definitions `Py_FinalizeEx`, `PyOS_getsig`, and `PyOS_setsig`. [#1021](https://github.com/PyO3/pyo3/pull/1021)\n- Add `PyString::to_str` for accessing `PyString` as `&str`. [#1023](https://github.com/PyO3/pyo3/pull/1023)\n- Add `Python::with_gil` for executing a closure with the Python GIL. [#1037](https://github.com/PyO3/pyo3/pull/1037)\n- Add type information to failures in `PyAny::downcast`. [#1050](https://github.com/PyO3/pyo3/pull/1050)\n- Implement `Debug` for `PyIterator`. [#1051](https://github.com/PyO3/pyo3/pull/1051)\n- Add `PyBytes::new_with` and `PyByteArray::new_with` for initialising `bytes` and `bytearray` objects using a closure. [#1074](https://github.com/PyO3/pyo3/pull/1074)\n- Add `#[derive(FromPyObject)]` macro for enums and structs. [#1065](https://github.com/PyO3/pyo3/pull/1065)\n- Add `Py::as_ref` and `Py::into_ref` for converting `Py<T>` to `&T`. [#1098](https://github.com/PyO3/pyo3/pull/1098)\n- Add ability to return `Result` types other than `PyResult` from `#[pyfunction]`, `#[pymethod]` and `#[pyproto]` functions. [#1106](https://github.com/PyO3/pyo3/pull/1118).\n- Implement `ToPyObject`, `IntoPy`, and `FromPyObject` for [hashbrown](https://crates.io/crates/hashbrown)'s `HashMap` and `HashSet` types (requires the `hashbrown` feature). [#1114](https://github.com/PyO3/pyo3/pull/1114)\n- Add `#[pyfunction(pass_module)]` and `#[pyfn(pass_module)]` to pass the module object as the first function argument. [#1143](https://github.com/PyO3/pyo3/pull/1143)\n- Add `PyModule::add_function` and `PyModule::add_submodule` as typed alternatives to `PyModule::add_wrapped`. [#1143](https://github.com/PyO3/pyo3/pull/1143)\n- Add native `PyCFunction` and `PyFunction` types. [#1163](https://github.com/PyO3/pyo3/pull/1163)\n\n### Changed\n\n- Rework exception types: [#1024](https://github.com/PyO3/pyo3/pull/1024) [#1115](https://github.com/PyO3/pyo3/pull/1115)\n  - Rename exception types from e.g. `RuntimeError` to `PyRuntimeError`. The old names continue to exist but are deprecated.\n  - Exception objects are now accessible as `&T` or `Py<T>`, just like other Python-native types.\n  - Rename `PyException::py_err` to `PyException::new_err`.\n  - Rename `PyUnicodeDecodeErr::new_err` to `PyUnicodeDecodeErr::new`.\n  - Remove `PyStopIteration::stop_iteration`.\n- Require `T: Send` for the return value `T` of `Python::allow_threads`. [#1036](https://github.com/PyO3/pyo3/pull/1036)\n- Rename `PYTHON_SYS_EXECUTABLE` to `PYO3_PYTHON`. The old name will continue to work (undocumented) but will be removed in a future release. [#1039](https://github.com/PyO3/pyo3/pull/1039)\n- Remove `unsafe` from signature of `PyType::as_type_ptr`. [#1047](https://github.com/PyO3/pyo3/pull/1047)\n- Change return type of `PyIterator::from_object` to `PyResult<PyIterator>` (was `Result<PyIterator, PyDowncastError>`). [#1051](https://github.com/PyO3/pyo3/pull/1051)\n- `IntoPy` is no longer implied by `FromPy`. [#1063](https://github.com/PyO3/pyo3/pull/1063)\n- Change `PyObject` to be a type alias for `Py<PyAny>`. [#1063](https://github.com/PyO3/pyo3/pull/1063)\n- Rework `PyErr` to be compatible with the `std::error::Error` trait: [#1067](https://github.com/PyO3/pyo3/pull/1067) [#1115](https://github.com/PyO3/pyo3/pull/1115)\n  - Implement `Display`, `Error`, `Send` and `Sync` for `PyErr` and `PyErrArguments`.\n  - Add `PyErr::instance` for accessing `PyErr` as `&PyBaseException`.\n  - `PyErr`'s fields are now an implementation detail. The equivalent values can be accessed with `PyErr::ptype`, `PyErr::pvalue` and `PyErr::ptraceback`.\n  - Change receiver of `PyErr::print` and `PyErr::print_and_set_sys_last_vars` to `&self` (was `self`).\n  - Remove `PyErrValue`, `PyErr::from_value`, `PyErr::into_normalized`, and `PyErr::normalize`.\n  - Remove `PyException::into`.\n  - Remove `Into<PyResult<T>>` for `PyErr` and `PyException`.\n- Change methods generated by `#[pyproto]` to return `NotImplemented` if Python should try a reversed operation. #[1072](https://github.com/PyO3/pyo3/pull/1072)\n- Change argument to `PyModule::add` to `impl IntoPy<PyObject>` (was `impl ToPyObject`). #[1124](https://github.com/PyO3/pyo3/pull/1124)\n\n### Removed\n\n- Remove many exception and `PyErr` APIs; see the \"changed\" section above. [#1024](https://github.com/PyO3/pyo3/pull/1024) [#1067](https://github.com/PyO3/pyo3/pull/1067) [#1115](https://github.com/PyO3/pyo3/pull/1115)\n- Remove `PyString::to_string` (use new `PyString::to_str`). [#1023](https://github.com/PyO3/pyo3/pull/1023)\n- Remove `PyString::as_bytes`. [#1023](https://github.com/PyO3/pyo3/pull/1023)\n- Remove `Python::register_any`. [#1023](https://github.com/PyO3/pyo3/pull/1023)\n- Remove `GILGuard::acquire` from the public API. Use `Python::acquire_gil` or `Python::with_gil`. [#1036](https://github.com/PyO3/pyo3/pull/1036)\n- Remove the `FromPy` trait. [#1063](https://github.com/PyO3/pyo3/pull/1063)\n- Remove the `AsPyRef` trait. [#1098](https://github.com/PyO3/pyo3/pull/1098)\n\n### Fixed\n\n- Correct FFI definitions `Py_SetProgramName` and `Py_SetPythonHome` to take `*const` arguments (was `*mut`). [#1021](https://github.com/PyO3/pyo3/pull/1021)\n- Fix `FromPyObject` for `num_bigint::BigInt` for Python objects with an `__index__` method. [#1027](https://github.com/PyO3/pyo3/pull/1027)\n- Correct FFI definition `_PyLong_AsByteArray` to take `*mut c_uchar` argument (was `*const c_uchar`). [#1029](https://github.com/PyO3/pyo3/pull/1029)\n- Fix segfault with `#[pyclass(dict, unsendable)]`. [#1058](https://github.com/PyO3/pyo3/pull/1058) [#1059](https://github.com/PyO3/pyo3/pull/1059)\n- Fix using `&Self` as an argument type for functions in a `#[pymethods]` block. [#1071](https://github.com/PyO3/pyo3/pull/1071)\n- Fix best-effort build against PyPy 3.6. [#1092](https://github.com/PyO3/pyo3/pull/1092)\n- Fix many cases of lifetime elision in `#[pyproto]` implementations. [#1093](https://github.com/PyO3/pyo3/pull/1093)\n- Fix detection of Python build configuration when cross-compiling. [#1095](https://github.com/PyO3/pyo3/pull/1095)\n- Always link against libpython on android with the `extension-module` feature. [#1095](https://github.com/PyO3/pyo3/pull/1095)\n- Fix the `+` operator not trying `__radd__` when both `__add__` and `__radd__` are defined in `PyNumberProtocol` (and similar for all other reversible operators). [#1107](https://github.com/PyO3/pyo3/pull/1107)\n- Fix building with Anaconda python. [#1175](https://github.com/PyO3/pyo3/pull/1175)\n\n## [0.11.1] - 2020-06-30\n\n### Added\n\n- `#[pyclass(unsendable)]`. [#1009](https://github.com/PyO3/pyo3/pull/1009)\n\n### Changed\n\n- Update `parking_lot` dependency to `0.11`. [#1010](https://github.com/PyO3/pyo3/pull/1010)\n\n## [0.11.0] - 2020-06-28\n\n### Added\n\n- Support stable versions of Rust (>=1.39). [#969](https://github.com/PyO3/pyo3/pull/969)\n- Add FFI definition `PyObject_AsFileDescriptor`. [#938](https://github.com/PyO3/pyo3/pull/938)\n- Add `PyByteArray::data`, `PyByteArray::as_bytes`, and `PyByteArray::as_bytes_mut`. [#967](https://github.com/PyO3/pyo3/pull/967)\n- Add `GILOnceCell` to use in situations where `lazy_static` or `once_cell` can deadlock. [#975](https://github.com/PyO3/pyo3/pull/975)\n- Add `Py::borrow`, `Py::borrow_mut`, `Py::try_borrow`, and `Py::try_borrow_mut` for accessing `#[pyclass]` values. [#976](https://github.com/PyO3/pyo3/pull/976)\n- Add `IterNextOutput` and `IterANextOutput` for returning from `__next__` / `__anext__`. [#997](https://github.com/PyO3/pyo3/pull/997)\n\n### Changed\n\n- Simplify internals of `#[pyo3(get)]` attribute. (Remove the hidden API `GetPropertyValue`.) [#934](https://github.com/PyO3/pyo3/pull/934)\n- Call `Py_Finalize` at exit to flush buffers, etc. [#943](https://github.com/PyO3/pyo3/pull/943)\n- Add type parameter to PyBuffer. #[951](https://github.com/PyO3/pyo3/pull/951)\n- Require `Send` bound for `#[pyclass]`. [#966](https://github.com/PyO3/pyo3/pull/966)\n- Add `Python` argument to most methods on `PyObject` and `Py<T>` to ensure GIL safety. [#970](https://github.com/PyO3/pyo3/pull/970)\n- Change signature of `PyTypeObject::type_object` - now takes `Python` argument and returns `&PyType`. [#970](https://github.com/PyO3/pyo3/pull/970)\n- Change return type of `PyTuple::slice` and `PyTuple::split_from` from `Py<PyTuple>` to `&PyTuple`. [#970](https://github.com/PyO3/pyo3/pull/970)\n- Change return type of `PyTuple::as_slice` to `&[&PyAny]`. [#971](https://github.com/PyO3/pyo3/pull/971)\n- Rename `PyTypeInfo::type_object` to `type_object_raw`, and add `Python` argument. [#975](https://github.com/PyO3/pyo3/pull/975)\n- Update `num-complex` optional dependendency from `0.2` to `0.3`. [#977](https://github.com/PyO3/pyo3/pull/977)\n- Update `num-bigint` optional dependendency from `0.2` to `0.3`. [#978](https://github.com/PyO3/pyo3/pull/978)\n- `#[pyproto]` is re-implemented without specialization. [#961](https://github.com/PyO3/pyo3/pull/961)\n- `PyClassAlloc::alloc` is renamed to `PyClassAlloc::new`. [#990](https://github.com/PyO3/pyo3/pull/990)\n- `#[pyproto]` methods can now have return value `T` or `PyResult<T>` (previously only `PyResult<T>` was supported). [#996](https://github.com/PyO3/pyo3/pull/996)\n- `#[pyproto]` methods can now skip annotating the return type if it is `()`. [#998](https://github.com/PyO3/pyo3/pull/998)\n\n### Removed\n\n- Remove `ManagedPyRef` (unused, and needs specialization) [#930](https://github.com/PyO3/pyo3/pull/930)\n\n### Fixed\n\n- Fix passing explicit `None` to `Option<T>` argument `#[pyfunction]` with a default value. [#936](https://github.com/PyO3/pyo3/pull/936)\n- Fix `PyClass.__new__`'s not respecting subclasses when inherited by a Python class. [#990](https://github.com/PyO3/pyo3/pull/990)\n- Fix returning `Option<T>` from `#[pyproto]` methods. [#996](https://github.com/PyO3/pyo3/pull/996)\n- Fix accepting `PyRef<Self>` and `PyRefMut<Self>` to `#[getter]` and `#[setter]` methods. [#999](https://github.com/PyO3/pyo3/pull/999)\n\n## [0.10.1] - 2020-05-14\n\n### Fixed\n\n- Fix deadlock in `Python::acquire_gil` after dropping a `PyObject` or `Py<T>`. [#924](https://github.com/PyO3/pyo3/pull/924)\n\n## [0.10.0] - 2020-05-13\n\n### Added\n\n- Add FFI definition `_PyDict_NewPresized`. [#849](https://github.com/PyO3/pyo3/pull/849)\n- Implement `IntoPy<PyObject>` for `HashSet` and `BTreeSet`. [#864](https://github.com/PyO3/pyo3/pull/864)\n- Add `PyAny::dir` method. [#886](https://github.com/PyO3/pyo3/pull/886)\n- Gate macros behind a `macros` feature (enabled by default). [#897](https://github.com/PyO3/pyo3/pull/897)\n- Add ability to define class attributes using `#[classattr]` on functions in `#[pymethods]`. [#905](https://github.com/PyO3/pyo3/pull/905)\n- Implement `Clone` for `PyObject` and `Py<T>`. [#908](https://github.com/PyO3/pyo3/pull/908)\n- Implement `Deref<Target = PyAny>` for all builtin types. (`PyList`, `PyTuple`, `PyDict` etc.) [#911](https://github.com/PyO3/pyo3/pull/911)\n- Implement `Deref<Target = PyAny>` for `PyCell<T>`. [#911](https://github.com/PyO3/pyo3/pull/911)\n- Add `#[classattr]` support for associated constants in `#[pymethods]`. [#914](https://github.com/PyO3/pyo3/pull/914)\n\n### Changed\n\n- Panics will now be raised as a Python `PanicException`. [#797](https://github.com/PyO3/pyo3/pull/797)\n- Change `PyObject` and `Py<T>` reference counts to decrement immediately upon drop when the GIL is held. [#851](https://github.com/PyO3/pyo3/pull/851)\n- Allow `PyIterProtocol` methods to use either `PyRef` or `PyRefMut` as the receiver type. [#856](https://github.com/PyO3/pyo3/pull/856)\n- Change the implementation of `FromPyObject` for `Py<T>` to apply to a wider range of `T`, including all `T: PyClass`. [#880](https://github.com/PyO3/pyo3/pull/880)\n- Move all methods from the `ObjectProtocol` trait to the `PyAny` struct. [#911](https://github.com/PyO3/pyo3/pull/911)\n- Remove need for `#![feature(specialization)]` in crates depending on PyO3. [#917](https://github.com/PyO3/pyo3/pull/917)\n\n### Removed\n\n- Remove `PyMethodsProtocol` trait. [#889](https://github.com/PyO3/pyo3/pull/889)\n- Remove `num-traits` dependency. [#895](https://github.com/PyO3/pyo3/pull/895)\n- Remove `ObjectProtocol` trait. [#911](https://github.com/PyO3/pyo3/pull/911)\n- Remove `PyAny::None`. Users should use `Python::None` instead. [#911](https://github.com/PyO3/pyo3/pull/911)\n- Remove all `*ProtocolImpl` traits. [#917](https://github.com/PyO3/pyo3/pull/917)\n\n### Fixed\n\n- Fix support for `__radd__` and other `__r*__` methods as implementations for Python mathematical operators. [#839](https://github.com/PyO3/pyo3/pull/839)\n- Fix panics during garbage collection when traversing objects that were already mutably borrowed. [#855](https://github.com/PyO3/pyo3/pull/855)\n- Prevent `&'static` references to Python objects as arguments to `#[pyfunction]` and `#[pymethods]`. [#869](https://github.com/PyO3/pyo3/pull/869)\n- Fix lifetime safety bug with `AsPyRef::as_ref`. [#876](https://github.com/PyO3/pyo3/pull/876)\n- Fix `#[pyo3(get)]` attribute on `Py<T>` fields. [#880](https://github.com/PyO3/pyo3/pull/880)\n- Fix segmentation faults caused by functions such as `PyList::get_item` returning borrowed objects when it was not safe to do so. [#890](https://github.com/PyO3/pyo3/pull/890)\n- Fix segmentation faults caused by nested `Python::acquire_gil` calls creating dangling references. [#893](https://github.com/PyO3/pyo3/pull/893)\n- Fix segmentatation faults when a panic occurs during a call to `Python::allow_threads`. [#912](https://github.com/PyO3/pyo3/pull/912)\n\n## [0.9.2] - 2020-04-09\n\n### Added\n\n- `FromPyObject` implementations for `HashSet` and `BTreeSet`. [#842](https://github.com/PyO3/pyo3/pull/842)\n\n### Fixed\n\n- Correctly detect 32bit architecture. [#830](https://github.com/PyO3/pyo3/pull/830)\n\n## [0.9.1] - 2020-03-23\n\n### Fixed\n\n- Error messages for `#[pyclass]`. [#826](https://github.com/PyO3/pyo3/pull/826)\n- `FromPyObject` implementation for `PySequence`. [#827](https://github.com/PyO3/pyo3/pull/827)\n\n## [0.9.0] - 2020-03-19\n\n### Added\n\n- `PyCell`, which has RefCell-like features. [#770](https://github.com/PyO3/pyo3/pull/770)\n- `PyClass`, `PyLayout`, `PyClassInitializer`. [#683](https://github.com/PyO3/pyo3/pull/683)\n- Implemented `IntoIterator` for `PySet` and `PyFrozenSet`. [#716](https://github.com/PyO3/pyo3/pull/716)\n- `FromPyObject` is now automatically implemented for `T: Clone` pyclasses. [#730](https://github.com/PyO3/pyo3/pull/730)\n- `#[pyo3(get)]` and `#[pyo3(set)]` will now use the Rust doc-comment from the field for the Python property. [#755](https://github.com/PyO3/pyo3/pull/755)\n- `#[setter]` functions may now take an argument of `Pyo3::Python`. [#760](https://github.com/PyO3/pyo3/pull/760)\n- `PyTypeInfo::BaseLayout` and `PyClass::BaseNativeType`. [#770](https://github.com/PyO3/pyo3/pull/770)\n- `PyDowncastImpl`. [#770](https://github.com/PyO3/pyo3/pull/770)\n- Implement `FromPyObject` and `IntoPy<PyObject>` traits for arrays (up to 32). [#778](https://github.com/PyO3/pyo3/pull/778)\n- `migration.md` and `types.md` in the guide. [#795](https://github.com/PyO3/pyo3/pull/795), #[802](https://github.com/PyO3/pyo3/pull/802)\n- `ffi::{_PyBytes_Resize, _PyDict_Next, _PyDict_Contains, _PyDict_GetDictPtr}`. #[820](https://github.com/PyO3/pyo3/pull/820)\n\n### Changed\n\n- `#[new]` does not take `PyRawObject` and can return `Self`. [#683](https://github.com/PyO3/pyo3/pull/683)\n- The blanket implementations for `FromPyObject` for `&T` and `&mut T` are no longer specializable. Implement `PyTryFrom` for your type to control the behavior of `FromPyObject::extract` for your types. [#713](https://github.com/PyO3/pyo3/pull/713)\n- The implementation for `IntoPy<U> for T` where `U: FromPy<T>` is no longer specializable. Control the behavior of this via the implementation of `FromPy`. [#713](https://github.com/PyO3/pyo3/pull/713)\n- Use `parking_lot::Mutex` instead of `spin::Mutex`. [#734](https://github.com/PyO3/pyo3/pull/734)\n- Bumped minimum Rust version to `1.42.0-nightly 2020-01-21`. [#761](https://github.com/PyO3/pyo3/pull/761)\n- `PyRef` and `PyRefMut` are renewed for `PyCell`. [#770](https://github.com/PyO3/pyo3/pull/770)\n- Some new FFI functions for Python 3.8. [#784](https://github.com/PyO3/pyo3/pull/784)\n- `PyAny` is now on the top level module and prelude. [#816](https://github.com/PyO3/pyo3/pull/816)\n\n### Removed\n\n- `PyRawObject`. [#683](https://github.com/PyO3/pyo3/pull/683)\n- `PyNoArgsFunction`. [#741](https://github.com/PyO3/pyo3/pull/741)\n- `initialize_type`. To set the module name for a `#[pyclass]`, use the `module` argument to the macro. #[751](https://github.com/PyO3/pyo3/pull/751)\n- `AsPyRef::as_mut/with/with_mut/into_py/into_mut_py`. [#770](https://github.com/PyO3/pyo3/pull/770)\n- `PyTryFrom::try_from_mut/try_from_mut_exact/try_from_mut_unchecked`. [#770](https://github.com/PyO3/pyo3/pull/770)\n- `Python::mut_from_owned_ptr/mut_from_borrowed_ptr`. [#770](https://github.com/PyO3/pyo3/pull/770)\n- `ObjectProtocol::get_base/get_mut_base`. [#770](https://github.com/PyO3/pyo3/pull/770)\n\n### Fixed\n\n- Fixed unsoundness of subclassing. [#683](https://github.com/PyO3/pyo3/pull/683).\n- Clear error indicator when the exception is handled on the Rust side. [#719](https://github.com/PyO3/pyo3/pull/719)\n- Usage of raw identifiers with `#[pyo3(set)]`. [#745](https://github.com/PyO3/pyo3/pull/745)\n- Usage of `PyObject` with `#[pyo3(get)]`. [#760](https://github.com/PyO3/pyo3/pull/760)\n- `#[pymethods]` used in conjunction with `#[cfg]`. #[769](https://github.com/PyO3/pyo3/pull/769)\n- `\"*\"` in a `#[pyfunction()]` argument list incorrectly accepting any number of positional arguments (use `args = \"*\"` when this behavior is desired). #[792](https://github.com/PyO3/pyo3/pull/792)\n- `PyModule::dict`. #[809](https://github.com/PyO3/pyo3/pull/809)\n- Fix the case where `DESCRIPTION` is not null-terminated. #[822](https://github.com/PyO3/pyo3/pull/822)\n\n## [0.8.5] - 2020-01-05\n\n### Added\n\n- Implemented `FromPyObject` for `HashMap` and `BTreeMap`\n- Support for `#[name = \"foo\"]` attribute for `#[pyfunction]` and in `#[pymethods]`. [#692](https://github.com/PyO3/pyo3/pull/692)\n\n## [0.8.4] - 2019-12-14\n\n### Added\n\n- Support for `#[text_signature]` attribute. [#675](https://github.com/PyO3/pyo3/pull/675)\n\n## [0.8.3] - 2019-11-23\n\n### Removed\n\n- `#[init]` is removed. [#658](https://github.com/PyO3/pyo3/pull/658)\n\n### Fixed\n\n- Now all `&Py~` types have `!Send` bound. [#655](https://github.com/PyO3/pyo3/pull/655)\n- Fix a compile error raised by the stabilization of `!` type. [#672](https://github.com/PyO3/pyo3/issues/672).\n\n## [0.8.2] - 2019-10-27\n\n### Added\n\n- FFI compatibility for PEP 590 Vectorcall. [#641](https://github.com/PyO3/pyo3/pull/641)\n\n### Fixed\n\n- Fix PySequenceProtocol::set_item. [#624](https://github.com/PyO3/pyo3/pull/624)\n- Fix a corner case of BigInt::FromPyObject. [#630](https://github.com/PyO3/pyo3/pull/630)\n- Fix index errors in parameter conversion. [#631](https://github.com/PyO3/pyo3/pull/631)\n- Fix handling of invalid utf-8 sequences in `PyString::as_bytes`. [#639](https://github.com/PyO3/pyo3/pull/639)\n  and `PyString::to_string_lossy` [#642](https://github.com/PyO3/pyo3/pull/642).\n- Remove `__contains__` and `__iter__` from PyMappingProtocol. [#644](https://github.com/PyO3/pyo3/pull/644)\n- Fix proc-macro definition of PySetAttrProtocol. [#645](https://github.com/PyO3/pyo3/pull/645)\n\n## [0.8.1] - 2019-10-08\n\n### Added\n\n- Conversion between [num-bigint](https://github.com/rust-num/num-bigint) and Python int. [#608](https://github.com/PyO3/pyo3/pull/608)\n\n### Fixed\n\n- Make sure the right Python interpreter is used in OSX builds. [#604](https://github.com/PyO3/pyo3/pull/604)\n- Patch specialization being broken by Rust 1.40. [#614](https://github.com/PyO3/pyo3/issues/614)\n- Fix a segfault around PyErr. [#597](https://github.com/PyO3/pyo3/pull/597)\n\n## [0.8.0] - 2019-09-16\n\n### Added\n\n- `module` argument to `pyclass` macro. [#499](https://github.com/PyO3/pyo3/pull/499)\n- `py_run!` macro [#512](https://github.com/PyO3/pyo3/pull/512)\n- Use existing fields and methods before calling custom **getattr**. [#505](https://github.com/PyO3/pyo3/pull/505)\n- `PyBytes` can now be indexed just like `Vec<u8>`\n- Implement `IntoPy<PyObject>` for `PyRef` and `PyRefMut`.\n\n### Changed\n\n- Implementing the Using the `gc` parameter for `pyclass` (e.g. `#[pyclass(gc)]`) without implementing the `class::PyGCProtocol` trait is now a compile-time error. Failing to implement this trait could lead to segfaults. [#532](https://github.com/PyO3/pyo3/pull/532)\n- `PyByteArray::data` has been replaced with `PyDataArray::to_vec` because returning a `&[u8]` is unsound. (See [this comment](https://github.com/PyO3/pyo3/issues/373#issuecomment-512332696) for a great write-up for why that was unsound)\n- Replace `mashup` with `paste`.\n- `GILPool` gained a `Python` marker to prevent it from being misused to release Python objects without the GIL held.\n\n### Removed\n\n- `IntoPyObject` was replaced with `IntoPy<PyObject>`\n- `#[pyclass(subclass)]` is hidden a `unsound-subclass` feature because it's causing segmentation faults.\n\n### Fixed\n\n- More readable error message for generics in pyclass [#503](https://github.com/PyO3/pyo3/pull/503)\n\n## [0.7.0] - 2019-05-26\n\n### Added\n\n- PyPy support by omerbenamram in [#393](https://github.com/PyO3/pyo3/pull/393)\n- Have `PyModule` generate an index of its members (`__all__` list).\n- Allow `slf: PyRef<T>` for pyclass(#419)\n- Allow to use lifetime specifiers in `pymethods`\n- Add `marshal` module. [#460](https://github.com/PyO3/pyo3/pull/460)\n\n### Changed\n\n- `Python::run` returns `PyResult<()>` instead of `PyResult<&PyAny>`.\n- Methods decorated with `#[getter]` and `#[setter]` can now omit wrapping the\n  result type in `PyResult` if they don't raise exceptions.\n\n### Fixed\n\n- `type_object::PyTypeObject` has been marked unsafe because breaking the contract `type_object::PyTypeObject::init_type` can lead to UB.\n- Fixed automatic derive of `PySequenceProtocol` implementation in [#423](https://github.com/PyO3/pyo3/pull/423).\n- Capitalization & better wording to README.md.\n- Docstrings of properties is now properly set using the doc of the `#[getter]` method.\n- Fixed issues with `pymethods` crashing on doc comments containing double quotes.\n- `PySet::new` and `PyFrozenSet::new` now return `PyResult<&Py[Frozen]Set>`; exceptions are raised if\n  the items are not hashable.\n- Fixed building using `venv` on Windows.\n- `PyTuple::new` now returns `&PyTuple` instead of `Py<PyTuple>`.\n- Fixed several issues with argument parsing; notable, the `*args` and `**kwargs`\n  tuple/dict now doesn't contain arguments that are otherwise assigned to parameters.\n\n## [0.6.0] - 2019-03-28\n\n### Regressions\n\n- Currently, [#341](https://github.com/PyO3/pyo3/issues/341) causes `cargo test` to fail with weird linking errors when the `extension-module` feature is activated. For now you can work around this by making the `extension-module` feature optional and running the tests with `cargo test --no-default-features`:\n\n```toml\n[dependencies.pyo3]\nversion = \"0.6.0\"\n\n[features]\nextension-module = [\"pyo3/extension-module\"]\ndefault = [\"extension-module\"]\n```\n\n### Added\n\n- Added a `wrap_pymodule!` macro similar to the existing `wrap_pyfunction!` macro. Only available on python 3\n- Added support for cross compiling (e.g. to arm v7) by mtp401 in [#327](https://github.com/PyO3/pyo3/pull/327). See the \"Cross Compiling\" section in the \"Building and Distribution\" chapter of the guide for more details.\n- The `PyRef` and `PyRefMut` types, which allow to differentiate between an instance of a rust struct on the rust heap and an instance that is embedded inside a python object. By kngwyu in [#335](https://github.com/PyO3/pyo3/pull/335)\n- Added `FromPy<T>` and `IntoPy<T>` which are equivalent to `From<T>` and `Into<T>` except that they require a gil token.\n- Added `ManagedPyRef`, which should eventually replace `ToBorrowedObject`.\n\n### Changed\n\n- Renamed `PyObjectRef` to `PyAny` in #388\n- Renamed `add_function` to `add_wrapped` as it now also supports modules.\n- Renamed `#[pymodinit]` to `#[pymodule]`\n- `py.init(|| value)` becomes `Py::new(value)`\n- `py.init_ref(|| value)` becomes `PyRef::new(value)`\n- `py.init_mut(|| value)` becomes `PyRefMut::new(value)`.\n- `PyRawObject::init` is now infallible, e.g. it returns `()` instead of `PyResult<()>`.\n- Renamed `py_exception!` to `create_exception!` and refactored the error macros.\n- Renamed `wrap_function!` to `wrap_pyfunction!`\n- Renamed `#[prop(get, set)]` to `#[pyo3(get, set)]`\n- `#[pyfunction]` now supports the same arguments as `#[pyfn()]`\n- Some macros now emit proper spanned errors instead of panics.\n- Migrated to the 2018 edition\n- `crate::types::exceptions` moved to `crate::exceptions`\n- Replace `IntoPyTuple` with `IntoPy<Py<PyTuple>>`.\n- `IntoPyPointer` and `ToPyPointer` moved into the crate root.\n- `class::CompareOp` moved into `class::basic::CompareOp`\n- PyTypeObject is now a direct subtrait PyTypeCreate, removing the old cyclical implementation in [#350](https://github.com/PyO3/pyo3/pull/350)\n- Add `PyList::{sort, reverse}` by chr1sj0nes in [#357](https://github.com/PyO3/pyo3/pull/357) and [#358](https://github.com/PyO3/pyo3/pull/358)\n- Renamed the `typeob` module to `type_object`\n\n### Removed\n\n- `PyToken` was removed due to unsoundness (See [#94](https://github.com/PyO3/pyo3/issues/94)).\n- Removed the unnecessary type parameter from `PyObjectAlloc`\n- `NoArgs`. Just use an empty tuple\n- `PyObjectWithGIL`. `PyNativeType` is sufficient now that PyToken is removed.\n\n### Fixed\n\n- A soudness hole where every instances of a `#[pyclass]` struct was considered to be part of a python object, even though you can create instances that are not part of the python heap. This was fixed through `PyRef` and `PyRefMut`.\n- Fix kwargs support in [#328](https://github.com/PyO3/pyo3/pull/328).\n- Add full support for `__dict__` in [#403](https://github.com/PyO3/pyo3/pull/403).\n\n## [0.5.3] - 2019-01-04\n\n### Fixed\n\n- Fix memory leak in ArrayList by kngwyu [#316](https://github.com/PyO3/pyo3/pull/316)\n\n## [0.5.2] - 2018-11-25\n\n### Fixed\n\n- Fix undeterministic segfaults when creating many objects by kngwyu in [#281](https://github.com/PyO3/pyo3/pull/281)\n\n## [0.5.1] - 2018-11-24\n\nYanked\n\n## [0.5.0] - 2018-11-11\n\n### Added\n\n- `#[pyclass]` objects can now be returned from rust functions\n- `PyComplex` by kngwyu in [#226](https://github.com/PyO3/pyo3/pull/226)\n- `PyDict::from_sequence`, equivalent to `dict([(key, val), ...])`\n- Bindings for the `datetime` standard library types: `PyDate`, `PyTime`, `PyDateTime`, `PyTzInfo`, `PyDelta` with associated `ffi` types, by pganssle [#200](https://github.com/PyO3/pyo3/pull/200).\n- `PyString`, `PyUnicode`, and `PyBytes` now have an `as_bytes` method that returns `&[u8]`.\n- `PyObjectProtocol::get_type_ptr` by ijl in [#242](https://github.com/PyO3/pyo3/pull/242)\n\n### Changed\n\n- Removes the types from the root module and the prelude. They now live in `pyo3::types` instead.\n- All exceptions are constructed with `py_err` instead of `new`, as they return `PyErr` and not `Self`.\n- `as_mut` and friends take and `&mut self` instead of `&self`\n- `ObjectProtocol::call` now takes an `Option<&PyDict>` for the kwargs instead of an `IntoPyDictPointer`.\n- `IntoPyDictPointer` was replace by `IntoPyDict` which doesn't convert `PyDict` itself anymore and returns a `PyDict` instead of `*mut PyObject`.\n- `PyTuple::new` now takes an `IntoIterator` instead of a slice\n- Updated to syn 0.15\n- Splitted `PyTypeObject` into `PyTypeObject` without the create method and `PyTypeCreate` with requires `PyObjectAlloc<Self> + PyTypeInfo + Sized`.\n- Ran `cargo edition --fix` which prefixed path with `crate::` for rust 2018\n- Renamed `async` to `pyasync` as async will be a keyword in the 2018 edition.\n- Starting to use `NonNull<*mut PyObject>` for Py and PyObject by ijl [#260](https://github.com/PyO3/pyo3/pull/260)\n\n### Removed\n\n- Removed most entries from the prelude. The new prelude is small and clear.\n- Slowly removing specialization uses\n- `PyString`, `PyUnicode`, and `PyBytes` no longer have a `data` method\n  (replaced by `as_bytes`) and `PyStringData` has been removed.\n- The pyobject_extract macro\n\n### Fixed\n\n- Added an explanation that the GIL can temporarily be released even while holding a GILGuard.\n- Lots of clippy errors\n- Fix segfault on calling an unknown method on a PyObject\n- Work around a [bug](https://github.com/rust-lang/rust/issues/55380) in the rust compiler by kngwyu [#252](https://github.com/PyO3/pyo3/pull/252)\n- Fixed a segfault with subclassing pyo3 create classes and using `__class__` by kngwyu [#263](https://github.com/PyO3/pyo3/pull/263)\n\n## [0.4.1] - 2018-08-20\n\n### Changed\n\n- PyTryFrom's error is always to `PyDowncastError`\n\n### Fixed\n\n- Fixed compilation on nightly since `use_extern_macros` was stabilized\n\n### Removed\n\n- The pyobject_downcast macro\n\n## [0.4.0] - 2018-07-30\n\n### Changed\n\n- Merged both examples into one\n- Rustfmt all the things :heavy_check_mark:\n- Switched to [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)\n\n### Removed\n\n- Conversions from tuples to PyDict due to [rust-lang/rust#52050](https://github.com/rust-lang/rust/issues/52050)\n\n## [0.3.2] - 2018-07-22\n\n### Changed\n\n- Replaced `concat_idents` with mashup\n\n## [0.3.1] - 2018-07-18\n\n### Fixed\n\n- Fixed scoping bug in pyobject_native_type that would break rust-numpy\n\n## [0.3.0] - 2018-07-18\n\n### Added\n\n- A few internal macros became part of the public api ([#155](https://github.com/PyO3/pyo3/pull/155), [#186](https://github.com/PyO3/pyo3/pull/186))\n- Always clone in getters. This allows using the get-annotation on all Clone-Types\n\n### Changed\n\n- Upgraded to syn 0.14 which means much better error messages :tada:\n- 128 bit integer support by [kngwyu](https://github.com/kngwyu) ([#137](https://github.com/PyO3/pyo3/pull/173))\n- `proc_macro` has been stabilized on nightly ([rust-lang/rust#52081](https://github.com/rust-lang/rust/pull/52081)). This means that we can remove the `proc_macro` feature, but now we need the `use_extern_macros` from the 2018 edition instead.\n- All proc macro are now prefixed with `py` and live in the prelude. This means you can use `#[pyclass]`, `#[pymethods]`, `#[pyproto]`, `#[pyfunction]` and `#[pymodinit]` directly, at least after a `use pyo3::prelude::*`. They were also moved into a module called `proc_macro`. You shouldn't use `#[pyo3::proc_macro::pyclass]` or other longer paths in attributes because `proc_macro_path_invoc` isn't going to be stabilized soon.\n- Renamed the `base` option in the `pyclass` macro to `extends`.\n- `#[pymodinit]` uses the function name as module name, unless the name is overrriden with `#[pymodinit(name)]`\n- The guide is now properly versioned.\n\n## [0.2.7] - 2018-05-18\n\n### Fixed\n\n- Fix nightly breakage with proc_macro_path\n\n## [0.2.6] - 2018-04-03\n\n### Fixed\n\n- Fix compatibility with TryFrom trait #137\n\n## [0.2.5] - 2018-02-21\n\n### Added\n\n- CPython 3.7 support\n\n### Fixed\n\n- Embedded CPython 3.7b1 crashes on initialization #110\n- Generated extension functions are weakly typed #108\n- call_method\\* crashes when the method does not exist #113\n- Allow importing exceptions from nested modules #116\n\n## [0.2.4] - 2018-01-19\n\n### Added\n\n- Allow to get mutable ref from PyObject #106\n- Drop `RefFromPyObject` trait\n- Add Python::register_any method\n\n### Fixed\n\n- Fix impl `FromPyObject` for `Py<T>`\n- Mark method that work with raw pointers as unsafe #95\n\n## [0.2.3] - 11-27-2017\n\n### Changed\n\n- Rustup to 1.23.0-nightly 2017-11-07\n\n### Fixed\n\n- Proper `c_char` usage #93\n\n### Removed\n\n- Remove use of now unneeded 'AsciiExt' trait\n\n## [0.2.2] - 09-26-2017\n\n### Changed\n\n- Rustup to 1.22.0-nightly 2017-09-30\n\n## [0.2.1] - 09-26-2017\n\n### Fixed\n\n- Fix rustc const_fn nightly breakage\n\n## [0.2.0] - 08-12-2017\n\n### Added\n\n- Added inheritance support #15\n- Added weakref support #56\n- Added subclass support #64\n- Added `self.__dict__` supoort #68\n- Added `pyo3::prelude` module #70\n- Better `Iterator` support for PyTuple, PyList, PyDict #75\n- Introduce IntoPyDictPointer similar to IntoPyTuple #69\n\n### Changed\n\n- Allow to add gc support without implementing PyGCProtocol #57\n- Refactor `PyErr` implementation. Drop `py` parameter from constructor.\n\n## [0.1.0] - 07-23-2017\n\n### Added\n\n- Initial release\n\n[Unreleased]: https://github.com/pyo3/pyo3/compare/v0.23.3...HEAD\n[0.23.3]: https://github.com/pyo3/pyo3/compare/v0.23.2...v0.23.3\n[0.23.2]: https://github.com/pyo3/pyo3/compare/v0.23.1...v0.23.2\n[0.23.1]: https://github.com/pyo3/pyo3/compare/v0.23.0...v0.23.1\n[0.23.0]: https://github.com/pyo3/pyo3/compare/v0.22.5...v0.23.0\n[0.22.5]: https://github.com/pyo3/pyo3/compare/v0.22.4...v0.22.5\n[0.22.4]: https://github.com/pyo3/pyo3/compare/v0.22.3...v0.22.4\n[0.22.3]: https://github.com/pyo3/pyo3/compare/v0.22.2...v0.22.3\n[0.22.2]: https://github.com/pyo3/pyo3/compare/v0.22.1...v0.22.2\n[0.22.1]: https://github.com/pyo3/pyo3/compare/v0.22.0...v0.22.1\n[0.22.0]: https://github.com/pyo3/pyo3/compare/v0.21.2...v0.22.0\n[0.21.2]: https://github.com/pyo3/pyo3/compare/v0.21.1...v0.21.2\n[0.21.1]: https://github.com/pyo3/pyo3/compare/v0.21.0...v0.21.1\n[0.21.0]: https://github.com/pyo3/pyo3/compare/v0.20.3...v0.21.0\n[0.21.0-beta.0]: https://github.com/pyo3/pyo3/compare/v0.20.3...v0.21.0-beta.0\n[0.20.3]: https://github.com/pyo3/pyo3/compare/v0.20.2...v0.20.3\n[0.20.2]: https://github.com/pyo3/pyo3/compare/v0.20.1...v0.20.2\n[0.20.1]: https://github.com/pyo3/pyo3/compare/v0.20.0...v0.20.1\n[0.20.0]: https://github.com/pyo3/pyo3/compare/v0.19.2...v0.20.0\n[0.19.2]: https://github.com/pyo3/pyo3/compare/v0.19.1...v0.19.2\n[0.19.1]: https://github.com/pyo3/pyo3/compare/v0.19.0...v0.19.1\n[0.19.0]: https://github.com/pyo3/pyo3/compare/v0.18.3...v0.19.0\n[0.18.3]: https://github.com/pyo3/pyo3/compare/v0.18.2...v0.18.3\n[0.18.2]: https://github.com/pyo3/pyo3/compare/v0.18.1...v0.18.2\n[0.18.1]: https://github.com/pyo3/pyo3/compare/v0.18.0...v0.18.1\n[0.18.0]: https://github.com/pyo3/pyo3/compare/v0.17.3...v0.18.0\n[0.17.3]: https://github.com/pyo3/pyo3/compare/v0.17.2...v0.17.3\n[0.17.2]: https://github.com/pyo3/pyo3/compare/v0.17.1...v0.17.2\n[0.17.1]: https://github.com/pyo3/pyo3/compare/v0.17.0...v0.17.1\n[0.17.0]: https://github.com/pyo3/pyo3/compare/v0.16.6...v0.17.0\n[0.16.6]: https://github.com/pyo3/pyo3/compare/v0.16.5...v0.16.6\n[0.16.5]: https://github.com/pyo3/pyo3/compare/v0.16.4...v0.16.5\n[0.16.4]: https://github.com/pyo3/pyo3/compare/v0.16.3...v0.16.4\n[0.16.3]: https://github.com/pyo3/pyo3/compare/v0.16.2...v0.16.3\n[0.16.2]: https://github.com/pyo3/pyo3/compare/v0.16.1...v0.16.2\n[0.16.1]: https://github.com/pyo3/pyo3/compare/v0.16.0...v0.16.1\n[0.16.0]: https://github.com/pyo3/pyo3/compare/v0.15.1...v0.16.0\n[0.15.2]: https://github.com/pyo3/pyo3/compare/v0.15.1...v0.15.2\n[0.15.1]: https://github.com/pyo3/pyo3/compare/v0.15.0...v0.15.1\n[0.15.0]: https://github.com/pyo3/pyo3/compare/v0.14.5...v0.15.0\n[0.14.5]: https://github.com/pyo3/pyo3/compare/v0.14.4...v0.14.5\n[0.14.4]: https://github.com/pyo3/pyo3/compare/v0.14.3...v0.14.4\n[0.14.3]: https://github.com/pyo3/pyo3/compare/v0.14.2...v0.14.3\n[0.14.2]: https://github.com/pyo3/pyo3/compare/v0.14.1...v0.14.2\n[0.14.1]: https://github.com/pyo3/pyo3/compare/v0.14.0...v0.14.1\n[0.14.0]: https://github.com/pyo3/pyo3/compare/v0.13.2...v0.14.0\n[0.13.2]: https://github.com/pyo3/pyo3/compare/v0.13.1...v0.13.2\n[0.13.1]: https://github.com/pyo3/pyo3/compare/v0.13.0...v0.13.1\n[0.13.0]: https://github.com/pyo3/pyo3/compare/v0.12.4...v0.13.0\n[0.12.4]: https://github.com/pyo3/pyo3/compare/v0.12.3...v0.12.4\n[0.12.3]: https://github.com/pyo3/pyo3/compare/v0.12.2...v0.12.3\n[0.12.2]: https://github.com/pyo3/pyo3/compare/v0.12.1...v0.12.2\n[0.12.1]: https://github.com/pyo3/pyo3/compare/v0.12.0...v0.12.1\n[0.12.0]: https://github.com/pyo3/pyo3/compare/v0.11.1...v0.12.0\n[0.11.1]: https://github.com/pyo3/pyo3/compare/v0.11.0...v0.11.1\n[0.11.0]: https://github.com/pyo3/pyo3/compare/v0.10.1...v0.11.0\n[0.10.1]: https://github.com/pyo3/pyo3/compare/v0.10.0...v0.10.1\n[0.10.0]: https://github.com/pyo3/pyo3/compare/v0.9.2...v0.10.0\n[0.9.2]: https://github.com/pyo3/pyo3/compare/v0.9.1...v0.9.2\n[0.9.1]: https://github.com/pyo3/pyo3/compare/v0.9.0...v0.9.1\n[0.9.0]: https://github.com/pyo3/pyo3/compare/v0.8.5...v0.9.0\n[0.8.5]: https://github.com/pyo3/pyo3/compare/v0.8.4...v0.8.5\n[0.8.4]: https://github.com/pyo3/pyo3/compare/v0.8.3...v0.8.4\n[0.8.3]: https://github.com/pyo3/pyo3/compare/v0.8.2...v0.8.3\n[0.8.2]: https://github.com/pyo3/pyo3/compare/v0.8.1...v0.8.2\n[0.8.1]: https://github.com/pyo3/pyo3/compare/v0.8.0...v0.8.1\n[0.8.0]: https://github.com/pyo3/pyo3/compare/v0.7.0...v0.8.0\n[0.7.0]: https://github.com/pyo3/pyo3/compare/v0.6.0...v0.7.0\n[0.6.0]: https://github.com/pyo3/pyo3/compare/v0.5.3...v0.6.0\n[0.5.3]: https://github.com/pyo3/pyo3/compare/v0.5.2...v0.5.3\n[0.5.2]: https://github.com/pyo3/pyo3/compare/v0.5.1...v0.5.2\n[0.5.1]: https://github.com/pyo3/pyo3/compare/v0.5.0...v0.5.1\n[0.5.0]: https://github.com/pyo3/pyo3/compare/v0.4.1...v0.5.0\n[0.4.1]: https://github.com/pyo3/pyo3/compare/v0.4.0...v0.4.1\n[0.4.0]: https://github.com/pyo3/pyo3/compare/v0.3.2...v0.4.0\n[0.3.2]: https://github.com/pyo3/pyo3/compare/v0.3.1...v0.3.2\n[0.3.1]: https://github.com/pyo3/pyo3/compare/v0.3.0...v0.3.1\n[0.3.0]: https://github.com/pyo3/pyo3/compare/v0.2.7...v0.3.0\n[0.2.7]: https://github.com/pyo3/pyo3/compare/v0.2.6...v0.2.7\n[0.2.6]: https://github.com/pyo3/pyo3/compare/v0.2.5...v0.2.6\n[0.2.5]: https://github.com/pyo3/pyo3/compare/v0.2.4...v0.2.5\n[0.2.4]: https://github.com/pyo3/pyo3/compare/v0.2.3...v0.2.4\n[0.2.3]: https://github.com/pyo3/pyo3/compare/v0.2.2...v0.2.3\n[0.2.2]: https://github.com/pyo3/pyo3/compare/v0.2.1...v0.2.2\n[0.2.1]: https://github.com/pyo3/pyo3/compare/v0.2.0...v0.2.1\n[0.2.0]: https://github.com/pyo3/pyo3/compare/v0.1.0...v0.2.0\n[0.1.0]: https://github.com/PyO3/pyo3/tree/0.1.0\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.2841796875,
          "content": "cff-version: 1.2.0\ntitle: PyO3\nmessage: >-\n  If you use this software as part of a publication and wish to cite\n  it, please use the metadata from this file.\ntype: software\nauthors:\n  - name: PyO3 Project and Contributors\n    website: https://github.com/PyO3\nlicense:\n  - Apache-2.0\n  - MIT\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 5.8681640625,
          "content": "[package]\nname = \"pyo3\"\nversion = \"0.23.3\"\ndescription = \"Bindings to Python interpreter\"\nauthors = [\"PyO3 Project and Contributors <https://github.com/PyO3>\"]\nreadme = \"README.md\"\nkeywords = [\"pyo3\", \"python\", \"cpython\", \"ffi\"]\nhomepage = \"https://github.com/pyo3/pyo3\"\nrepository = \"https://github.com/pyo3/pyo3\"\ndocumentation = \"https://docs.rs/crate/pyo3/\"\ncategories = [\"api-bindings\", \"development-tools::ffi\"]\nlicense = \"MIT OR Apache-2.0\"\nexclude = [\"/.gitignore\", \".cargo/config\", \"/codecov.yml\", \"/Makefile\", \"/pyproject.toml\", \"/noxfile.py\", \"/.github\", \"/tests/test_compile_error.rs\", \"/tests/ui\"]\nedition = \"2021\"\nrust-version = \"1.63\"\n\n[dependencies]\ncfg-if = \"1.0\"\nlibc = \"0.2.62\"\nmemoffset = \"0.9\"\nonce_cell = \"1.13\"\n\n# ffi bindings to the python interpreter, split into a separate crate so they can be used independently\npyo3-ffi = { path = \"pyo3-ffi\", version = \"=0.23.3\" }\n\n# support crates for macros feature\npyo3-macros = { path = \"pyo3-macros\", version = \"=0.23.3\", optional = true }\nindoc = { version = \"2.0.1\", optional = true }\nunindent = { version = \"0.2.1\", optional = true }\n\n# support crate for multiple-pymethods feature\ninventory = { version = \"0.3.0\", optional = true }\n\n# crate integrations that can be added using the eponymous features\nanyhow = { version = \"1.0.1\", optional = true }\nchrono = { version = \"0.4.25\", default-features = false, optional = true }\nchrono-tz = { version = \">= 0.10, < 0.11\", default-features = false, optional = true }\neither = { version = \"1.9\", optional = true }\neyre = { version = \">= 0.6.8, < 0.7\", optional = true }\nhashbrown = { version = \">= 0.14.5, < 0.16\", optional = true }\nindexmap = { version = \">= 2.5.0, < 3\", optional = true }\nnum-bigint = { version = \"0.4.2\", optional = true }\nnum-complex = { version = \">= 0.4.6, < 0.5\", optional = true }\nnum-rational = {version = \"0.4.1\", optional = true }\nrust_decimal = { version = \"1.15\", default-features = false, optional = true }\nserde = { version = \"1.0\", optional = true }\nsmallvec = { version = \"1.0\", optional = true }\n\n[target.'cfg(not(target_has_atomic = \"64\"))'.dependencies]\nportable-atomic = \"1.0\"\n\n[dev-dependencies]\nassert_approx_eq = \"1.1.0\"\nchrono = \"0.4.25\"\nchrono-tz = \">= 0.10, < 0.11\"\n# Required for \"and $N others\" normalization\ntrybuild = \">=1.0.70\"\nproptest = { version = \"1.0\", default-features = false, features = [\"std\"] }\nsend_wrapper = \"0.6\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0.61\"\nrayon = \"1.6.1\"\nfutures = \"0.3.28\"\ntempfile = \"3.12.0\"\nstatic_assertions = \"1.1.0\"\nuuid = {version = \"1.10.0\", features = [\"v4\"] }\n\n[build-dependencies]\npyo3-build-config = { path = \"pyo3-build-config\", version = \"=0.23.3\", features = [\"resolve-config\"] }\n\n[features]\ndefault = [\"macros\"]\n\n# Enables support for `async fn` for `#[pyfunction]` and `#[pymethods]`.\nexperimental-async = [\"macros\", \"pyo3-macros/experimental-async\"]\n\n# Enables pyo3::inspect module and additional type information on FromPyObject\n# and IntoPy traits\nexperimental-inspect = []\n\n# Enables macros: #[pyclass], #[pymodule], #[pyfunction] etc.\nmacros = [\"pyo3-macros\", \"indoc\", \"unindent\"]\n\n# Enables multiple #[pymethods] per #[pyclass]\nmultiple-pymethods = [\"inventory\", \"pyo3-macros/multiple-pymethods\"]\n\n# Use this feature when building an extension module.\n# It tells the linker to keep the python symbols unresolved,\n# so that the module can also be used with statically linked python interpreters.\nextension-module = [\"pyo3-ffi/extension-module\"]\n\n# Use the Python limited API. See https://www.python.org/dev/peps/pep-0384/ for more.\nabi3 = [\"pyo3-build-config/abi3\", \"pyo3-ffi/abi3\"]\n\n# With abi3, we can manually set the minimum Python version.\nabi3-py37 = [\"abi3-py38\", \"pyo3-build-config/abi3-py37\", \"pyo3-ffi/abi3-py37\"]\nabi3-py38 = [\"abi3-py39\", \"pyo3-build-config/abi3-py38\", \"pyo3-ffi/abi3-py38\"]\nabi3-py39 = [\"abi3-py310\", \"pyo3-build-config/abi3-py39\", \"pyo3-ffi/abi3-py39\"]\nabi3-py310 = [\"abi3-py311\", \"pyo3-build-config/abi3-py310\", \"pyo3-ffi/abi3-py310\"]\nabi3-py311 = [\"abi3-py312\", \"pyo3-build-config/abi3-py311\", \"pyo3-ffi/abi3-py311\"]\nabi3-py312 = [\"abi3\", \"pyo3-build-config/abi3-py312\", \"pyo3-ffi/abi3-py312\"]\n\n# Automatically generates `python3.dll` import libraries for Windows targets.\ngenerate-import-lib = [\"pyo3-ffi/generate-import-lib\"]\n\n# Changes `Python::with_gil` to automatically initialize the Python interpreter if needed.\nauto-initialize = []\n\n# Enables `Clone`ing references to Python objects `Py<T>` which panics if the GIL is not held.\npy-clone = []\n\n# Optimizes PyObject to Vec conversion and so on.\nnightly = []\n\n# Activates all additional features\n# This is mostly intended for testing purposes - activating *all* of these isn't particularly useful.\nfull = [\n    \"macros\",\n    # \"multiple-pymethods\", # Not supported by wasm\n    \"anyhow\",\n    \"chrono\",\n    \"chrono-tz\",\n    \"either\",\n    \"experimental-async\",\n    \"experimental-inspect\",\n    \"eyre\",\n    \"hashbrown\",\n    \"indexmap\",\n    \"num-bigint\",\n    \"num-complex\",\n    \"num-rational\",\n    \"py-clone\",\n    \"rust_decimal\",\n    \"serde\",\n    \"smallvec\",\n]\n\n[workspace]\nmembers = [\n    \"pyo3-ffi\",\n    \"pyo3-build-config\",\n    \"pyo3-macros\",\n    \"pyo3-macros-backend\",\n    \"pytests\",\n    \"examples\",\n]\n\n[package.metadata.docs.rs]\nno-default-features = true\nfeatures = [\"full\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[workspace.lints.clippy]\nchecked_conversions = \"warn\"\ndbg_macro = \"warn\"\nexplicit_into_iter_loop = \"warn\"\nexplicit_iter_loop = \"warn\"\nfilter_map_next = \"warn\"\nflat_map_option = \"warn\"\nlet_unit_value = \"warn\"\nmanual_assert = \"warn\"\nmanual_ok_or = \"warn\"\ntodo = \"warn\"\nunnecessary_wraps = \"warn\"\nuseless_transmute = \"warn\"\nused_underscore_binding = \"warn\"\n\n[workspace.lints.rust]\nelided_lifetimes_in_paths = \"warn\"\ninvalid_doc_attributes = \"warn\"\nrust_2018_idioms = { level = \"warn\", priority = -1 }\nrust_2021_prelude_collisions = \"warn\"\nunused_lifetimes = \"warn\"\n\n[workspace.lints.rustdoc]\nbroken_intra_doc_links = \"warn\"\nbare_urls = \"warn\"\n\n[lints]\nworkspace = true\n"
        },
        {
          "name": "Code-of-Conduct.md",
          "type": "blob",
          "size": 3.25390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 11.4873046875,
          "content": "# Contributing\n\nThank you for your interest in contributing to PyO3! All are welcome - please consider reading our [Code of Conduct](https://github.com/PyO3/pyo3/blob/main/Code-of-Conduct.md) to keep our community positive and inclusive.\n\nIf you are searching for ideas how to contribute, proceed to the [\"Getting started contributing\"](#getting-started-contributing) section. If you have found a specific issue to contribute to and need information about the development process, you may find the section [\"Writing pull requests\"](#writing-pull-requests) helpful.\n\nIf you want to become familiar with the codebase, see\n[Architecture.md](https://github.com/PyO3/pyo3/blob/main/Architecture.md).\n\n## Getting started contributing\n\nPlease join in with any part of PyO3 which interests you. We use GitHub issues to record all bugs and ideas. Feel free to request an issue to be assigned to you if you want to work on it.\n\nYou can browse the API of the non-public parts of PyO3 [here](https://pyo3.netlify.app/internal/doc/pyo3/index.html).\n\nThe following sections also contain specific ideas on where to start contributing to PyO3.\n\n## Setting up a development environment\n\nTo work and develop PyO3, you need Python & Rust installed on your system.\n* We encourage the use of [rustup](https://rustup.rs/) to be able to select and choose specific toolchains based on the project.\n* [Pyenv](https://github.com/pyenv/pyenv) is also highly recommended for being able to choose a specific Python version.\n* [virtualenv](https://virtualenv.pypa.io/en/latest/) can also be used with or without Pyenv to use specific installed Python versions.\n* [`nox`][nox] is used to automate many of our CI tasks.\n\n### Help users identify bugs\n\nThe [PyO3 Discord server](https://discord.gg/33kcChzH7f) is very active with users who are new to PyO3, and often completely new to Rust. Helping them debug is a great way to get experience with the PyO3 codebase.\n\nHelping others often reveals bugs, documentation weaknesses, and missing APIs. It's a good idea to open GitHub issues for these immediately so the resolution can be designed and implemented!\n\n### Implement issues ready for development\n\nIssues where the solution is clear and work is not in progress use the [needs-implementer](https://github.com/PyO3/pyo3/issues?q=is%3Aissue+is%3Aopen+label%3Aneeds-implementer) label.\n\nDon't be afraid if the solution is not clear to you! The core PyO3 contributors will be happy to mentor you through any questions you have to help you write the solution.\n\n### Help write great docs\n\nPyO3 has a user guide (using mdbook) as well as the usual Rust API docs. The aim is for both of these to be detailed, easy to understand, and up-to-date. Pull requests are always welcome to fix typos, change wording, add examples, etc.\n\nThere are some specific areas of focus where help is currently needed for the documentation:\n\n- Issues requesting documentation improvements are tracked with the [documentation](https://github.com/PyO3/pyo3/issues?q=is%3Aissue+is%3Aopen+label%3Adocumentation) label.\n- Not all APIs had docs or examples when they were made. The goal is to have documentation on all PyO3 APIs ([#306](https://github.com/PyO3/pyo3/issues/306)). If you see an API lacking a doc, please write one and open a PR!\n\nTo build the docs (including all features), install [`nox`][nox] and then run\n\n```shell\nnox -s docs -- open\n```\n\n#### Doctests\n\nWe use lots of code blocks in our docs. Run `cargo test --doc` when making changes to check that\nthe doctests still work, or `cargo test` to run all the Rust tests including doctests. See\nhttps://doc.rust-lang.org/rustdoc/documentation-tests.html for a guide on doctests.\n\n#### Building the guide\n\nYou can preview the user guide by building it locally with `mdbook`.\n\nFirst, install [`mdbook`][mdbook] and [`nox`][nox]. Then, run\n\n```shell\nnox -s build-guide -- --open\n```\n\nTo check all links in the guide are valid, also install [`lychee`][lychee] and use the `check-guide` session instead:\n\n```shell\nnox -s check-guide\n```\n\n### Help design the next PyO3\n\nIssues which don't yet have a clear solution use the [needs-design](https://github.com/PyO3/pyo3/issues?q=is%3Aissue+is%3Aopen+label%3Aneeds-design) label.\n\nIf any of these issues interest you, please join in with the conversation on the issue! All opinions are valued, and if you're interested in going further with e.g. draft PRs to experiment with API designs, even better!\n\n### Review pull requests\n\nEverybody is welcome to submit comments on open PRs. Please help ensure new PyO3 APIs are safe, performant, tidy, and easy to use!\n\n## Writing pull requests\n\nHere are a few things to note when you are writing PRs.\n\n### Testing and Continuous Integration\n\nThe PyO3 repo uses GitHub Actions. PRs are blocked from merging if CI is not successful. Formatting, linting and tests are checked for all Rust and Python code. In addition, all warnings in Rust code are disallowed (using `RUSTFLAGS=\"-D warnings\"`).\n\nTests run with all supported Python versions with the latest stable Rust compiler, as well as for Python 3.9 with the minimum supported Rust version.\n\nIf you are adding a new feature, you should add it to the `full` feature in our *Cargo.toml** so that it is tested in CI.\n\nYou can run these checks yourself with `nox`. Use  `nox -l` to list the full set of subcommands you can run.\n\n#### Linting Python code\n`nox -s ruff`\n\n#### Linting Rust code\n`nox -s rustfmt`\n\n#### Semver checks\n`cargo semver-checks check-release`\n\n#### Clippy\n`nox -s clippy-all`\n\n#### Tests\n`nox -s test` or `cargo test` for Rust tests only, `nox -f pytests/noxfile.py -s test` for Python tests only\n\n#### Check all conditional compilation\n`nox -s check-feature-powerset`\n\n#### UI Tests\n\nPyO3 uses [`trybuild`](https://github.com/dtolnay/trybuild) to develop UI tests to capture error messages from the Rust compiler for some of the macro functionality.\n\nBecause there are several feature combinations for these UI tests, when updating them all (e.g. for a new Rust compiler version) it may be helpful to use the `update-ui-tests` nox session:\n\n```bash\nnox -s update-ui-tests\n```\n\n### Documenting changes\n\nWe use [towncrier](https://towncrier.readthedocs.io/en/stable/index.html) to generate a CHANGELOG for each release.\n\nTo include your changes in the release notes, you should create one (or more) news items in the `newsfragments` directory. Valid news items should be saved as `<PR>.<CATEGORY>.md` where `<PR>` is the pull request number and `<CATEGORY>` is one of the following:\n- `packaging` - for dependency changes and Python / Rust version compatibility changes\n- `added` - for new features\n- `changed` - for features which already existed but have been altered or deprecated\n- `removed` - for features which have been removed\n- `fixed` - for \"changed\" features which were classed as a bugfix\n\nDocs-only PRs do not need news items; start your PR title with `docs:` to skip the check.\n\n### Style guide\n\n#### Generic code\n\nPyO3 has a lot of generic APIs to increase usability. These can come at the cost of generic code bloat. Where reasonable, try to implement a concrete sub-portion of generic functions. There are two forms of this:\n\n- If the concrete sub-portion doesn't benefit from re-use by other functions, name it `inner` and keep it as a local to the function.\n- If the concrete sub-portion is re-used by other functions, preferably name it `_foo` and place it directly below `foo` in the source code (where `foo` is the original generic function).\n\n#### FFI calls\n\nPyO3 makes a lot of FFI calls to Python's C API using raw pointers. Where possible try to avoid using pointers-to-temporaries in expressions:\n\n```rust\n// dangerous\npyo3::ffi::Something(name.to_object(py).as_ptr());\n\n// because the following refactoring is a use-after-free error:\nlet name = name.to_object(py).as_ptr();\npyo3::ffi::Something(name)\n```\n\nInstead, prefer to bind the safe owned `PyObject` wrapper before passing to ffi functions:\n\n```rust\nlet name: PyObject = name.to_object(py);\npyo3::ffi::Something(name.as_ptr())\n// name will automatically be freed when it falls out of scope\n```\n\n## Python and Rust version support policy\n\nPyO3 aims to keep sufficient compatibility to make packaging Python extensions built with PyO3 feasible on most common package managers.\n\nTo keep package maintainers' lives simpler, PyO3 will commit, wherever possible, to only adjust minimum supported Rust and Python versions at the same time. This bump will only come in an `0.x` release, roughly once per year, after the oldest supported Python version reaches its end-of-life. (Check https://endoflife.date/python for a clear timetable on these.)\n\nBelow are guidelines on what compatibility all PRs are expected to deliver for each language.\n\n### Python\n\nPyO3 supports all officially supported Python versions, as well as the latest PyPy3 release. All of these versions are tested in CI.\n\n### Rust\n\nPyO3 aims to make use of up-to-date Rust language features to keep the implementation as efficient as possible.\n\nThe minimum Rust version supported will be decided when the release which bumps Python and Rust versions is made. At the time, the minimum Rust version will be set no higher than the lowest Rust version shipped in the current Debian, RHEL and Alpine Linux distributions.\n\nCI tests both the most recent stable Rust version and the minimum supported Rust version. Because of Rust's stability guarantees this is sufficient to confirm support for all Rust versions in between.\n\n## Benchmarking\n\nPyO3 has two sets of benchmarks for evaluating some aspects of its performance. The benchmark suite is currently very small - please open PRs with new benchmarks if you're interested in helping to expand it!\n\nFirst, there are Rust-based benchmarks located in the `pyo3-benches` subdirectory. You can run these benchmarks with:\n\n    nox -s bench\n\nSecond, there is a Python-based benchmark contained in the `pytests` subdirectory. You can read more about it [here](https://github.com/PyO3/pyo3/tree/main/pytests).\n\n## Code coverage\n\nYou can view what code is and isn't covered by PyO3's tests. We aim to have 100% coverage - please check coverage and add tests if you notice a lack of coverage!\n\n- First, ensure the llvm-cov cargo plugin is installed. You may need to run the plugin through cargo once before using it with `nox`.\n```shell\ncargo install cargo-llvm-cov\ncargo llvm-cov\n```\n- Then, generate an `lcov.info` file with\n```shell\nnox -s coverage -- lcov\n```\nYou can install an IDE plugin to view the coverage. For example, if you use VSCode:\n- Add the [coverage-gutters](https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters) plugin.\n- Add these settings to VSCode's `settings.json`:\n```json\n{\n    \"coverage-gutters.coverageFileNames\": [\n        \"lcov.info\",\n        \"cov.xml\",\n        \"coverage.xml\",\n    ],\n    \"coverage-gutters.showLineCoverage\": true\n}\n```\n- You should now be able to see green highlights for code that is tested, and red highlights for code that is not tested.\n\n## Sponsor this project\n\nAt the moment there is no official organisation that accepts sponsorship on PyO3's behalf. If you're seeking to provide significant funding to the PyO3 ecosystem, please reach out to us on [GitHub](https://github.com/PyO3/pyo3/issues/new) or [Discord](https://discord.gg/33kcChzH7f) and we can discuss.\n\nIn the meanwhile, some of our maintainers have personal GitHub sponsorship pages and would be grateful for your support:\n\n- [davidhewitt](https://github.com/sponsors/davidhewitt)\n- [messense](https://github.com/sponsors/messense)\n\n[mdbook]: https://rust-lang.github.io/mdBook/cli/index.html\n[lychee]: https://github.com/lycheeverse/lychee\n[nox]: https://github.com/theacodes/nox\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 9.5771484375,
          "content": "Copyright (c) 2017-present PyO3 Project and Contributors.  https://github.com/PyO3\n\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \"License\" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \"Licensor\" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \"Legal Entity\" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \"control\" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \"You\" (or \"Your\") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \"Source\" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \"Object\" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \"Work\" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \"Derivative Works\" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \"Contribution\" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \"submitted\"\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \"Not a Contribution.\"\n\n   \"Contributor\" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \"NOTICE\" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0810546875,
          "content": "Copyright (c) 2023-present PyO3 Project and Contributors.  https://github.com/PyO3\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.712890625,
          "content": "# PyO3\n\n[![actions status](https://img.shields.io/github/actions/workflow/status/PyO3/pyo3/ci.yml?branch=main&logo=github&style=)](https://github.com/PyO3/pyo3/actions)\n[![benchmark](https://img.shields.io/endpoint?url=https://codspeed.io/badge.json)](https://codspeed.io/PyO3/pyo3)\n[![codecov](https://img.shields.io/codecov/c/gh/PyO3/pyo3?logo=codecov)](https://codecov.io/gh/PyO3/pyo3)\n[![crates.io](https://img.shields.io/crates/v/pyo3?logo=rust)](https://crates.io/crates/pyo3)\n[![minimum rustc 1.63](https://img.shields.io/badge/rustc-1.63+-blue?logo=rust)](https://rust-lang.github.io/rfcs/2495-min-rust-version.html)\n[![discord server](https://img.shields.io/discord/1209263839632424990?logo=discord)](https://discord.gg/33kcChzH7f)\n[![contributing notes](https://img.shields.io/badge/contribute-on%20github-Green?logo=github)](https://github.com/PyO3/pyo3/blob/main/Contributing.md)\n\n[Rust](https://www.rust-lang.org/) bindings for [Python](https://www.python.org/), including tools for creating native Python extension modules. Running and interacting with Python code from a Rust binary is also supported.\n\n- User Guide: [stable](https://pyo3.rs) | [main](https://pyo3.rs/main)\n\n- API Documentation: [stable](https://docs.rs/pyo3/) | [main](https://pyo3.rs/main/doc)\n\n## Usage\n\nRequires Rust 1.63 or greater.\n\nPyO3 supports the following Python distributions:\n  - CPython 3.7 or greater\n  - PyPy 7.3 (Python 3.9+)\n  - GraalPy 24.0 or greater (Python 3.10+)\n\nYou can use PyO3 to write a native Python module in Rust, or to embed Python in a Rust binary. The following sections explain each of these in turn.\n\n### Using Rust from Python\n\nPyO3 can be used to generate a native Python module. The easiest way to try this out for the first time is to use [`maturin`](https://github.com/PyO3/maturin). `maturin` is a tool for building and publishing Rust-based Python packages with minimal configuration. The following steps install `maturin`, use it to generate and build a new Python package, and then launch Python to import and execute a function from the package.\n\nFirst, follow the commands below to create a new directory containing a new Python `virtualenv`, and install `maturin` into the virtualenv using Python's package manager, `pip`:\n\n```bash\n# (replace string_sum with the desired package name)\n$ mkdir string_sum\n$ cd string_sum\n$ python -m venv .env\n$ source .env/bin/activate\n$ pip install maturin\n```\n\nStill inside this `string_sum` directory, now run `maturin init`. This will generate the new package source. When given the choice of bindings to use, select pyo3 bindings:\n\n```bash\n$ maturin init\n✔ 🤷 What kind of bindings to use? · pyo3\n  ✨ Done! New project created string_sum\n```\n\nThe most important files generated by this command are `Cargo.toml` and `lib.rs`, which will look roughly like the following:\n\n**`Cargo.toml`**\n\n```toml\n[package]\nname = \"string_sum\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\n# The name of the native library. This is the name which will be used in Python to import the\n# library (i.e. `import string_sum`). If you change this, you must also change the name of the\n# `#[pymodule]` in `src/lib.rs`.\nname = \"string_sum\"\n# \"cdylib\" is necessary to produce a shared library for Python to import from.\n#\n# Downstream Rust code (including code in `bin/`, `examples/`, and `tests/`) will not be able\n# to `use string_sum;` unless the \"rlib\" or \"lib\" crate type is also included, e.g.:\n# crate-type = [\"cdylib\", \"rlib\"]\ncrate-type = [\"cdylib\"]\n\n[dependencies]\npyo3 = { version = \"0.23.3\", features = [\"extension-module\"] }\n```\n\n**`src/lib.rs`**\n\n```rust\nuse pyo3::prelude::*;\n\n/// Formats the sum of two numbers as string.\n#[pyfunction]\nfn sum_as_string(a: usize, b: usize) -> PyResult<String> {\n    Ok((a + b).to_string())\n}\n\n/// A Python module implemented in Rust. The name of this function must match\n/// the `lib.name` setting in the `Cargo.toml`, else Python will not be able to\n/// import the module.\n#[pymodule]\nfn string_sum(m: &Bound<'_, PyModule>) -> PyResult<()> {\n    m.add_function(wrap_pyfunction!(sum_as_string, m)?)?;\n    Ok(())\n}\n```\n\nFinally, run `maturin develop`. This will build the package and install it into the Python virtualenv previously created and activated. The package is then ready to be used from `python`:\n\n```bash\n$ maturin develop\n# lots of progress output as maturin runs the compilation...\n$ python\n>>> import string_sum\n>>> string_sum.sum_as_string(5, 20)\n'25'\n```\n\nTo make changes to the package, just edit the Rust source code and then re-run `maturin develop` to recompile.\n\nTo run this all as a single copy-and-paste, use the bash script below (replace `string_sum` in the first command with the desired package name):\n\n```bash\nmkdir string_sum && cd \"$_\"\npython -m venv .env\nsource .env/bin/activate\npip install maturin\nmaturin init --bindings pyo3\nmaturin develop\n```\n\nIf you want to be able to run `cargo test` or use this project in a Cargo workspace and are running into linker issues, there are some workarounds in [the FAQ](https://pyo3.rs/latest/faq.html#i-cant-run-cargo-test-or-i-cant-build-in-a-cargo-workspace-im-having-linker-issues-like-symbol-not-found-or-undefined-reference-to-_pyexc_systemerror).\n\nAs well as with `maturin`, it is possible to build using [`setuptools-rust`](https://github.com/PyO3/setuptools-rust) or [manually](https://pyo3.rs/latest/building-and-distribution.html#manual-builds). Both offer more flexibility than `maturin` but require more configuration to get started.\n\n### Using Python from Rust\n\nTo embed Python into a Rust binary, you need to ensure that your Python installation contains a shared library. The following steps demonstrate how to ensure this (for Ubuntu), and then give some example code which runs an embedded Python interpreter.\n\nTo install the Python shared library on Ubuntu:\n\n```bash\nsudo apt install python3-dev\n```\n\nTo install the Python shared library on RPM based distributions (e.g. Fedora, Red Hat, SuSE), install the `python3-devel` package.\n\n\nStart a new project with `cargo new` and add  `pyo3` to the `Cargo.toml` like this:\n\n```toml\n[dependencies.pyo3]\nversion = \"0.23.3\"\nfeatures = [\"auto-initialize\"]\n```\n\nExample program displaying the value of `sys.version` and the current user name:\n\n```rust\nuse pyo3::prelude::*;\nuse pyo3::types::IntoPyDict;\nuse pyo3::ffi::c_str;\n\nfn main() -> PyResult<()> {\n    Python::with_gil(|py| {\n        let sys = py.import(\"sys\")?;\n        let version: String = sys.getattr(\"version\")?.extract()?;\n\n        let locals = [(\"os\", py.import(\"os\")?)].into_py_dict(py)?;\n        let code = c_str!(\"os.getenv('USER') or os.getenv('USERNAME') or 'Unknown'\");\n        let user: String = py.eval(code, None, Some(&locals))?.extract()?;\n\n        println!(\"Hello {}, I'm Python {}\", user, version);\n        Ok(())\n    })\n}\n```\n\nThe guide has [a section](https://pyo3.rs/latest/python-from-rust.html) with lots of examples\nabout this topic.\n\n## Tools and libraries\n\n- [maturin](https://github.com/PyO3/maturin) _Build and publish crates with pyo3, rust-cpython or cffi bindings as well as rust binaries as python packages_\n- [setuptools-rust](https://github.com/PyO3/setuptools-rust) _Setuptools plugin for Rust support_.\n- [pyo3-built](https://github.com/PyO3/pyo3-built) _Simple macro to expose metadata obtained with the [`built`](https://crates.io/crates/built) crate as a [`PyDict`](https://docs.rs/pyo3/*/pyo3/types/struct.PyDict.html)_\n- [rust-numpy](https://github.com/PyO3/rust-numpy) _Rust binding of NumPy C-API_\n- [dict-derive](https://github.com/gperinazzo/dict-derive) _Derive FromPyObject to automatically transform Python dicts into Rust structs_\n- [pyo3-log](https://github.com/vorner/pyo3-log) _Bridge from Rust to Python logging_\n- [pythonize](https://github.com/davidhewitt/pythonize) _Serde serializer for converting Rust objects to JSON-compatible Python objects_\n- [pyo3-asyncio](https://github.com/awestlake87/pyo3-asyncio) _Utilities for working with Python's Asyncio library and async functions_\n- [rustimport](https://github.com/mityax/rustimport) _Directly import Rust files or crates from Python, without manual compilation step. Provides pyo3 integration by default and generates pyo3 binding code automatically._\n- [pyo3-arrow](https://crates.io/crates/pyo3-arrow) _Lightweight [Apache Arrow](https://arrow.apache.org/) integration for pyo3._\n\n## Examples\n\n- [autopy](https://github.com/autopilot-rs/autopy) _A simple, cross-platform GUI automation library for Python and Rust._\n  - Contains an example of building wheels on TravisCI and appveyor using [cibuildwheel](https://github.com/pypa/cibuildwheel)\n- [ballista-python](https://github.com/apache/arrow-ballista-python) _A Python library that binds to Apache Arrow distributed query engine Ballista._\n- [bed-reader](https://github.com/fastlmm/bed-reader) _Read and write the PLINK BED format, simply and efficiently._\n    - Shows Rayon/ndarray::parallel (including capturing errors, controlling thread num), Python types to Rust generics, Github Actions\n- [cellular_raza](https://cellular-raza.com) _A cellular agent-based simulation framework for building complex models from a clean slate._\n- [connector-x](https://github.com/sfu-db/connector-x) _Fastest library to load data from DB to DataFrames in Rust and Python._\n- [cryptography](https://github.com/pyca/cryptography/tree/main/src/rust) _Python cryptography library with some functionality in Rust._\n- [css-inline](https://github.com/Stranger6667/css-inline/tree/master/bindings/python) _CSS inlining for Python implemented in Rust._\n- [datafusion-python](https://github.com/apache/arrow-datafusion-python) _A Python library that binds to Apache Arrow in-memory query engine DataFusion._\n- [deltalake-python](https://github.com/delta-io/delta-rs/tree/main/python) _Native Delta Lake Python binding based on delta-rs with Pandas integration._\n- [fastbloom](https://github.com/yankun1992/fastbloom) _A fast [bloom filter](https://github.com/yankun1992/fastbloom#BloomFilter) | [counting bloom filter](https://github.com/yankun1992/fastbloom#countingbloomfilter) implemented by Rust for Rust and Python!_\n- [fastuuid](https://github.com/thedrow/fastuuid/) _Python bindings to Rust's UUID library._\n- [feos](https://github.com/feos-org/feos) _Lightning fast thermodynamic modeling in Rust with fully developed Python interface._\n- [forust](https://github.com/jinlow/forust) _A lightweight gradient boosted decision tree library written in Rust._\n- [granian](https://github.com/emmett-framework/granian) _A Rust HTTP server for Python applications._\n- [greptimedb](https://github.com/GreptimeTeam/greptimedb/tree/main/src/script) _Support [Python scripting](https://docs.greptime.com/user-guide/python-scripts/overview) in the database_\n- [haem](https://github.com/BooleanCat/haem) _A Python library for working on Bioinformatics problems._\n- [html2text-rs](https://github.com/deedy5/html2text_rs) _Python library for converting HTML to markup or plain text._\n- [html-py-ever](https://github.com/PyO3/setuptools-rust/tree/main/examples/html-py-ever) _Using [html5ever](https://github.com/servo/html5ever) through [kuchiki](https://github.com/kuchiki-rs/kuchiki) to speed up html parsing and css-selecting._\n- [hyperjson](https://github.com/mre/hyperjson) _A hyper-fast Python module for reading/writing JSON data using Rust's serde-json._\n- [inline-python](https://github.com/fusion-engineering/inline-python) _Inline Python code directly in your Rust code._\n- [johnnycanencrypt](https://github.com/kushaldas/johnnycanencrypt) OpenPGP library with Yubikey support.\n- [jsonschema](https://github.com/Stranger6667/jsonschema/tree/master/crates/jsonschema-py) _A high-performance JSON Schema validator for Python._\n- [mocpy](https://github.com/cds-astro/mocpy) _Astronomical Python library offering data structures for describing any arbitrary coverage regions on the unit sphere._\n- [opendal](https://github.com/apache/opendal/tree/main/bindings/python) _A data access layer that allows users to easily and efficiently retrieve data from various storage services in a unified way._\n- [orjson](https://github.com/ijl/orjson) _Fast Python JSON library._\n- [ormsgpack](https://github.com/aviramha/ormsgpack) _Fast Python msgpack library._\n- [point-process](https://github.com/ManifoldFR/point-process-rust/tree/master/pylib) _High level API for pointprocesses as a Python library._\n- [polaroid](https://github.com/daggy1234/polaroid) _Hyper Fast and safe image manipulation library for Python written in Rust._\n- [polars](https://github.com/pola-rs/polars) _Fast multi-threaded DataFrame library in Rust | Python | Node.js._\n- [pydantic-core](https://github.com/pydantic/pydantic-core) _Core validation logic for pydantic written in Rust._\n- [pyheck](https://github.com/kevinheavey/pyheck) _Fast case conversion library, built by wrapping [heck](https://github.com/withoutboats/heck)._\n    - Quite easy to follow as there's not much code.\n- [pyre](https://github.com/Project-Dream-Weaver/pyre-http) _Fast Python HTTP server written in Rust._\n- [primp](https://github.com/deedy5/primp) _The fastest python HTTP client that can impersonate web browsers by mimicking their headers and TLS/JA3/JA4/HTTP2 fingerprints._\n- [rateslib](https://github.com/attack68/rateslib) _A fixed income library for Python using Rust extensions._\n- [ril-py](https://github.com/Cryptex-github/ril-py) _A performant and high-level image processing library for Python written in Rust._\n- [river](https://github.com/online-ml/river) _Online machine learning in python, the computationally heavy statistics algorithms are implemented in Rust._\n- [robyn](https://github.com/sparckles/Robyn) A Super Fast Async Python Web Framework with a Rust runtime.\n- [rust-python-coverage](https://github.com/cjermain/rust-python-coverage) _Example PyO3 project with automated test coverage for Rust and Python._\n- [sail](https://github.com/lakehq/sail) _Unifying stream, batch, and AI workloads with Apache Spark compatibility._\n- [tiktoken](https://github.com/openai/tiktoken) _A fast BPE tokeniser for use with OpenAI's models._\n- [tokenizers](https://github.com/huggingface/tokenizers/tree/main/bindings/python) _Python bindings to the Hugging Face tokenizers (NLP) written in Rust._\n- [tzfpy](http://github.com/ringsaturn/tzfpy) _A fast package to convert longitude/latitude to timezone name._\n- [utiles](https://github.com/jessekrubin/utiles) _Fast Python web-map tile utilities_\n- [wasmer-python](https://github.com/wasmerio/wasmer-python) _Python library to run WebAssembly binaries._\n\n## Articles and other media\n\n- [(Video) PyO3: From Python to Rust and Back Again](https://www.youtube.com/watch?v=UmL_CA-v3O8) - Jul 3, 2024\n- [Parsing Python ASTs 20x Faster with Rust](https://www.gauge.sh/blog/parsing-python-asts-20x-faster-with-rust) - Jun 17, 2024\n- [(Video) How Python Harnesses Rust through PyO3](https://www.youtube.com/watch?v=UkZ_m3Wj2hA) - May 18, 2024\n- [(Video) Combining Rust and Python: The Best of Both Worlds?](https://www.youtube.com/watch?v=lyG6AKzu4ew) - Mar 1, 2024\n- [(Video) Extending Python with Rust using PyO3](https://www.youtube.com/watch?v=T45ZEmSR1-s) - Dec 16, 2023\n- [A Week of PyO3 + rust-numpy (How to Speed Up Your Data Pipeline X Times)](https://terencezl.github.io/blog/2023/06/06/a-week-of-pyo3-rust-numpy/) - Jun 6, 2023\n- [(Podcast) PyO3 with David Hewitt](https://rustacean-station.org/episode/david-hewitt/) - May 19, 2023\n- [Making Python 100x faster with less than 100 lines of Rust](https://ohadravid.github.io/posts/2023-03-rusty-python/) - Mar 28, 2023\n- [How Pydantic V2 leverages Rust's Superpowers](https://fosdem.org/2023/schedule/event/rust_how_pydantic_v2_leverages_rusts_superpowers/) - Feb 4, 2023\n- [How we extended the River stats module with Rust using PyO3](https://boring-guy.sh/posts/river-rust/) - Dec 23, 2022\n- [Nine Rules for Writing Python Extensions in Rust](https://towardsdatascience.com/nine-rules-for-writing-python-extensions-in-rust-d35ea3a4ec29?sk=f8d808d5f414154fdb811e4137011437) - Dec 31, 2021\n- [Calling Rust from Python using PyO3](https://saidvandeklundert.net/learn/2021-11-18-calling-rust-from-python-using-pyo3/) - Nov 18, 2021\n- [davidhewitt's 2021 talk at Rust Manchester meetup](https://www.youtube.com/watch?v=-XyWG_klSAw&t=320s) - Aug 19, 2021\n- [Incrementally porting a small Python project to Rust](https://blog.waleedkhan.name/port-python-to-rust/) - Apr 29, 2021\n- [Vortexa - Integrating Rust into Python](https://www.vortexa.com/insight/integrating-rust-into-python) - Apr 12, 2021\n- [Writing and publishing a Python module in Rust](https://blog.yossarian.net/2020/08/02/Writing-and-publishing-a-python-module-in-rust) - Aug 2, 2020\n\n## Contributing\n\nEveryone is welcomed to contribute to PyO3! There are many ways to support the project, such as:\n\n- help PyO3 users with issues on GitHub and [Discord](https://discord.gg/33kcChzH7f)\n- improve documentation\n- write features and bugfixes\n- publish blogs and examples of how to use PyO3\n\nOur [contributing notes](https://github.com/PyO3/pyo3/blob/main/Contributing.md) and [architecture guide](https://github.com/PyO3/pyo3/blob/main/Architecture.md) have more resources if you wish to volunteer time for PyO3 and are searching where to start.\n\nIf you don't have time to contribute yourself but still wish to support the project's future success, some of our maintainers have GitHub sponsorship pages:\n\n- [davidhewitt](https://github.com/sponsors/davidhewitt)\n- [messense](https://github.com/sponsors/messense)\n\n## License\n\nPyO3 is licensed under the [Apache-2.0 license](LICENSE-APACHE) or the [MIT license](LICENSE-MIT), at your option.\n\nPython is licensed under the [Python License](https://docs.python.org/3/license.html).\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in PyO3 by you, as defined in the Apache License, shall be dual-licensed as above, without any additional terms or conditions.\n\n<a href=\"https://www.netlify.com\"> <img src=\"https://www.netlify.com/v3/img/components/netlify-color-accent.svg\" alt=\"Deploys by Netlify\" /> </a>\n"
        },
        {
          "name": "Releasing.md",
          "type": "blob",
          "size": 3.365234375,
          "content": "# Releasing\n\nThis is notes for the current process of releasing a new PyO3 version. Replace `<version>` in all instructions below with the new version.\n\n## 1. Prepare the release commit\n\nFollow the process below to update all required pieces to bump the version. All these changes are done in a single commit because it makes it clear to git readers what happened to bump the version. It also makes it easy to cherry-pick the version bump onto the `main` branch when tidying up branch history at the end of the release process.\n\n1. Replace all instances of the PyO3 current version and the with the new version to be released. Places to check:\n   - `Cargo.toml` for all PyO3 crates in the repository.\n   - Examples in `README.md`\n   - PyO3 version embedded into documentation like the README.\n   - `pre-script.rhai` templates for the examples.\n   - `[towncrier]` section in `pyproject.toml`.\n\n   Some of the above locations may already have the new version with a `-dev` suffix, which needs to be removed.\n\n   **Make sure not to modify the CHANGELOG during this step!**\n\n2. Run `towncrier build` to generate the CHANGELOG. The version used by `towncrier` should automatically be correct because of the update to `pyproject.toml` in step 1.\n\n3. Manually edit the CHANGELOG for final notes. Steps to do:\n   - Adjust wording of any release lines to make them clearer for users / fix typos.\n   - Add a new link at the bottom for the new version, and update the `Unreleased` link.\n\n4. Create the commit containing all the above changes, with a message of `release: <version>`. Push to `release-<BRANCH_VER>` branch on the main PyO3 repository, where `<BRANCH_VER>` depends on whether this is a major or minor release:\n   - for O.X.0 minor releases, just use `0.X`, e.g. `release-0.17`. This will become the maintenance branch after release.\n   - for 0.X.Y patch releases, use the full `0.X.Y`, e.g. `release-0.17.1`. This will be deleted after merge.\n\n## 2. Create the release PR and draft release notes\n\nOpen a PR for the branch, and confirm that it passes CI. For `0.X.0` minor releases, the PR should be merging into `main`, for `0.X.Y` patch releases, the PR should be merging the `release-0.X` maintenance branch.\n\nOn https://github.com/PyO3/pyo3/releases, click \"Draft a new release\". The tag will be a new tag of `v<version>` (note preceding `v`) and target should be the `release-<BRANCH_VER>` branch you just pushed.\n\nWrite release notes which match the style of previous releases. You can get the list of contributors by running `nox -s contributors -- v<prev-version> release-<BRANCH_VER>` to get contributors from the previous version tag through to the branch tip you just pushed. (This uses the GitHub API, so you'll need to push the branch first.)\n\nSave as a draft and wait for now.\n\n## 3. Leave for a cooling off period\n\nWait a couple of days in case anyone wants to hold up the release to add bugfixes etc.\n\n## 4. Put live\n\nTo put live:\n- 1. run `nox -s publish` to put live on crates.io\n- 2. publish the release on Github\n- 3. merge the release PR\n\n## 5. Tidy the main branch\n\nIf the release PR targeted a branch other than main, you will need to cherry-pick the version bumps, CHANGELOG modifications and removal of towncrier `newsfragments` and open another PR to land these on main.\n\n## 6. Delete the release branch (patch releases only)\n\nFor 0.X.Y patch releases, the release branch is no longer needed, so it should be deleted.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "branding",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 2.1279296875,
          "content": "use std::env;\n\nuse pyo3_build_config::pyo3_build_script_impl::{cargo_env_var, errors::Result};\nuse pyo3_build_config::{\n    add_python_framework_link_args, bail, print_feature_cfgs, InterpreterConfig,\n};\n\nfn ensure_auto_initialize_ok(interpreter_config: &InterpreterConfig) -> Result<()> {\n    if cargo_env_var(\"CARGO_FEATURE_AUTO_INITIALIZE\").is_some() && !interpreter_config.shared {\n        bail!(\n            \"The `auto-initialize` feature is enabled, but your python installation only supports \\\n            embedding the Python interpreter statically. If you are attempting to run tests, or a \\\n            binary which is okay to link dynamically, install a Python distribution which ships \\\n            with the Python shared library.\\n\\\n            \\n\\\n            Embedding the Python interpreter statically does not yet have first-class support in \\\n            PyO3. If you are sure you intend to do this, disable the `auto-initialize` feature.\\n\\\n            \\n\\\n            For more information, see \\\n            https://pyo3.rs/v{pyo3_version}/\\\n                building-and-distribution.html#embedding-python-in-rust\",\n            pyo3_version = env::var(\"CARGO_PKG_VERSION\").unwrap()\n        );\n    }\n    Ok(())\n}\n\n/// Prepares the PyO3 crate for compilation.\n///\n/// This loads the config from pyo3-build-config and then makes some additional checks to improve UX\n/// for users.\n///\n/// Emits the cargo configuration based on this config as well as a few checks of the Rust compiler\n/// version to enable features which aren't supported on MSRV.\nfn configure_pyo3() -> Result<()> {\n    let interpreter_config = pyo3_build_config::get();\n\n    ensure_auto_initialize_ok(interpreter_config)?;\n\n    for cfg in interpreter_config.build_script_outputs() {\n        println!(\"{}\", cfg)\n    }\n\n    // Emit cfgs like `invalid_from_utf8_lint`\n    print_feature_cfgs();\n\n    // Make `cargo test` etc work on macOS with Xcode bundled Python\n    add_python_framework_link_args();\n\n    Ok(())\n}\n\nfn main() {\n    pyo3_build_config::print_expected_cfgs();\n    if let Err(e) = configure_pyo3() {\n        eprintln!(\"error: {}\", e.report());\n        std::process::exit(1)\n    }\n}\n"
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.251953125,
          "content": "comment: off\n\ncoverage:\n  status:\n    project:\n      default:\n        target: auto\n        # Allow a tiny drop of overall project coverage in PR to reduce spurious failures.\n        threshold: 0.25%\n\nignore:\n  - tests/\n  - pytests/\n  - src/test_hygiene/*.rs\n"
        },
        {
          "name": "emscripten",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "guide",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.1064453125,
          "content": "[build]\npublish = \"netlify_build/\"\ncommand = \".netlify/build.sh\"\n\n[build.environment]\nPYTHON_VERSION = \"3.8\"\n"
        },
        {
          "name": "newsfragments",
          "type": "tree",
          "content": null
        },
        {
          "name": "noxfile.py",
          "type": "blob",
          "size": 30.294921875,
          "content": "from contextlib import contextmanager\nimport json\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\nimport sysconfig\nimport tempfile\nfrom functools import lru_cache\nfrom glob import glob\nfrom pathlib import Path\nfrom typing import Any, Callable, Dict, Iterable, Iterator, List, Optional, Tuple\n\nimport nox\nimport nox.command\n\ntry:\n    import tomllib as toml\nexcept ImportError:\n    try:\n        import toml\n    except ImportError:\n        toml = None\n\nnox.options.sessions = [\"test\", \"clippy\", \"rustfmt\", \"ruff\", \"docs\"]\n\n\nPYO3_DIR = Path(__file__).parent\nPYO3_TARGET = Path(os.environ.get(\"CARGO_TARGET_DIR\", PYO3_DIR / \"target\")).absolute()\nPYO3_GUIDE_SRC = PYO3_DIR / \"guide\" / \"src\"\nPYO3_GUIDE_TARGET = PYO3_TARGET / \"guide\"\nPYO3_DOCS_TARGET = PYO3_TARGET / \"doc\"\nPY_VERSIONS = (\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\", \"3.12\", \"3.13\")\nPYPY_VERSIONS = (\"3.9\", \"3.10\")\nFREE_THREADED_BUILD = bool(sysconfig.get_config_var(\"Py_GIL_DISABLED\"))\n\n\n@nox.session(venv_backend=\"none\")\ndef test(session: nox.Session) -> None:\n    test_rust(session)\n    test_py(session)\n\n\n@nox.session(name=\"test-rust\", venv_backend=\"none\")\ndef test_rust(session: nox.Session):\n    _run_cargo_test(session, package=\"pyo3-build-config\")\n    _run_cargo_test(session, package=\"pyo3-macros-backend\")\n    _run_cargo_test(session, package=\"pyo3-macros\")\n    _run_cargo_test(session, package=\"pyo3-ffi\")\n\n    _run_cargo_test(session)\n    # the free-threaded build ignores abi3, so we skip abi3\n    # tests to avoid unnecessarily running the tests twice\n    if not FREE_THREADED_BUILD:\n        _run_cargo_test(session, features=\"abi3\")\n    if \"skip-full\" not in session.posargs:\n        _run_cargo_test(session, features=\"full\")\n        if not FREE_THREADED_BUILD:\n            _run_cargo_test(session, features=\"abi3 full\")\n\n\n@nox.session(name=\"test-py\", venv_backend=\"none\")\ndef test_py(session: nox.Session) -> None:\n    _run(session, \"nox\", \"-f\", \"pytests/noxfile.py\", external=True)\n    for example in glob(\"examples/*/noxfile.py\"):\n        _run(session, \"nox\", \"-f\", example, external=True)\n    for example in glob(\"pyo3-ffi/examples/*/noxfile.py\"):\n        _run(session, \"nox\", \"-f\", example, external=True)\n\n\n@nox.session(venv_backend=\"none\")\ndef coverage(session: nox.Session) -> None:\n    session.env.update(_get_coverage_env())\n    _run_cargo(session, \"llvm-cov\", \"clean\", \"--workspace\")\n    test(session)\n    generate_coverage_report(session)\n\n\n@nox.session(name=\"set-coverage-env\", venv_backend=\"none\")\ndef set_coverage_env(session: nox.Session) -> None:\n    \"\"\"For use in GitHub Actions to set coverage environment variables.\"\"\"\n    with open(os.environ[\"GITHUB_ENV\"], \"a\") as env_file:\n        for k, v in _get_coverage_env().items():\n            print(f\"{k}={v}\", file=env_file)\n\n\n@nox.session(name=\"generate-coverage-report\", venv_backend=\"none\")\ndef generate_coverage_report(session: nox.Session) -> None:\n    cov_format = \"codecov\"\n    output_file = \"coverage.json\"\n\n    if \"lcov\" in session.posargs:\n        cov_format = \"lcov\"\n        output_file = \"lcov.info\"\n\n    _run_cargo(\n        session,\n        \"llvm-cov\",\n        \"--package=pyo3\",\n        \"--package=pyo3-build-config\",\n        \"--package=pyo3-macros-backend\",\n        \"--package=pyo3-macros\",\n        \"--package=pyo3-ffi\",\n        \"report\",\n        f\"--{cov_format}\",\n        \"--output-path\",\n        output_file,\n    )\n\n\n@nox.session(venv_backend=\"none\")\ndef rustfmt(session: nox.Session):\n    _run_cargo(session, \"fmt\", \"--all\", \"--check\")\n    _run_cargo(session, \"fmt\", _FFI_CHECK, \"--all\", \"--check\")\n\n\n@nox.session(name=\"ruff\")\ndef ruff(session: nox.Session):\n    session.install(\"ruff\")\n    _run(session, \"ruff\", \"format\", \".\", \"--check\")\n    _run(session, \"ruff\", \"check\", \".\")\n\n\n@nox.session(name=\"clippy\", venv_backend=\"none\")\ndef clippy(session: nox.Session) -> bool:\n    if not _clippy(session) and _clippy_additional_workspaces(session):\n        session.error(\"one or more jobs failed\")\n\n\ndef _clippy(session: nox.Session, *, env: Dict[str, str] = None) -> bool:\n    success = True\n    env = env or os.environ\n    for feature_set in _get_feature_sets():\n        try:\n            _run_cargo(\n                session,\n                \"clippy\",\n                *feature_set,\n                \"--all-targets\",\n                \"--workspace\",\n                \"--\",\n                \"--deny=warnings\",\n                env=env,\n            )\n        except nox.command.CommandFailed:\n            success = False\n    return success\n\n\ndef _clippy_additional_workspaces(session: nox.Session) -> bool:\n    # pyo3-benches and pyo3-ffi-check are in isolated workspaces so that their\n    # dependencies do not interact with MSRV\n\n    success = True\n    try:\n        _run_cargo(session, \"clippy\", _BENCHES)\n    except Exception:\n        success = False\n\n    # Run pyo3-ffi-check only on when not cross-compiling, because it needs to\n    # have Python headers to feed to bindgen which gets messy when cross-compiling.\n    target = os.environ.get(\"CARGO_BUILD_TARGET\")\n    if target is None or _get_rust_default_target() == target:\n        try:\n            _build_docs_for_ffi_check(session)\n            _run_cargo(session, \"clippy\", _FFI_CHECK, \"--workspace\", \"--all-targets\")\n        except Exception:\n            success = False\n    return success\n\n\n@nox.session(venv_backend=\"none\")\ndef bench(session: nox.Session) -> bool:\n    _run_cargo(session, \"bench\", _BENCHES, *session.posargs)\n\n\n@nox.session()\ndef codspeed(session: nox.Session) -> bool:\n    # rust benchmarks\n    os.chdir(PYO3_DIR / \"pyo3-benches\")\n    _run_cargo(session, \"codspeed\", \"build\")\n    _run_cargo(session, \"codspeed\", \"run\")\n    # python benchmarks\n    os.chdir(PYO3_DIR / \"pytests\")\n    session.install(\".[dev]\", \"pytest-codspeed\")\n    _run(session, \"pytest\", \"--codspeed\", external=True)\n\n\n@nox.session(name=\"clippy-all\", venv_backend=\"none\")\ndef clippy_all(session: nox.Session) -> None:\n    success = True\n\n    def _clippy_with_config(env: Dict[str, str]) -> None:\n        nonlocal success\n        success &= _clippy(session, env=env)\n\n    _for_all_version_configs(session, _clippy_with_config)\n    success &= _clippy_additional_workspaces(session)\n\n    if not success:\n        session.error(\"one or more jobs failed\")\n\n\n@nox.session(name=\"check-all\", venv_backend=\"none\")\ndef check_all(session: nox.Session) -> None:\n    success = True\n\n    def _check(env: Dict[str, str]) -> None:\n        nonlocal success\n        for feature_set in _get_feature_sets():\n            try:\n                _run_cargo(\n                    session,\n                    \"check\",\n                    *feature_set,\n                    \"--all-targets\",\n                    \"--workspace\",\n                    env=env,\n                )\n            except Exception:\n                success = False\n\n    _for_all_version_configs(session, _check)\n\n    if not success:\n        session.error(\"one or more jobs failed\")\n\n\n@nox.session(venv_backend=\"none\")\ndef publish(session: nox.Session) -> None:\n    _run_cargo_publish(session, package=\"pyo3-build-config\")\n    _run_cargo_publish(session, package=\"pyo3-macros-backend\")\n    _run_cargo_publish(session, package=\"pyo3-macros\")\n    _run_cargo_publish(session, package=\"pyo3-ffi\")\n    _run_cargo_publish(session, package=\"pyo3\")\n\n\n@nox.session(venv_backend=\"none\")\ndef contributors(session: nox.Session) -> None:\n    import requests\n\n    if len(session.posargs) < 1:\n        raise Exception(\"base commit positional argument missing\")\n\n    base = session.posargs[0]\n    page = 1\n\n    head = \"HEAD\"\n    if len(session.posargs) == 2:\n        head = session.posargs[1]\n\n    if len(session.posargs) > 2:\n        raise Exception(\"too many arguments\")\n\n    authors = set()\n\n    while True:\n        resp = requests.get(\n            f\"https://api.github.com/repos/PyO3/pyo3/compare/{base}...{head}\",\n            params={\"page\": page, \"per_page\": 100},\n        )\n\n        body = resp.json()\n\n        if resp.status_code != 200:\n            raise Exception(\n                f\"failed to retrieve commits: {resp.status_code} {body['message']}\"\n            )\n\n        for commit in body[\"commits\"]:\n            try:\n                authors.add(commit[\"author\"][\"login\"])\n            except Exception:\n                continue\n\n        if \"next\" in resp.links:\n            page += 1\n        else:\n            break\n\n    authors = sorted(list(authors), key=lambda author: author.lower())\n\n    for author in authors:\n        print(f\"@{author}\")\n\n\nclass EmscriptenInfo:\n    def __init__(self):\n        self.emscripten_dir = PYO3_DIR / \"emscripten\"\n        self.builddir = PYO3_DIR / \".nox/emscripten\"\n        self.builddir.mkdir(exist_ok=True, parents=True)\n\n        self.pyversion = sys.version.split()[0]\n        self.pymajor, self.pyminor, self.pymicro = self.pyversion.split(\".\")\n        self.pymicro, self.pydev = re.match(\n            \"([0-9]*)([^0-9].*)?\", self.pymicro\n        ).groups()\n        if self.pydev is None:\n            self.pydev = \"\"\n\n        self.pymajorminor = f\"{self.pymajor}.{self.pyminor}\"\n        self.pymajorminormicro = f\"{self.pymajorminor}.{self.pymicro}\"\n\n\n@nox.session(name=\"build-emscripten\", venv_backend=\"none\")\ndef build_emscripten(session: nox.Session):\n    info = EmscriptenInfo()\n    _run(\n        session,\n        \"make\",\n        \"-C\",\n        str(info.emscripten_dir),\n        f\"PYTHON={sys.executable}\",\n        f\"BUILDROOT={info.builddir}\",\n        f\"PYMAJORMINORMICRO={info.pymajorminormicro}\",\n        f\"PYPRERELEASE={info.pydev}\",\n        external=True,\n    )\n\n\n@nox.session(name=\"test-emscripten\", venv_backend=\"none\")\ndef test_emscripten(session: nox.Session):\n    info = EmscriptenInfo()\n\n    libdir = info.builddir / f\"install/Python-{info.pyversion}/lib\"\n    pythonlibdir = libdir / f\"python{info.pymajorminor}\"\n\n    target = \"wasm32-unknown-emscripten\"\n\n    session.env[\"CARGO_TARGET_WASM32_UNKNOWN_EMSCRIPTEN_RUNNER\"] = \"python \" + str(\n        info.emscripten_dir / \"runner.py\"\n    )\n    session.env[\"RUSTFLAGS\"] = \" \".join(\n        [\n            f\"-L native={libdir}\",\n            \"-C link-arg=--preload-file\",\n            f\"-C link-arg={pythonlibdir}@/lib/python{info.pymajorminor}\",\n            f\"-C link-arg=-lpython{info.pymajorminor}\",\n            \"-C link-arg=-lexpat\",\n            \"-C link-arg=-lmpdec\",\n            \"-C link-arg=-lsqlite3\",\n            \"-C link-arg=-lz\",\n            \"-C link-arg=-lbz2\",\n            \"-C link-arg=-sALLOW_MEMORY_GROWTH=1\",\n        ]\n    )\n    session.env[\"CARGO_BUILD_TARGET\"] = target\n    session.env[\"PYO3_CROSS_LIB_DIR\"] = pythonlibdir\n    _run(session, \"rustup\", \"target\", \"add\", target, \"--toolchain\", \"stable\")\n    _run(\n        session,\n        \"bash\",\n        \"-c\",\n        f\"source {info.builddir / 'emsdk/emsdk_env.sh'} && cargo test\",\n    )\n\n\n@nox.session(venv_backend=\"none\")\ndef docs(session: nox.Session) -> None:\n    rustdoc_flags = [\"-Dwarnings\"]\n    toolchain_flags = []\n    cargo_flags = []\n\n    if \"open\" in session.posargs:\n        cargo_flags.append(\"--open\")\n\n    if \"nightly\" in session.posargs:\n        rustdoc_flags.append(\"--cfg docsrs\")\n        toolchain_flags.append(\"+nightly\")\n        cargo_flags.extend([\"-Z\", \"unstable-options\", \"-Z\", \"rustdoc-scrape-examples\"])\n\n    if \"nightly\" in session.posargs and \"internal\" in session.posargs:\n        rustdoc_flags.append(\"--Z unstable-options\")\n        rustdoc_flags.append(\"--document-hidden-items\")\n        rustdoc_flags.extend((\"--html-after-content\", \".netlify/internal_banner.html\"))\n        cargo_flags.append(\"--document-private-items\")\n    else:\n        cargo_flags.extend([\"--exclude=pyo3-macros\", \"--exclude=pyo3-macros-backend\"])\n\n    rustdoc_flags.append(session.env.get(\"RUSTDOCFLAGS\", \"\"))\n    session.env[\"RUSTDOCFLAGS\"] = \" \".join(rustdoc_flags)\n\n    shutil.rmtree(PYO3_DOCS_TARGET, ignore_errors=True)\n    _run_cargo(\n        session,\n        *toolchain_flags,\n        \"doc\",\n        \"--lib\",\n        \"--no-default-features\",\n        \"--features=full\",\n        \"--no-deps\",\n        \"--workspace\",\n        *cargo_flags,\n    )\n\n\n@nox.session(name=\"build-guide\", venv_backend=\"none\")\ndef build_guide(session: nox.Session):\n    shutil.rmtree(PYO3_GUIDE_TARGET, ignore_errors=True)\n    _run(session, \"mdbook\", \"build\", \"-d\", PYO3_GUIDE_TARGET, \"guide\", *session.posargs)\n    for license in (\"LICENSE-APACHE\", \"LICENSE-MIT\"):\n        target_file = PYO3_GUIDE_TARGET / license\n        target_file.unlink(missing_ok=True)\n        shutil.copy(PYO3_DIR / license, target_file)\n\n\n@nox.session(name=\"check-guide\", venv_backend=\"none\")\ndef check_guide(session: nox.Session):\n    # reuse other sessions, but with default args\n    posargs = [*session.posargs]\n    del session.posargs[:]\n    build_guide(session)\n    docs(session)\n    session.posargs.extend(posargs)\n\n    if toml is None:\n        session.error(\"requires Python 3.11 or `toml` to be installed\")\n    pyo3_version = toml.loads((PYO3_DIR / \"Cargo.toml\").read_text())[\"package\"][\n        \"version\"\n    ]\n\n    remaps = {\n        f\"file://{PYO3_GUIDE_SRC}/([^/]*/)*?%7B%7B#PYO3_DOCS_URL}}}}\": f\"file://{PYO3_DOCS_TARGET}\",\n        f\"https://pyo3.rs/v{pyo3_version}\": f\"file://{PYO3_GUIDE_TARGET}\",\n        \"https://pyo3.rs/main/\": f\"file://{PYO3_GUIDE_TARGET}/\",\n        \"https://pyo3.rs/latest/\": f\"file://{PYO3_GUIDE_TARGET}/\",\n        \"%7B%7B#PYO3_DOCS_VERSION}}\": \"latest\",\n    }\n    remap_args = []\n    for key, value in remaps.items():\n        remap_args.extend((\"--remap\", f\"{key} {value}\"))\n    # check all links in the guide\n    _run(\n        session,\n        \"lychee\",\n        \"--include-fragments\",\n        str(PYO3_GUIDE_SRC),\n        *remap_args,\n        *session.posargs,\n    )\n    # check external links in the docs\n    # (intra-doc links are checked by rustdoc)\n    _run(\n        session,\n        \"lychee\",\n        str(PYO3_DOCS_TARGET),\n        *remap_args,\n        f\"--exclude=file://{PYO3_DOCS_TARGET}\",\n        \"--exclude=http://www.adobe.com/\",\n        *session.posargs,\n    )\n\n\n@nox.session(name=\"format-guide\", venv_backend=\"none\")\ndef format_guide(session: nox.Session):\n    fence_line = \"//! ```\\n\"\n\n    for path in Path(\"guide\").glob(\"**/*.md\"):\n        session.log(\"Working on %s\", path)\n        lines = iter(path.read_text().splitlines(True))\n        new_lines = []\n\n        for line in lines:\n            new_lines.append(line)\n            if not re.search(\"```rust(,.*)?$\", line):\n                continue\n\n            # Found a code block fence, gobble up its lines and write to temp. file\n            prefix = line[: line.index(\"```\")]\n            with tempfile.NamedTemporaryFile(\"w\", delete=False) as file:\n                tempname = file.name\n                file.write(fence_line)\n                for line in lines:\n                    if line == prefix + \"```\\n\":\n                        break\n                    file.write((\"//! \" + line[len(prefix) :]).rstrip() + \"\\n\")\n                file.write(fence_line)\n\n            # Format it (needs nightly rustfmt for `format_code_in_doc_comments`)\n            _run(\n                session,\n                \"rustfmt\",\n                \"+nightly\",\n                \"--config\",\n                \"format_code_in_doc_comments=true\",\n                \"--config\",\n                \"reorder_imports=false\",\n                tempname,\n            )\n\n            # Re-read the formatted file, add its lines, and delete it\n            with open(tempname, \"r\") as file:\n                for line in file:\n                    if line == fence_line:\n                        continue\n                    new_lines.append((prefix + line[4:]).rstrip() + \"\\n\")\n            os.unlink(tempname)\n\n            new_lines.append(prefix + \"```\\n\")\n\n        path.write_text(\"\".join(new_lines))\n\n\n@nox.session(name=\"address-sanitizer\", venv_backend=\"none\")\ndef address_sanitizer(session: nox.Session):\n    _run_cargo(\n        session,\n        \"+nightly\",\n        \"test\",\n        \"--release\",\n        \"-Zbuild-std\",\n        f\"--target={_get_rust_default_target()}\",\n        \"--\",\n        \"--test-threads=1\",\n        env={\n            \"RUSTFLAGS\": \"-Zsanitizer=address\",\n            \"RUSTDOCFLAGS\": \"-Zsanitizer=address\",\n            \"ASAN_OPTIONS\": \"detect_leaks=0\",\n        },\n    )\n\n\n_IGNORE_CHANGELOG_PR_CATEGORIES = (\n    \"release\",\n    \"docs\",\n)\n\n\n@nox.session(name=\"check-changelog\")\ndef check_changelog(session: nox.Session):\n    if not _is_github_actions():\n        session.error(\"Can only check changelog on github actions\")\n\n    event_path = os.environ[\"GITHUB_EVENT_PATH\"]\n\n    with open(event_path) as event_file:\n        event = json.load(event_file)\n\n    for category in _IGNORE_CHANGELOG_PR_CATEGORIES:\n        if event[\"pull_request\"][\"title\"].startswith(f\"{category}:\"):\n            session.skip(f\"PR title starts with {category}\")\n\n    for label in event[\"pull_request\"][\"labels\"]:\n        if label[\"name\"] == \"CI-skip-changelog\":\n            session.skip(\"CI-skip-changelog label applied\")\n\n    issue_number = event[\"pull_request\"][\"number\"]\n\n    newsfragments = PYO3_DIR / \"newsfragments\"\n\n    fragments = tuple(\n        filter(\n            Path.exists,\n            (\n                newsfragments / f\"{issue_number}.{change_type}.md\"\n                for change_type in (\"packaging\", \"added\", \"changed\", \"removed\", \"fixed\")\n            ),\n        )\n    )\n\n    if not fragments:\n        session.error(\n            \"Changelog entry not found, please add one (or more) to the `newsfragments` directory.\\n\"\n            \"Alternatively, start the PR title with `docs:` if this PR is a docs-only PR.\\n\"\n            \"See https://github.com/PyO3/pyo3/blob/main/Contributing.md#documenting-changes for more information.\"\n        )\n\n    print(\"Found newsfragments:\")\n    for fragment in fragments:\n        print(fragment.name)\n\n\n@nox.session(name=\"set-msrv-package-versions\", venv_backend=\"none\")\ndef set_msrv_package_versions(session: nox.Session):\n    from collections import defaultdict\n\n    if toml is None:\n        session.error(\"requires Python 3.11 or `toml` to be installed\")\n\n    projects = (\n        None,\n        \"examples/decorator\",\n        \"examples/maturin-starter\",\n        \"examples/setuptools-rust-starter\",\n        \"examples/word-count\",\n    )\n    min_pkg_versions = {\n        \"regex\": \"1.9.6\",\n        \"proptest\": \"1.2.0\",\n        \"trybuild\": \"1.0.89\",\n        \"eyre\": \"0.6.8\",\n        \"allocator-api2\": \"0.2.10\",\n        \"indexmap\": \"2.5.0\",  # to be compatible with hashbrown 0.14\n        \"hashbrown\": \"0.14.5\",  # https://github.com/rust-lang/hashbrown/issues/574\n    }\n\n    # run cargo update first to ensure that everything is at highest\n    # possible version, so that this matches what CI will resolve to.\n    for project in projects:\n        if project is None:\n            _run_cargo(session, \"update\")\n        else:\n            _run_cargo(session, \"update\", f\"--manifest-path={project}/Cargo.toml\")\n\n    for project in projects:\n        lock_file = Path(project or \"\") / \"Cargo.lock\"\n\n        def load_pkg_versions():\n            cargo_lock = toml.loads(lock_file.read_text())\n            # Cargo allows to depends on multiple versions of the same package\n            pkg_versions = defaultdict(list)\n            for pkg in cargo_lock[\"package\"]:\n                name = pkg[\"name\"]\n                if name not in min_pkg_versions:\n                    continue\n                pkg_versions[name].append(pkg[\"version\"])\n            return pkg_versions\n\n        pkg_versions = load_pkg_versions()\n        for pkg_name, min_version in min_pkg_versions.items():\n            versions = pkg_versions.get(pkg_name, [])\n            for version in versions:\n                if version != min_version:\n                    pkg_id = pkg_name + \":\" + version\n                    _run_cargo_set_package_version(\n                        session, pkg_id, min_version, project=project\n                    )\n                    # assume `_run_cargo_set_package_version` has changed something\n                    # and re-read `Cargo.lock`\n                    pkg_versions = load_pkg_versions()\n\n    # As a smoke test, cargo metadata solves all dependencies, so\n    # will break if any crates rely on cargo features not\n    # supported on MSRV\n    for project in projects:\n        if project is None:\n            _run_cargo(session, \"metadata\", silent=True)\n        else:\n            _run_cargo(\n                session,\n                \"metadata\",\n                f\"--manifest-path={project}/Cargo.toml\",\n                silent=True,\n            )\n\n\n@nox.session(name=\"ffi-check\")\ndef ffi_check(session: nox.Session):\n    _build_docs_for_ffi_check(session)\n    _run_cargo(session, \"run\", _FFI_CHECK)\n\n\n@nox.session(name=\"test-version-limits\")\ndef test_version_limits(session: nox.Session):\n    env = os.environ.copy()\n    with _config_file() as config_file:\n        env[\"PYO3_CONFIG_FILE\"] = config_file.name\n\n        assert \"3.6\" not in PY_VERSIONS\n        config_file.set(\"CPython\", \"3.6\")\n        _run_cargo(session, \"check\", env=env, expect_error=True)\n\n        assert \"3.14\" not in PY_VERSIONS\n        config_file.set(\"CPython\", \"3.14\")\n        _run_cargo(session, \"check\", env=env, expect_error=True)\n\n        # 3.14 CPython should build with forward compatibility\n        env[\"PYO3_USE_ABI3_FORWARD_COMPATIBILITY\"] = \"1\"\n        _run_cargo(session, \"check\", env=env)\n\n        assert \"3.8\" not in PYPY_VERSIONS\n        config_file.set(\"PyPy\", \"3.8\")\n        _run_cargo(session, \"check\", env=env, expect_error=True)\n\n        assert \"3.11\" not in PYPY_VERSIONS\n        config_file.set(\"PyPy\", \"3.11\")\n        _run_cargo(session, \"check\", env=env, expect_error=True)\n\n\n@nox.session(name=\"check-feature-powerset\", venv_backend=\"none\")\ndef check_feature_powerset(session: nox.Session):\n    if toml is None:\n        session.error(\"requires Python 3.11 or `toml` to be installed\")\n\n    cargo_toml = toml.loads((PYO3_DIR / \"Cargo.toml\").read_text())\n\n    EXCLUDED_FROM_FULL = {\n        \"nightly\",\n        \"extension-module\",\n        \"full\",\n        \"default\",\n        \"auto-initialize\",\n        \"generate-import-lib\",\n        \"multiple-pymethods\",  # Because it's not supported on wasm\n    }\n\n    features = cargo_toml[\"features\"]\n\n    full_feature = set(features[\"full\"])\n    abi3_features = {feature for feature in features if feature.startswith(\"abi3\")}\n    abi3_version_features = abi3_features - {\"abi3\"}\n\n    expected_full_feature = features.keys() - EXCLUDED_FROM_FULL - abi3_features\n\n    uncovered_features = expected_full_feature - full_feature\n    if uncovered_features:\n        session.error(\n            f\"some features missing from `full` meta feature: {uncovered_features}\"\n        )\n\n    experimental_features = {\n        feature for feature in features if feature.startswith(\"experimental-\")\n    }\n    full_without_experimental = full_feature - experimental_features\n\n    if len(experimental_features) >= 2:\n        # justification: we always assume that feature within these groups are\n        # mutually exclusive to simplify CI\n        features_to_group = [\n            full_without_experimental,\n            experimental_features,\n        ]\n    elif len(experimental_features) == 1:\n        # no need to make an experimental features group\n        features_to_group = [full_without_experimental]\n    else:\n        session.error(\"no experimental features exist; please simplify the noxfile\")\n\n    features_to_skip = [\n        *(EXCLUDED_FROM_FULL),\n        *abi3_version_features,\n    ]\n\n    # deny warnings\n    env = os.environ.copy()\n    rust_flags = env.get(\"RUSTFLAGS\", \"\")\n    env[\"RUSTFLAGS\"] = f\"{rust_flags} -Dwarnings\"\n\n    subcommand = \"hack\"\n    if \"minimal-versions\" in session.posargs:\n        subcommand = \"minimal-versions\"\n\n    comma_join = \",\".join\n    _run_cargo(\n        session,\n        subcommand,\n        \"--feature-powerset\",\n        '--optional-deps=\"\"',\n        f'--skip=\"{comma_join(features_to_skip)}\"',\n        *(f\"--group-features={comma_join(group)}\" for group in features_to_group),\n        \"check\",\n        \"--all-targets\",\n        env=env,\n    )\n\n\n@nox.session(name=\"update-ui-tests\", venv_backend=\"none\")\ndef update_ui_tests(session: nox.Session):\n    env = os.environ.copy()\n    env[\"TRYBUILD\"] = \"overwrite\"\n    command = [\"test\", \"--test\", \"test_compile_error\"]\n    _run_cargo(session, *command, env=env)\n    _run_cargo(session, *command, \"--features=full\", env=env)\n    _run_cargo(session, *command, \"--features=abi3,full\", env=env)\n\n\ndef _build_docs_for_ffi_check(session: nox.Session) -> None:\n    # pyo3-ffi-check needs to scrape docs of pyo3-ffi\n    env = os.environ.copy()\n    env[\"PYO3_PYTHON\"] = sys.executable\n    _run_cargo(session, \"doc\", _FFI_CHECK, \"-p\", \"pyo3-ffi\", \"--no-deps\", env=env)\n\n\n@lru_cache()\ndef _get_rust_info() -> Tuple[str, ...]:\n    output = _get_output(\"rustc\", \"-vV\")\n\n    return tuple(output.splitlines())\n\n\ndef _get_rust_version() -> Tuple[int, int, int, List[str]]:\n    for line in _get_rust_info():\n        if line.startswith(_RELEASE_LINE_START):\n            version = line[len(_RELEASE_LINE_START) :].strip()\n            # e.g. 1.67.0-beta.2\n            (version_number, *extra) = version.split(\"-\", maxsplit=1)\n            return (*map(int, version_number.split(\".\")), extra)\n\n\ndef _get_rust_default_target() -> str:\n    for line in _get_rust_info():\n        if line.startswith(_HOST_LINE_START):\n            return line[len(_HOST_LINE_START) :].strip()\n\n\n@lru_cache()\ndef _get_feature_sets() -> Tuple[Tuple[str, ...], ...]:\n    \"\"\"Returns feature sets to use for clippy job\"\"\"\n    cargo_target = os.getenv(\"CARGO_BUILD_TARGET\", \"\")\n    if \"wasm32-wasip1\" not in cargo_target:\n        # multiple-pymethods not supported on wasm\n        return (\n            (\"--no-default-features\",),\n            (\n                \"--no-default-features\",\n                \"--features=abi3\",\n            ),\n            (\"--features=full multiple-pymethods\",),\n            (\"--features=abi3 full multiple-pymethods\",),\n        )\n    else:\n        return (\n            (\"--no-default-features\",),\n            (\n                \"--no-default-features\",\n                \"--features=abi3\",\n            ),\n            (\"--features=full\",),\n            (\"--features=abi3 full\",),\n        )\n\n\n_RELEASE_LINE_START = \"release: \"\n_HOST_LINE_START = \"host: \"\n\n\ndef _get_coverage_env() -> Dict[str, str]:\n    env = {}\n    output = _get_output(\"cargo\", \"llvm-cov\", \"show-env\")\n\n    for line in output.strip().splitlines():\n        (key, value) = line.split(\"=\", maxsplit=1)\n        # Strip single or double quotes from the variable value\n        # - quote used by llvm-cov differs between Windows and Linux\n        if value and value[0] in (\"'\", '\"'):\n            value = value[1:-1]\n        env[key] = value\n\n    # Ensure that examples/ and pytests/ all build to the correct target directory to collect\n    # coverage artifacts.\n    env[\"CARGO_TARGET_DIR\"] = env[\"CARGO_LLVM_COV_TARGET_DIR\"]\n\n    return env\n\n\ndef _run(session: nox.Session, *args: str, **kwargs: Any) -> None:\n    \"\"\"Wrapper for _run(session, which creates nice groups on GitHub Actions.\"\"\"\n    is_github_actions = _is_github_actions()\n    failed = False\n    if is_github_actions:\n        # Insert ::group:: at the start of nox's command line output\n        print(\"::group::\", end=\"\", flush=True, file=sys.stderr)\n    try:\n        session.run(*args, **kwargs)\n    except nox.command.CommandFailed:\n        failed = True\n        raise\n    finally:\n        if is_github_actions:\n            print(\"::endgroup::\", file=sys.stderr)\n            # Defer the error message until after the group to make them easier\n            # to find in the log\n            if failed:\n                command = \" \".join(args)\n                print(f\"::error::`{command}` failed\", file=sys.stderr)\n\n\ndef _run_cargo(\n    session: nox.Session, *args: str, expect_error: bool = False, **kwargs: Any\n) -> None:\n    if expect_error:\n        if \"success_codes\" in kwargs:\n            raise ValueError(\"expect_error overrides success_codes\")\n        kwargs[\"success_codes\"] = [101]\n    _run(session, \"cargo\", *args, **kwargs, external=True)\n\n\ndef _run_cargo_test(\n    session: nox.Session,\n    *,\n    package: Optional[str] = None,\n    features: Optional[str] = None,\n) -> None:\n    command = [\"cargo\"]\n    if \"careful\" in session.posargs:\n        # do explicit setup so failures in setup can be seen\n        _run_cargo(session, \"careful\", \"setup\")\n        command.append(\"careful\")\n    command.extend((\"test\", \"--no-fail-fast\"))\n    if \"release\" in session.posargs:\n        command.append(\"--release\")\n    if package:\n        command.append(f\"--package={package}\")\n    if features:\n        command.append(f\"--features={features}\")\n\n    _run(session, *command, external=True)\n\n\ndef _run_cargo_publish(session: nox.Session, *, package: str) -> None:\n    _run_cargo(session, \"publish\", f\"--package={package}\")\n\n\ndef _run_cargo_set_package_version(\n    session: nox.Session,\n    pkg_id: str,\n    version: str,\n    *,\n    project: Optional[str] = None,\n) -> None:\n    command = [\"cargo\", \"update\", \"-p\", pkg_id, \"--precise\", version, \"--workspace\"]\n    if project:\n        command.append(f\"--manifest-path={project}/Cargo.toml\")\n    _run(session, *command, external=True)\n\n\ndef _get_output(*args: str) -> str:\n    return subprocess.run(args, capture_output=True, text=True, check=True).stdout\n\n\ndef _for_all_version_configs(\n    session: nox.Session, job: Callable[[Dict[str, str]], None]\n) -> None:\n    env = os.environ.copy()\n    with _config_file() as config_file:\n        env[\"PYO3_CONFIG_FILE\"] = config_file.name\n\n        def _job_with_config(implementation, version):\n            session.log(f\"{implementation} {version}\")\n            config_file.set(implementation, version)\n            job(env)\n\n        for version in PY_VERSIONS:\n            _job_with_config(\"CPython\", version)\n\n        for version in PYPY_VERSIONS:\n            _job_with_config(\"PyPy\", version)\n\n\nclass _ConfigFile:\n    def __init__(self, config_file) -> None:\n        self._config_file = config_file\n\n    def set(\n        self, implementation: str, version: str, build_flags: Iterable[str] = ()\n    ) -> None:\n        \"\"\"Set the contents of this config file to the given implementation and version.\"\"\"\n        self._config_file.seek(0)\n        self._config_file.truncate(0)\n        self._config_file.write(\n            f\"\"\"\\\nimplementation={implementation}\nversion={version}\nbuild_flags={\",\".join(build_flags)}\nsuppress_build_script_link_lines=true\n\"\"\"\n        )\n        self._config_file.flush()\n\n    @property\n    def name(self) -> str:\n        return self._config_file.name\n\n\n@contextmanager\ndef _config_file() -> Iterator[_ConfigFile]:\n    \"\"\"Creates a temporary config file which can be repeatedly set to different values.\"\"\"\n    with tempfile.NamedTemporaryFile(\"r+\") as config:\n        yield _ConfigFile(config)\n\n\ndef _is_github_actions() -> bool:\n    return \"GITHUB_ACTIONS\" in os.environ\n\n\n_BENCHES = \"--manifest-path=pyo3-benches/Cargo.toml\"\n_FFI_CHECK = \"--manifest-path=pyo3-ffi-check/Cargo.toml\"\n"
        },
        {
          "name": "pyo3-benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyo3-build-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyo3-ffi-check",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyo3-ffi",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyo3-macros-backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyo3-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyo3-runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.6640625,
          "content": "[tool.ruff.lint.extend-per-file-ignores]\n\"__init__.py\" = [\"F403\"]\n\n[tool.towncrier]\nfilename = \"CHANGELOG.md\"\nversion = \"0.23.3\"\nstart_string = \"<!-- towncrier release notes start -->\\n\"\ntemplate = \".towncrier.template.md\"\ntitle_format = \"## [{version}] - {project_date}\"\nissue_format = \"[#{issue}](https://github.com/PyO3/pyo3/pull/{issue})\"  # Note PyO3 shows pulls, not issues, in the CHANGELOG\nunderlines = [\"\", \"\", \"\"]\n\n[tool.towncrier.fragment.packaging]\nname = \"Packaging\"\n\n[tool.towncrier.fragment.added]\nname = \"Added\"\n\n[tool.towncrier.fragment.changed]\nname = \"Changed\"\n\n[tool.towncrier.fragment.removed]\nname = \"Removed\"\n\n[tool.towncrier.fragment.fixed]\nname = \"Fixed\"\n"
        },
        {
          "name": "pytests",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}