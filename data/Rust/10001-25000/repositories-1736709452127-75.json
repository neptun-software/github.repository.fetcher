{
  "metadata": {
    "timestamp": 1736709452127,
    "page": 75,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "diesel-rs/diesel",
      "stars": 12992,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.45703125,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# editorconfig.org\n\nroot = true\n\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.rs]\nindent_style = space\nindent_size = 4\n\n[*.toml]\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".env.sample",
          "type": "blob",
          "size": 0.8134765625,
          "content": "# The database to use when testing against Postgres.\nPG_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/diesel_test\n# The database to use when running the Postgres examples during testing.\nPG_EXAMPLE_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/diesel_example\n\n# The database to use when testing against MySQL.\nMYSQL_DATABASE_URL=mysql://root@127.0.0.1:3306/diesel_test\n# The database to use when running the MySQL examples during testing.\nMYSQL_EXAMPLE_DATABASE_URL=mysql://root@127.0.0.1:3306/diesel_example\n# A database different from the others above used for certain unit tests.\n# TODO: this is magical, explain what it's there for.\nMYSQL_UNIT_TEST_DATABASE_URL=mysql://root@127.0.0.1:3306/diesel_unit_test\n\n# The database to use when testing against SQLite.\nSQLITE_DATABASE_URL=/tmp/diesel_test.sqlite\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "target\nCargo.lock\n!diesel_cli/Cargo.lock\n.env\n*.snap.new\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.8642578125,
          "content": "[files]\nextend-exclude = [\n    \".git/\",\n]\nignore-hidden = false\n\n[default]\nextend-ignore-re = [\n    # That's a ipv6\n    \"2001:4f8:3:ba\",\n    # That is just strangely cased\n    \"dO_nOt_cHaNgE_cAsE\", \"fOoBaR\",\n    # That is the name of a book author\n    \"michael_ende\", \"Michael Ende\",\n    # That's an actual money unit (include the commet to only match that part)\n    \"Fils;  // 1/1000th unit of Dinar\",\n    # That's a name (include the expression to only match the relevant part)\n    \"name\\\\.eq\\\\(\\\"Claus\\\"\\\\)\",\n    # Thats a test for a typo,\n    \"cannot find value `titel` in module `posts`\",\n    \"cannot find type `titel` in module `posts`\",\n    \"[0-9]+[[:space]]+|[[:space:]]+titel: String\",\n    \"big_sur\",\n    # That's Spanish for \"type\" (used in a unit-test)\n    \"tipe\",\n]\n\n[type.md]\nextend-ignore-re = [\n    # Occurs in the changelog\n    \"derive\\\\(Queriable\\\\)\", \"`Queriable`\"\n]\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 86.560546875,
          "content": "# Change Log\n\nAll user visible changes to this project will be documented in this file.\nThis project adheres to [Semantic Versioning](http://semver.org/), as described\nfor Rust libraries in [RFC #1105](https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md)\nFor any named minimal supported Rust version we guarantee that it is possible to build Diesel with the\ndefault features enabled using some set of dependencies. Those set of dependencies is not necessarily\nan up to date version of the specific dependency. We check this by using the unstable `-Z minimal-version` cargo flag.\nIncreasing the minimal supported Rust version will always be coupled at least with a minor release.\n\n## Unreleased\n\n### Added\n\n* Added `limit()` and `offset()` DSL to combination clauses such as `UNION`\n* Fixed `#[derive(Identifiable)]` ignoring attribute `#[diesel(serialize_as)]` on primary keys\n* Added embedded struct support for `AsChangeset` via `#[diesel(embed)]`\n* Added a `#[diesel(skip_update)]` attribute for the `AsChangeset` derive to skip updating a field present in the struct\n* Support for libsqlite3-sys 0.30.0\n* Add support for built-in PostgreSQL range operators and functions\n* Support for postgres multirange type\n* Added `diesel::r2d2::TestCustomizer`, which allows users to customize their `diesel::r2d2::Pool`s\nin a way that makes the pools suitable for use in parallel tests.\n* Added `Json` and `Jsonb` support for the SQLite backend.\n* Fixed diesel thinking `a.eq_any(b)` was non-nullable even if `a` and `b` were nullable.\n* Generate `InstrumentationEvent::BeginTransaction` for immediate and exclusive transactions in SQLite\n* Added `wasm32-unknown-unknown` target support for sqlite backend.\n\n### Fixed\n\n* Use a single space instead of two spaces between `DELETE FROM`.\n* Diesel CLI now ensures that migration versions are always unique. If it fails to generate a unique version, it will return an error. The new version format remains compatible with older Diesel versions.\n* Updated `ipnetwork` to allow version 0.21.\n\n## [2.2.2] 2024-07-19\n\n### Fixed\n\n* Support for libsqlite3-sys 0.29.0\n* Fixed a potential panic in the sqlite cursor implementation\n* Fixed support for rust numeric operators with columns of the type `Numeric`\n* Removed the `SerializedDatabase::new` function due to unsoundness\n\n## [2.2.1] 2024-06-12\n\n## Fixed\n\n* Fixed using `#[dsl::auto_type]` with functions that accept reference arguments\n* Fixed using `#[derive(Queryable)]` with structs that use a type named `Row` as field type\n* Fixed a regression that prevented using `mysqlclient-sys` 0.2.x with diesel 2.2\n* Fixed connecting to postgres database using the scram-sha-256 authentication method on windows while using the bundled postgres builds\n* Improved the error messages in diesel-cli for cases where a file/folder was not found\n* Fixed several version detection bugs in mysqlclient-sys to use pre-generated bindings in more situations\n\n## [2.2.0] 2024-05-31\n\n### Added\n\n* Support `[print_schema] except_custom_type_definitions = [\"Vector\"]`. If a `custom type` matches one element on the list it's skipped.\n* Added automatic usage of all sqlite `rowid` aliases when no explicit primary key is defined for `print-schema`\n* Added a `#[dsl::auto_type]` attribute macro, allowing to infer type of query fragment functions\n* Added the same type inference on `Selectable` derives, which allows skipping specifying `select_expression_type` most of the time, in turn enabling most queries to be written using just a `Selectable` derive.\n* Added an optional `#[diesel(skip_insertion)]` field attribute to the `Insertable` derive macro, allowing fields which map to generated columns to be skipped during insertion.\n* Support for connection instrumentation. This allows to inspect any query run by your application\n* Logging in diesel-cli\n* Support for libsqlite3-sys 0.28\n* Add `sqlite-integer-primary-key-is-bigint` configuration option, usable with SQLite 3.37 or above, allowing to use `BigInt` for `INTEGER PRIMARY KEY` columns in SQLite for tables without the `WITHOUT ROWID` attribute ([SQLite doc](https://www.sqlite.org/lang_createtable.html#rowid)).\n* Support for multiple `print_schema` entry in `diesel.toml` (e.g. `[print_schema.user1]`), which allows generating multiple schema.rs files\n* Add support for `COPY TO` and `COPY FROM` statements\n* Add support for mapping `chrono::Duration` to postgresql's `INTERVAL` sql type\n* Added `serialize_database_to_buffer` and `deserialize_readonly_database_from_buffer` methods in `SqliteConnection` to support serialization/deserialization of SQLite databases to and from byte buffers.\n* Added `SerializedDatabase` wrapper type for a serialized database that is dynamically allocated by calling `serialize_database_to_buffer`. This RAII wrapper deallocates the memory when it goes out of scope with `sqlite3_free`.\n\n### Changed\n\n* The minimal officially supported rustc version is now 1.78.0\n* Deprecated `sql_function!` in favour of `define_sql_function!` which provides compatibility with `#[dsl::auto_type]`\n* Deserialization error messages now contain information about the field that failed to deserialize\n\n## [2.1.6] 2024-04-19\n\n* Fix using `BoxableExpression` with having clauses\n* Fix using numeric expressions with aliased fields\n* Minor documentation fixes\n\n## [2.1.5] 2024-03-15\n\n* Fix `impl SqlOrd` postgres > postgres_backend feature flag.\n* Allow `Queryable` to be used with multiple table names.\n* Fix an inconsistent unit test\n* Fix a clippy lint\n* Fix ./bin/test feature flag calls.\n* Update `libsqlite3-sys` to allow version 0.28 as well\n\n## [2.1.4] 2023-11-14\n\n* Update `libsqlite3-sys` to allow version 0.27 as well\n\n## [2.1.3] 2023-10-05\n\n* Increased accidently decreased limit around element count in  `DISTINCT ON` and `ORDER BY` clauses again as that broke existing code\n\n## [2.1.2] 2023-09-25\n\n## Fixed\n\n* Fixed another potential breaking chaneg around queries containing `DISTINCT ON` and `ORDER BY` clauses consisting of custom sql expressions (e.g. `.nullable()`)\n* Fixed an issue where `#[derive(Selectable)]` and `#[diesel(check_for_backend)]` generates invalid rust code if the struct contains lifetimes/generic types\n\n## [2.1.1] 2023-08-25\n\n## Fixed\n\n* Fixed an issue in diesel-cli that lead to using unquoted table names in one of the internal queries\n* Fixed a bug in `diesel print-schema` that lead to generating invalid `table!` macros if both the `#[sql_name]` and the `#[max_length]` attribute are present\n* Fixed an issue in diesel-cli that lead to ignoring certain foreign key constraints for postgresql\n* Fixed an crash while using `diesel print-schema` with really old sqlite versions\n* Fixed an issue where `#[diesel(check_for_backend)]` ignored `#[diesel(deserialize_as)]` attributes\n* Fixed several issues with the new `#[derive(MultiConnection)]` feature\n* Fixed some edge cases in our sqlite timestamp parsing behaviour\n* `diesel migration generate --diff-schema` now respects table filters as setup for `print-schema` via `diesel.toml`\n* Fixed a potential breaking change around queries containing `DISTINCT ON` and `ORDER BY` clauses consisting of custom sql expressions (e.g. `diesel::dsl::sql`)\n\n## Added\n\n* Support for bigdecimal 0.4\n\n## [2.1.0] 2023-05-26\n\n### Changed\n\n* The minimal officially supported rustc version is now 1.65.0\n\n### Added\n\n* Added the `custom_type_derives` config option to customize the derives for SQL\n  type definitions automatically generated by Diesel CLI.\n* Add a `#[derive(MultiConnection)]` proc-macro that lets you easily implement `diesel::Connection`\n  for an enum of connections to different database backends.\n* Added a `--diff-schema` flag to the `diesel migration generate` command that generates a migration based\n  on the difference between your database and the provided `schema.rs` file\n* Add a `ON CONFLICT (...) DO UPDATE ... [WHERE ...]` conditional clause support for PostgreSQL.\n* Add support for MySQL's `ON DUPLICATE KEY DO UPDATE` syntax through the existing upsert functions.\n* Add ability to define multiple columns in a single `distinct_on` for PostgreSQL,\n  like: `.distinct_on((column_a, column_b))`.\n* Added column size restrictions to the generated `schema.rs` file\n\n## [2.0.4] 2023-04-18\n\n## Fixed\n\n* Workaround the missing name resolution in rust-analyzer. This should fix type inference for some diesel queries. (It remains broken for queries containing `.filter()`/`.inner_join()`/`.left_join()`. These require fixes in rust-analyzer itself)\n* Fixed a bug that could lead to inserting null values instead of empty values for custom sqlite types\n* Fixed a bug that could lead to an unexpected panic while providing an out of bounds bind for `sql_query` in the sqlite backend\n* Fixed some mysql backend specific impl being behind the `mysql` instead of the `mysql_backend` feature flag\n\n## Added\n\n* Support for `libsqlite3-sys` 0.26\n\n## [diesel_derives 2.0.2] 2023-03-13\n\n## Fixed\n\n* Fixing the fallout of a breaking change from `quote` by not using their internal API\n\n## [2.0.3] 2023-01-24\n\n## Fixed\n\n* Fixed a bug with our transaction manager implementation that caused by marking transactions as broken which could be recovered.\n* Fixed an issue with the combination of `BoxableExpression` and order clauses\n\n## [2.0.2] 2022-10-11\n\n### Fixed\n\n* Reverted a fix from the 2.0.1 release that breaks valid `INSERT … ON CONFLICT` queries\n\n## [2.0.1] 2022-10-07\n\n### Fixed\n\n* Fixed an issue with `diesel_cli` generating incompatible type names for the `generate_missing_sql_type_definitions` feature on PostgreSQL\n* Fixed an issue how `diesel_cli` handles sqlite urls while checking if a given database exists\n* Fixed an issue with `PgConnection` becoming unusable after hitting a database error in certain situations\n* Fixed an issue with diesel generating invalid SQL for certain `INSERT … ON CONFLICT` queries\n* Fixed `diesel_derives` generating code that triggers the disabled by default `unused_qualifications` lint\n\n## [2.0.0] 2022-08-29\n\n### Added\n\n* `MysqlConnection::establish` is able to initiate an SSL connection while specifying certificate roots. The database URL should contain an `ssl_ca` parameter with a path pointing to the certificate roots. [See docs](https://dev.mysql.com/doc/refman/5.7/en/connection-options.html#option_general_ssl-ca) if desired.\n\n* `MysqlConnection::establish` is able to initiate an SSL connection. The database URL should contain `ssl_mode` parameter with a value of the [MySQL client command option `--ssl-mode`](https://dev.mysql.com/doc/refman/5.7/en/connection-options.html#option_general_ssl-mode) if desired.\n\n* `Connection` and `SimpleConnection` traits are implemented for a broader range\n  of `r2d2::PooledConnection<M>` types when the `r2d2` feature is enabled.\n\n* Added `DatabaseErrorKind::ReadOnlyTransaction` to allow applications to\n  handle errors caused by writing when only allowed to read.\n\n* All expression methods can now be called on expressions of nullable types.\n\n* Added `BoxedSqlQuery`. This allows users to do a variable amount of `.sql` or\n  `.bind` calls without changing the underlying type.\n\n* Added `.sql` to `SqlQuery` and `UncheckedBind` to allow appending SQL code to\n  an existing query.\n\n* The `MacAddr` SQL type can now be used without enabling the `network-address`\n  feature.\n\n* Added support for SQLite's `UPSERT`.\n  You can use this feature above SQLite version 3.24.0.\n\n* Added ability to create custom aggregate functions in SQLite.\n\n* Multiple aggregate expressions can now appear together in the same select\n  clause. See [the upgrade notes](#2-0-0-upgrade-non-aggregate) for details.\n\n* `ValidGrouping` has been added to represent whether an expression is valid for\n  a given group by clause, and whether or not it's aggregate. It replaces the\n  functionality of `NonAggregate`. See [the upgrade\n  notes](#2-0-0-upgrade-non-aggregate) for details.\n\n* It is now possible to inspect the type of values returned from the database\n  in such a way to support constructing a dynamic value depending on this type.\n\n* Added a `without-deprecated` feature that unconditionally disables deprecated items.\n  Use this feature flag to verify that none of your dependencies is setting\n  the `with-deprecated` flag internally.\n\n* Added support for PostgreSQL's `SIMILAR TO` and `NOT SIMILAR TO`.\n\n* Added `#[diesel(serialize_as)]` analogous to `#[diesel(deserialize_as)]`. This allows\n  customization of the serialization behaviour of `Insertable` and `AsChangeset` structs.\n\n* Added support for `GROUP BY` clauses\n\n* Added support for `UNION`, `UNION ALL`, `INTERSECT`, `INTERSECT ALL`, `EXCEPT`, `EXCEPT ALL` clauses\n\n* Added the error position for PostgreSQL errors\n\n* Added ability to create custom collation functions in SQLite.\n\n* Added support for SQLite's `IS` and `IS NOT`.\n\n* Add support for HAVING clauses.\n\n* Added support for SQL functions without arguments for SQLite.\n\n* Diesel CLI will now generate SQL type definitions for SQL types that are not supported by diesel out of the box. It's possible to disable this behavior via the `generate_missing_sql_type_definitions` config option.\n\n* Added an option to `#[derive(Insertable)]` that let you insert `NULL` values instead of `DEFAULT` values for `Option<T>`\n\n* Added support for all the derive attributes being inside `#[diesel(...)]`\n\n* Added support for `RETURNING` expressions for Sqlite via the `returning_clauses_for_sqlite_3_35` feature\n\n* Added support for table aliasing via the `alias!` macro\n\n* Added support for the usage of slices of references with `belonging_to` from `BelongingToDsl`\n\n* Added support for updating individual array elements `UPDATE table SET array_column[1] = true`\n\n* Adds an `ipnet-address` feature flag, allowing support (de)serializing IP\n  values from the database using types provided by `ipnet`. This feature\n  may be enabled concurrently with the previously existing `network-address`\n  feature.\n\n* We've added support for loading values using libpq's row-by-row mode via\n  the new iterator interface\n\n* Adds `Timestamp`, `Timestamptz` support for appropriate types for `time v0.3.9`.\n  This feature enables using the `time` crate as an alternative to `chrono`.\n\n### Removed\n\n* All previously deprecated items have been removed.\n* Support for `uuid` version < 0.7.0 has been removed.\n* Support for `bigdecimal` < 0.0.13 has been removed.\n* Support for `pq-sys` < 0.4.0 has been removed.\n* Support for `mysqlclient-sys` < 0.2.5 has been removed.\n* Support for `time` (0.1) types has been removed.\n* Support for `chrono` < 0.4.19 has been removed.\n* The minimal supported version of libsqlite3-sys is now 0.17.2.\n* The `NonNull` trait for sql types has been removed in favour of the new `SqlType` trait.\n* `no_arg_sql_function!` has been deprecated without replacement.\n  [`sql_function!`][sql-function-2-0-0] can now be used for functions with zero\n  arguments. See [the migration guide][2-0-migration] for more details.\n* Support for `barrel` based migrations has been removed for now. We are happy to\n  add this support back as soon as `barrel` integrates with our new migration framework.\n* The deprecated bash completions command (`diesel bash-completions`) has been removed.\n  Use `diesel completions <shell>` instead.\n\n### Changed\n\n* The minimal officially supported rustc version is now 1.56.0\n\n* Interacting with a database requires a mutable connection.\n\n* The way [the `Backend` trait][backend-2-0-0] handles its `RawValue` type has\n  been changed to allow non-references. Users of this type (e.g. code written\n  `&DB::RawValue` or `&<DB as Backend>::RawValue>`) should use\n  [`backend::RawValue<DB>`][raw-value-2-0-0] instead. Implementors of `Backend`\n  should check the relevant section of [the migration guide][2-0-migration].\n\n[backend-2-0-0]: http://docs.diesel.rs/diesel/backend/trait.Backend.html\n[raw-value-2-0-0]: http://docs.diesel.rs/diesel/backend/type.RawValue.html\n\n* The type metadata for MySQL has been changed to include sign information. If\n  you are implementing `HasSqlType` for `Mysql` manually, you may need to adjust\n  your implementation to fully use the new unsigned variants in `MysqlType`\n\n* The `RawValue` types for the `Mysql` and `Postgresql` backend where changed\n  from `[u8]` to distinct opaque types. If you used the concrete `RawValue` type\n  somewhere you need to change it to `mysql::MysqlValue` or `pg::PgValue`.\n\n* The `uuidv07` feature was renamed to `uuid`, due to the removal of support for older uuid versions\n\n* Boxed queries (constructed from `.into_boxed()`) are now `Send`.\n\n* The handling of mixed aggregate values is more robust. Invalid queries such as\n  `.select(max(id) + other_column)` are now correctly rejected, and valid\n  queries such as `.select((count_star(), max(other_column)))` are now correctly\n  accepted. For more details, see [the migration guide](2-0-migration).\n\n* `NonAggregate` is now a trait alias for `ValidGrouping<()>` for expressions\n  that are not aggregate. On stable this is a normal trait with a blanket impl,\n  but it should never be implemented directly. With the `unstable` feature, it\n  will use trait aliases which prevent manual implementations.\n\n  Due to language limitations, we cannot make the new trait alias by itself\n  represent everything it used to, so in some rare cases code changes may be\n  required. See [the migration guide](2-0-migration) for details.\n\n* Various `__NonExhaustive` variants in different (error-) enums are replaced with\n  `#[non_exhaustive]`. If you matched on one of those variants explicitly you need to\n  introduce a wild card match instead.\n\n* `FromSql::from_sql` is changed to construct value from non nullable database values.\n   To construct a rust value for nullable values use the new `FromSql::from_nullable_sql`\n   method instead.\n\n* Custom sql types are now required to implement the new `SqlType` trait. Diesel will\n  automatically create implementations of that trait for all types having a `#[derive(SqlType)]`\n\n* The workflow for manually implementing support custom types has changed. Implementing\n  `FromSqlRow<ST, DB>` is not required anymore, as this is now implied by implementing\n  `FromSql<ST, DB>`. The requirement of implementing `Queryable<ST, DB>` remains\n  unchanged. For types using `#[derive(FromSqlRow)]` no changes are required as the\n  derive automatically generates the correct code\n\n* The structure of our deserialization trait has changed. Loading values from the database\n  requires now that the result type implements `FromSqlRow<ST, DB>`. Diesel provides wild\n  card implementations for types implementing `Queryable<ST, DB>` or `QueryableByName<DB>`\n  so non generic code does not require any change. For generic code you likely need to\n  replace a trait bound on `Queryable<ST, DB>` with a trait bound on `FromSqlRow<ST, DB>`\n  and a bound to `QueryableByName<DB>` with `FromSqlRow<Untyped, DB>`.\n\n* CLI flags of `only-tables` and `except-tables` are now interpreted as regular expressions.\n  Similarly, `only_tables` and `except_tables` in `diesel.toml` are treated as regular expressions.\n\n* Now you can sort column fields by name with the `column-sorting` option.\n  It can be set to either `ordinal_position` (default) or `name`.\n  This ensures stable sorting even if columns are removed and re-added.\n\n* The `Queryable<ST,DB>` trait was updated to be made faillible, in order to properly handle\n  cases where you detect a data inconsistency between fields on deserialization\n  (that e.g. was supposed to be made impossible by DB `CHECK`s). The `build` function now\n  returns a\n  [`diesel::deserialize::Result<Self>`](https://docs.diesel.rs/master/diesel/deserialize/type.Result.html)\n  instead of a `Self`.\n\n* `TypeMetadata::MetadataLookup` is now `?Sized`.\n\n* Multiple implementations of `Connection<Backend=Pg>` are now possible\n  because of the new `PgMetadataLookup` trait.\n\n* For the `Pg` backend, `TypeMetadata::MetadataLookup` has changed to `dyn PgMetadataLookup`.\n\n* Diesel's migration framework was rewritten from the ground. Existing migrations continue to\n  be compatible with the rewrite, but code calling into `diesel_migrations` requires an update.\n  See the [migration guide](2-0-migration) for details.\n\n* `eq_any()` now emits a `= ANY()` expression for the postgresql backend instead of `IN()`\n* `ne_all()` now emits a `!= ALL()` expression for the postgresql backend instead of `NOT IN()`\n* The sqlite backend now uses a single batch insert statement if there are now default values present\n  in the values clause\n\n* The MySQL connection is using the CLIENT_FOUND_ROWS from now on. This means that updating rows without changing any values will return the number of matched rows (like most other SQL servers do), as opposed to the number of changed rows.\n\n* The definition of `ToSql::to_sql` and `QueryFragment::walk_ast` has changed to allow serializing values without\n  copying the value itself. This is useful for database backends like sqlite where you can directly share a buffer\n  with the database. Beside of the changed signature, existing impls of this trait should remain unchanged in almost\n  all cases.\n\n* The `PIPES_AS_CONCAT` sql_mode is no longer set\nby default. This setting requires a modification to MySQL query parsing that is\nnot supported by certain systems (such as Vitess). If you are using MySQL and\nexecuting raw queries with the `||` operator, you will need to rewrite your\nqueries or set `PIPES_AS_CONCAT` manually.\n\n### Fixed\n\n* Many types were incorrectly considered non-aggregate when they should not\n  have been. All types in Diesel are now correctly only considered\n  non-aggregate if their parts are.\n\n* Offset clauses without limit clauses resulted into invalid sql using the mysql or\n  sqlite backend. Both do not support such clauses without a preceding limit clause.\n  For those backend Diesel does now generate a fake limit clause in case no explicit\n  limit clause was given. As consequence of this change generic query code may\n  require additional trait bounds as requested from the compiler. Third party\n  backends are required to explicitly provide `QueryFragment` impls for\n  `LimitOffsetClause<L, O>` now.\n\n* Nullability requirements are now properly enforced for nested joins.\n  Previously, only the rules for the outer-most join were considered. For\n  example, `users.left_join(posts).left_join(comments)` would allow selecting\n  any columns from `posts`. That will now fail to compile, and any selections\n  from `posts` will need to be made explicitly nullable.\n\n* Diesel CLI will now look for `diesel.toml` to determine the project root\n  before looking for `Cargo.toml`.\n\n* Any relative paths in `diesel.toml` will now be treated as relative to the\n  project root (the directory containing either `diesel.toml` or `Cargo.toml`).\n  They are no longer dependent on the current working directory (for all\n  directories in the same project)\n\n* The SQLite backend is now configured to interpret URIs.\n  See [the SQLite URI documentation] for additional details.\n\n[the SQLite URI documentation]: https://www.sqlite.org/uri.html\n\n* We've refactored our type translation layer for Mysql to handle more types now.\n\n* We've refactored our type level representation of nullable values. This allowed us to\n  fix multiple long standing bugs regarding the correct handling of nullable values in some\n  corner cases (#104, #2274)\n\n* Parenthesis are now inserted around all infix operations provided by diesel's `ExpressionMethods` traits\n\n* Queries containing a `distinct on` clause check now on compile time that a compatible order clause was set.\n\n* Implementations of custom SQLite SQL functions now check for panics\n\n* `diesel print-schema` now generates `Array<Nullable<ST>>` rather than `Array<ST>` for Postgres Array types. Existence of\n  `NULL` values in database arrays would previously result in deserialization errors. Non-nullable arrays are now opt\n  in (by schema patching).\n\n### Deprecated\n\n* All the diesel derive attributes that are not inside `#[diesel(...)]`\n\n* `diesel_(prefix|postfix|infix)_operator!` have been deprecated. These macros\n  are now available without the `diesel_` prefix. With Rust 2018 they can be\n  invoked as `diesel::infix_operator!` instead.\n\n* `diesel::pg::upsert` has been deprecated to support upsert queries on more than one backend.\n  Please use `diesel::upsert` instead.\n\n* `diesel::dsl::any` and `diesel::dsl::all` are now deprecated in\n   favour of `ExpressionMethods::eq_any()` and `ExpressionMethods::ne_all()`\n\n\n[2-0-migration]: https://github.com/diesel-rs/diesel/blob/master/guide_drafts/migration_guide.md\n\n## [1.4.8] - 2021-09-20\n\n### Fixed\n\n* Fixed a incompatibly between `diesel` and `diesel_migrations` when building both crates with cargos new `resolver = \"2\"` enabled. This change ensures compatibility with the upcoming 2021 rust edition.\n\n## [1.4.7] - 2021-06-08\n\n### Fixed\n\n* Updated `libsqlite3-sys` to allow version 0.22\n* Updated `ipnetwork` to allow version 0.18\n\n## [1.4.6] - 2021-03-05\n\n### Fixed\n\n* Fixed a use-after-free issue in the `QueryableByName` implementation\n  of our `Sqlite` backend\n* Updated several dependencies\n\n## [1.4.5] - 2020-06-09\n\n### Fixed\n\n* Update several dependencies\n* Fixed an issue where transactions that would fail to commit would leave the connection\n  in a broken non-committed non-rolled-back state.\n* Fix a bug that result in leaking sockets/file descriptors on failed connection attempts\n  for postgresql\n* Fix an incompatibility with newer `libmysqlclient` versions\n* Remove some potential harmful usages of `mem::uninitialized`\n\n## [1.4.4] - 2020-03-22\n\n### Fixed\n\n* Update several dependencies\n* Fixed a bug with printing embedded migrations\n\n## [1.4.3] - 2019-10-11\n\n### Fixed\n\n* Updated several dependencies\n* Fixed an issue where the postgresql backend exploits implementation defined behaviour\n* Fixed issue where rustdoc failed to build the documentation\n* `diesel_derives` and `diesel_migrations` are updated to syn 1.0\n\n\n## [1.4.2] - 2019-03-19\n\n### Fixed\n\n* Parenthesis are now inserted around all mathematical operations. This means\n  that `(2.into_sql() + 3) * 4` will correctly evaluate to 20 as expected.\n  Previously we would generate SQL that evaluated to 14. This could even result\n  in runtime errors if multiple types were involved (for example, `interval *\n  (integer + 1)`)\n\n## [1.4.1] - 2019-01-24\n\n### Fixed\n\n* This release fixes a minor memory safety issue in SQLite. This bug would only\n  occur in an error handling branch that should never occur in practice.\n\n## [1.4.0] - 2019-01-20\n\n### Fixed\n\n* `embed_migrations!` will no longer emit an unused import warning\n* Diesel now supports uuid 0.7 by adding the new feature flag `uuidv07`\n\n### Added\n\n* Diesel CLI can be configured to error if a command would result in changes\n  to your schema file by passing `--locked-schema`. This is intended for use\n  in CI and production deploys, to ensure that the committed schema file is\n  up to date.\n\n* A helper trait has been added for implementing `ToSql` for PG composite types.\n  See [`WriteTuple`][write-tuple-1-4-0] for details.\n\n[write-tuple-1-4-0]: docs.diesel.rs/diesel/serialize/trait.WriteTuple.html\n\n* Added support for MySQL's `UNSIGNED TINYINT`\n\n* `DatabaseErrorKind::SerializationFailure` has been added, corresponding to\n  SQLSTATE code 40001 (A `SERIALIZABLE` isolation level transaction failed to\n  commit due to a read/write dependency on another transaction). This error is\n  currently only detected on PostgreSQL.\n\n* Diesel CLI can now generate completions for zsh and fish. See `diesel\n  completions --help` for details.\n\n* `#[belongs_to]` can now accept types that are generic over lifetimes (for\n  example, if one of the fields has the type `Cow<'a, str>`). To define an\n  association to such a type, write `#[belongs_to(parent = \"User<'_>\")]`\n\n* `Nullable<Text>` now supports `ilike` expression on  in PostgreSQL.\n\n* `diesel_manage_updated_at('table_name')` is now available on SQLite. This\n  function can be called in your migrations to create a trigger which\n  automatically sets the `updated_at` column, unless that column was updated in\n  the query.\n\n### Changed\n\n* Diesel's derives now require that `extern crate diesel;` be at your crate root\n  (e.g. `src/lib.rs` or `src/main.rs`)\n\n* `Tinyint` has been renamed to `TinyInt` and an alias has been created from `Tinyint` to `TinyInt`.\n\n* The minimal officially supported rustc version is now 1.31.0\n\n## [1.3.3] - 2018-09-12\n\n### Fixed\n\n* Fixed an issue that occurred with MySQL 8.0 when calling `.execute` or\n  `.batch_execute` with a single query that returned a result set (such as our\n  `SELECT 1` health check in `r2d2`).\n\n## [1.3.2] - 2018-06-13\n\n### Fixed\n\n* The behavior of unsigned types in MySQL has been corrected to properly set the\n  `is_unsigned` flag.\n\n* Fixed an issue with `sql_function!` when `#[sql_name]` was used on functions\n  with no return type.\n\n## [1.3.1] - 2018-05-23\n\n### Fixed\n\n* Fixed an issue with Diesel CLI's use of temp files that caused errors on\n  Windows.\n\n## [1.3.0] - 2018-05-22\n\n### Added\n\n* Diesel CLI now supports a configuration file. See\n  diesel.rs/guides/configuring-diesel-cli for details.\n\n* `sql_function!` now supports generic functions. See [the documentation for\n  `sql_function!`][sql-function-1-3-0] for more details.\n\n* `sql_function!` now supports aggregate functions like `sum` and `max`, by\n  annotating them with `#[aggregate]`. This skips the implementation of\n  `NonAggregate` for your function. See [the documentation for\n  `sql_function!`][sql-function-1-3-0] for more details.\n\n* `sql_function!` now supports renaming the function by annotating it with\n  `#[sql_name = \"SOME_FUNCTION\"]`. This can be used to support functions with\n  multiple signatures such as coalesce, by defining multiple rust functions\n  (with different names) that have the same `#[sql_name]`.\n\n* Added `sqlite-bundled` feature to `diesel_cli` to make installing on\n  some platforms easier.\n\n* Custom SQL functions can now be used with SQLite. See [the\n  docs][sql-function-sqlite-1-3-0] for details.\n\n[sql-function-sqlite-1-3-0]: http://docs.diesel.rs/diesel/macro.sql_function.html#use-with-sqlite\n\n* All functions and operators provided by Diesel can now be used with numeric\n  operators if the SQL type supports it.\n\n* `PgInterval` can now be used with `-`, `*`, and `/`.\n\n* `Vec<T>` is now `Insertable`. It is no longer required to always place an `&`\n  in front of `.values`.\n\n* Added support for PG tuples. See [`sql_types::Record`][record-1-3-0] for details.\n\n[record-1-3-0]: http://docs.diesel.rs/diesel/pg/types/sql_types/struct.Record.html\n\n* Added support for a wider range of locking clauses, including `FOR SHARE`,\n  `SKIP LOCKED`, `NO WAIT`, and more. See [`QueryDsl`][locking-clause-1-3-0] for details.\n\n[locking-clause-1-3-0]: http://docs.diesel.rs/diesel/query_dsl/trait.QueryDsl.html#method.for_update\n\n### Changed\n\n* `sql_function!` has been redesigned. The syntax is now `sql_function!(fn\n  lower(x: Text) -> Text);`. The output of the new syntax is slightly different\n  than what was generated in the past. See [the documentation for\n  `sql_function!`][sql-function-1-3-0] for more details.\n\n[sql-function-1-3-0]: http://docs.diesel.rs/diesel/macro.sql_function.html\n\n* Diesel's minimum supported Rust version is 1.24.0. This was already true, but\n  it is now tested and enforced. Any future changes to our minimum supported\n  version will be listed in this change log.\n\n### Fixed\n\n* `diesel print-schema` and `infer_schema!` now properly handle unsigned types\n  in MySQL\n\n### Deprecated\n\n* `diesel_infer_schema` has been deprecated. `diesel print-schema` is now the\n  only way to generate database schema. Diesel CLI can be configured to\n  automatically regenerate your schema file when migrations are run. See\n  diesel.rs/guides/configuring-diesel-cli for details.\n\n* Uses of `sql_function!` in the form `sql_function!(foo, foo_t, (x: Integer))`\n  have been deprecated in favor of a new design (listed above). Note: Due to [a\n  bug in Rust](https://github.com/rust-lang/rust/issues/49912), you may not see\n  a deprecation warning from usage of the old form. As always, if you're\n  concerned about relying on deprecated code, we recommend attempting to build\n  your app with `default-features` turned off (specifically excluding the\n  `with-deprecated` feature).\n\n* The `--whitelist` and `--blacklist` options to `diesel print-schema` have been\n  deprecated and renamed `--only-tables` and `--exclude-tables`.\n\n## [1.2.2] - 2018-04-12\n\n### Changed\n\n* Warnings are now allowed inside the crate. The way we had attempted to\n  deprecate old feature names caused builds to break. We are still not happy\n  with how this deprecation gets communicated, and will revisit it in the\n  future.\n\n## [1.2.1] - 2018-04-11\n\n### Changed\n\n* Renamed `x32-column-tables`, `x64-column-tables`, and `x128-column-tables` to\n  `32-column-tables`, `64-column-tables`, and `128-column-tables`. The leading\n  `x` was due to a bug in crates.io discovered while publishing 1.2.0. The bug\n  has since been fixed.\n\n## [1.2.0] - 2018-04-06\n\n### Added\n\n* Added `SqlLiteral::bind()`.\n  This is intended to be used for binding values to small SQL fragments.\n  Use `sql_query` if you are writing full queries.\n\n* Added support for `INSERT INTO table (...) SELECT ...` queries. Tables, select\n  select statements, and boxed select statements can now be used just like any\n  other `Insertable` value.\n\n* Any insert query written as `insert_into(table).values(values)` can now be\n  written as `values.insert_into(table)`. This is particularly useful when\n  inserting from a select statement, as select statements tend to span multiple\n  lines.\n\n* Diesel's derives can now produce improved error messages if you are using a\n  nightly compiler, and enable the `unstable` feature. For the best errors, you\n  should also set `RUSTFLAGS=\"--cfg procmacro2_semver_exempt\"`.\n\n* Added support for specifying `ISOLATION LEVEL`, `DEFERRABLE`, and `READ ONLY`\n  on PG transactions. See [`PgConnection::build_transaction`] for details.\n\n[`PgConnection::build_transaction`]: http://docs.diesel.rs/diesel/pg/struct.PgConnection.html#method.build_transaction\n\n* Added support for `BEGIN IMMEDIATE` and `BEGIN EXCLUSIVE` on SQLite.\n  See [`SqliteConnection::immediate_transaction`] and\n  [`SqliteConnection::exclusive_transaction`] for details\n\n[`SqliteConnection::immediate_transaction`]: http://docs.diesel.rs/diesel/sqlite/struct.SqliteConnection.html#method.immediate_transaction\n[`SqliteConnection::exclusive_transaction`]: http://docs.diesel.rs/diesel/sqlite/struct.SqliteConnection.html#method.exclusive_transaction\n\n* Tables with more than 56 columns are now supported by enabling the\n  `128-column-tables` feature.\n\n* Delete statements can now be boxed. This is useful for conditionally modifying\n  the where clause of a delete statement. See [`DeleteStatement::into_boxed`]\n  for details.\n\n[`DeleteStatement::into_boxed`]: http://docs.diesel.rs/diesel/query_builder/struct.DeleteStatement.html#method.into_boxed\n\n* Update statements can now be boxed. This is useful for conditionally modifying\n  the where clause of a update statement. See [`UpdateStatement::into_boxed`]\n  for details.\n\n[`UpdateStatement::into_boxed`]: http://docs.diesel.rs/diesel/query_builder/struct.UpdateStatement.html#method.into_boxed\n\n* Added `order_by` as an alias for `order`.\n\n* Added `then_order_by`, which appends to an `ORDER BY` clause rather than\n  replacing it. This is useful with boxed queries to dynamically construct an\n  order by clause containing an unknown number of columns.\n\n* `#[derive(Insertable)]` can now work on structs with fields that implement\n  `Insertable` (meaning one field can map to more than one column). Add\n  `#[diesel(embed)]` to the field to enable this behavior.\n\n* Queries that treat a subselect as a single value (e.g. `foo = (subselect)`)\n  are now supported by calling [`.single_value()`].\n\n* `#[derive(Insertable)]` implements now `Insertable` also on the struct itself,\n  not only on references to the struct\n\n[`.single_value()`]: http://docs.diesel.rs/diesel/query_dsl/trait.QueryDsl.html#method.single_value\n\n* `ConnectionError` now implements `PartialEq`.\n\n* Columns generated by `table!` now implement `Default`\n\n* `#[derive(AsChangeset)]` now implements `AsChangeset` on the struct itself,\n  and not only on a reference to the struct\n\n* Added support for deserializing `Numeric` into `BigDecimal` on SQLite. SQLite\n  has no arbitrary precision type, so the result will still have floating point\n  rounding issues. This is primarily to support things like `avg(int_col)`,\n  which we define as returning `Numeric`\n\n### Changed\n\n* The bounds on `impl ToSql for Cow<'a, T>` have been loosened to no longer\n  require that `T::Owned: ToSql`.\n\n* `32-column-tables` are now enabled by default.\n\n### Deprecated\n\n* `ne_any` has been renamed to `ne_all`.\n\n* The `large-tables` feature has been has been renamed to `32-column-tables`.\n\n* The `huge-tables` feature has been renamed to `64-column-tables`.\n\n* `IncompleteUpdateStatement` has been removed. Use `UpdateStatement` instead.\n\n### Fixed\n\n* `diesel database setup` now correctly handles database URLs containing query\n  strings\n\n* `diesel migration list` shows the proper migration order when mixing\n  old and new timestamp formats. (The migrations were always run in the correct\n  order, this only affects the display logic of `migration list`)\n\n* `#[derive(Identifiable)]` now correctly associates `#[primary_key]` with the\n  column name, not field name.\n\n* Select statements can no longer incorrectly appear in an expression context.\n\n* `exists` can no longer incorrectly receive values other than select\n  statements.\n\n* `MysqlConnection::establish` can now properly handle IPv6 addresses wrapped in\n  square brackets.\n\n### Jokes\n\n* Diesel is now powered by the blockchain because it's 2018.\n\n## [1.1.2] - 2018-04-05\n\n* No changes\n\n## [1.1.1] - 2018-01-16\n\n### Added\n\n* Added `diesel::r2d2::PoolError` as an alias for `r2d2::Error`. Previously this\n  type was inaccessible due to `diesel::r2d2::Error`.\n\n## [1.1.0] - 2018-01-15\n\n### Added\n\n* `r2d2-diesel` has been merged into Diesel proper. You should no longer rely\n  directly on `r2d2-diesel` or `r2d2`. The functionality of both is exposed from\n  `diesel::r2d2`.\n\n* `r2d2::PooledConnection` now implements `Connection`. This means that you\n  should no longer need to write `&*connection` when using `r2d2`.\n\n* The `BINARY` column type name is now supported for SQLite.\n\n* The `QueryId` trait can now be derived.\n\n* `FromSqlRow` can now be derived for types which implement `FromSql`.\n\n* `AsExpression` can now be derived for types which implement `ToSql`.\n\n* `HasSqlType`, `NotNull`, and `SingleValue` can now be derived with\n  `#[derive(SqlType)]`. See the docs for those traits for more information.\n\n* The return type of `FromSql`, `FromSqlRow`, and `QueryableByName` can now be\n  written as `deserialize::Result<Self>`.\n\n* The return type of `ToSql` can now be written as `serialize::Result`.\n\n* Added support for SQLite's `INSERT OR IGNORE` and MySQL's `INSERT IGNORE`\n  via the `insert_or_ignore` function.\n\n* `min` and `max` can now be used with array expressions.\n\n* Added `diesel::dsl::array`, which corresponds to a PG `ARRAY[]` literal.\n\n* Added the `not_none!` macro, used by implementations of `FromSql` which do not\n  expect `NULL`.\n\n* Added `result::UnexpectedNullError`, an `Error` type indicating that an\n  unexpected `NULL` was received during deserialization.\n\n* Added `.or_filter`, which behaves identically to `.filter`, but using `OR`\n  instead of `AND`.\n\n* `helper_types` now contains a type for every method defined in\n  `expression_methods`, and every function in `dsl`.\n\n* Added `FromSql` impls for `*const str` and `*const [u8]` everywhere that\n  `String` and `Vec` are supported. These impls do not allocate, and are\n  intended for use by other impls which need to parse a string or bytes, and\n  don't want to allocate. These impls should never be used outside of another\n  `FromSql` impl.\n\n### Deprecated\n\n* *IMPORTANT NOTE* Due to [several][rust-deprecation-bug-1]\n  [bugs][rust-deprecation-bug-2] in Rust, many of the deprecations in this\n  release may not show a warning. If you want to ensure you are not using any\n  deprecated items, we recommend attempting to compile your code without the\n  `with-deprecated` feature by adding `default-features = false` to\n  `Cargo.toml`.\n\n[rust-deprecation-bug-1]: https://github.com/rust-lang/rust/issues/47236\n[rust-deprecation-bug-2]: https://github.com/rust-lang/rust/issues/47237\n\n* Deprecated `impl_query_id!` in favor of `#[derive(QueryId)]`\n\n* Deprecated specifying a column name as `#[column_name(foo)]`. `#[column_name =\n  \"foo\"]` should be used instead.\n\n* The `types` module has been deprecated. It has been split into `sql_types`,\n  `serialize`, and `deserialize`.\n\n* `query_source::Queryable` and `query_source::QueryableByName` have been\n  deprecated. These traits have been moved to `deserialize`.\n\n* `backend::TypeMetadata` has been deprecated. It has been moved to `sql_types`.\n\n* `types::ToSqlOutput` has been deprecated. It has been renamed to\n  `serialize::Output`.\n\n* `helper_types::Not` is now `helper_types::not`\n\n### Fixed\n\n* `infer_schema!` generates valid code when run against a database with no\n  tables.\n\n## [1.0.0] - 2018-01-02\n\n### Added\n\n* `#[derive(QueryableByName)]` can now handle structs that have no associated\n  table. If the `#[table_name]` annotation is left off, you must annotate each\n  field with `#[sql_type = \"Integer\"]`\n\n* `#[derive(QueryableByName)]` can now handle embedding other structs. To have a\n  field whose type is a struct which implements `QueryableByName`, rather than a\n  single column in the query, add the annotation `#[diesel(embed)]`\n\n* The `QueryDsl` trait encompasses the majority of the traits that were\n  previously in the `query_dsl` module.\n\n### Fixed\n\n* Executing select statements on SQLite will no longer panic when the database\n  returns `SQLITE_BUSY`\n\n* `table!`s which use the `Datetime` type with MySQL will now compile correctly,\n  even without the `chrono` feature enabled.\n\n* `#[derive(QueryableByName)]` will now compile correctly when there is a shadowed `Result` type in scope.\n\n* `BoxableExpression` can now be used with types that are not `'static`\n\n### Changed\n\n* `Connection::test_transaction` now requires that the error returned implement `Debug`.\n\n* `query_builder::insert_statement::InsertStatement` is now accessed as\n  `query_builder::InsertStatement`\n\n* `query_builder::insert_statement::UndecoratedInsertRecord` is now accessed as\n  `query_builder::UndecoratedInsertRecord`\n\n* `#[derive(QueryableByName)]` now requires that the table name be explicitly\n  stated.\n\n* Most of the traits in `query_dsl` have been moved to `query_dsl::methods`.\n  These traits are no longer exported in `prelude`. This should not affect most\n  apps, as the behavior of these traits is provided by `QueryDsl`. However, if\n  you were using these traits in `where` clauses for generic code, you will need\n  to explicitly do `use diesel::query_dsl::methods::WhateverDsl`. You may also\n  need to use UFCS in these cases.\n\n* If you have a type which implemented `QueryFragment` or `Query`, which you\n  intended to be able to call `execute` or `load` on, you will need to manually\n  implement `RunQueryDsl` for that type. The trait should be unconditionally\n  implemented (no where clause beyond what your type requires), and the body\n  should be empty.\n\n### Removed\n\n* All deprecated items have been removed.\n\n* `LoadDsl` and `FirstDsl` have been removed. Their functionality now lives in\n  `LoadQuery`.\n\n## [0.99.1] - 2017-12-01\n\n### Changed\n\n* Diesel CLI now properly restricts its `clap` dependency. 0.99.0 mistakenly had\n  no upper bound on the version.\n\n## [0.99.0] - 2017-11-28\n\n### Added\n\n* The `.for_update()` method has been added to select statements, allowing\n  construction of `SELECT ... FOR UPDATE`.\n\n* Added `insert_into(table).default_values()` as a replacement for\n  `insert_default_values()`\n\n* Added `insert_into(table).values(values)` as a replacement for\n  `insert(values).into(table)`.\n\n* Added support for MySQL's `REPLACE INTO` as `replace_into(table)`.\n\n* Added `replace_into(table).values(values)` as a replacement for\n  `insert_or_replace(values).into(table)`.\n\n* Added `on_conflict_do_nothing` on `InsertStatement` as a replacement for\n  `on_conflict_do_nothing` on `Insertable` structs.\n\n* Added `on_conflict` on `InsertStatement` as a replacement for\n  `on_conflict` on `Insertable` structs.\n\n* `filter` can now be called on update and delete statements. This means that\n  instead of `update(users.filter(...))` you can write\n  `update(users).filter(...)`. This allows line breaks to more naturally be\n  introduced.\n\n* Subselects can now reference columns from the outer table. For example,\n  `users.filter(exists(posts.filter(user_id.eq(users::id))))` will now compile.\n\n* `TextExpressionMethods` is now implemented for expressions of type\n  `Nullable<Text>` as well as `Text`.\n\n* `allow_tables_to_appear_in_same_query!` can now take more than 2 tables, and is the same\n  as invoking it separately for every combination of those tables.\n\n* Added `sql_query`, a new API for dropping to raw SQL that is more pleasant to\n  use than `sql` for complete queries. The main difference from `sql` is that\n  you do not need to state the return type, and data is loaded from the query by\n  name rather than by index.\n\n* Added a way to rename a table in the `table!` macro with `#[sql_name=\"the_table_name\"]`\n\n* Added support for PostgreSQL's `DISTINCT ON`. See\n  [`.distinct_on()`][0.99.0-distinct-on] for more details\n\n### Changed\n\n* The signatures of `QueryId`, `Column`, and `FromSqlRow` have all changed to\n  use associated constants where appropriate.\n\n* You will now need to invoke `allow_tables_to_appear_in_same_query!` any time two tables\n  appear together in the same query, even if there is a `joinable!` invocation for those tables.\n\n* `diesel_codegen` should no longer explicitly be used as a dependency. Unless\n  you are using `infer_schema!` or `embed_migrations!`, you can simply remove it\n  from your `Cargo.toml`. All other functionality is now provided by `diesel`\n  itself.\n\n* Code using `infer_schema!` or `infer_table_from_schema!` must now add\n  `diesel_infer_schema` to `Cargo.toml`, and `#[macro_use] extern crate\n  diesel_infer_schema` to `src/lib.rs`\n\n* Code using `embed_migrations!` must now add `diesel_migrations` to `Cargo.toml`,\n  and `#[macro_use] extern crate diesel_migrations` to `src/lib.rs`\n\n* The `migrations` module has been moved out of `diesel` and into\n  `diesel_migrations`\n\n### Deprecated\n\n* Deprecated `insert_default_values()` in favor of\n  `insert_into(table).default_values()`\n\n* Deprecated `insert(values).into(table)` in favor of\n  `insert_into(table).values(values)`.\n\n* Deprecated `insert_or_replace(values).into(table)` in favor of\n  `replace_into(table).values(values)`.\n\n* Deprecated `.values(x.on_conflict_do_nothing())` in favor of\n  `.values(x).on_conflict_do_nothing()`\n\n* Deprecated `.values(x.on_conflict(y, do_nothing()))` in favor of\n  `.values(x).on_conflict(y).do_nothing()`\n\n* Deprecated `.values(x.on_conflict(y, do_update().set(z)))` in favor of\n  `.values(x).on_conflict(y).do_update().set(z)`\n\n* Deprecated `enable_multi_table_joins` in favor of\n  `allow_tables_to_appear_in_same_query!`\n\n* Deprecated `SqlLiteral#bind`. `sql` is intended for use with small fragments\n  of SQL, not complete queries. Writing bind parameters in raw SQL when you are\n  not writing the whole query is error-prone. Use `sql_query` if you need raw\n  SQL with bind parameters.\n\n### Removed\n\n* `IntoInsertStatement` and `BatchInsertStatement` have been removed. It's\n  unlikely that your application is using these types, but `InsertStatement` is\n  now the only \"insert statement\" type.\n\n* `Citext` as a type alias for `Text` has been removed. Writing\n  `citext_column.eq(\"foo\")` would perform a case-sensitive comparison. More\n  fleshed out support will be required.\n\n### Fixed\n\n* When using MySQL and SQLite, dates which cannot be represented by `chrono`\n  (such as `0000-00-00`) will now properly return an error instead of panicking.\n\n* MySQL URLs will now properly percent decode the username and password.\n\n* References to types other than `str` and slice can now appear on structs which\n  derive `Insertable` or `AsChangeset`.\n\n* Deserializing a date/time/timestamp column into a chrono type on SQLite will\n  now handle any value that is in a format documented as valid for SQLite's\n  `strftime` function except for the string `'now'`.\n\n[0.99.0-distinct-on]: http://docs.diesel.rs/diesel/query_dsl/trait.DistinctOnDsl.html#tymethod.distinct_on\n\n## [0.16.0] - 2017-08-24\n\n### Added\n\n* Added helper types for inner join and left outer join\n\n* `diesel::debug_query` has been added as a replacement for `debug_sql!`. This\n  function differs from the macro by allowing you to specify the backend, and\n  will generate the actual query which will be run. The returned value will\n  implement `Display` and `Debug` to show the query in different ways\n\n* `diesel::pg::PgConnection`, `diesel::mysql::MysqlConnection`, and\n  `diesel::sqlite::SqliteConnection` are now exported from `diesel::prelude`.\n  You should no longer need to import these types explicitly.\n\n* Added support for the Decimal datatype on MySQL, using the [BigDecimal crate][bigdecimal-0.16.0].\n\n* Added support for the [Range][range-0.16.0] type on postgreSQL.\n\n* Added support for the Datetime type on MySQL.\n\n* Added support for the Blob type on MySQL.\n\n* `infer_schema!` will now automatically detect which tables can be joined based\n  on the presence of foreign key constraints.\n\n* Added support for `Add` and `Sub` to timestamp types.\n\n* Added a way to rename columns in the table macro with `#[sql_name=\"the_column_name\"]`\n\n* Schema inference now also generates documentation comments for tables and\n  columns. For `infer_schema!`, this is enabled by default. If you are using\n  Diesel's CLI tool, pass the new `--with-docs` parameter:\n  `diesel print-schema --with-docs`.\n\n* `infer_schema!` now automatically renames columns that conflict with\n  a Rust keyword by placing a _ at the end of the name. For example,\n  a column called `type` will be referenced as `type_` in Rust.\n\n### Changed\n\n* The deprecated `debug_sql!` and `print_sql!` functions will now generate\n  backend specific SQL. (The specific backend they will generate for will be\n  arbitrarily chosen based on the backends enabled).\n\n* `#[belongs_to]` will no longer generate the code required to join between two\n  tables. You will need to explicitly invoke `joinable!` instead, unless you are\n  using `infer_schema!`\n\n* Changed the migration directory name format to `%Y-%m-%d-%H%M%S`.\n\n* `between` and `not_between` now take two arguments, rather than a range.\n\n### Removed\n\n* `debug_sql!` has been deprecated in favor of `diesel::debug_query`.\n\n* `print_sql!` has been deprecated without replacement.\n\n* `diesel::backend::Debug` has been removed.\n\n### Fixed\n\n* Diesel now properly supports joins in the form:\n  `grandchild.join(child.join(parent))`. Previously only\n  `parent.join(child.join(grandchild))` would compile.\n\n* When encoding a `BigDecimal` on PG, `1.0` is no longer encoded as if it were\n  `1`.\n\n[bigdecimal-0.16.0]: https://crates.io/crates/bigdecimal\n[range-0.16.0]: https://docs.diesel.rs/diesel/pg/types/sql_types/struct.Range.html\n\n## [0.15.2] - 2017-07-28\n\n### Fixed\n\n* `BigDecimal` now properly encodes numbers starting with `10000` on postgres.\n  See [issue #1044][] for details.\n\n[issue #1044]: https://github.com/diesel-rs/diesel/issues/1044\n\n## [0.15.1] - 2017-07-24\n\n* No changes to public API\n\n## [0.15.0] - 2017-07-23\n\n### Added\n\n* Added support for the PG `IS DISTINCT FROM` operator\n\n* The `ON` clause of a join can now be manually specified. See [the\n  docs][join-on-dsl-0.15.0] for details.\n\n[join-on-dsl-0.15.0]: https://docs.diesel.rs/diesel/prelude/trait.JoinOnDsl.html#method.on\n\n### Changed\n\n* Diesel will now automatically invoke `numeric_expr!` for your columns in the\n  common cases. You will likely need to delete any manual invocations of this\n  macro.\n\n* `Insertable` no longer treats all fields as nullable for type checking. What\n  this means for you is that if you had an impl like `impl\n  AsExpression<Nullable<SqlType>, DB> for CustomType` in your code base, you can\n  remove the `Nullable` portion (Unless you are using it with fields that are\n  actually nullable)\n\n* Connections will now explicitly set the session time zone to UTC when the\n  connection is established\n\n## [0.14.1] - 2017-07-10\n\n### Changed\n\n* The return type of `sum` and `avg` is now always considered to be `Nullable`,\n  as these functions return `NULL` when against on an empty table.\n\n## [0.14.0] - 2017-07-04\n\n### Added\n\n* Added support for joining between more than two tables. The query builder can\n  now be used to join between any number of tables in a single query. See the\n  documentation for [`JoinDsl`][join-dsl-0.14.0] for details\n\n[join-dsl-0.14.0]: https://docs.diesel.rs/diesel/prelude/trait.JoinDsl.html\n\n* Added support for the [PostgreSQL network types][pg-network-0.14.0] `MACADDR`.\n\n* Added support for the Numeric datatypes, using the [BigDecimal crate][bigdecimal-0.14.0].\n\n* Added a function which maps to SQL `NOT`. See [the docs][not-0.14.0] for more\n  details.\n\n* Added the [`insert_default_values`][insert-default-0.14.0] function.\n\n[pg-network-0.14.0]: https://www.postgresql.org/docs/9.6/static/datatype-net-types.html\n[not-0.14.0]: https://docs.diesel.rs/diesel/expression/dsl/fn.not.html\n[insert-default-0.14.0]: https://docs.diesel.rs/diesel/fn.insert_default_values.html\n[bigdecimal-0.14.0]: https://crates.io/crates/bigdecimal\n\n* Added `diesel_prefix_operator!` which behaves identically to\n  `diesel_postfix_operator!` (previously `postfix_predicate!`), but for\n  operators like `NOT` which use prefix notation.\n\n### Changed\n\n* `infix_predicate!` and `infix_expression!` have been renamed to\n  `diesel_infix_operator!`.\n\n* `postfix_predicate!` and `postfix_expression!` have been renamed to\n  `diesel_postfix_operator!`.\n\n* Trait bounds along the lines of `T: LoadDsl<Conn>, U: Queryable<T::SqlType,\n  Conn::Backend>` should be changed to `T: LoadQuery<Conn, U>`.\n\n* Diesel now uses a migration to set up its timestamp helpers. To generate this\n  migration for your project, run `diesel database setup`.\n\n### Removed\n\n* `#[has_many]` has been removed. Its functionality is now provided by\n  `#[belongs_to]` on the child struct. If there is no child struct to\n  put `#[belongs_to]` on, you can invoke `joinable!` directly instead.\n\n## [0.13.0] - 2017-05-15\n\n### Added\n\n* Added support for chrono types with SQLite.\n\n* Bind values can now be supplied to queries constructed using raw SQL. See [the\n  docs][sql-bind-0.13.0] for more details.\n\n[sql-bind-0.13.0]: https://docs.diesel.rs/diesel/expression/sql_literal/struct.SqlLiteral.html#method.bind\n\n* Added support for the [PostgreSQL network types][pg-network-0.13.0] `CIDR` and\n  `INET`.\n\n[pg-network-0.13.0]: https://www.postgresql.org/docs/9.6/static/datatype-net-types.html\n\n* Added support for `ILIKE` in PostgreSQL.\n\n* `diesel migration list` will show all migrations, marking those that have been\n  run.\n\n* `diesel migration pending` will list any migrations which have not been run.\n\n* Added support for numeric operations with nullable types.\n\n* Added [`migrations::any_pending_migrations`][pending-migrations-0.13.0].\n\n[pending-migrations-0.13.0]: https://docs.diesel.rs/diesel/migrations/fn.any_pending_migrations.html\n\n### Fixed\n\n* Diesel CLI now respects the `--migration-dir` argument or the\n  `MIGRATION_DIRECTORY` environment variable for all commands.\n\n* Diesel CLI now properly escapes the database name.\n\n## [0.12.1] - 2017-05-07\n\n### Changed\n\n* Locked the chrono dependency to require exactly `0.3.0` instead of a semver\n  restriction. This restriction is required for the 0.12 line of releases to\n  continue compiling, as the chrono project is including breaking changes in\n  patch releases.\n\n## [0.12.0] - 2017-03-16\n\n### Added\n\n* Added support for the majority of PG upsert (`INSERT ON CONFLICT`). We now\n  support specifying the constraint, as well as `DO UPDATE` in addition to `DO\n  NOTHING`. See [the module docs][upsert-0.12.0] for details.\n\n[upsert-0.12.0]: https://docs.diesel.rs/diesel/pg/upsert/index.html\n\n* Added support for the SQL concatenation operator `||`. See [the docs for\n  `.concat`][concat-0.12.0] for more details.\n\n[concat-0.12.0]: https://docs.diesel.rs/diesel/expression/expression_methods/text_expression_methods/trait.TextExpressionMethods.html#method.concat\n\n* Added support for the PostgreSQL [`Money` type][pg-money-0.12.0].\n\n[pg-money-0.12.0]: https://www.postgresql.org/docs/9.6/static/datatype-money.html\n\n* Diesel CLI: Added `db` as an alias for `database`, so you can now write `diesel db setup` (which is almost 40% faster!).\n\n* The `table!` macro now allows you to use types from crates outside of Diesel.\n  You can specify where types should be imported from by doing: `table! { use\n  some_modules::*; foo { columns... }`. Not specifying any any modules is\n  equivalent to `use diesel::types::*;`.\n\n### Fixed\n\n* `diesel_codegen` will provide a more useful error message when it encounters\n  an unsupported type that contains a space in MySQL.\n\n* `#[derive(AsChangeset)]` will now respect custom `#[primary_key]` annotations,\n  and avoid setting those columns.\n\n### Removed\n\n* `WithDsl` and `Aliased` have been removed. They were a feature that was\n  actually closer to a cross join than the names implied, and wasn't fully\n  thought out. The functionality they provided will return as joins are further\n  revamped.\n\n* The internal use macro `select_column_workaround!` has been removed. If you\n  were relying on this internal macro, you can simply delete the line that was\n  calling it.\n\n* Columns from the right side of a left join will now need to have `.nullable()`\n  explicitly called to be passed to `.select`. This allows it to compose better\n  with functions that don't normally take nullable columns (e.g.\n  `lower(name).nullable()`).\n\n## [0.11.4] - 2017-02-21\n\n### Fixed\n\n* Corrected a memory safety violation when using MySQL.\n\n## 0.11.3 - 2017-02-21\n\n* No changes\n\n## [0.11.2] - 2017-02-19\n\n### Changed\n\n* `pq-sys` and `mysqlclient-sys` will no longer attempt to generate bindings at\n  compile time. Generating the bindings required a bleeding edge version of\n  clang, which caused too many issues.\n\n## [0.11.1] - 2017-02-17\n\n### Fixed\n\n* `.on_conflict_do_nothing()` now interacts with slices properly.\n\n* `MysqlConnection` now implements `Send`, which is required for connection\n  pooling.\n\n## [0.11.0] - 2017-02-16\n\n### Added\n\n* Added support for MySQL as an additional backend. Diesel CLI will install with\n  MySQL support by default. To enable it for Diesel and Diesel Codegen, add\n  `features = [\"mysql\"]` to Cargo.toml. See [the docs][mysql-0.11.0] for details.\n\n[mysql-0.11.0]: https://docs.diesel.rs/diesel/mysql/index.html\n\n* Added support for PG's `ON CONFLICT DO NOTHING` clause. See [the\n  docs][on-conflict-0.11.0] for details.\n\n[on-conflict-0.11.0]: https://docs.diesel.rs/diesel/pg/upsert/trait.OnConflictExtension.html#method.on_conflict_do_nothing\n\n* Queries constructed using [`diesel::select`][select-0.11.0] now work properly\n  when [boxed][boxed-0.11.0].\n\n[select-0.11.0]: https://docs.rs/diesel/0.11.0/diesel/fn.select.html\n[boxed-0.11.0]: https://docs.rs/diesel/0.11.0/prelude/trait.BoxedDsl.html\n\n* Arrays containing null are now supported. `infer_schema!` will never infer an\n  array that contains null, but a `table!` definition which specifies a type of\n  `Array<Nullable<X>>` can now be deserialized to `Vec<Option<T>>`\n\n* [`#[belongs_to]`][belongs-to-0.11.0] associations can now be self referential.\n  This will generate the code required for\n  [`belonging_to`][belonging-to-0.11.0], without generating code for performing\n  a join.\n\n[belongs-to-0.11.0]: https://docs.rs/diesel/0.11.0/diesel/associations/trait.BelongsTo.html\n[belonging-to-0.11.0]: https://docs.rs/diesel/0.11.0/diesel/prelude/trait.BelongingToDsl.html#tymethod.belonging_to\n\n* Added support for the `rust-lang-deprecated/time` crate on PostgreSQL. To use\n  it, add `features = [\"deprecated-time\"]`\n\n### Changed\n\n* It is no longer possible to exhaustively match against\n  `result::ConnectionError`.\n\n* Updated chrono to version 0.3.\n\n* [`max`][max-0.11.0] and [`min`][min-0.11.0] are now always nullable. The database will\n  return `NULL` when the table is empty.\n\n[max-0.11.0]: https://docs.diesel.rs/diesel/expression/dsl/fn.max.html\n[min-0.11.0]: https://docs.diesel.rs/diesel/expression/dsl/fn.min.html\n\n* [`now`][now-0.11.0] can now be used as an expression of type `Timestamptz`.\n\n[now-0.11.0]: https://docs.diesel.rs/diesel/expression/dsl/struct.now.html\n\n* [`Connection::transaction`][transaction-0.11.0] now returns your error\n  directly instead of wrapping it in `TransactionError`. It requires that the\n  error implement `From<diesel::result::Error>`\n\n[transaction-0.11.0]: https://docs.diesel.rs/diesel/connection/trait.Connection.html#method.transaction\n\n* The way tuples of columns from the right side of left outer joins interact\n  with `.select` has changed. If you are deserializing into an option of a tuple\n  (instead of a tuple of options), you will need to explicitly call\n  `.nullable()`. (e.g. `.select(users::name, (posts::title,\n  posts::body).nullable())`)\n\n### Removed\n\n* `result::TransactionError`\n* `result::TransactionResult`\n\n## [0.10.1] - 2017-02-08\n\n### Fixed\n\n* `infer_table_from_schema!` properly handles table names with a custom schema\n  specified.\n\n### Changed\n\n* Updated uuid to version 0.4.\n\n## [0.10.0] - 2017-02-02\n\n### Added\n\n* Added support for the PostgreSQL [`json` and `jsonb` types][pg-json]. They can\n  be mapped to/from `serde_json::Value`. The `serde` feature must be enabled to\n  use the JSON types.\n\n[pg-json]: https://www.postgresql.org/docs/9.6/static/datatype-json.html\n\n* Added the `print-schema` command to Diesel CLI. This command will print the\n  output of the `infer_schema!` macro. For more information run `diesel help\n  print-schema`.\n\n### Changed\n\n* When possible, we will use deprecation warnings for breaking changes.\n  Deprecated code requires the `with-deprecated` feature, which is enabled by\n  default.\n\n* The `postgres` feature is no longer enabled by default by `diesel` or\n  `diesel_codegen_syntex`. Add `features = [\"postgres\"]` to your `Cargo.toml`.\n\n* The `persistable` module has been renamed to `insertable`.\n\n### Fixed\n\n* `#[derive(Insertable)]` allows fields of type `Option<T>` to be used with\n  columns that are not null if they have a default value.\n\n### Removed\n\n* `diesel_codegen_syntex` is no longer supported. `diesel_codegen` can now be\n  used on stable Rust.\n\n* Dropped support for Rust 1.14 and earlier\n\n## [0.9.1] - 2016-12-09\n\n### Fixed\n\n* Added missing impls for loading `chrono::NaiveDateTime` from a column of type\n  `Timestamptz`\n\n* `#[derive(AsChangeset)]` no longer assumes that `use diesel::prelude::*` has\n  been done.\n\n* `debug_sql!` can now properly be used with types from `chrono` or\n  `std::time`.\n\n* When using PostgreSQL, attempting to get the error message of a query which\n  could not be transmitted to the server (such as a query with greater than\n  65535 bind parameters) will no longer panic.\n\n## [0.9.0] - 2016-12-08\n\n### Added\n\n* Added support for SQL `NOT IN` using the `ne_any` method.\n\n* The `table!` macro now allows custom schemas to be specified. Example:\n\n  ```rust\n  table! {\n    schema_1.table_1 {\n      id -> Integer,\n    }\n  }\n  ```\n\n  The generated module will still be called `table_1`.\n\n* The `infer_table_from_schema!` macro now allows custom schemas to be\n  specified. Example:\n\n  ```rust\n  infer_table_from_schema!(\"dotenv:DATABASE_URL\", \"schema_1.table_1\");\n  ```\n\n* The `infer_schema!` optionally allows a schema name as the second argument. Any\n  schemas other than `public` will be wrapped in a module with the same name as\n  the schema. For example, `schema_1.table_1` would be referenced as\n  `schema_1::table_1`.\n\n* Added support for batch insert on SQLite. This means that you can now pass a\n  slice or vector to [`diesel::insert`][insert] on all backends.\n\n[insert]: https://docs.diesel.rs/diesel/fn.insert.html\n\n* Added a function for SQL `EXISTS` expressions. See\n  [`diesel::expression::dsl::exists`][exists] for details.\n\n[exists]: https://docs.diesel.rs/diesel/expression/dsl/fn.sql.html\n\n* `#[derive(Identifiable)]` can be used with structs that have primary keys\n  other than `id`, as well as structs with composite primary keys. You can now\n  annotate the struct with `#[primary_key(nonstandard)]` or `#[primary_key(foo,\n  bar)]`.\n\n### Changed\n\n* All macros with the same name as traits we can derive (e.g. `Queryable!`) have\n  been renamed to `impl_Queryable!` or similar.\n\n### Fixed\n\n* `#[derive(Identifiable)]` now works on structs with lifetimes\n\n* Attempting to insert an empty slice will no longer panic. It does not execute\n  any queries, but the result will indicate that we successfully inserted 0\n  rows.\n\n* Attempting to update a record with no changes will no longer generate invalid\n  SQL. The result of attempting to execute the query will still be an error, but\n  but it will be a `Error::QueryBuilderError`, rather than a database error.\n  This means that it will not abort the current transaction, and can be handled\n  by applications.\n\n* Calling `eq_any` or `ne_any` with an empty array no longer panics.\n  `eq_any(vec![])` will return no rows. `ne_any(vec![])` will return all rows.\n\n## [0.8.2] - 2016-11-22\n\n### Changed\n\n* Fixed support for nightlies later than 2016-11-07\n\n* Removed support for nightlies earlier than 2016-11-07\n\n* Calls to `infer_table_from_schema!` will need to be wrapped in a module if\n  called more than once. This change is to work around further limitations of\n  the Macros 1.1 system. Example:\n\n  ```rust\n  mod infer_users {\n      infer_table_from_schema!(\"dotenv:DATABASE_URL\", \"users\");\n  }\n  pub use self::infer_users::*;\n  ```\n\n## [0.8.1] - 2016-11-01\n\n### Added\n\n* SQLite date and time columns can be deserialized to/from strings.\n\n### Fixed\n\n* Fixed an issue with `diesel_codegen` on nightlies >= 2016-10-20\n\n## [0.8.0] - 2016-10-10\n\n### Added\n\n* Added partial support for composite primary keys.\n\n* Added support for PostgreSQL `NULLS FIRST` and `NULLS LAST` when sorting.\n  See https://docs.diesel.rs/diesel/prelude/trait.SortExpressionMethods.html\n  for details.\n\n* Added support for the `timestamp with time zone` type in PostgreSQL (referred\n  to as `diesel::types::Timestamptz`)\n\n* Diesel CLI can now generate bash completion. See [the readme][bash completion]\n  for details.\n\n* `infer_schema!` and `infer_table_from_schema!` can now take `\"env:foo\"`\n  instead of `env!(\"foo\")` and `\"dotenv:foo\"` instead of `dotenv!(\"foo\")`. The\n  use of `dotenv` requires the `dotenv` feature on `diesel_codegen`, which is\n  included by default. Using `env!` and `dotenv!` will no longer work with\n  `diesel_codegen`. They continue to work with `diesel_codegen_syntex`, but that\n  crate will be deprecated when Macros 1.1 is in the beta channel for Rust.\n\n[bash completion]: https://github.com/diesel-rs/diesel/blob/b1a0d9901f0f2a8c8d530ccba8173b57f332b891/diesel_cli/README.md#bash-completion\n\n### Changed\n\n* Structs annotated with `#[has_many]` or `#[belongs_to]` now require\n  `#[derive(Associations)]`. This is to allow them to work with Macros 1.1.\n\n* `embed_migrations!` now resolves paths relative to `Cargo.toml` instead of the\n  file the macro was called from. This change is required to allow this macro to\n  work with Macros 1.1.\n\n### Fixed\n\n* `diesel migrations run` will now respect migration directories overridden by\n  command line argument or environment variable\n* The `infer_schema!` macro will no longer fetch views alongside with tables.\n  This was a source of trouble for people that had created views or are using\n  any extension that automatically creates views (e.g. PostGIS)\n\n### Changed\n\n* `#[changeset_for(foo)]` should now be written as\n  `#[derive(AsChangeset)] #[table_name=\"foo\"]`. If you were specifying\n  `treat_none_as_null = \"true\"`, you should additionally have\n  `#[changeset_options(treat_none_as_null = \"true\")]`.\n* `#[insertable_into(foo)]` should now be written as\n  `#[derive(Insertable)] #[table_name=\"foo\"]`.\n\n## [0.7.2] - 2016-08-20\n\n* Updated nightly version and syntex support.\n\n## [0.7.1] - 2016-08-11\n\n### Changed\n\n* The `Copy` constraint has been removed from `Identifiable::Id`, and\n  `Identifiable#id` now returns `&Identifiable::Id`.\n\n### Fixed\n\n* `#[belongs_to]` now respects the `foreign_key` option when using\n  `diesel_codegen` or `diesel_codegen_syntex`.\n\n## [0.7.0] - 2016-08-01\n\n### Added\n\n* The initial APIs have been added in the form of `#[has_many]` and\n  `#[belongs_to]`. See [the module documentation][associations-module] for more\n  information.\n\n* The `Insertable!` macro can now be used instead of `#[insertable_into]` for\n  those wishing to avoid syntax extensions from `diesel_codegen`. See\n  https://docs.diesel.rs/diesel/macro.Insertable!.html for details.\n\n* The `Queryable!` macro can now be used instead of `#[derive(Queryable)]` for\n  those wishing to avoid syntax extensions from `diesel_codegen`. See\n  https://docs.diesel.rs/diesel/macro.Queryable!.html for details.\n\n* The `Identifiable!` macro can now be used instead of `#[derive(Identifiable)]` for\n  those wishing to avoid syntax extensions from `diesel_codegen`. See\n  https://docs.diesel.rs/diesel/macro.Identifiable!.html for details.\n\n* The `AsChangeset!` macro can now be used instead of `#[changeset_for(table)]`\n  for those wishing to avoid syntax extensions from `diesel_codegen`. See\n  https://docs.diesel.rs/diesel/macro.AsChangeset!.html for details.\n\n* Added support for the PostgreSQL `ALL` operator. See\n  https://docs.diesel.rs/diesel/pg/expression/dsl/fn.all.html for details.\n\n* Added support for `RETURNING` expressions in `DELETE` statements. Implicitly\n  these queries will use `RETURNING *`.\n\n### Changed\n\n* Diesel now targets `nightly-2016-07-07`. Future releases will update to a\n  newer nightly version on the date that Rust releases.\n\n* `diesel_codegen` has been split into two crates. `diesel_codegen` and\n  `diesel_codegen_syntex`. See [this commit][syntex-split] for migration\n  information.\n\n* Most structs that implement `Queryable` will now also need\n  `#[derive(Identifiable)]`.\n\n* `infer_schema!` on SQLite now accepts a larger range of type names\n\n* `types::VarChar` is now an alias for `types::Text`. Most code should be\n  unaffected by this. PG array columns are treated slightly differently,\n  however. If you are using `varchar[]`, you should switch to `text[]` instead.\n\n* Struct fields annotated with `#[column_name=\"name\"]` should be changed to\n  `#[column_name(name)]`.\n\n* The structure of `DatabaseError` has changed to hold more information. See\n  https://docs.diesel.rs/diesel/result/enum.Error.html and\n  https://docs.diesel.rs/diesel/result/trait.DatabaseErrorInformation.html for\n  more information\n\n* Structs which implement `Identifiable` can now be passed to `update` and\n  `delete`. This means you can now write `delete(&user).execute(&connection)`\n  instead of `delete(users.find(user.id)).execute(&connection)`\n\n[associations-module]: https://docs.diesel.rs/diesel/associations/index.html\n[syntex-split]: https://github.com/diesel-rs/diesel/commit/36b8801bf5e9594443743e6a7c62e29d3dce36b7\n\n### Fixed\n\n* `&&[T]` can now be used in queries. This allows using slices with things like\n  `#[insertable_into]`.\n\n## [0.6.1] 2016-04-14\n\n### Added\n\n* Added the `escape` method to `Like` and `NotLike`, to specify the escape\n  character used in the pattern. See [EscapeExpressionMethods][escape] for\n  details.\n\n[escape]: https://docs.diesel.rs/diesel/expression/expression_methods/escape_expression_methods/trait.EscapeExpressionMethods.html\n\n### Fixed\n\n* `diesel_codegen` and `diesel_cli` now properly rely on Diesel 0.6.0. The\n  restriction to 0.5.0 was an oversight.\n\n* `infer_schema!` now properly excludes metadata tables on SQLite.\n\n* `infer_schema!` now properly maps types on SQLite.\n\n## [0.6.0] 2016-04-12\n\n### Added\n\n* Queries can now be boxed using the `into_boxed()` method. This is useful for\n  conditionally modifying queries without changing the type. See\n  [BoxedDsl][boxed_dsl] for more details.\n\n* `infer_schema!` is now supported for use with SQLite3.\n\n* The maximum table size can be increased to 52 by enabling the `huge-tables`\n  feature. This feature will substantially increase compile times.\n\n* The `DISTINCT` keyword can now be added to queries via the `distinct()`\n  method.\n\n* `SqliteConnection` now implements `Send`\n\n[boxed_dsl]: https://docs.diesel.rs/diesel/prelude/trait.BoxedDsl.html\n\n### Changed\n\n* `diesel::result::Error` now implements `Send` and `Sync`. This required a\n  change in the return type of `ToSql` and `FromSql` to have those bounds as\n  well.\n\n* It is no longer possible to pass an owned value to `diesel::insert`. `insert`\n  will now give a more helpful error message when you accidentally try to pass\n  an owned value instead of a reference.\n\n### Fixed\n\n* `#[insertable_into]` can now be used with structs that have lifetimes with\n  names other than `'a'`.\n\n* Tables with a single column now properly return a single element tuple. E.g.\n  if the column was of type integer, then `users::all_columns` is now `(id,)`\n  and not `id`.\n\n* `infer_schema!` can now work with tables that have a primary key other than\n  `id`.\n\n### Removed\n\n* Removed the `no select` option for the `table!` macro. This was a niche\n  feature that didn't fit with Diesel's philosophies. You can write a function\n  that calls `select` for you if you need this functionality.\n\n## [0.5.4] 2016-03-23\n\n* Updated `diesel_codegen` to allow syntex versions up to 0.30.0.\n\n## [0.5.3] 2016-03-12\n\n### Added\n\n* Added helper function `diesel_manage_updated_at('TABLE_NAME')` to postgres\n  upon database setup. This function sets up a trigger on the specified table\n  that automatically updates the `updated_at` column to the `current_timestamp`\n  for each affected row in `UPDATE` statements.\n\n* Added support for explicit `RETURNING` expressions in `INSERT` and `UPDATE`\n  queries. Implicitly these queries will still use `RETURNING *`.\n\n### Fixed\n\n* Updated to work on nightly from early March\n\n## [0.5.2] 2016-02-27\n\n* Updated to work on nightly from late February\n\n## [0.5.1] 2016-02-11\n\n* Diesel CLI no longer has a hard dependency on SQLite and PostgreSQL. It\n  assumes both by default, but if you need to install on a system that doesn't\n  have one or the other, you can install it with `cargo install diesel_cli\n  --no-default-features --features postgres` or `cargo install diesel_cli\n  --no-default-features --features sqlite`\n\n## [0.5.0] 2016-02-05\n\n### Added\n\n* Added support for SQLite. Diesel still uses postgres by default. To use SQLite\n  instead, add `default-features = false, features = [\"sqlite\"]` to your\n  Cargo.toml. You'll also want to add `default-features = false, features =\n  [\"sqlite\"]` to `diesel_codegen`.\n  Since SQLite is a much more limited database, it does not support our full set\n  of features. You can use SQLite and PostgreSQL in the same project if you\n  desire.\n\n* Added support for mapping `types::Timestamp`, `types::Date`, and `types::Time`\n  to/from `chrono::NaiveDateTime`, `chrono::NaiveDate`, and `chrono::NaiveTime`.\n  Add `features = [\"chrono\"]` to enable.\n\n* Added a `treat_none_as_null` option to `changeset_for`. When set to `true`,\n  a model will set a field to `Null` when an optional struct field is `None`,\n  instead of skipping the field entirely. The default value of the option is\n  `false`, as we think the current behavior is a much more common use case.\n\n* Added `Expression#nullable()`, to allow comparisons of not null columns with\n  nullable ones when required.\n\n* Added `sum` and `avg` functions.\n\n* Added the `diesel setup`, `diesel database setup`, and `diesel database\n  reset` commands to the CLI.\n\n* Added support for SQL `IN` statements through the `eq_any` method.\n\n* Added a top level `select` function for select statements with no from clause.\n  This is primarily intended to be used for testing Diesel itself, but it has\n  been added to the public API as it will likely be useful for third party\n  crates in the future. `select(foo).from(bar)` might be a supported API in the\n  future as an alternative to `bar.select(foo)`.\n\n* Added `expression::dsl::sql` as a helper function for constructing\n  `SqlLiteral` nodes. This is primarily intended to be used for testing Diesel\n  itself, but is part of the public API as an escape hatch if our query builder\n  DSL proves inadequate for a specific case. Use of this function in any\n  production code is discouraged as it is inherently unsafe and avoids real type\n  checking.\n\n### Changed\n\n* Moved most of our top level trait exports into a prelude module, and\n  re-exported our CRUD functions from the top level.\n  `diesel::query_builder::update` and friends are now `diesel::update`, and you\n  will get them by default if you import `diesel::*`. For a less aggressive\n  glob, you can import `diesel::prelude::*`, which will only export our traits.\n\n* `Connection` is now a trait instead of a struct. The struct that was\n  previously known as `Connection` can be found at `diesel::pg::PgConnection`.\n\n* Rename both the `#[derive(Queriable)]` attribute and the `Queriable` trait to\n  use the correct spelling `Queryable`.\n\n* `load` and `get_results` now return a `Vec<Model>` instead of an iterator.\n\n* Replaced `Connection#find(source, id)` with\n  `source.find(id).first(&connection)`.\n\n* The `debug_sql!` macro now uses \\` for identifier quoting, and `?` for bind\n  parameters, which is closer to a \"generic\" backend. The previous behavior had\n  no identifier quoting, and used PG specific bind params.\n\n* Many user facing types are now generic over the backend. This includes, but is\n  not limited to `Queryable` and `Changeset`. This change should not have much\n  impact, as most impls will have been generated by diesel_codegen, and that API\n  has not changed.\n\n* The mostly internal `NativeSqlType` has been removed. It now requires a known\n  backend. `fn<T> foo() where T: NativeSqlType` is now `fn<T, DB> foo() where\n  DB: HasSqlType<T>`\n\n### Removed\n\n* `Connection#query_sql` and `Connection#query_sql_params` have been removed.\n  These methods were not part of the public API, and were only meant to be used\n  for testing Diesel itself. However, they were technically callable from any\n  crate, so the removal has been noted here. Their usage can be replaced with\n  bare `select` and `expression::dsl::sql`.\n\n## [0.4.1] 2016-01-11\n\n### Changed\n\n* Diesel CLI will no longer output notices about `__diesel_schema_migrations`\n  already existing.\n\n* Relicensed under MIT/Apache dual\n\n## [0.4.0] 2016-01-08\n\n### Added\n\n* Added Diesel CLI, a tool for managing your schema.\n  See [the readme](https://github.com/diesel-rs/diesel/blob/v0.4.0/README.md#database-migrations)\n  for more information.\n\n* Add the ability for diesel to maintain your schema for you automatically. See\n  the [migrations](https://docs.diesel.rs/diesel/migrations/index.html)\n  module for individual methods.\n\n* Add DebugQueryBuilder to build sql without requiring a connection.\n\n* Add print_sql! and debug_sql! macros to print out and return sql strings from\n  QueryFragments.\n\n### Fixed\n\n* `#[changeset_for]` can now be used with structs containing a `Vec`. Fixes\n  [#63](https://github.com/diesel-rs/diesel/issues/63).\n\n* No longer generate invalid SQL when an optional update field is not the first\n  field on a changeset. Fixes [#68](https://github.com/diesel-rs/diesel/issues/68).\n\n* `#[changeset_for]` can now be used with structs containing only a single field\n  other than `id`. Fixes [#66](https://github.com/diesel-rs/diesel/issues/66).\n\n* `infer_schema!` properly works with array columns. Fixes\n  [#65](https://github.com/diesel-rs/diesel/issues/65).\n\n## [0.3.0] 2015-12-04\n\n### Changed\n\n* `#[changeset_for(table)]` now treats `Option` fields as an optional update.\n  Previously a field with `None` for the value would insert `NULL` into the\n  database field. It now does not update the field if the value is `None`.\n\n* `.save_changes` (generated by `#[changeset_for]`) now returns a new struct,\n  rather than mutating `self`. The returned struct can be any type that\n  implements `Queryable` for the right SQL type\n\n### Fixed\n\n* `#[derive(Queryable)]` now allows generic parameters on the struct.\n\n* Table definitions can now support up to 26 columns. Because this increases our\n  compile time by 3x, `features = [\"large-tables\"]` is needed to support table\n  definitions above 16 columns.\n\n### Added\n\n* Quickcheck is now an optional dependency. When `features = [\"quickcheck\"]` is\n  added to `Cargo.toml`, you'll gain `Arbitrary` implementations for everything\n  in `diesel::data_types`.\n\n* Added support for the SQL `MIN` function.\n\n* Added support for the `Numeric` data type. Since there is no Big Decimal type\n  in the standard library, a dumb struct has been provided which mirrors what\n  Postgres provides, which can be converted into whatever crate you are using.\n\n* Timestamp columns can now be used with `std::time::SystemTime` when compiled\n  with `--features unstable`\n\n* Implemented `Send` on `Connection` (required for R2D2 support)\n\n* Added `infer_schema!` and `infer_table_from_schema!`. Both macros take a\n  database URL, and will invoke `table!` for you automatically based on the\n  schema. `infer_schema!` queries for the table names, while\n  `infer_table_from_schema!` takes a table name as the second argument.\n\n## [0.2.0] - 2015-11-30\n\n### Added\n\n* Added an `execute` method to `QueryFragment`, which is intended to replace\n  `Connection#execute_returning_count`. The old method still exists for use\n  under the hood, but has been hidden from docs and is not considered public\n  API.\n\n* Added `get_result` and `get_results`, which work similarly to `load` and\n  `first`, but are intended to make code read better when working with commands\n  like `create` and `update`. In the future, `get_result` may also check that\n  only a single row was affected.\n\n* Added [`insert`][insert], which mirrors the pattern of `update` and `delete`.\n\n### Changed\n\n* Added a hidden `__Nonexhaustive` variant to `result::Error`. This is not\n  intended to be something you can exhaustively match on, but I do want people\n  to be able to check for specific cases, so `Box<std::error::Error>` is\n  not an option.\n\n* `query_one`, `find`, and `first` now assume a single row is returned. For\n  cases where you actually expect 0 or 1 rows to be returned, the `optional`\n  method has been added to the result, in case having a `Result<Option<T>>` is\n  more idiomatic than checking for `Err(NotFound)`.\n\n### Deprecated\n\n* `Connection#insert` and `Connection#insert_returning_count` have been\n  deprecated in favor of [`insert`][insert]\n\n## 0.1.0 - 2015-11-29\n\n* Initial release\n\n[0.2.0]: https://github.com/diesel-rs/diesel/compare/v0.1.0...v0.2.0\n[0.3.0]: https://github.com/diesel-rs/diesel/compare/v0.2.0...v0.3.0\n[0.4.0]: https://github.com/diesel-rs/diesel/compare/v0.3.0...v0.4.0\n[0.4.1]: https://github.com/diesel-rs/diesel/compare/v0.4.0...v0.4.1\n[0.5.0]: https://github.com/diesel-rs/diesel/compare/v0.4.1...v0.5.0\n[0.5.1]: https://github.com/diesel-rs/diesel/compare/v0.5.0...v0.5.1\n[0.5.2]: https://github.com/diesel-rs/diesel/compare/v0.5.1...v0.5.2\n[0.5.3]: https://github.com/diesel-rs/diesel/compare/v0.5.2...v0.5.3\n[0.5.4]: https://github.com/diesel-rs/diesel/compare/v0.5.3...v0.5.4\n[0.6.0]: https://github.com/diesel-rs/diesel/compare/v0.5.4...v0.6.0\n[0.6.1]: https://github.com/diesel-rs/diesel/compare/v0.6.0...v0.6.1\n[0.7.0]: https://github.com/diesel-rs/diesel/compare/v0.6.1...v0.7.0\n[0.7.1]: https://github.com/diesel-rs/diesel/compare/v0.7.0...v0.7.1\n[0.7.2]: https://github.com/diesel-rs/diesel/compare/v0.7.1...v0.7.2\n[0.8.0]: https://github.com/diesel-rs/diesel/compare/v0.7.2...v0.8.0\n[0.8.1]: https://github.com/diesel-rs/diesel/compare/v0.8.0...v0.8.1\n[0.8.2]: https://github.com/diesel-rs/diesel/compare/v0.8.1...v0.8.2\n[0.9.0]: https://github.com/diesel-rs/diesel/compare/v0.8.2...v0.9.0\n[0.9.1]: https://github.com/diesel-rs/diesel/compare/v0.9.0...v0.9.1\n[0.10.0]: https://github.com/diesel-rs/diesel/compare/v0.9.1...v0.10.0\n[0.10.1]: https://github.com/diesel-rs/diesel/compare/v0.10.0...v0.10.1\n[0.11.0]: https://github.com/diesel-rs/diesel/compare/v0.10.1...v0.11.0\n[0.11.1]: https://github.com/diesel-rs/diesel/compare/v0.11.0...v0.11.1\n[0.11.2]: https://github.com/diesel-rs/diesel/compare/v0.11.1...v0.11.2\n[0.11.4]: https://github.com/diesel-rs/diesel/compare/v0.11.2...v0.11.4\n[0.12.0]: https://github.com/diesel-rs/diesel/compare/v0.11.4...v0.12.0\n[0.12.1]: https://github.com/diesel-rs/diesel/compare/v0.12.0...v0.12.1\n[0.13.0]: https://github.com/diesel-rs/diesel/compare/v0.12.1...v0.13.0\n[0.14.0]: https://github.com/diesel-rs/diesel/compare/v0.13.0...v0.14.0\n[0.14.1]: https://github.com/diesel-rs/diesel/compare/v0.14.0...v0.14.1\n[0.15.0]: https://github.com/diesel-rs/diesel/compare/v0.14.1...v0.15.0\n[0.15.1]: https://github.com/diesel-rs/diesel/compare/v0.15.0...v0.15.1\n[0.15.2]: https://github.com/diesel-rs/diesel/compare/v0.15.1...v0.15.2\n[0.16.0]: https://github.com/diesel-rs/diesel/compare/v0.15.2...v0.16.0\n[0.99.0]: https://github.com/diesel-rs/diesel/compare/v0.16.0...v0.99.0\n[0.99.1]: https://github.com/diesel-rs/diesel/compare/v0.99.0...v0.99.1\n[1.0.0]: https://github.com/diesel-rs/diesel/compare/v0.99.1...v1.0.0\n[1.1.0]: https://github.com/diesel-rs/diesel/compare/v1.0.0...v1.1.0\n[1.1.1]: https://github.com/diesel-rs/diesel/compare/v1.1.0...v1.1.1\n[1.1.2]: https://github.com/diesel-rs/diesel/compare/v1.1.1...v1.1.2\n[1.2.0]: https://github.com/diesel-rs/diesel/compare/v1.1.2...v1.2.0\n[1.2.1]: https://github.com/diesel-rs/diesel/compare/v1.2.0...v1.2.1\n[1.2.2]: https://github.com/diesel-rs/diesel/compare/v1.2.1...v1.2.2\n[1.3.0]: https://github.com/diesel-rs/diesel/compare/v1.2.2...v1.3.0\n[1.3.1]: https://github.com/diesel-rs/diesel/compare/v1.3.0...v1.3.1\n[1.3.2]: https://github.com/diesel-rs/diesel/compare/v1.3.1...v1.3.2\n[1.3.3]: https://github.com/diesel-rs/diesel/compare/v1.3.2...v1.3.3\n[1.4.0]: https://github.com/diesel-rs/diesel/compare/v1.3.0...v1.4.0\n[1.4.1]: https://github.com/diesel-rs/diesel/compare/v1.4.0...v1.4.1\n[1.4.2]: https://github.com/diesel-rs/diesel/compare/v1.4.1...v1.4.2\n[1.4.3]: https://github.com/diesel-rs/diesel/compare/v1.4.2...v1.4.3\n[1.4.4]: https://github.com/diesel-rs/diesel/compare/v1.4.3...v1.4.4\n[1.4.5]: https://github.com/diesel-rs/diesel/compare/v1.4.4...v1.4.5\n[1.4.6]: https://github.com/diesel-rs/diesel/compare/v1.4.5...v1.4.6\n[1.4.7]: https://github.com/diesel-rs/diesel/compare/v1.4.6...v1.4.7\n[1.4.8]: https://github.com/diesel-rs/diesel/compare/v1.4.7...v1.4.8\n[2.0.0 Rc0]: https://github.com/diesel-rs/diesel/compare/v.1.4.0...v2.0.0-rc0\n[2.0.0 Rc1]: https://github.com/diesel-rs/diesel/compare/v.2.0.0-rc0...v2.0.0-rc1\n[2.0.0]: https://github.com/diesel-rs/diesel/compare/v.1.4.0...v2.0.0\n[2.0.1]: https://github.com/diesel-rs/diesel/compare/v.2.0.0...v2.0.1\n[2.0.2]: https://github.com/diesel-rs/diesel/compare/v.2.0.1...v2.0.2\n[diesel_derives 2.0.2]: https://github.com/diesel-rs/diesel/compare/v.2.0.2...diesel_derives_v2.0.2\n[2.0.3]: https://github.com/diesel-rs/diesel/compare/v.2.0.2...v2.0.3\n[2.0.4]: https://github.com/diesel-rs/diesel/compare/v.2.0.3...v2.0.4\n[2.1.0]: https://github.com/diesel-rs/diesel/compare/v.2.0.0...v2.1.0\n[2.1.1]: https://github.com/diesel-rs/diesel/compare/v.2.1.0...v2.1.1\n[2.1.2]: https://github.com/diesel-rs/diesel/compare/v.2.1.1...v2.1.2\n[2.1.3]: https://github.com/diesel-rs/diesel/compare/v.2.1.2...v2.1.3\n[2.1.4]: https://github.com/diesel-rs/diesel/compare/v.2.1.3...v2.1.4\n[2.1.5]: https://github.com/diesel-rs/diesel/compare/v.2.1.4...v2.1.5\n[2.1.6]: https://github.com/diesel-rs/diesel/compare/v.2.1.5...v2.1.6\n[2.2.0]: https://github.com/diesel-rs/diesel/compare/v.2.1.0...v2.2.0\n[2.2.1]: https://github.com/diesel-rs/diesel/compare/v.2.2.0...v2.2.1\n[2.2.2]: https://github.com/diesel-rs/diesel/compare/v.2.2.1...v2.2.2\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.3515625,
          "content": "# Contributing\n\nThanks for your interest in contributing to Diesel! We very much look forward to\nyour suggestions, bug reports, and pull requests.\n\nWe run an active [discussion forum](https://github.com/diesel-rs/diesel/discussions) where you can ask Diesel-related questions and\nget help. Feel free to ask there before opening a GitHub issue or\npull request.\n\n*Note:* Anyone who interacts with Diesel in any space, including but not\nlimited to this GitHub repository, must follow our [code of\nconduct](https://github.com/diesel-rs/diesel/blob/master/code_of_conduct.md).\n\n\n## Submitting bug reports\n\nHave a look at our [issue tracker]. If you can't find an issue (open or closed)\ndescribing your problem (or a very similar one) there, please open a new issue with\nthe following details:\n\n- Which versions of Rust and Diesel are you using?\n- Which feature flags are you using?\n- What are you trying to accomplish?\n- What is the full error you are seeing?\n- How can we reproduce this?\n  - Please quote as much of your code as needed to reproduce (best link to a\n    public repository or [Gist])\n  - Please post as much of your database schema as is relevant to your error\n\n[issue tracker]: https://github.com/diesel-rs/diesel/issues\n[Gist]: https://gist.github.com\n\nThank you! We'll try to respond as quickly as possible.\n\n\n## Submitting feature requests\n\nDiesel's issue tracker is meant to represent our current roadmap. An open issue represents either a bug, or a new feature that a member of the Diesel team is actively working on.\n\nThis means that you should not submit a feature request to our issue tracker, unless you were asked to do so by a member of the Diesel team. Feature requests should instead be posted in\nour [discussion forum](https://github.com/diesel-rs/diesel/discussions/categories/ideas).\n\nIf you can't find thread describing your idea on our forum, create a new one. Adding answers to the following questions in your description is +1:\n\n-   What do you want to do, and how do you expect Diesel to support you with that?\n-   How might this be added to Diesel?\n-   What are possible alternatives?\n-   Are there any disadvantages?\n\nThank you! We'll try to respond as quickly as possible.\n\n## Contribute code to Diesel\n\n### Setting up Diesel locally\n\n1. Install Rust using [rustup], which allows you to easily switch between Rust\n   versions. Diesel currently supports Rust Stable, Nightly, Rust Beta.\n\n2. Install the system libraries needed to interface with the database systems\n   you wish to use.\n\n   These are the same as when compiling Diesel. It's generally a good idea\n   to install _all_ drivers so you can run all tests locally.\n\n   *Shortcut:* On macOS, you don't need to install anything to work with SQLite.\n   For PostgreSQL, you'll only need the server (`libpq` is installed by\n   default). To get started, `brew install postgresql@15 mysql` and follow the\n   instructions shown to set up the database servers. Other versions of\n   PostgreSQL should work as well.\n3. Clone this repository and open it in your favorite editor.\n4. Create a `.env` file in this directory, and add the connection details for\n   your databases.\n\n   *Additional note:* The MySQL tests currently fail when running on MySQL 5.6\n   or lower. If you have 5.6 or lower installed locally and cannot upgrade for\n   some reason, you may want to consider setting up Docker as mentioned below.\n\n   See [.env.sample](.env.sample) for an example that works with a trivial\n   local setup.\n\n   *Note:* If you didn't specify the MySQL user to be one with elevated\n   permissions, you'll want to run a command like ```mysql -c \"GRANT ALL ON\n   `diesel_%`.* TO ''@'localhost';\" -uroot```, or something similar for the\n   user that you've specified.\n\n   If you have [Docker](https://www.docker.com/), the following snippet might help you\n   to get Postgres and MySQL running (with the above `.env` file):\n\n   ```bash\n   #!/usr/bin/env sh\n   set -e\n   docker run -d --name diesel.mysql -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true mysql\n   while\n     sleep 1;\n     ! echo 'CREATE DATABASE diesel_test; CREATE DATABASE diesel_unit_test;' | docker exec -i diesel.mysql mysql\n   do sleep 1; done\n\n   docker run -d --name diesel.postgres -p 5432:5432 -e POSTGRES_PASSWORD=postgres postgres\n   while\n     sleep 1;\n     ! echo 'CREATE DATABASE diesel_test;' | docker exec -i diesel.postgres psql -U postgres\n   do :; done\n   ```\n\n   If you want to use docker-compose, you can execute docker-compose command like this.\n\n    ```bash\n    $ docker-compose up\n    ```\n    \n5. Install [cargo-nextest](https://nexte.st/) via `cargo install cargo-nextest`\n\n6. Now, try running the test suite to confirm everything works for you locally\n   by executing `cargo xtask run-tests`. (Initially, this will take a while to compile\n   everything.) In addition, if you want to compile and test a crate separately, \n   you can refer to the commands printed and executed by `cargo xtask run-tests`. Additionally you \n   can check `cargo xtask run-tests --help` on how to further configure which tests are executed.\n\n[rustup]: https://rustup.rs/\n\n### Coding Style\n\nWe follow the [Rust Style Guide](https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md), enforced using [rustfmt](https://github.com/rust-lang/rustfmt).\nTo run rustfmt tests locally:\n\n1. Use rustup to set rust toolchain to the version specified in the\n   [rust-toolchain file](./rust-toolchain).\n\n2. Install the rustfmt and clippy by running\n   ```\n   rustup component add rustfmt\n   rustup component add clippy\n   ```\n\n3. Install [typos](https://github.com/crate-ci/typos) via `cargo install typos-cli`\n\n4. Use `cargo xtask tidy` to check if your changes follow the expected code style.\n   This will run `cargo fmt --check`, `typos` and `cargo clippy` internally. See `cargo xtask tidy --help`\n   for additional options.\n\nYou can also use rustfmt to make corrections or highlight issues in your editor.\nCheck out [their README](https://github.com/rust-lang/rustfmt) for details.\n\n### Common Abbreviations\n\n`ST`: Sql Type. Basically always has the `NativeSqlType` constraint\n\n`DB`: Database. Basically always has the `Backend` constraint.\n\n`QS`: Query Source. Usually doesn't have a constraint, but sometimes will have `QuerySource` attached\n\n`PK`: Primary Key\n\n`Lhs`: Left Hand Side\n\n`Rhs`: Right Hand Side\n\n`Conn`: Connection\n\nGenerally, we prefer to give our types meaningful names. `Lhs` and `Rhs` vs `T` and `U` for a binary expression, for example.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 2.419921875,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n    \"diesel\",\n    \"diesel_cli\",\n    \"diesel_derives\",\n    \"diesel_tests\",\n    \"diesel_test_helper\",\n    \"diesel_migrations\",\n    \"diesel_migrations/migrations_internals\",\n    \"diesel_migrations/migrations_macros\",\n    \"diesel_dynamic_schema\",\n    \"diesel_table_macro_syntax\",\n    \"dsl_auto_type\",\n    \"examples/mysql/all_about_inserts\",\n    \"examples/mysql/getting_started_step_1\",\n    \"examples/mysql/getting_started_step_2\",\n    \"examples/mysql/getting_started_step_3\",\n    \"examples/postgres/advanced-blog-cli\",\n    \"examples/postgres/all_about_inserts\",\n    \"examples/postgres/all_about_updates\",\n    \"examples/postgres/getting_started_step_1\",\n    \"examples/postgres/getting_started_step_2\",\n    \"examples/postgres/getting_started_step_3\",\n    \"examples/postgres/custom_arrays\",\n    \"examples/postgres/custom_types\",\n    \"examples/postgres/composite_types\",\n    \"examples/postgres/relations\",\n    \"examples/sqlite/all_about_inserts\",\n    \"examples/sqlite/getting_started_step_1\",\n    \"examples/sqlite/getting_started_step_2\",\n    \"examples/sqlite/getting_started_step_3\",\n    \"examples/sqlite/relations\", \"xtask\",\n]\n\n[workspace.package]\nrust-version = \"1.78.0\"\ninclude = [\"src/**/*.rs\", \"tests/**/*.rs\", \"LICENSE-*\", \"README.md\"]\nedition = \"2021\"\n\n[workspace.dependencies]\nlibsqlite3-sys = \"0.30.1\"\npq-sys = \">=0.6,<0.8\"\nopenssl-sys = \"0.9.100\"\nmysqlclient-sys = \"0.4\"\n\n# Config for 'cargo dist'\n[workspace.metadata.dist]\n# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)\ncargo-dist-version = \"0.21.1\"\n# CI backends to support\nci = \"github\"\n# The installers to generate for each app\ninstallers = [\"shell\", \"powershell\"]\n# Target platforms to build apps for (Rust target-triple syntax)\ntargets = [\"aarch64-apple-darwin\", \"x86_64-apple-darwin\", \"x86_64-unknown-linux-gnu\", \"x86_64-pc-windows-msvc\"]\n# Which actions to run on pull requests\npr-run-mode = \"plan\"\n# Whether cargo-dist should create a Github Release or use an existing draft\ncreate-release = false\n# Whether to install an updater program\ninstall-updater = false\n# Path that installers should place binaries in\ninstall-path = \"CARGO_HOME\"\n\n[workspace.metadata.dist.github-custom-runners]\naarch64-apple-darwin = \"macos-14\"\nx86_64-unknown-linux-gnu = \"ubuntu-22.04\"\n\n[profile.dev.package.insta]\nopt-level = 3\n\n[profile.dev.package.similar]\nopt-level = 3\n\n# The profile that 'cargo dist' will build with\n[profile.dist]\ninherits = \"release\"\nlto = \"thin\"\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.537109375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2015-2021 Sean Griffin, 2018-2021 Diesel Core Team\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.072265625,
          "content": "The MIT License (MIT)\n\n2015-2021 Sean Griffin, 2018-2021 Diesel Core Team\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6025390625,
          "content": "[![diesel logo](https://diesel.rs/assets/images/diesel_logo_stacked_black.png)](https://diesel.rs)\n\n# A safe, extensible ORM and Query Builder for Rust\n\n[![Build Status](https://github.com/diesel-rs/diesel/workflows/CI%20Tests/badge.svg)](https://github.com/diesel-rs/diesel/actions?query=workflow%3A%22CI+Tests%22+branch%3Amaster)\n[![Crates.io](https://img.shields.io/crates/v/diesel.svg)](https://crates.io/crates/diesel)\n\nAPI Documentation: [latest release](https://docs.rs/diesel) – [master branch](https://docs.diesel.rs/master/diesel/index.html)\n\n[Homepage](https://diesel.rs)\n\nDiesel gets rid of the boilerplate for database interaction and eliminates\nruntime errors without sacrificing performance. It takes full advantage of\nRust's type system to create a low overhead query builder that \"feels like\nRust.\"\n\nSupported databases:\n1. [PostgreSQL](https://docs.diesel.rs/master/diesel/pg/index.html)\n2. [MySQL](https://docs.diesel.rs/master/diesel/mysql/index.html)\n3. [SQLite](https://docs.diesel.rs/master/diesel/sqlite/index.html)\n\nYou can configure the database backend in `Cargo.toml`:\n\n```toml\n[dependencies]\ndiesel = { version = \"<version>\", features = [\"<postgres|mysql|sqlite>\"] }\n```\n\n## Getting Started\n\nFind our extensive Getting Started tutorial at\n[https://diesel.rs/guides/getting-started](https://diesel.rs/guides/getting-started).\nGuides on more specific features are coming soon.\n\n## Getting help\n\nIf you run into problems, Diesel has a very active Gitter room.\nYou can come ask for help at in our [GitHub Discussions](https://github.com/diesel-rs/diesel/discussions) forum. \nThis is also the right place to propose new features or show your applications.\n\n## Usage\n\n### Simple queries\n\nSimple queries are a complete breeze. Loading all users from a database:\n\n```rust\nusers::table.load(&mut connection)\n```\n\nExecuted SQL:\n\n```sql\nSELECT * FROM users;\n```\n\nLoading all the posts for a user:\n\n``` rust\nPost::belonging_to(user).load(&mut connection)\n```\n\nExecuted SQL:\n\n```sql\nSELECT * FROM posts WHERE user_id = 1;\n```\n\n### Complex queries\n\nDiesel's powerful query builder helps you construct queries as simple or complex as\nyou need, at zero cost.\n\n```rust\nlet versions = Version::belonging_to(krate)\n  .select(id)\n  .order(num.desc())\n  .limit(5);\nlet downloads = version_downloads\n  .filter(date.gt(now - 90.days()))\n  .filter(version_id.eq_any(versions))\n  .order(date)\n  .load::<Download>(&mut conn)?;\n```\n\nExecuted SQL:\n\n```sql\nSELECT version_downloads.*\n  WHERE date > (NOW() - '90 days')\n    AND version_id = ANY(\n      SELECT id FROM versions\n        WHERE crate_id = 1\n        ORDER BY num DESC\n        LIMIT 5\n    )\n  ORDER BY date\n```\n\n### Less boilerplate\n\nDiesel codegen generates boilerplate for you. It lets you focus on your business logic, not mapping to and from SQL rows.\n\nThat means you can write this:\n\n```rust\n#[derive(Queryable, Selectable)]\n#[diesel(table_name = downloads)]\npub struct Download {\n    id: i32,\n    version_id: i32,\n    downloads: i32,\n    counted: i32,\n    date: SystemTime,\n}\n```\n\nInstead of this without Diesel:\n\n```rust\npub struct Download {\n    id: i32,\n    version_id: i32,\n    downloads: i32,\n    counted: i32,\n    date: SystemTime,\n}\n\nimpl Download {\n    fn from_row(row: &Row) -> Download {\n        Download {\n            id: row.get(\"id\"),\n            version_id: row.get(\"version_id\"),\n            downloads: row.get(\"downloads\"),\n            counted: row.get(\"counted\"),\n            date: row.get(\"date\"),\n        }\n    }\n}\n```\n\n### Inserting data\n\nIt's not just about reading data. Diesel makes it easy to use structs for new records.\n\n```rust\n#[derive(Insertable)]\n#[diesel(table_name = users)]\nstruct NewUser<'a> {\n    name: &'a str,\n    hair_color: Option<&'a str>,\n}\n\nlet new_users = vec![\n    NewUser { name: \"Sean\", hair_color: Some(\"Black\") },\n    NewUser { name: \"Gordon\", hair_color: None },\n];\n\ninsert_into(users)\n    .values(&new_users)\n    .execute(&mut connection);\n```\n\nExecuted SQL:\n\n```sql\nINSERT INTO users (name, hair_color) VALUES\n  ('Sean', 'Black'),\n  ('Gordon', DEFAULT)\n```\n\nIf you need data from the rows you inserted, just change `execute` to `get_result` or `get_results`. Diesel will take care of the rest.\n\n```rust\nlet new_users = vec![\n    NewUser { name: \"Sean\", hair_color: Some(\"Black\") },\n    NewUser { name: \"Gordon\", hair_color: None },\n];\n\nlet inserted_users = insert_into(users)\n    .values(&new_users)\n    .get_results::<User>(&mut connection);\n```\n\nExecuted SQL:\n\n```sql\nINSERT INTO users (name, hair_color) VALUES\n  ('Sean', 'Black'),\n  ('Gordon', DEFAULT)\n  RETURNING *\n```\n\n### Updating data\n\nDiesel's codegen can generate several ways to update a row, letting you encapsulate your logic in the way that makes sense for your app.\n\nModifying a struct:\n\n```rust\npost.published = true;\npost.save_changes(&mut connection);\n```\n\nOne-off batch changes:\n\n```rust\nupdate(users.filter(email.like(\"%@spammer.com\")))\n    .set(banned.eq(true))\n    .execute(&mut connection)\n```\n\nUsing a struct for encapsulation:\n\n```rust\nupdate(Settings::belonging_to(current_user))\n    .set(&settings_form)\n    .execute(&mut connection)\n```\n\n### Raw SQL\n\nThere will always be certain queries that are just easier to write as raw SQL, or can't be expressed with the query builder. Even in these cases, Diesel provides an easy to use API for writing raw SQL.\n\n```rust\n#[derive(QueryableByName)]\n#[diesel(table_name = users)]\nstruct User {\n    id: i32,\n    name: String,\n    organization_id: i32,\n}\n\n// Using `include_str!` allows us to keep the SQL in a\n// separate file, where our editor can give us SQL specific\n// syntax highlighting.\nsql_query(include_str!(\"complex_users_by_organization.sql\"))\n    .bind::<Integer, _>(organization_id)\n    .bind::<BigInt, _>(offset)\n    .bind::<BigInt, _>(limit)\n    .load::<User>(&mut conn)?;\n```\n\n## Code of conduct\n\nAnyone who interacts with Diesel in any space, including but not limited to\nthis GitHub repository, must follow our [code of conduct](https://github.com/diesel-rs/diesel/blob/master/code_of_conduct.md).\n\n## License\n\nLicensed under either of these:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   https://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or\n   https://opensource.org/licenses/MIT)\n\n### Contributing\n\nBefore contributing, please read the [contributors guide](https://github.com/diesel-rs/diesel/blob/master/CONTRIBUTING.md)\nfor useful information about setting up Diesel locally, coding style and common abbreviations.\n\nUnless you explicitly state otherwise, any contribution you intentionally submit\nfor inclusion in the work, as defined in the Apache-2.0 license, shall be\ndual-licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.2763671875,
          "content": "cognitive-complexity-threshold = 30\ndoc-valid-idents = [\n  \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\",\n  \"DirectX\", \"OpenGL\", \"TrueType\",\n  \"GPLv2\", \"GPLv3\",\n  \"GitHub\",\n  \"IPv4\", \"IPv6\",\n  \"JavaScript\", \"NaN\", \"OAuth\",\n  \"SQLite\", \"PostgreSQL\", \"MySQL\"\n]\navoid-breaking-exported-api = false\n"
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 3.2529296875,
          "content": "# Contributor Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting a project maintainer at:\n\n* Sean Griffin <sean@seantheprogrammer.com>\n* Pascal Hertleif <killercup@gmail.com>\n* Bastien Orivel <Eijebong@bananium.fr>\n\nAll complaints will be reviewed and investigated and will result in a response\nthat is deemed necessary and appropriate to the circumstances. The project team\nis obligated to maintain confidentiality with regard to the reporter of an\nincident. Further details of specific enforcement policies may be posted\nseparately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [https://contributor-covenant.org/version/1/4][version]\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "diesel",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_compile_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_derives",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_dynamic_schema",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_table_macro_syntax",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_test_helper",
          "type": "tree",
          "content": null
        },
        {
          "name": "diesel_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.6279296875,
          "content": "version: '3'\nservices:\n  mysql:\n    image: mysql\n    container_name: diesel.mysql\n    volumes:\n      - \"mysql-data:/var/lib/mysql/:delegated\"\n      - \"./docker/mysql/init:/docker-entrypoint-initdb.d\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      - MYSQL_ALLOW_EMPTY_PASSWORD=true\n  postgres:\n    image: postgres\n    container_name: diesel.postgres\n    environment:\n      POSTGRES_PASSWORD: \"postgres\"\n    volumes:\n      - \"postgres-data:/var/lib/postgres/:delegated\"\n      - \"./docker/postgres/init:/docker-entrypoint-initdb.d\"\n    ports:\n      - \"5432:5432\"\nvolumes:\n  mysql-data:\n    driver: local\n  postgres-data:\n    driver: local\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "dsl_auto_type",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "guide_drafts",
          "type": "tree",
          "content": null
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust-toolchain",
          "type": "blob",
          "size": 0.0068359375,
          "content": "1.84.0\n"
        },
        {
          "name": "xtask",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}