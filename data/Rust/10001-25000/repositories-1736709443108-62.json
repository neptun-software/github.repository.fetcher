{
  "metadata": {
    "timestamp": 1736709443108,
    "page": 62,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "launchbadge/sqlx",
      "stars": 13868,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.13671875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "# Built artifacts\ntarget/\n\n# Project and editor files\n.vscode/\n.idea/\n*.vim\n*.vi\n\n# Environment\n.env\n\n# Shared-memory and WAL files created by SQLite.\n*-shm\n*-wal\n\n# Integration testing extension library for SQLite.\nipaddr.dylib\nipaddr.so\n\n# Temporary files from running the tests locally like they would be run from CI\n.sqlx\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 131.5439453125,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## 0.8.3 - 2025-01-03\n\n41 pull requests were merged this release cycle.\n\n### Added\n* [[#3418]]: parse timezone parameter in mysql connection url [[@dojiong]]\n* [[#3491]]: chore: Update async-std v1.13 [[@jayvdb]]\n* [[#3492]]: expose relation_id and relation_attribution_no on PgColumn [[@kurtbuilds]]\n* [[#3493]]: doc(sqlite): document behavior for zoned date-time types [[@abonander]]\n* [[#3500]]: Add sqlite commit and rollback hooks [[@gridbox]]\n* [[#3505]]: chore(mysql): create test for passwordless auth (#3484) [[@abonander]]\n* [[#3507]]: Add a \"sqlite-unbundled\" feature that dynamically links to system libsqlite3.so library [[@lilydjwg]]\n* [[#3508]]: doc(sqlite): show how to turn options into a pool [[@M3t0r]]\n* [[#3514]]: Support PgHstore by default in macros [[@joeydewaal]]\n* [[#3550]]: Implement Acquire for PgListener [[@sandhose]]\n* [[#3551]]: Support building with rustls but native certificates [[@IlyaBizyaev]]\n* [[#3553]]: Add support for Postgres lquery arrays [[@philipcristiano]]\n* [[#3560]]: Add PgListener::next_buffered(), to support batch processing of notifications [[@chanks]]\n* [[#3577]]: Derive Copy where possible for database-specific types [[@veigaribo]]\n* [[#3579]]: Reexport AnyTypeInfoKind [[@Norlock]]\n* [[#3580]]: doc(mysql): document difference between `Uuid` and `uuid::fmt::Hyphenated` [[@abonander]]\n* [[#3583]]: feat: point [[@jayy-lmao]]\n* [[#3608]]: Implement AnyQueryResult for Sqlite and MySQL [[@pxp9]]\n* [[#3623]]: feat: add geometry line [[@jayy-lmao]]\n* [[#3658]]: feat: add Transaction type aliases [[@joeydewaal]]\n\n### Changed\n* [[#3519]]: Remove unused dependencies from sqlx-core, sqlx-cli and sqlx-postgres [[@vsuryamurthy]]\n* [[#3529]]: Box Pgconnection fields [[@joeydewaal]]\n* [[#3548]]: Demote `.pgpass` file warning to a debug message. [[@denschub]]\n* [[#3585]]: Eagerly reconnect in `PgListener::try_recv` [[@swlynch99]]\n* [[#3596]]: Bump thiserror to v2.0.0 [[@paolobarbolini]]\n* [[#3605]]: Use `UNION ALL` instead of `UNION` in nullable check [[@Suficio]]\n* [[#3629]]: chore: remove BoxFuture's (non-breaking) [[@joeydewaal]]\n* [[#3632]]: Bump hashlink to v0.10 [[@paolobarbolini]]\n* [[#3643]]: Roll PostgreSQL 11..=15 tests to 13..=17 [[@paolobarbolini]]\n* [[#3648]]: close listener connection on TimedOut and BrokenPipe errors [[@DXist]]\n* [[#3649]]: Bump hashbrown to v0.15 [[@paolobarbolini]]\n\n### Fixed\n* [[#3528]]: fix: obey `no-transaction` flag in down migrations [[@manifest]]\n* [[#3536]]: fix: using sqlx::test macro inside macro's [[@joeydewaal]]\n* [[#3545]]: fix: remove `sqlformat` [[@tbar4]]\n* [[#3558]]: fix: fix example code of `query_as` [[@xuehaonan27]]\n* [[#3566]]: Fix: Cannot query Postgres `INTERVAL[]` [[@Ddystopia]]\n* [[#3593]]: fix: URL decode database name when parsing connection url [[@BenoitRanque]]\n* [[#3601]]: Remove default-features = false from url [[@hsivonen]]\n* [[#3604]]: Fix mistake in sqlx::test fixtures docs [[@andreweggleston]]\n* [[#3612]]: fix(mysql): percent-decode database name [[@abonander]]\n* [[#3640]]: Dont use `EXPLAIN` in nullability check for QuestDB [[@Suficio]]\n\n[#3418]: https://github.com/launchbadge/sqlx/pull/3418\n[#3478]: https://github.com/launchbadge/sqlx/pull/3478\n[#3491]: https://github.com/launchbadge/sqlx/pull/3491\n[#3492]: https://github.com/launchbadge/sqlx/pull/3492\n[#3493]: https://github.com/launchbadge/sqlx/pull/3493\n[#3500]: https://github.com/launchbadge/sqlx/pull/3500\n[#3505]: https://github.com/launchbadge/sqlx/pull/3505\n[#3507]: https://github.com/launchbadge/sqlx/pull/3507\n[#3508]: https://github.com/launchbadge/sqlx/pull/3508\n[#3514]: https://github.com/launchbadge/sqlx/pull/3514\n[#3519]: https://github.com/launchbadge/sqlx/pull/3519\n[#3528]: https://github.com/launchbadge/sqlx/pull/3528\n[#3529]: https://github.com/launchbadge/sqlx/pull/3529\n[#3536]: https://github.com/launchbadge/sqlx/pull/3536\n[#3545]: https://github.com/launchbadge/sqlx/pull/3545\n[#3548]: https://github.com/launchbadge/sqlx/pull/3548\n[#3550]: https://github.com/launchbadge/sqlx/pull/3550\n[#3551]: https://github.com/launchbadge/sqlx/pull/3551\n[#3553]: https://github.com/launchbadge/sqlx/pull/3553\n[#3558]: https://github.com/launchbadge/sqlx/pull/3558\n[#3560]: https://github.com/launchbadge/sqlx/pull/3560\n[#3566]: https://github.com/launchbadge/sqlx/pull/3566\n[#3577]: https://github.com/launchbadge/sqlx/pull/3577\n[#3579]: https://github.com/launchbadge/sqlx/pull/3579\n[#3580]: https://github.com/launchbadge/sqlx/pull/3580\n[#3583]: https://github.com/launchbadge/sqlx/pull/3583\n[#3585]: https://github.com/launchbadge/sqlx/pull/3585\n[#3593]: https://github.com/launchbadge/sqlx/pull/3593\n[#3596]: https://github.com/launchbadge/sqlx/pull/3596\n[#3601]: https://github.com/launchbadge/sqlx/pull/3601\n[#3604]: https://github.com/launchbadge/sqlx/pull/3604\n[#3605]: https://github.com/launchbadge/sqlx/pull/3605\n[#3608]: https://github.com/launchbadge/sqlx/pull/3608\n[#3612]: https://github.com/launchbadge/sqlx/pull/3612\n[#3623]: https://github.com/launchbadge/sqlx/pull/3623\n[#3629]: https://github.com/launchbadge/sqlx/pull/3629\n[#3632]: https://github.com/launchbadge/sqlx/pull/3632\n[#3640]: https://github.com/launchbadge/sqlx/pull/3640\n[#3643]: https://github.com/launchbadge/sqlx/pull/3643\n[#3648]: https://github.com/launchbadge/sqlx/pull/3648\n[#3649]: https://github.com/launchbadge/sqlx/pull/3649\n[#3658]: https://github.com/launchbadge/sqlx/pull/3658\n\n\n## 0.8.2 - 2024-09-02\n\n10 pull requests were merged this release cycle.\n\nThis release addresses a few regressions that have occurred, and refines SQLx's MSRV policy (see [the FAQ](FAQ.md)).\n\n### Added\n* [[#3447]]: Clarify usage of Json/Jsonb in query macros [[@Lachstec]]\n\n### Changed\n* [[#3424]]: Remove deprecated feature-names from `Cargo.toml` files in examples [[@carschandler]]\n\n### Fixed\n* [[#3403]]: Fix (#3395) sqlx::test macro in 0.8 [[@joeydewaal]]\n* [[#3411]]: fix: Use rfc3339 to decode date from text [[@pierre-wehbe]]\n* [[#3453]]: fix(#3445): PgHasArrayType [[@joeydewaal]]\n    * Fixes `#[sqlx(no_pg_array)]` being forbidden on `#[derive(Type)]` structs. \n* [[#3454]]: fix: non snake case warning [[@joeydewaal]]\n* [[#3459]]: Pgsql cube type compile fail [[@kdesjard]]\n* [[#3465]]: fix(postgres): max number of binds is 65535, not 32767 (regression) [[@abonander]]\n* [[#3467]]: fix cancellation issues with `PgListener`, `PgStream::recv()` [[@abonander]]\n    * Fixes cryptic `unknown message: \"\\\\0\"` error \n* [[#3474]]: Fix try_get example in README.md [[@luveti]]\n\n[#3403]: https://github.com/launchbadge/sqlx/pull/3403\n[#3411]: https://github.com/launchbadge/sqlx/pull/3411\n[#3424]: https://github.com/launchbadge/sqlx/pull/3424\n[#3447]: https://github.com/launchbadge/sqlx/pull/3447\n[#3453]: https://github.com/launchbadge/sqlx/pull/3453\n[#3454]: https://github.com/launchbadge/sqlx/pull/3454\n[#3455]: https://github.com/launchbadge/sqlx/pull/3455\n[#3459]: https://github.com/launchbadge/sqlx/pull/3459\n[#3465]: https://github.com/launchbadge/sqlx/pull/3465\n[#3467]: https://github.com/launchbadge/sqlx/pull/3467\n[#3474]: https://github.com/launchbadge/sqlx/pull/3474\n\n## 0.8.1 - 2024-08-23\n\n16 pull requests were merged this release cycle.\n\nThis release contains a fix for [RUSTSEC-2024-0363]. \n\nPostgres users are advised to upgrade ASAP as a possible exploit has been demonstrated:\n<https://github.com/launchbadge/sqlx/issues/3440#issuecomment-2307956901>\n\nMySQL and SQLite do not _appear_ to be exploitable, but upgrading is recommended nonetheless.\n\n### Added\n* [[#3421]]: correct spelling of `MySqlConnectOptions::no_engine_substitution()` [[@kolinfluence]]\n    * Deprecates `MySqlConnectOptions::no_engine_subsitution()` (oops) in favor of the correctly spelled version.\n\n### Changed\n* [[#3376]]: doc: hide `spec_error` module [[@abonander]]\n    * This is a helper module for the macros and was not meant to be exposed.\n    * It is not expected to receive any breaking changes for the 0.8.x release, but is not designed as a public API.\n      Use at your own risk.\n* [[#3382]]: feat: bumped to `libsqlite3-sys=0.30.1` to support sqlite 3.46 [[@CommanderStorm]]\n* [[#3385]]: chore(examples):Migrated the pg-chat example to ratatui [[@CommanderStorm]]\n* [[#3399]]: Upgrade to rustls 0.23 [[@djc]]\n    * RusTLS now has pluggable cryptography providers: `ring` (the existing implementation),\n      and `aws-lc-rs` which has optional FIPS certification.\n    * The existing features activating RusTLS (`runtime-tokio-rustls`, `runtime-async-std-rustls`, `tls-rustls`)\n      enable the `ring` provider of RusTLS to match the existing behavior so this _should not_ be a breaking change. \n    * Switch to the `tls-rustls-aws-lc-rs` feature to use the `aws-lc-rs` provider.\n      * If using `runtime-tokio-rustls` or `runtime-async-std-rustls`, \n        this will necessitate switching to the appropriate non-legacy runtime feature: \n        `runtime-tokio` or `runtime-async-std`\n    * See the RusTLS README for more details: <https://github.com/rustls/rustls?tab=readme-ov-file#cryptography-providers>\n\n### Fixed\n* [[#2786]]: fix(sqlx-cli): do not clean sqlx during prepare [[@cycraig]]\n* [[#3354]]: sqlite: fix inconsistent read-after-write [[@ckampfe]]\n* [[#3371]]: Fix encoding and decoding of MySQL enums in `sqlx::Type` [[@alu]]\n* [[#3374]]: fix: usage of `node12` in `SQLx` action [[@hamirmahal]]\n* [[#3380]]: chore: replace structopt with clap in examples [[@tottoto]]\n* [[#3381]]: Fix CI after Rust 1.80, remove dead feature references [[@abonander]]\n* [[#3384]]: chore(tests): fixed deprecation warnings [[@CommanderStorm]]\n* [[#3386]]: fix(dependencys):bumped cargo_metadata to `v0.18.1` to avoid yanked `v0.14.3` [[@CommanderStorm]]\n* [[#3389]]: fix(cli): typo in error for required DB URL [[@ods]]\n* [[#3417]]: Update version to 0.8 in README [[@soucosmo]]\n* [[#3441]]: fix: audit protocol handling [[@abonander]]\n    * This addresses [RUSTSEC-2024-0363] and includes regression tests for MySQL, Postgres and SQLite.\n\n[#2786]: https://github.com/launchbadge/sqlx/pull/2786\n[#3354]: https://github.com/launchbadge/sqlx/pull/3354\n[#3371]: https://github.com/launchbadge/sqlx/pull/3371\n[#3374]: https://github.com/launchbadge/sqlx/pull/3374\n[#3376]: https://github.com/launchbadge/sqlx/pull/3376\n[#3380]: https://github.com/launchbadge/sqlx/pull/3380\n[#3381]: https://github.com/launchbadge/sqlx/pull/3381\n[#3382]: https://github.com/launchbadge/sqlx/pull/3382\n[#3384]: https://github.com/launchbadge/sqlx/pull/3384\n[#3385]: https://github.com/launchbadge/sqlx/pull/3385\n[#3386]: https://github.com/launchbadge/sqlx/pull/3386\n[#3389]: https://github.com/launchbadge/sqlx/pull/3389\n[#3399]: https://github.com/launchbadge/sqlx/pull/3399\n[#3417]: https://github.com/launchbadge/sqlx/pull/3417\n[#3421]: https://github.com/launchbadge/sqlx/pull/3421\n[#3441]: https://github.com/launchbadge/sqlx/pull/3441\n\n[RUSTSEC-2024-0363]: https://rustsec.org/advisories/RUSTSEC-2024-0363.html\n\n## 0.8.0 - 2024-07-22\n\n70 pull requests were merged this release cycle.\n\n[#2697] was merged the same day as release 0.7.4 and so was missed by the automatic CHANGELOG generation.\n\n### Breaking\n* [[#2697]]: fix(macros): only enable chrono when time is disabled [[@saiintbrisson]]\n* [[#2973]]: Generic Associated Types in Database, replacing HasValueRef, HasArguments, HasStatement [[@nitn3lav]]\n* [[#2482]]: chore: bump syn to 2.0 [[@saiintbrisson]]\n    * Deprecated type ascription syntax in the query macros was removed.\n* [[#2736]]: Fix describe on PostgreSQL views with rules [[@tsing]]\n  * Potentially breaking: nullability inference changes for Postgres.\n* [[#2869]]: Implement PgHasArrayType for all references [[@tylerhawkes]]\n    * Conflicts with existing manual implementations.\n* [[#2940]]: fix: Decode and Encode derives (#1031) [[@benluelo]]\n    * Changes lifetime obligations for field types.\n* [[#3064]]: Sqlite explain graph [[@tyrelr]]\n    * Potentially breaking: nullability inference changes for SQLite.\n* [[#3123]]: Reorder attrs in sqlx::test macro [[@bobozaur]]\n    * Potentially breaking: attributes on `#[sqlx::test]` usages are applied in the correct order now.\n* [[#3126]]: Make Encode return a result [[@FSMaxB]]\n* [[#3130]]: Add version information for failed cli migration (#3129) [[@FlakM]]\n    * Breaking changes to `MigrateError`.\n* [[#3181]]: feat: no tx migration [[@cleverjam]]\n    * (Postgres only) migrations that should not run in a transaction can be flagged by adding `-- no-transaction` to the beginning.\n    * Breaking change: added field to `Migration`\n* [[#3184]]: [BREAKING} fix(sqlite): always use `i64` as intermediate when decoding [[@abonander]]\n    * integer decoding will now loudly error on overflow instead of silently truncating.\n    * some usages of the query!() macros might change an i32 to an i64.\n* [[#3252]]: fix `#[derive(sqlx::Type)]` in Postgres [[@abonander]]\n  * Manual implementations of PgHasArrayType for enums will conflict with the generated one. Delete the manual impl or add `#[sqlx(no_pg_array)]` where conflicts occur.\n  * Type equality for PgTypeInfo is now schema-aware.\n* [[#3329]]: fix: correct handling of arrays of custom types in Postgres [[@abonander]]\n    * Potential breaking change: `PgTypeInfo::with_name()` infers types that start with `_` to be arrays of the un-prefixed type. Wrap type names in quotes to bypass this behavior.\n* [[#3356]]: breaking: fix name collision in `FromRow`, return `Error::ColumnDecode` for `TryFrom` errors [[@abonander]]\n    * Breaking behavior change: errors with `#[sqlx(try_from = \"T\")]` now return `Error::ColumnDecode` instead of `Error::ColumnNotFound`.\n    * Breaking because `#[sqlx(default)]` on an individual field or the struct itself would have previously suppressed the error. \n      This doesn't seem like good behavior as it could result in some potentially very difficult bugs.\n      * Instead, create a wrapper implementing `From` and apply the default explicitly.\n* [[#3337]]: allow rename with rename_all (close #2896) [[@DirectorX]]\n    * Changes the precedence of `#[sqlx(rename)]` and `#[sqlx(rename_all)]` to match the expected behavior (`rename` wins).\n* [[#3285]]: fix: use correct names for sslmode options [[@lily-mosquitoes]]\n    * Changes the output of `ConnectOptions::to_url_lossy()` to match what parsing expects.\n\n### Added\n* [[#2917]]: Add Debug impl for PgRow [[@g-bartoszek]]\n* [[#3113]]: feat: new derive feature flag [[@saiintbrisson]]\n* [[#3154]]: feat: add `MySqlTime`, audit `mysql::types` for panics [[@abonander]]\n* [[#3188]]: feat(cube): support postgres cube [[@jayy-lmao]]\n* [[#3244]]: feat: support `NonZero*` scalar types [[@AlphaKeks]]\n* [[#3260]]: feat: Add set_update_hook on SqliteConnection [[@gridbox]]\n* [[#3291]]: feat: support the Postgres Bool type for the Any driver [[@etorreborre]]\n* [[#3293]]: Add LICENSE-* files to crates [[@LecrisUT]]\n* [[#3303]]: add array support for NonZeroI* in postgres [[@JohannesIBK]]\n* [[#3311]]: Add example on how to use Transaction as Executor [[@Lachstec]]\n* [[#3343]]: Add support for PostgreSQL HSTORE data type [[@KobusEllis]]\n\n### Changed\n* [[#2652]]: MySQL: Remove collation compatibility check for strings [[@alu]]\n* [[#2960]]: Removed `Send` trait bound from argument binding [[@bobozaur]]\n* [[#2970]]: refactor: lift type mappings into driver crates [[@abonander]]\n* [[#3148]]: Bump libsqlite3-sys to v0.28 [[@NfNitLoop]]\n    * Note: version bumps to `libsqlite3-sys` are not considered breaking changes as per our semver guarantees.\n* [[#3265]]: perf: box `MySqlConnection` to reduce sizes of futures [[@stepantubanov]]\n* [[#3352]]: chore:added a testcase for `sqlx migrate add ...` [[@CommanderStorm]]\n* [[#3340]]: ci: Add job to check that sqlx builds with its declared minimum dependencies [[@iamjpotts]]\n\n### Fixed\n* [[#2702]]: Constrain cyclic associated types to themselves [[@BadBastion]]\n* [[#2954]]: Fix several inter doc links [[@ralpha]]\n* [[#3073]]: feat(logging): Log slow acquires from connection pool [[@iamjpotts]]\n* [[#3137]]: SqliteConnectOptions::filename() memory fix (#3136) [[@hoxxep]]\n* [[#3138]]: PostgreSQL Bugfix: Ensure connection is usable after failed COPY inside a transaction [[@feikesteenbergen]]\n* [[#3146]]: fix(sqlite): delete unused `ConnectionHandleRaw` type [[@abonander]]\n* [[#3162]]: Drop urlencoding dependency [[@paolobarbolini]]\n* [[#3165]]: Bump deps that do not need code changes [[@GnomedDev]]\n* [[#3167]]: fix(ci): use `docker compose` instead of `docker-compose` [[@abonander]]\n* [[#3172]]: fix: Option decoding in any driver [[@pxp9]]\n* [[#3173]]: fix(postgres) : int type conversion while decoding [[@RaghavRox]]\n* [[#3190]]: Update time to 0.3.36 [[@BlackSoulHub]]\n* [[#3191]]: Fix unclean TLS shutdown [[@levkk]]\n* [[#3194]]: Fix leaking connections in fetch_optional (#2647) [[@danjpgriffin]]\n* [[#3216]]: security: bump rustls to 0.21.11 [[@toxeus]]\n* [[#3230]]: fix: sqlite pragma order for auto_vacuum [[@jasonish]]\n* [[#3233]]: fix: get_filename should not consume self [[@jasonish]]\n* [[#3234]]: fix(ci): pin Rust version, ditch unmaintained actions [[@abonander]]\n* [[#3236]]: fix: resolve `path` ownership problems when using `sqlx_macros_unstable` [[@lily-mosquitoes]]\n* [[#3254]]: fix: hide `sqlx_postgres::any` [[@Zarathustra2]]\n* [[#3266]]: ci: MariaDB - add back 11.4 and add 11.5 [[@grooverdan]]\n* [[#3267]]: ci: syntax fix [[@grooverdan]]\n* [[#3271]]: docs(sqlite): fix typo - unixtime() -> unixepoch() [[@joelkoen]]\n* [[#3276]]: Invert boolean for `migrate` error message. (#3275) [[@nk9]]\n* [[#3279]]: fix Clippy errors [[@abonander]]\n* [[#3288]]: fix: sqlite update_hook char types [[@jasonish]]\n* [[#3297]]: Pass the `persistent` query setting when preparing queries with the `Any` driver [[@etorreborre]]\n* [[#3298]]: Track null arguments in order to provide the appropriate type when converting them. [[@etorreborre]]\n* [[#3312]]: doc: Minor rust docs fixes [[@SrGesus]]\n* [[#3327]]: chore: fixed one usage of `select_input_type!()` being unhygenic [[@CommanderStorm]]\n* [[#3328]]: fix(ci): comment not separated from other characters [[@hamirmahal]]\n* [[#3341]]: refactor: Resolve cargo check warnings in postgres examples [[@iamjpotts]]\n* [[#3346]]: fix(postgres): don't panic if `M` or `C` Notice fields are not UTF-8 [[@YgorSouza]]\n* [[#3350]]: fix:the `json`-feature should activate `sqlx-postgres?/json` as well [[@CommanderStorm]]\n* [[#3353]]: fix: build script new line at eof [[@Zarthus]]\n* (no PR): activate `clock` and `std` features of `workspace.dependencies.chrono`.\n\n[#2482]: https://github.com/launchbadge/sqlx/pull/2482\n[#2652]: https://github.com/launchbadge/sqlx/pull/2652\n[#2697]: https://github.com/launchbadge/sqlx/pull/2697\n[#2702]: https://github.com/launchbadge/sqlx/pull/2702\n[#2736]: https://github.com/launchbadge/sqlx/pull/2736\n[#2869]: https://github.com/launchbadge/sqlx/pull/2869\n[#2917]: https://github.com/launchbadge/sqlx/pull/2917\n[#2940]: https://github.com/launchbadge/sqlx/pull/2940\n[#2954]: https://github.com/launchbadge/sqlx/pull/2954\n[#2960]: https://github.com/launchbadge/sqlx/pull/2960\n[#2970]: https://github.com/launchbadge/sqlx/pull/2970\n[#2973]: https://github.com/launchbadge/sqlx/pull/2973\n[#3064]: https://github.com/launchbadge/sqlx/pull/3064\n[#3073]: https://github.com/launchbadge/sqlx/pull/3073\n[#3113]: https://github.com/launchbadge/sqlx/pull/3113\n[#3123]: https://github.com/launchbadge/sqlx/pull/3123\n[#3126]: https://github.com/launchbadge/sqlx/pull/3126\n[#3130]: https://github.com/launchbadge/sqlx/pull/3130\n[#3137]: https://github.com/launchbadge/sqlx/pull/3137\n[#3138]: https://github.com/launchbadge/sqlx/pull/3138\n[#3146]: https://github.com/launchbadge/sqlx/pull/3146\n[#3148]: https://github.com/launchbadge/sqlx/pull/3148\n[#3154]: https://github.com/launchbadge/sqlx/pull/3154\n[#3162]: https://github.com/launchbadge/sqlx/pull/3162\n[#3165]: https://github.com/launchbadge/sqlx/pull/3165\n[#3167]: https://github.com/launchbadge/sqlx/pull/3167\n[#3172]: https://github.com/launchbadge/sqlx/pull/3172\n[#3173]: https://github.com/launchbadge/sqlx/pull/3173\n[#3181]: https://github.com/launchbadge/sqlx/pull/3181\n[#3184]: https://github.com/launchbadge/sqlx/pull/3184\n[#3188]: https://github.com/launchbadge/sqlx/pull/3188\n[#3190]: https://github.com/launchbadge/sqlx/pull/3190\n[#3191]: https://github.com/launchbadge/sqlx/pull/3191\n[#3194]: https://github.com/launchbadge/sqlx/pull/3194\n[#3216]: https://github.com/launchbadge/sqlx/pull/3216\n[#3230]: https://github.com/launchbadge/sqlx/pull/3230\n[#3233]: https://github.com/launchbadge/sqlx/pull/3233\n[#3234]: https://github.com/launchbadge/sqlx/pull/3234\n[#3236]: https://github.com/launchbadge/sqlx/pull/3236\n[#3244]: https://github.com/launchbadge/sqlx/pull/3244\n[#3252]: https://github.com/launchbadge/sqlx/pull/3252\n[#3254]: https://github.com/launchbadge/sqlx/pull/3254\n[#3260]: https://github.com/launchbadge/sqlx/pull/3260\n[#3265]: https://github.com/launchbadge/sqlx/pull/3265\n[#3266]: https://github.com/launchbadge/sqlx/pull/3266\n[#3267]: https://github.com/launchbadge/sqlx/pull/3267\n[#3271]: https://github.com/launchbadge/sqlx/pull/3271\n[#3276]: https://github.com/launchbadge/sqlx/pull/3276\n[#3279]: https://github.com/launchbadge/sqlx/pull/3279\n[#3285]: https://github.com/launchbadge/sqlx/pull/3285\n[#3288]: https://github.com/launchbadge/sqlx/pull/3288\n[#3291]: https://github.com/launchbadge/sqlx/pull/3291\n[#3293]: https://github.com/launchbadge/sqlx/pull/3293\n[#3297]: https://github.com/launchbadge/sqlx/pull/3297\n[#3298]: https://github.com/launchbadge/sqlx/pull/3298\n[#3303]: https://github.com/launchbadge/sqlx/pull/3303\n[#3311]: https://github.com/launchbadge/sqlx/pull/3311\n[#3312]: https://github.com/launchbadge/sqlx/pull/3312\n[#3327]: https://github.com/launchbadge/sqlx/pull/3327\n[#3328]: https://github.com/launchbadge/sqlx/pull/3328\n[#3329]: https://github.com/launchbadge/sqlx/pull/3329\n[#3337]: https://github.com/launchbadge/sqlx/pull/3337\n[#3340]: https://github.com/launchbadge/sqlx/pull/3340\n[#3341]: https://github.com/launchbadge/sqlx/pull/3341\n[#3343]: https://github.com/launchbadge/sqlx/pull/3343\n[#3346]: https://github.com/launchbadge/sqlx/pull/3346\n[#3350]: https://github.com/launchbadge/sqlx/pull/3350\n[#3352]: https://github.com/launchbadge/sqlx/pull/3352\n[#3353]: https://github.com/launchbadge/sqlx/pull/3353\n[#3356]: https://github.com/launchbadge/sqlx/pull/3356\n## 0.7.4 - 2024-03-11\n\n38 pull requests were merged this release cycle.\n\nThis is officially the **last** release of the 0.7.x release cycle.\n\nAs of this release, development of 0.8.0 has begun on `main` and only high-priority bugfixes may be backported.\n\n### Added\n\n* [[#2891]]: feat: expose getters for connect options fields [[@saiintbrisson]]\n* [[#2902]]: feat: add `to_url_lossy` to connect options [[@lily-mosquitoes]]\n* [[#2927]]: Support `query!` for cargo-free systems [[@kshramt]]\n* [[#2997]]: doc(FAQ): add entry explaining prepared statements [[@abonander]]\n* [[#3001]]: Update README to clarify MariaDB support [[@iangilfillan]]\n* [[#3004]]: feat(logging): Add numeric elapsed time field elapsed_secs [[@iamjpotts]]\n* [[#3007]]: feat: add `raw_sql` API [[@abonander]]\n    * This hopefully makes it easier to find how to execute statements which are not supported by the default\n      prepared statement interfaces `query*()` and `query!()`.\n    * Improved documentation across the board for the `query*()` functions.\n    * Deprecated: `execute_many()` and `fetch_many()` on interfaces that use prepared statements.\n        * Multiple SQL statements in one query string were only supported by SQLite because its prepared statement\n          interface is the *only* way to execute SQL. All other database flavors forbid multiple statements in\n          one prepared statement string as an extra defense against SQL injection.\n        * The new `raw_sql` API retains this functionality because it explicitly does *not* use prepared statements.\n          Raw or text-mode query interfaces generally allow multiple statements in one query string, and this is\n          supported by all current databases. Due to their nature, however, one cannot use bind parameters with them.\n        * If this change affects you, an issue is open for discussion: https://github.com/launchbadge/sqlx/issues/3108\n* [[#3011]]: Added support to IpAddr with MySQL/MariaDB. [[@Icerath]]\n* [[#3013]]: Add default implementation for PgInterval [[@pawurb]]\n* [[#3018]]: Add default implementation for PgMoney [[@pawurb]]\n* [[#3026]]: Update docs to reflect support for MariaDB data types [[@iangilfillan]]\n* [[#3037]]: feat(mysql): allow to connect with mysql driver without default behavor [[@darkecho731]]\n\n### Changed\n\n* [[#2900]]: Show latest url to docs for macro.migrate [[@Vrajs16]]\n* [[#2914]]: Use `create_new` instead of `atomic-file-write` [[@mattfbacon]]\n* [[#2926]]: docs: update example for `PgConnectOptions` [[@Fyko]]\n* [[#2989]]: sqlx-core: Remove dotenvy dependency [[@joshtriplett]]\n* [[#2996]]: chore: Update ahash to 0.8.7 [[@takenoko-gohan]]\n* [[#3006]]: chore(deps): Replace unmaintained tempdir crate with tempfile [[@iamjpotts]]\n* [[#3008]]: chore: Ignore .sqlx folder created by running ci steps locally [[@iamjpotts]]\n* [[#3009]]: chore(dev-deps): Upgrade env_logger from 0.9 to 0.11 [[@iamjpotts]]\n* [[#3010]]: chore(deps): Upgrade criterion to 0.5.1 [[@iamjpotts]]\n* [[#3050]]: Optimize SASL auth in sqlx-postgres [[@mirek26]]\n* [[#3055]]: Set TCP_NODELAY option on TCP sockets [[@mirek26]]\n* [[#3065]]: Improve max_lifetime handling [[@mirek26]]\n* [[#3072]]: Change the name of \"inner\" function generated by `#[sqlx::test]` [[@ciffelia]]\n* [[#3083]]: Remove sha1 because it's not being used in postgres [[@rafaelGuerreiro]]\n\n### Fixed\n\n* [[#2898]]: Fixed docs [[@Vrajs16]]\n* [[#2905]]: fix(mysql): Close prepared statement if persistence is disabled [[@larsschumacher]]\n* [[#2913]]: Fix handling of deferred constraints [[@Thomasdezeeuw]]\n* [[#2919]]: fix duplicate \"`\" in FromRow \"default\" attribute doc comment [[@shengsheng]]\n* [[#2932]]: fix(postgres): avoid unnecessary flush in PgCopyIn::read_from [[@tsing]]\n* [[#2955]]: Minor fixes [[@Dawsoncodes]]\n* [[#2963]]: Fixed ReadMe badge styling [[@tadghh]]\n* [[#2976]]: fix: AnyRow not support PgType::Varchar [[@holicc]]\n* [[#3053]]: fix: do not panic when binding a large BigDecimal [[@Ekleog]]\n* [[#3056]]: fix: spans in sqlite tracing (#2876) [[@zoomiti]]\n* [[#3089]]: fix(migrate): improve error message when parsing version from filename [[@abonander]]\n* [[#3098]]: Migrations fixes [[@abonander]]\n  * Unhides `sqlx::migrate::Migrator`.\n  * Improves I/O error message when failing to read a file in `migrate!()`.\n\n[#2891]: https://github.com/launchbadge/sqlx/pull/2891\n[#2898]: https://github.com/launchbadge/sqlx/pull/2898\n[#2900]: https://github.com/launchbadge/sqlx/pull/2900\n[#2902]: https://github.com/launchbadge/sqlx/pull/2902\n[#2905]: https://github.com/launchbadge/sqlx/pull/2905\n[#2913]: https://github.com/launchbadge/sqlx/pull/2913\n[#2914]: https://github.com/launchbadge/sqlx/pull/2914\n[#2919]: https://github.com/launchbadge/sqlx/pull/2919\n[#2926]: https://github.com/launchbadge/sqlx/pull/2926\n[#2927]: https://github.com/launchbadge/sqlx/pull/2927\n[#2932]: https://github.com/launchbadge/sqlx/pull/2932\n[#2955]: https://github.com/launchbadge/sqlx/pull/2955\n[#2963]: https://github.com/launchbadge/sqlx/pull/2963\n[#2976]: https://github.com/launchbadge/sqlx/pull/2976\n[#2989]: https://github.com/launchbadge/sqlx/pull/2989\n[#2996]: https://github.com/launchbadge/sqlx/pull/2996\n[#2997]: https://github.com/launchbadge/sqlx/pull/2997\n[#3001]: https://github.com/launchbadge/sqlx/pull/3001\n[#3004]: https://github.com/launchbadge/sqlx/pull/3004\n[#3006]: https://github.com/launchbadge/sqlx/pull/3006\n[#3007]: https://github.com/launchbadge/sqlx/pull/3007\n[#3008]: https://github.com/launchbadge/sqlx/pull/3008\n[#3009]: https://github.com/launchbadge/sqlx/pull/3009\n[#3010]: https://github.com/launchbadge/sqlx/pull/3010\n[#3011]: https://github.com/launchbadge/sqlx/pull/3011\n[#3013]: https://github.com/launchbadge/sqlx/pull/3013\n[#3018]: https://github.com/launchbadge/sqlx/pull/3018\n[#3026]: https://github.com/launchbadge/sqlx/pull/3026\n[#3037]: https://github.com/launchbadge/sqlx/pull/3037\n[#3050]: https://github.com/launchbadge/sqlx/pull/3050\n[#3053]: https://github.com/launchbadge/sqlx/pull/3053\n[#3055]: https://github.com/launchbadge/sqlx/pull/3055\n[#3056]: https://github.com/launchbadge/sqlx/pull/3056\n[#3065]: https://github.com/launchbadge/sqlx/pull/3065\n[#3072]: https://github.com/launchbadge/sqlx/pull/3072\n[#3083]: https://github.com/launchbadge/sqlx/pull/3083\n[#3089]: https://github.com/launchbadge/sqlx/pull/3089\n[#3098]: https://github.com/launchbadge/sqlx/pull/3098\n\n## 0.7.3 - 2023-11-22\n\n38 pull requests were merged this release cycle.\n\n### Added\n* [[#2478]]: feat(citext): support postgres citext [[@hgranthorner]]\n* [[#2545]]: Add `fixtures_path` in sqlx::test args [[@ripa1995]]\n* [[#2665]]: feat(mysql): support packet splitting [[@tk2217]]\n* [[#2752]]: Enhancement #2747 Provide `fn PgConnectOptions::get_host(&self)` [[@boris-lok]]\n* [[#2769]]: Customize the macro error message based on the metadata [[@Nemo157]]\n* [[#2793]]: derived Hash trait for PgInterval [[@yasamoka]]\n* [[#2801]]: derive FromRow: sqlx(default) for all fields [[@grgi]]\n* [[#2827]]: Add impl `FromRow` for the unit type [[@nanoqsh]]\n* [[#2871]]: Add `MySqlConnectOptions::get_database()`  [[@shiftrightonce]]\n* [[#2873]]: Sqlx Cli: Added force flag to drop database for postgres [[@Vrajs16]]\n* [[#2894]]: feat: `Text` adapter [[@abonander]]\n\n### Changed\n* [[#2701]]: Remove documentation on offline feature [[@Baptistemontan]]\n* [[#2713]]: Add additional info regarding using Transaction and PoolConnection as… [[@satwanjyu]]\n* [[#2770]]: Update README.md [[@snspinn]]\n* [[#2797]]: doc(mysql): document behavior regarding `BOOLEAN` and the query macros [[@abonander]]\n* [[#2803]]: Don't use separate temp dir for query jsons (2)  [[@mattfbacon]]\n* [[#2819]]: postgres begin cancel safe [[@conradludgate]]\n* [[#2832]]: Update extra_float_digits default to 2 instead of 3 [[@brianheineman]]\n* [[#2865]]: Update Faq - Bulk upsert with optional fields  [[@Vrajs16]]\n* [[#2880]]: feat: use specific message for slow query logs [[@abonander]]\n* [[#2882]]: Do not require db url for prepare [[@tamasfe]]\n* [[#2890]]: doc(sqlite): cover lack of `NUMERIC` support [[@abonander]]\n* [No PR]: Upgraded `libsqlite3-sys` to 0.27.0\n  * Note: linkage to `libsqlite3-sys` is considered semver-exempt; \n    see the release notes for 0.7.0 below for details.\n\n### Fixed\n* [[#2640]]: fix: sqlx::macro db cleanup race condition by adding a margin to current timestamp [[@fhsgoncalves]]\n* [[#2655]]: [fix] Urlencode when passing filenames to sqlite3 [[@uttarayan21]]\n* [[#2684]]: Make PgListener recover from UnexpectedEof [[@hamiltop]]\n* [[#2688]]: fix: Make rust_decimal and bigdecimal decoding more lenient [[@cameronbraid]]\n* [[#2754]]: Is tests/x.py maintained? And I tried fix it. [[@qwerty2501]]\n* [[#2784]]: fix: decode postgres time without subsecond [[@granddaifuku]]\n* [[#2806]]: Depend on version of async-std with non-private spawn-blocking [[@A248]]\n* [[#2820]]: fix: correct decoding of `rust_decimal::Decimal` for high-precision values [[@abonander]]\n* [[#2822]]: issue #2821 Update error handling logic when opening a TCP connection [[@anupj]]\n* [[#2826]]: chore: bump some sqlx-core dependencies [[@djc]]\n* [[#2838]]: Fixes rust_decimal scale for Postgres [[@jkleinknox]]\n* [[#2847]]: Fix comment in `sqlx migrate add` help text [[@cryeprecision]]\n* [[#2850]]: fix(core): avoid unncessary wakeups in `try_stream!()` [[@abonander]]\n* [[#2856]]: Prevent warnings running `cargo build` [[@nyurik]]\n* [[#2864]]: fix(sqlite): use `AtomicUsize` for thread IDs [[@abonander]]\n* [[#2892]]: Fixed force dropping bug [[@Vrajs16]]\n\n[#2478]: https://github.com/launchbadge/sqlx/pull/2478\n[#2545]: https://github.com/launchbadge/sqlx/pull/2545\n[#2640]: https://github.com/launchbadge/sqlx/pull/2640\n[#2655]: https://github.com/launchbadge/sqlx/pull/2655\n[#2665]: https://github.com/launchbadge/sqlx/pull/2665\n[#2684]: https://github.com/launchbadge/sqlx/pull/2684\n[#2688]: https://github.com/launchbadge/sqlx/pull/2688\n[#2701]: https://github.com/launchbadge/sqlx/pull/2701\n[#2713]: https://github.com/launchbadge/sqlx/pull/2713\n[#2752]: https://github.com/launchbadge/sqlx/pull/2752\n[#2754]: https://github.com/launchbadge/sqlx/pull/2754\n[#2769]: https://github.com/launchbadge/sqlx/pull/2769\n[#2770]: https://github.com/launchbadge/sqlx/pull/2770\n[#2782]: https://github.com/launchbadge/sqlx/pull/2782\n[#2784]: https://github.com/launchbadge/sqlx/pull/2784\n[#2793]: https://github.com/launchbadge/sqlx/pull/2793\n[#2797]: https://github.com/launchbadge/sqlx/pull/2797\n[#2801]: https://github.com/launchbadge/sqlx/pull/2801\n[#2803]: https://github.com/launchbadge/sqlx/pull/2803\n[#2806]: https://github.com/launchbadge/sqlx/pull/2806\n[#2819]: https://github.com/launchbadge/sqlx/pull/2819\n[#2820]: https://github.com/launchbadge/sqlx/pull/2820\n[#2822]: https://github.com/launchbadge/sqlx/pull/2822\n[#2826]: https://github.com/launchbadge/sqlx/pull/2826\n[#2827]: https://github.com/launchbadge/sqlx/pull/2827\n[#2832]: https://github.com/launchbadge/sqlx/pull/2832\n[#2838]: https://github.com/launchbadge/sqlx/pull/2838\n[#2847]: https://github.com/launchbadge/sqlx/pull/2847\n[#2850]: https://github.com/launchbadge/sqlx/pull/2850\n[#2856]: https://github.com/launchbadge/sqlx/pull/2856\n[#2864]: https://github.com/launchbadge/sqlx/pull/2864\n[#2865]: https://github.com/launchbadge/sqlx/pull/2865\n[#2871]: https://github.com/launchbadge/sqlx/pull/2871\n[#2873]: https://github.com/launchbadge/sqlx/pull/2873\n[#2880]: https://github.com/launchbadge/sqlx/pull/2880\n[#2882]: https://github.com/launchbadge/sqlx/pull/2882\n[#2890]: https://github.com/launchbadge/sqlx/pull/2890\n[#2892]: https://github.com/launchbadge/sqlx/pull/2892\n[#2894]: https://github.com/launchbadge/sqlx/pull/2894\n\n## 0.7.2 - 2023-09-25\n\n23 pull requests were merged this release cycle.\n\n### Added\n\n* [[#2121]]: Add JSON support to `FromRow` derive [[@95ulisse]]\n* [[#2533]]: Implement mysql_clear_password [[@ldanilek]]\n* [[#2538]]: cli: add --target-version CLI flags for migrate run/revert [[@inahga]]\n* [[#2577]]: supplement Postgres listen example with a small chat example [[@JockeM]]\n* [[#2602]]: Support naming migrations sequentially [[@vmax]]\n* [[#2634]]: Adding PgHasArrayType for &[u8;N] [[@snf]]\n* [[#2646]]: Support for setting client certificate and key from bytes [[@wyhaya]]\n* [[#2664]]: Automatically infer migration type [[@vmax]]\n* [[#2712]]: Add impl for `Type`, `Decode`, and `Encode` for `Box<str>` and `Box<[u8]>` [[@grant0417]]\n\n### Changed\n* [[#2650]]: Cleanup format arguments [[@nyurik]]\n* [[#2695]]: remove &mut PoolConnection from Executor docs [[@olback]]\n    * This impl was removed in 0.7.0 because of coherence issues.\n* [[#2706]]: Clarify where optional features should be enabled [[@kryptan]]\n* [[#2717]]: Update README.md [[@fermanjj]]\n* [[#2739]]: Bump mariadb CI images + mysql unpin [[@grooverdan]]\n* [[#2742]]: Implemented poll_flush for Box<S:Socket> [[@bobozaur]]\n* [[#2740]]: Remove sealed trait comments from documentation [[@bobozaur]]\n* [[#2750]]: Fix #2384, bump flume to v0.11.0 [[@madadam]]\n* [[#2757]]: Remove unused `remove_dir_all` crate from `sqlx-cli`, fixes RUSTSEC-2023-0018 [[@aldur]]\n\n### Fixed\n\n* [[#2624]]: Documentation typo: BYTE -> BINARY [[@sebastianv89]]\n* [[#2628]]: docs: 0.7 is stable in the entire README [[@marcusirgens]]\n* [[#2630]]: fix(postgres): fix buffer management in PgCopyIn::read_from [[@tsing]]\n* [[#2651]]: Chore: Fix few build warnings, and make CI fail on warn [[@nyurik]]\n* [[#2670]]: fix: ignore extra fields in Postgres describe parsing [[@abonander]]\n* [[#2687]]: docs: Fix description of `min_connections` [[@hakoerber]]\n\n[#2121]: https://github.com/launchbadge/sqlx/pull/2121\n[#2533]: https://github.com/launchbadge/sqlx/pull/2533\n[#2538]: https://github.com/launchbadge/sqlx/pull/2538\n[#2577]: https://github.com/launchbadge/sqlx/pull/2577\n[#2602]: https://github.com/launchbadge/sqlx/pull/2602\n[#2624]: https://github.com/launchbadge/sqlx/pull/2624\n[#2628]: https://github.com/launchbadge/sqlx/pull/2628\n[#2630]: https://github.com/launchbadge/sqlx/pull/2630\n[#2634]: https://github.com/launchbadge/sqlx/pull/2634\n[#2646]: https://github.com/launchbadge/sqlx/pull/2646\n[#2650]: https://github.com/launchbadge/sqlx/pull/2650\n[#2651]: https://github.com/launchbadge/sqlx/pull/2651\n[#2664]: https://github.com/launchbadge/sqlx/pull/2664\n[#2670]: https://github.com/launchbadge/sqlx/pull/2670\n[#2687]: https://github.com/launchbadge/sqlx/pull/2687\n[#2695]: https://github.com/launchbadge/sqlx/pull/2695\n[#2706]: https://github.com/launchbadge/sqlx/pull/2706\n[#2712]: https://github.com/launchbadge/sqlx/pull/2712\n[#2717]: https://github.com/launchbadge/sqlx/pull/2717\n[#2739]: https://github.com/launchbadge/sqlx/pull/2739\n[#2740]: https://github.com/launchbadge/sqlx/pull/2740\n[#2742]: https://github.com/launchbadge/sqlx/pull/2742\n[#2750]: https://github.com/launchbadge/sqlx/pull/2750\n[#2757]: https://github.com/launchbadge/sqlx/pull/2757\n\n## 0.7.1 - 2023-07-14\n\nThis release mainly addresses issues reported with the 0.7.0 release.\n\n16 pull requests were merged this release cycle.\n\n### Added\n* [[#2551]]: Introduce build_query_scalar for QueryBuilder [[@iamquang95]]\n* [[#2605]]: Implement Default for QueryBuilder [[@Xydez]]\n* [[#2616]]: feat(sqlx-core): add table function to database error [[@saiintbrisson]]\n* [[#2619]]: feat: allow opt-out of `PgHasArrayType` with `#[derive(sqlx::Type)]` [[@abonander]]\n  * TL;DR: if you're getting errors from `#[derive(sqlx::Type)]` with `#[sqlx(transparent)]`\n    regarding `PgHasArrayType` not being implemented, add `#[sqlx(no_pg_array)]` to fix.\n\n### Changed\n* [[#2566]]: improve docs about migration files [[@jnnnnn]]\n* [[#2576]]: Major Version Update clap to 4.0 [[@titaniumtraveler]]\n* [[#2597]]: Bump webpki-roots to v0.24 [[@paolobarbolini]]\n* [[#2603]]: docs(changelog): be more verbose about offline mode breaking change [[@mrl5]]\n\n### Fixed\n* [[#2553]]: Implement `Clone` for `PoolOptions` manually (#2548) [[@alilleybrinker]]\n* [[#2580]]: Update README.md now that 0.7.0 is no longer in alpha [[@saolof]]\n* [[#2585]]: Fix for Issue #2549 - cannot use feature \"rust_decimal\" without also using \"bigdecimal\" [[@deneut]]\n* [[#2586]]: Fix optional dependency on sqlx-macros [[@kitterion]]\n* [[#2593]]: Correct mention of the `tls-native-tls` in the documentation. [[@denschub]]\n* [[#2599]]: Remove incorrect CAST in test database cleanup for MySQL. [[@fd]]\n* [[#2613]]: Fix readme.md to reduce confusion about optional features (decimal->rust_decimal) [[@vabka]]\n* [[#2620]]: fix(sqlite/any): encode bool as integer [[@saiintbrisson]]\n\n[#2551]: https://github.com/launchbadge/sqlx/pull/2551\n[#2553]: https://github.com/launchbadge/sqlx/pull/2553\n[#2566]: https://github.com/launchbadge/sqlx/pull/2566\n[#2576]: https://github.com/launchbadge/sqlx/pull/2576\n[#2580]: https://github.com/launchbadge/sqlx/pull/2580\n[#2585]: https://github.com/launchbadge/sqlx/pull/2585\n[#2586]: https://github.com/launchbadge/sqlx/pull/2586\n[#2593]: https://github.com/launchbadge/sqlx/pull/2593\n[#2597]: https://github.com/launchbadge/sqlx/pull/2597\n[#2599]: https://github.com/launchbadge/sqlx/pull/2599\n[#2603]: https://github.com/launchbadge/sqlx/pull/2603\n[#2605]: https://github.com/launchbadge/sqlx/pull/2605\n[#2613]: https://github.com/launchbadge/sqlx/pull/2613\n[#2616]: https://github.com/launchbadge/sqlx/pull/2616\n[#2619]: https://github.com/launchbadge/sqlx/pull/2619\n[#2620]: https://github.com/launchbadge/sqlx/pull/2620\n\n## 0.7.0 - 2023-06-30\n\nAt least **70 pull requests** were merged this release cycle! (The exact count is muddied with pull requests for alpha\nreleases and such.) And we gained 43 new contributors! Thank you to everyone who helped make this release a reality.\n\n### Breaking\nMany revisions were made to query analysis in the SQLite driver; these are all potentially breaking changes\nas they can change the output of `sqlx::query!()` _et al_. We'd like to thank [[@tyrelr]] for their numerous PRs to\nthis area.\n\nThe MSSQL driver has been removed as it was not nearly at the same maturity level as the other drivers.\n[As previously announced][sqlx-pro], we have plans to introduce a fully featured replacement as a premium offering,\nalongside drivers for other proprietary databases, with the goal to support full-time development on SQLx. \n\nIf interested, please email your inquiry to sqlx@launchbadge.com.\n\nThe offline mode for the queries has been changed to use a separate file per `query!()` invocation,\nwhich is intended to reduce the number of conflicts when merging branches in a project that both modified queries.\nThis means that CLI flag `--merged` is no longer supported. See [[#2363]] for details and make sure that your\n`sqlx-cli` version is in sync with the `sqlx` version in your project.\n\nThe type ascription override syntax for the query macros has been deprecated,\nas parse support for it has been removed in `syn 2.0`, which we'll be upgrading to in the next breaking release. \nThis can be replaced with type overrides using casting syntax (`as`). \nSee [[#2483]] for details.\n\n* [[#1946]]: Fix compile time verification performance regression for sqlite [[@liningpan]]\n* [[#1960]]: Fix sqlite update return and order by type inference [[@tyrelr]]\n* [[#1984]]: Sqlite EXPLAIN type inference improvements [[@rongcuid]]\n* [[#2039]]: Break drivers out into separate crates, clean up some technical debt [[@abonander]]\n    * All deprecated items have been removed.\n    * The `mssql` feature and associated database driver has been deleted from the source tree. It will return as part of our planned SQLx Pro offering as a from-scratch rewrite with extra features (such as TLS) and type integrations that were previously missing.\n    * The `runtime-actix-*` features have been deleted. They were previously changed to be aliases of their `runtime-tokio-*` counterparts for backwards compatibility reasons, but their continued existence is misleading as SQLx has no special knowledge of Actix anymore.\n        * To fix, simply replace the `runtime-actix-*` feature with its `runtime-tokio-*` equivalent.\n    * The `git2` feature has been removed. This was a requested integration from a while ago that over time made less and less sense to be part of SQLx itself. We have to be careful with the crates we add to our public API as each one introduces yet another semver hazard. The expected replacement is to make `#[derive(sqlx::Type)]` useful enough that users can write wrapper types for whatever they want to use without SQLx needing to be specifically aware of it.\n    * The `Executor` impls for `Transaction` and `PoolConnection` have been deleted because they cannot exist in the new crate architecture without rewriting the `Executor` trait entirely.\n        * To fix this breakage, simply add a dereference where an `impl Executor` is expected, as they both dereference to the inner connection type which will still implement it:\n            * `&mut transaction` -> `&mut *transaction`\n            * `&mut connection` -> `&mut *connection`\n        * These cannot be blanket impls as it triggers an overflow in the compiler due to the lack of lazy normalization, and\n          the driver crates cannot provide their own impls due to the orphan rule.\n        * We're expecting to do another major refactor of traits to incorporate generic associated types (GAT).\n          This will mean another major release of SQLx but ideally most API usage will not need to change significantly, if at all.\n    * The fields of `Migrator` are now `#[doc(hidden)]` and semver-exempt; they weren't meant to be public.\n    * The `offline` feature has been removed from the `sqlx` facade crate and is enabled unconditionally as most users are expected to have enabled it anyway and disabling it doesn't seem to appreciably affect compile times.\n    * The `decimal` feature has been renamed to `rust_decimal` to match the crate it actually provides integrations for.\n    * `AnyDriver` and `AnyConnection` now require either `sqlx::any::install_drivers()` or `sqlx::any::install_default_drivers()` to be called at some point during the process' lifetime before the first connection is made, as the set of possible drivers is now determined at runtime. This was determined to be the least painful way to provide knowledge of database drivers to `Any` without them being hardcoded.\n    * The `AnyEncode` trait has been removed.\n* [[#2109]]: feat: better database errors [[@saiintbrisson]]\n* [[#2094]]: Update libsqlite3-sys to 0.25.1 [[@penberg]]\n  * Alongside this upgrade, we are now considering the linkage to `libsqlite3-sys` to be **semver-exempt**,\n    and we reserve the right to upgrade it as necessary. If you are using `libsqlite3-sys` directly or a crate that\n    links it such as `rusqlite`, you should pin the versions of both crates to avoid breakages from `cargo update`:\n```toml\n[dependencies]\nsqlx = { version = \"=0.7.0\", features = [\"sqlite\"] }\nrusqlite = \"=0.29.0\"\n```\n* [[#2132]]: fix: use owned Builder pattern for ConnectOptions [[@ar3s3ru]]\n* [[#2253]]: Sqlite describe fixes [[@tyrelr]]\n* [[#2285]]: `time`: Assume UTC when decoding a DATETIME column in sqlite [[@nstinus]]\n* [[#2363]]: [offline] Change prepare to one-file-per-query [[@cycraig]]\n* [[#2387]]: PATCH: bump libsqlite3-sys to patched version [[@grantkee]]\n* [[#2409]]: fix(#2407): respect the HaltIfNull opcode when determining nullability [[@arlyon]]\n* [[#2459]]: limit the number of instructions that can be evaluated [[@tyrelr]]\n* [[#2467]]: Add and improve sqlite describe performance benchmarks [[@tyrelr]]\n* [[#2491]]: sqlite date macro support [[@Arcayr]]\n    * Changes `OffsetDateTime` to be the first type used when deserializing a `timestamp` type.\n* [[#2496]]: Bump to libsqlite3-sys 0.26 [[@mdecimus]]\n* [[#2508]]: Sqlite analytical [[@tyrelr]]\n\n\n### Added\n* [[#1850]]: Add client SSL authentication using key-file for Postgres, MySQL and MariaDB [[@ThibsG]]\n* [[#2088]]: feat: Add set_connect_options method to Pool [[@moatra]]\n* [[#2113]]: Expose PoolOptions for reading [[@FSMaxB]]\n* [[#2115]]: Allow using complex types in `try_from` when deriving `FromRow` [[@95ulisse]]\n* [[#2116]]: [SQLite] Add option to execute `PRAGMA optimize;` on close of a connection [[@miles170]]\n* [[#2189]]: Added regexp support in sqlite [[@VictorKoenders]]\n* [[#2224]]: Add From impls for Json [[@dbeckwith]]\n* [[#2256]]: add progress handler support to sqlite [[@nbaztec]]\n* [[#2366]]: Allow ignoring attributes for deriving FromRow [[@grgi]]\n* [[#2369]]: new type support in query_as [[@0xdeafbeef]]\n* [[#2379]]: feat: add `Connection::shrink_buffers`, `PoolConnection::close` [[@abonander]]\n* [[#2400]]: fix(docs): example of `sqlx_macros_unstable` in config.toml [[@df51d]]\n* [[#2469]]: Add Simple format for Uuid for MySQL & SQLite. [[@MidasLamb]]\n* [[#2483]]: chore: add deprecation notice for type ascription use [[@saiintbrisson]]\n* [[#2506]]: add args to query builder (#2494) [[@cemoktra]]\n* [[#2554]]: Impl `AsMut` for advisory lock types (#2520) [[@alilleybrinker]]\n* [[#2559]]: Add CLI autocompletion using clap_complete [[@titaniumtraveler]]\n\n\n### Changed\n* [[#2185]]: Initial work to switch to `tracing` [[@CosmicHorrorDev]]\n* [[#2193]]: Start testing on Postgres 15 and drop Postgres 10 [[@paolobarbolini]]\n    * We reserve the right to drop support for end-of-lifed database versions [as discussed in our FAQ][faq-db-version].\n* [[#2213]]: Use `let else` statements in favor of macro [[@OverHash]]\n* [[#2365]]: Update dependencies [[@paolobarbolini]]\n* [[#2371]]: Disable rustls crate logging feature by default up to date [[@sergeiivankov]]\n* [[#2373]]: chore: Use tracing's fields to get structured logs [[@jaysonsantos]]\n* [[#2393]]: Lower default logging level for statements to Debug [[@bnoctis]]\n* [[#2445]]: Traverse symlinks when resolving migrations [[@tgeoghegan]]\n* [[#2485]]: chore(sqlx-postgres): replace `dirs` with `home` & `etcetera` [[@utkarshgupta137]]\n* [[#2515]]: Bump mac_address to 1.1.5 [[@repnop]]\n* [[#2440]]: Update rustls to 0.21, webpki-roots to 0.23 [[@SergioBenitez]]\n* [[#2563]]: Update rsa to 0.9 [[@paolobarbolini]]\n* [[#2564]]: Update bitflags to v2 [[@paolobarbolini]]\n* [[#2565]]: Bump indexmap and ahash [[@paolobarbolini]]\n* [[#2574]]: doc: make it clear that `ConnectOptions` types impl `FromStr` [[@abonander]]\n\n### Fixed\n* [[#2098]]: Fix sqlite compilation [[@cycraig]]\n* [[#2120]]: fix logical merge conflict [[@tyrelr]]\n* [[#2133]]: Postgres OID resolution query does not take into account current `search_path` [[@95ulisse]]\n* [[#2156]]: Fixed typo. [[@cdbfoster]]\n* [[#2179]]: fix: ensures recover from fail with PgCopyIn [[@andyquinterom]]\n* [[#2200]]: Run CI on *-dev branch [[@joehillen]]\n* [[#2222]]: Add context to confusing sqlx prepare parse error [[@laundmo]]\n* [[#2271]]: feat: support calling Postgres procedures with the macros [[@bgeron]]\n* [[#2282]]: Don't run EXPLAIN nullability analysis on Materialize [[@benesch]]\n* [[#2319]]: Set whoami default-features to false [[@thedodd]]\n* [[#2352]]: Preparing 0.7.0-alpha.1 release [[@abonander]]\n* [[#2355]]: Fixed the example code for `sqlx::test` [[@kenkoooo]]\n* [[#2367]]: Fix sqlx-cli create, drop, migrate [[@cycraig]]\n* [[#2376]]: fix(pool): close when last handle is dropped, extra check in `try_acquire` [[@abonander]]\n* [[#2378]]: Fix README build badge [[@dbrgn]]\n* [[#2398]]: fix(prepare): store temporary query files inside the workspace [[@aschey]]\n* [[#2402]]: fix: drop old time 0.1.44 dep [[@codahale]]\n* [[#2413]]: fix(macros-core): use of undeclared `tracked_path` [[@df51d]]\n* [[#2420]]: Enable runtime-tokio feature of sqlx when building sqlx-cli [[@paolobarbolini]]\n* [[#2453]]: in README.md, correct spelling and grammar [[@vizvasrj]]\n* [[#2454]]: fix: ensure fresh test db's aren't accidentally deleted by do_cleanup [[@phlip9]]\n* [[#2507]]: Exposing the Oid of PostgreSQL types [[@Razican]]\n* [[#2519]]: Use ::std::result::Result::Ok in output.rs [[@southball]]\n* [[#2569]]: Fix broken links to mysql error documentation [[@titaniumtraveler]]\n* [[#2570]]: Add a newline to the generated JSON files [[@nyurik]]\n* [[#2572]]: Do not panic when `PrepareOk` fails to decode [[@stepantubanov]]\n* [[#2573]]: fix(sqlite) Do not drop notify mutex guard until after condvar is triggered [[@andrewwhitehead]]\n\n[sqlx-pro]: https://github.com/launchbadge/sqlx/discussions/1616\n\n[faq-db-version]: https://github.com/launchbadge/sqlx/blob/main/FAQ.md#what-database-versions-does-sqlx-support\n\n[#1850]: https://github.com/launchbadge/sqlx/pull/1850\n[#1946]: https://github.com/launchbadge/sqlx/pull/1946\n[#1960]: https://github.com/launchbadge/sqlx/pull/1960\n[#1984]: https://github.com/launchbadge/sqlx/pull/1984\n[#2039]: https://github.com/launchbadge/sqlx/pull/2039\n[#2088]: https://github.com/launchbadge/sqlx/pull/2088\n[#2092]: https://github.com/launchbadge/sqlx/pull/2092\n[#2094]: https://github.com/launchbadge/sqlx/pull/2094\n[#2098]: https://github.com/launchbadge/sqlx/pull/2098\n[#2109]: https://github.com/launchbadge/sqlx/pull/2109\n[#2113]: https://github.com/launchbadge/sqlx/pull/2113\n[#2115]: https://github.com/launchbadge/sqlx/pull/2115\n[#2116]: https://github.com/launchbadge/sqlx/pull/2116\n[#2120]: https://github.com/launchbadge/sqlx/pull/2120\n[#2132]: https://github.com/launchbadge/sqlx/pull/2132\n[#2133]: https://github.com/launchbadge/sqlx/pull/2133\n[#2156]: https://github.com/launchbadge/sqlx/pull/2156\n[#2179]: https://github.com/launchbadge/sqlx/pull/2179\n[#2185]: https://github.com/launchbadge/sqlx/pull/2185\n[#2189]: https://github.com/launchbadge/sqlx/pull/2189\n[#2193]: https://github.com/launchbadge/sqlx/pull/2193\n[#2200]: https://github.com/launchbadge/sqlx/pull/2200\n[#2213]: https://github.com/launchbadge/sqlx/pull/2213\n[#2222]: https://github.com/launchbadge/sqlx/pull/2222\n[#2224]: https://github.com/launchbadge/sqlx/pull/2224\n[#2253]: https://github.com/launchbadge/sqlx/pull/2253\n[#2256]: https://github.com/launchbadge/sqlx/pull/2256\n[#2271]: https://github.com/launchbadge/sqlx/pull/2271\n[#2282]: https://github.com/launchbadge/sqlx/pull/2282\n[#2285]: https://github.com/launchbadge/sqlx/pull/2285\n[#2319]: https://github.com/launchbadge/sqlx/pull/2319\n[#2352]: https://github.com/launchbadge/sqlx/pull/2352\n[#2355]: https://github.com/launchbadge/sqlx/pull/2355\n[#2363]: https://github.com/launchbadge/sqlx/pull/2363\n[#2365]: https://github.com/launchbadge/sqlx/pull/2365\n[#2366]: https://github.com/launchbadge/sqlx/pull/2366\n[#2367]: https://github.com/launchbadge/sqlx/pull/2367\n[#2369]: https://github.com/launchbadge/sqlx/pull/2369\n[#2371]: https://github.com/launchbadge/sqlx/pull/2371\n[#2373]: https://github.com/launchbadge/sqlx/pull/2373\n[#2376]: https://github.com/launchbadge/sqlx/pull/2376\n[#2378]: https://github.com/launchbadge/sqlx/pull/2378\n[#2379]: https://github.com/launchbadge/sqlx/pull/2379\n[#2387]: https://github.com/launchbadge/sqlx/pull/2387\n[#2393]: https://github.com/launchbadge/sqlx/pull/2393\n[#2398]: https://github.com/launchbadge/sqlx/pull/2398\n[#2400]: https://github.com/launchbadge/sqlx/pull/2400\n[#2402]: https://github.com/launchbadge/sqlx/pull/2402\n[#2408]: https://github.com/launchbadge/sqlx/pull/2408\n[#2409]: https://github.com/launchbadge/sqlx/pull/2409\n[#2413]: https://github.com/launchbadge/sqlx/pull/2413\n[#2420]: https://github.com/launchbadge/sqlx/pull/2420\n[#2440]: https://github.com/launchbadge/sqlx/pull/2440\n[#2445]: https://github.com/launchbadge/sqlx/pull/2445\n[#2453]: https://github.com/launchbadge/sqlx/pull/2453\n[#2454]: https://github.com/launchbadge/sqlx/pull/2454\n[#2459]: https://github.com/launchbadge/sqlx/pull/2459\n[#2467]: https://github.com/launchbadge/sqlx/pull/2467\n[#2469]: https://github.com/launchbadge/sqlx/pull/2469\n[#2483]: https://github.com/launchbadge/sqlx/pull/2483\n[#2485]: https://github.com/launchbadge/sqlx/pull/2485\n[#2491]: https://github.com/launchbadge/sqlx/pull/2491\n[#2496]: https://github.com/launchbadge/sqlx/pull/2496\n[#2506]: https://github.com/launchbadge/sqlx/pull/2506\n[#2507]: https://github.com/launchbadge/sqlx/pull/2507\n[#2508]: https://github.com/launchbadge/sqlx/pull/2508\n[#2515]: https://github.com/launchbadge/sqlx/pull/2515\n[#2519]: https://github.com/launchbadge/sqlx/pull/2519\n[#2554]: https://github.com/launchbadge/sqlx/pull/2554\n[#2559]: https://github.com/launchbadge/sqlx/pull/2559\n[#2563]: https://github.com/launchbadge/sqlx/pull/2563\n[#2564]: https://github.com/launchbadge/sqlx/pull/2564\n[#2565]: https://github.com/launchbadge/sqlx/pull/2565\n[#2569]: https://github.com/launchbadge/sqlx/pull/2569\n[#2570]: https://github.com/launchbadge/sqlx/pull/2570\n[#2572]: https://github.com/launchbadge/sqlx/pull/2572\n[#2573]: https://github.com/launchbadge/sqlx/pull/2573\n[#2574]: https://github.com/launchbadge/sqlx/pull/2574\n\n## 0.6.3 - 2023-03-21\n\nThis is a hotfix to address the breakage caused by transitive dependencies upgrading to `syn = \"2\"`.\n\nWe set `default-features = false` for our dependency on `syn = \"1\"` to be good crates.io citizens, \nbut failed to enable the features we actually used, which went undetected because we transitively depended on\n`syn` with the default features enabled through other crates, \nand so they were also on for us because features are additive.\n\nWhen those other dependencies upgraded to `syn = \"2\"` it was no longer enabling those features for us, \nand so compilation broke for projects that don't also depend on `syn = \"1\"`, transitively or otherwise.\n\nThere is no PR for this fix as there was no longer a dedicated development branch for `0.6`, \nbut discussion can be found in [issue #2418].\n\nAs of this release, the `0.7` release is in alpha and so development is no longer occurring against `0.6`.\nThis fix will be forward-ported to `0.7`.\n\n[issue #2418]: https://github.com/launchbadge/sqlx/issues/2418\n\n## 0.6.2 - 2022-09-14\n\n[25 pull requests][0.6.2-prs] were merged this release cycle.\n\n### Added\n* [[#1081]]: Add `try_from` attribute for `FromRow` derive [[@zzhengzhuo]]\n    * Exemplifies \"out of sight, out of mind.\" It's surprisingly easy to forget about PRs when they get pushed onto\n      the second page. We'll be sure to clean out the backlog for 0.7.0.\n* [[#2014]]: Support additional SQLCipher options in SQLite driver. [[@szymek156]]\n* [[#2052]]: Add issue templates [[@abonander]]\n* [[#2053]]: Add documentation for `IpAddr` support in Postgres [[@rakshith-ravi]]\n* [[#2062]]: Add extension support for SQLite [[@bradfier]]\n* [[#2063]]: customizable db locking during migration [[@fuzzbuck]]\n\n### Changed\n* [[#2025]]: Bump sqlformat to 2.0 [[@NSMustache]]\n* [[#2056]]: chore: Switch to sha1 crate [[@stoically]]\n* [[#2071]]: Use cargo check consistently in `prepare` [[@cycraig]]\n\n### Fixed\n* [[#1991]]: Ensure migration progress is not lost for Postgres, MySQL and SQLite. [[@crepererum]]\n* [[#2023]]: Fix expansion of `#[sqlx(flatten)]` for `FromRow` derive [[@RustyYato]]\n* [[#2028]]: Use fully qualified path when forwarding to `#[test]` from `#[sqlx::test]` [[@alexander-jackson]]\n* [[#2040]]: Fix typo in `FromRow` docs [[@zlidner]]\n* [[#2046]]: added flag for PIPES_AS_CONCAT connection setting for MySQL to fix #2034 [[@marcustut]]\n* [[#2055]]: Use unlock notify also on `sqlite3_exec`  [[@madadam]]\n* [[#2057]]: Make begin,commit,rollback cancel-safe in sqlite  [[@madadam]]\n* [[#2058]]: fix typo in documentation [[@lovasoa]]\n* [[#2067]]: fix(docs): close code block in query_builder.rs [[@abonander]]\n* [[#2069]]: Fix `prepare` race condition in workspaces [[@cycraig]]\\\n    * NOTE: this changes the directory structure under `target/` that `cargo sqlx prepare` depends on.\n      If you use offline mode in your workflow, please rerun `cargo install sqlx-cli` to upgrade.\n* [[#2072]]: SqliteConnectOptions typo [[@fasterthanlime]]\n* [[#2074]]: fix: mssql uses unsigned for tinyint instead of signed [[@he4d]]\n* [[#2081]]: close unnamed portal after each executed extended query [[@DXist]]\n* [[#2086]]: PgHasArrayType for transparent types fix. [[@Wopple]]\n    * NOTE: this is a breaking change and has been postponed to 0.7.0.\n* [[#2089]]: fix: Remove default chrono dep on time for sqlx-cli [[@TravisWhitehead]]\n* [[#2091]]: Sqlite explain plan log efficiency [[@tyrelr]]\n\n[0.6.2-prs]: https://github.com/launchbadge/sqlx/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-08-04..2022-09-14+\n\n[#1081]: https://github.com/launchbadge/sqlx/pull/1081\n[#1991]: https://github.com/launchbadge/sqlx/pull/1991\n[#2014]: https://github.com/launchbadge/sqlx/pull/2014\n[#2023]: https://github.com/launchbadge/sqlx/pull/2023\n[#2025]: https://github.com/launchbadge/sqlx/pull/2025\n[#2028]: https://github.com/launchbadge/sqlx/pull/2028\n[#2040]: https://github.com/launchbadge/sqlx/pull/2040\n[#2046]: https://github.com/launchbadge/sqlx/pull/2046\n[#2052]: https://github.com/launchbadge/sqlx/pull/2052\n[#2053]: https://github.com/launchbadge/sqlx/pull/2053\n[#2055]: https://github.com/launchbadge/sqlx/pull/2055\n[#2056]: https://github.com/launchbadge/sqlx/pull/2056\n[#2057]: https://github.com/launchbadge/sqlx/pull/2057\n[#2058]: https://github.com/launchbadge/sqlx/pull/2058\n[#2062]: https://github.com/launchbadge/sqlx/pull/2062\n[#2063]: https://github.com/launchbadge/sqlx/pull/2063\n[#2067]: https://github.com/launchbadge/sqlx/pull/2067\n[#2069]: https://github.com/launchbadge/sqlx/pull/2069\n[#2071]: https://github.com/launchbadge/sqlx/pull/2071\n[#2072]: https://github.com/launchbadge/sqlx/pull/2072\n[#2074]: https://github.com/launchbadge/sqlx/pull/2074\n[#2081]: https://github.com/launchbadge/sqlx/pull/2081\n[#2086]: https://github.com/launchbadge/sqlx/pull/2086\n[#2089]: https://github.com/launchbadge/sqlx/pull/2089\n[#2091]: https://github.com/launchbadge/sqlx/pull/2091\n\n## 0.6.1 - 2022-08-02\n\n[33 pull requests][0.6.1-prs] were merged this release cycle.\n\n### Added\n* [[#1495]]: Add example for manual implementation of the `FromRow` trait [[@Erik1000]]\n* [[#1822]]: (Postgres) Add support for `std::net::IpAddr` [[@meh]]\n    * Decoding returns an error if the `INET` value in Postgres is a prefix and not a full address\n      (`/32` for IPv4, `/128` for IPv6).\n* [[#1865]]: Add SQLite support for the `time` crate [[@johnbcodes]]\n* [[#1902]]: Add an example of how to use `QueryBuilder::separated()` [[@sbeckeriv]]\n* [[#1917]]: Added docs for `sqlx::types::Json` [[@jayy-lmao]]\n* [[#1919]]: Implement `Clone` for `PoolOptions` [[@Thomasdezeeuw]]\n* [[#1953]]: Support Rust arrays in Postgres [[@e00E]]\n* [[#1954]]: Add `push_tuples` for `QueryBuilder` [[@0xdeafbeef]]\n* [[#1959]]: Support `#[sqlx(flatten)]` attribute in `FromRow` [[@TheoOiry]]\n* [[#1967]]: Add example with external query files [[@JoeyMckenzie]]\n* [[#1985]]: Add `query_builder::Separated::push_bind_unseparated()` [[@0xdeafbeef]]\n* [[#2001]]: Implement `#[sqlx::test]` for general use\n    * Includes automatic database management, migration and fixture application.\n    * Drops support for end-of-lifed database versions, see PR for details.\n* [[#2005]]: `QueryBuilder` improvements [[@abonander]]\n    * Raw SQL getters, new method to build `QueryAs` instead of `Query`.\n* [[#2013]]: (SQLite) Allow VFS to be set as URL query parameter [[@liningpan]] \n\n### Changed\n* [[#1679]]: refactor: alias actix-* features to their equivalent tokio-* features [[@robjtede]]\n* [[#1906]]: replaced all uses of \"uri\" to \"url\" [[@RomainStorai]]\n* [[#1965]]: SQLite improvements [[@abonander]]\n* [[#1977]]: Docs: clarify relationship between `query_as!()` and `FromRow` [[@abonander]]\n* [[#2003]]: Replace `dotenv` with `dotenvy` [[@abonander]]\n\n### Fixed\n* [[#1802]]: Try avoiding a full clean in `cargo sqlx prepare --merged` [[@LovecraftianHorror]]\n* [[#1848]]: Fix type info access in `Any` database driver [[@raviqqe]]\n* [[#1910]]: Set `CARGO_TARGET_DIR` when compiling queries [[@sedrik]]\n* [[#1915]]: Pool: fix panic when using callbacks [[@abonander]]\n* [[#1930]]: Don't cache SQLite connection for macros [[@LovecraftianHorror]]\n* [[#1948]]: Fix panic in Postgres `BYTEA` decode [[@e00E]]\n* [[#1955]]: Fix typo in FAQ [[@kenkoooo]]\n* [[#1968]]: (Postgres) don't panic if `S` or `V` notice fields are not UTF-8 [[@abonander]]\n* [[#1969]]: Fix sqlx-cli build [[@ivan]]\n* [[#1974]]: Use the `rust-cache` action for CI [[@abonander]]\n* [[#1988]]: Agree on a single default runtime for the whole workspace [[@crepererum]]\n* [[#1989]]: Fix panics in `PgListener` [[@crepererum]]\n* [[#1990]]: Switch `master` to `main` in docs [[@crepererum]]\n    * The change had already been made in the repo, the docs were out of date.\n* [[#1993]]: Update versions in quickstart examples in README [[@UramnOIL]]\n\n[0.6.1-prs]: https://github.com/launchbadge/sqlx/pulls?page=1&q=is%3Apr+is%3Aclosed+merged%3A2022-06-17..2022-08-02\n\n[#1906]: https://github.com/launchbadge/sqlx/pull/1906\n[#1495]: https://github.com/launchbadge/sqlx/pull/1495\n[#1679]: https://github.com/launchbadge/sqlx/pull/1679\n[#1802]: https://github.com/launchbadge/sqlx/pull/1802\n[#1822]: https://github.com/launchbadge/sqlx/pull/1822\n[#1848]: https://github.com/launchbadge/sqlx/pull/1848\n[#1865]: https://github.com/launchbadge/sqlx/pull/1865\n[#1902]: https://github.com/launchbadge/sqlx/pull/1902\n[#1910]: https://github.com/launchbadge/sqlx/pull/1910\n[#1915]: https://github.com/launchbadge/sqlx/pull/1915\n[#1917]: https://github.com/launchbadge/sqlx/pull/1917\n[#1919]: https://github.com/launchbadge/sqlx/pull/1919\n[#1930]: https://github.com/launchbadge/sqlx/pull/1930\n[#1948]: https://github.com/launchbadge/sqlx/pull/1948\n[#1953]: https://github.com/launchbadge/sqlx/pull/1953\n[#1954]: https://github.com/launchbadge/sqlx/pull/1954\n[#1955]: https://github.com/launchbadge/sqlx/pull/1955\n[#1959]: https://github.com/launchbadge/sqlx/pull/1959\n[#1965]: https://github.com/launchbadge/sqlx/pull/1965\n[#1967]: https://github.com/launchbadge/sqlx/pull/1967\n[#1968]: https://github.com/launchbadge/sqlx/pull/1968\n[#1969]: https://github.com/launchbadge/sqlx/pull/1969\n[#1974]: https://github.com/launchbadge/sqlx/pull/1974\n[#1977]: https://github.com/launchbadge/sqlx/pull/1977\n[#1985]: https://github.com/launchbadge/sqlx/pull/1985\n[#1988]: https://github.com/launchbadge/sqlx/pull/1988\n[#1989]: https://github.com/launchbadge/sqlx/pull/1989\n[#1990]: https://github.com/launchbadge/sqlx/pull/1990\n[#1993]: https://github.com/launchbadge/sqlx/pull/1993\n[#2001]: https://github.com/launchbadge/sqlx/pull/2001\n[#2003]: https://github.com/launchbadge/sqlx/pull/2003\n[#2005]: https://github.com/launchbadge/sqlx/pull/2005\n[#2013]: https://github.com/launchbadge/sqlx/pull/2013\n\n## 0.6.0 - 2022-06-16\n\nThis release marks the end of the 0.5.x series of releases and contains a number of breaking changes,\nmainly to do with backwards-incompatible dependency upgrades. \n\nAs we foresee many more of these in the future, we [surveyed the community] on how to handle this;\nthe consensus appears to be \"just release breaking changes more often.\" \n\nAs such, we expect the 0.6.x release series to be a shorter one.\n\n[39 pull requests(!)][0.6.0-prs] (not counting \"prepare 0.5.12 release\", of course) were merged this release cycle.\n\n### Breaking\n* [[#1384]]: (Postgres) Move `server_version_num` from trait to inherent impl [[@AtkinsChang]]\n* [[#1426]]: Bump `ipnetwork` to 0.19 [[@paolobarbolini]]\n* [[#1455]]: Upgrade `time` to 0.3 [[@paolobarbolini]]\n* [[#1505]]: Upgrade `rustls` to 0.20 [[@paolobarbolini]]\n    * Fortunately, future upgrades should not be breaking as `webpki` is no longer exposed in the API.\n* [[#1529]]: Upgrade `bigdecimal` to 0.3 [[@e00E]]\n* [[#1602]]: postgres: use `Oid` everywhere instead of `u32` [[@paolobarbolini]]\n    * This drops the `Type`, `Decode`, `Encode` impls for `u32` for Postgres as it was misleading.\n      Postgres doesn't support unsigned ints without using an extension. These impls were decoding Postgres `OID`s\n      as bare `u32`s without any context (and trying to bind a `u32` to a query would produce an `OID` value in SQL).\n      This changes that to use a newtype instead, for clarity.\n* [[#1612]]: Make all `ConnectOptions` types cloneable [[@05storm26]]\n* [[#1618]]: SQLite `chrono::DateTime<FixedOffset>` timezone fix [[@05storm26]]\n    * `DateTime<FixedOffset>` will be stored in SQLite with the correct timezone instead of always in UTC.\n      This was flagged as a \"potentially breaking change\" since it changes how dates are sent to SQLite.\n* [[#1733]]: Update `git2` to 0.14 [[@joshtriplett]]\n* [[#1734]]: Make `PgLTree::push()` infallible and take `PgLTreeLabel` directly [[@sebpuetz]]\n* [[#1785]]: Fix Rust type for SQLite `REAL` [[@pruthvikar]]\n    * Makes the macros always map a `REAL` column to `f64` instead of `f32` as SQLite uses **only** 64-bit floats.\n* [[#1816]]: Improve SQLite support for sub-queries and CTEs [[@tyrelr]]\n    * This likely will change the generated code for some invocations `sqlx::query!()` with SQLite.\n* [[#1821]]: Update `uuid` crate to v1 [[@paolobarbolini]]\n* [[#1901]]: Pool fixes and breaking changes [[@abonander]]\n    * Renamed `PoolOptions::connect_timeout` to `acquire_timeout` for clarity.\n    * Changed the expected signatures for `PoolOptions::after_connect`, `before_acquire`, `after_release`\n    * Changed the signature for `Pool::close()` slightly\n        * Now eagerly starts the pool closing, `.await`ing is only necessary if you want to ensure a graceful shutdown.\n    * Deleted `PoolConnection::release()` which was previously deprecated in favor of `PoolConnection::detach()`.\n    * Fixed connections getting leaked even when calling `.close()`.\n* [[#1748]]: Derive `PgHasArrayType` for `#[sqlx(transparent)]` types [[@carols10cents]]\n    * This change was released with 0.5.12 but [we didn't realize it was a breaking change] at the time.  \n      It was reverted in 0.5.13 and postponed until this release.\n\n### Added\n* [[#1843]]: Expose some useful methods on `PgValueRef` [[@mfreeborn]]\n* [[#1889]]: SQLx-CLI: add `--connect-timeout` [[@abonander]]\n    * Adds a default 10 second connection timeout to all commands.\n* [[#1890]]: Added test for mssql LoginAck [[@walf443]]\n* [[#1891]]: Added test for mssql ProtocolInfo [[@walf443]]\n* [[#1892]]: Added test for mssql ReturnValue [[@walf443]]\n* [[#1895]]: Add support for `i16` to `Any` driver [[@EthanYuan]]\n* [[#1897]]: Expose `ConnectOptions` and `PoolOptions` on `Pool` and database name on `PgConnectOptions` [[@Nukesor]]\n\n### Changed\n* [[#1782]]: Reuse a cached DB connection instead of always opening a new one for `sqlx-macros` [[@LovecraftianHorror]]\n* [[#1807]]: Bump remaining dependencies [[@paolobarbolini]]\n* [[#1808]]: Update to edition 2021 [[@paolobarbolini]]\n    * Note that while SQLx [does not officially track an MSRV] and only officially supports the latest stable Rust, \n      this effectively places a lower bound of 1.56.0 on the range of versions it may work with.\n* [[#1823]]: (sqlx-macros) Ignore deps when getting metadata for workspace root [[@LovecraftianHorror]]\n* [[#1831]]: Update `crc` to 3.0 [[@djc]]\n* [[#1887]]: query_as: don't stop stream after decoding error [[@lovasoa]]\n\n### Fixed\n* [[#1814]]: SQLx-cli README: move `Usage` to the same level as `Install` [[@tobymurray]]\n* [[#1815]]: SQLx-cli README: reword \"building in offline mode\" [[@tobymurray]]\n* [[#1818]]: Trim `[]` from host string before passing to TcpStream [[@smonv]]\n    * This fixes handling of database URLs with IPv6 hosts.\n* [[#1842]]: Fix usage of `serde_json` in macros [[@mfreeborn]]\n* [[#1855]]: Postgres: fix panics on unknown type OID when decoding [[@demurgos]] \n* [[#1856]]: MySQL: support COLLATE_UTF8MB4_0900_AI_CI [[@scottwey]]\n    * Fixes the MySQL driver thinking text columns are bytestring columns when querying against a Planetscale DB.\n* [[#1861]]: MySQL: avoid panic when streaming packets are empty [[@e-rhodes]]\n* [[#1863]]: Fix nullability check for inner joins in Postgres [[@OskarPersson]]\n* [[#1881]]: Fix `field is never read` warnings on Postgres test [[@walf443]]\n* [[#1882]]: Fix `unused result must be used` warnings [[@walf443]]\n* [[#1888]]: Fix migration checksum comparison during `sqlx migrate info` [[@mdtusz]]\n* [[#1894]]: Fix typos [[@kianmeng]]\n\n[surveyed the community]: https://github.com/launchbadge/sqlx/issues/1796\n[0.6.0-prs]: https://github.com/launchbadge/sqlx/pulls?page=2&q=is%3Apr+is%3Amerged+merged%3A2022-04-14..2022-06-16\n[does not officially track an MSRV]: /FAQ.md#what-versions-of-rust-does-sqlx-support-what-is-sqlxs-msrv\n[we didn't realize it was a breaking change]: https://github.com/launchbadge/sqlx/pull/1800#issuecomment-1099898932\n\n[#1384]: https://github.com/launchbadge/sqlx/pull/1384\n[#1426]: https://github.com/launchbadge/sqlx/pull/1426\n[#1455]: https://github.com/launchbadge/sqlx/pull/1455\n[#1505]: https://github.com/launchbadge/sqlx/pull/1505\n[#1529]: https://github.com/launchbadge/sqlx/pull/1529\n[#1602]: https://github.com/launchbadge/sqlx/pull/1602\n[#1612]: https://github.com/launchbadge/sqlx/pull/1612\n[#1618]: https://github.com/launchbadge/sqlx/pull/1618\n[#1733]: https://github.com/launchbadge/sqlx/pull/1733\n[#1734]: https://github.com/launchbadge/sqlx/pull/1734\n[#1782]: https://github.com/launchbadge/sqlx/pull/1782\n[#1785]: https://github.com/launchbadge/sqlx/pull/1785\n[#1807]: https://github.com/launchbadge/sqlx/pull/1807\n[#1808]: https://github.com/launchbadge/sqlx/pull/1808\n[#1814]: https://github.com/launchbadge/sqlx/pull/1814\n[#1815]: https://github.com/launchbadge/sqlx/pull/1815\n[#1816]: https://github.com/launchbadge/sqlx/pull/1816\n[#1818]: https://github.com/launchbadge/sqlx/pull/1818\n[#1821]: https://github.com/launchbadge/sqlx/pull/1821\n[#1823]: https://github.com/launchbadge/sqlx/pull/1823\n[#1831]: https://github.com/launchbadge/sqlx/pull/1831\n[#1842]: https://github.com/launchbadge/sqlx/pull/1842\n[#1843]: https://github.com/launchbadge/sqlx/pull/1843\n[#1855]: https://github.com/launchbadge/sqlx/pull/1855\n[#1856]: https://github.com/launchbadge/sqlx/pull/1856\n[#1861]: https://github.com/launchbadge/sqlx/pull/1861\n[#1863]: https://github.com/launchbadge/sqlx/pull/1863\n[#1881]: https://github.com/launchbadge/sqlx/pull/1881\n[#1882]: https://github.com/launchbadge/sqlx/pull/1882\n[#1887]: https://github.com/launchbadge/sqlx/pull/1887\n[#1888]: https://github.com/launchbadge/sqlx/pull/1888\n[#1889]: https://github.com/launchbadge/sqlx/pull/1889\n[#1890]: https://github.com/launchbadge/sqlx/pull/1890\n[#1891]: https://github.com/launchbadge/sqlx/pull/1891\n[#1892]: https://github.com/launchbadge/sqlx/pull/1892\n[#1894]: https://github.com/launchbadge/sqlx/pull/1894\n[#1895]: https://github.com/launchbadge/sqlx/pull/1895\n[#1897]: https://github.com/launchbadge/sqlx/pull/1897\n[#1901]: https://github.com/launchbadge/sqlx/pull/1901\n\n## 0.5.13 - 2022-04-15\n\nThis is a hotfix that reverts [#1748] as that was an accidental breaking change:  \nthe generated `PgHasArrayType` impl conflicts with manual impls of the trait.  \nThis change will have to wait for 0.6.0.\n\n## 0.5.12 - 2022-04-13 (Yanked; use 0.5.13)\n[27 pull requests][0.5.12-prs] were merged this release cycle.\n\n### Added\n* [[#1641]]: Postgres: Convenient wrapper for advisory locks [[@abonander]]\n* [[#1675]]: Add function to undo migrations [[@jdrouet]]\n* [[#1722]]: Postgres: implement `PgHasArrayType` for `serde_json::{Value, RawValue}` [[@abreis]]\n* [[#1736]]: Derive `Clone` for `MySqlArguments` and `MssqlArguments` [[@0xdeafbeef]]\n* [[#1748]]: Derive `PgHasArrayType` for `#[sqlx(transparent)]` types [[@carols10cents]]\n* [[#1754]]: Include affected rows alongside returned rows in query logging [[@david-mcgillicuddy-moixa]]\n* [[#1757]]: Implement `Type` for `Cow<str>` for MySQL, MSSQL and SQLite [[@ipetkov]]\n* [[#1769]]: sqlx-cli: add `--source` to migration subcommands [[@pedromfedricci]]\n* [[#1774]]: Postgres: make `extra_float_digits` settable [[@abonander]]\n    * Can be set to `None` for Postgres or third-party database servers that don't support the option.\n* [[#1776]]: Implement close-event notification for Pool [[@abonander]]\n    * Also fixes `PgListener` preventing `Pool::close()` from resolving.\n* [[#1780]]: Implement query builder [[@crajcan]]\n    * See also [[#1790]]: Document and expand query builder [[@abonander]]\n* [[#1781]]: Postgres: support `NUMERIC[]` using `decimal` feature [[@tm-drtina]]\n* [[#1784]]: SQLite: add `FromStr`, `Copy`, `PartialEq`, `Eq` impls for options enums [[@andrewwhitehead]]\n\n### Changed\n* [[#1625]]: Update RustCrypto crates [[@paolobarbolini]]\n* [[#1725]]: Update `heck` to 0.4 [[@paolobarbolini]]\n* [[#1738]]: Update `regex` [[@Dylan-DPC]]\n* [[#1763]]: SQLite: update `libsqlite3-sys` [[@espindola]]\n\n\n### Fixed\n* [[#1719]]: Fix a link in `query!()` docs [[@vbmade2000]]\n* [[#1731]]: Postgres: fix option passing logic [[@liushuyu]]\n* [[#1735]]: sqlx-cli: pass `DATABASE_URL` to command spawned in `prepare` [[@LovecraftianHorror]]\n* [[#1741]]: Postgres: fix typo in `TSTZRANGE` [[@mgrachev]]\n* [[#1761]]: Fix link from `QueryAs` to `query_as()` in docs [[@mgrachev]]\n* [[#1786]]: MySQL: silence compile warnings for unused fields [[@andrewwhitehead]]\n* [[#1789]]: SQLite: fix left-joins breaking `query!()` macros [[@tyrelr]]\n* [[#1791]]: Postgres: fix newline parsing of `.pgpass` files [[@SebastienGllmt]]\n* [[#1799]]: `PoolConnection`: don't leak connection permit if drop task fails to run [[@abonander]]\n\n[#1625]: https://github.com/launchbadge/sqlx/pull/1625\n[#1641]: https://github.com/launchbadge/sqlx/pull/1641\n[#1675]: https://github.com/launchbadge/sqlx/pull/1675\n[#1719]: https://github.com/launchbadge/sqlx/pull/1719\n[#1722]: https://github.com/launchbadge/sqlx/pull/1722\n[#1725]: https://github.com/launchbadge/sqlx/pull/1725\n[#1731]: https://github.com/launchbadge/sqlx/pull/1731\n[#1735]: https://github.com/launchbadge/sqlx/pull/1735\n[#1736]: https://github.com/launchbadge/sqlx/pull/1736\n[#1738]: https://github.com/launchbadge/sqlx/pull/1738\n[#1741]: https://github.com/launchbadge/sqlx/pull/1741\n[#1748]: https://github.com/launchbadge/sqlx/pull/1748\n[#1754]: https://github.com/launchbadge/sqlx/pull/1754\n[#1757]: https://github.com/launchbadge/sqlx/pull/1757\n[#1761]: https://github.com/launchbadge/sqlx/pull/1761\n[#1763]: https://github.com/launchbadge/sqlx/pull/1763\n[#1769]: https://github.com/launchbadge/sqlx/pull/1769\n[#1774]: https://github.com/launchbadge/sqlx/pull/1774\n[#1776]: https://github.com/launchbadge/sqlx/pull/1776\n[#1780]: https://github.com/launchbadge/sqlx/pull/1780\n[#1781]: https://github.com/launchbadge/sqlx/pull/1781\n[#1784]: https://github.com/launchbadge/sqlx/pull/1784\n[#1786]: https://github.com/launchbadge/sqlx/pull/1786\n[#1789]: https://github.com/launchbadge/sqlx/pull/1789\n[#1790]: https://github.com/launchbadge/sqlx/pull/1790\n[#1791]: https://github.com/launchbadge/sqlx/pull/1791\n[#1799]: https://github.com/launchbadge/sqlx/pull/1799\n\n[0.5.12-prs]: https://github.com/launchbadge/sqlx/pulls?q=is%3Apr+is%3Amerged+merged%3A2022-02-19..2022-04-13\n\n## 0.5.11 - 2022-02-17\n[20 pull requests][0.5.11-prs] were merged this release cycle.\n\n### Added\n* [[#1610]]: Allow converting `AnyConnectOptions` to a specific `ConnectOptions` [[@05storm26]]\n* [[#1652]]: Implement `From` for `AnyConnection` [[@genusistimelord]]\n* [[#1658]]: Handle `SQLITE_LOCKED` [[@madadam]]\n* [[#1665]]: Document offline mode usage with feature flags [[@sedrik]]\n* [[#1680]]: Show checksum mismatches in `sqlx migrate info` [[@ifn3]]\n* [[#1685]]: Add tip for setting `opt-level` for `sqlx-macros` [[@LovecraftianHorror]]\n* [[#1687]]: Docs: `Acquire` examples and alternative [[@stoically]]\n* [[#1696]]: Postgres: support for `ltree` [[@cemoktra]]\n* [[#1710]]: Postgres: support for `lquery` [[@cemoktra]]\n\n### Changed\n* [[#1605]]: Remove unused dependencies [[@paolobarbolini]]\n* [[#1606]]: Add target context to Postgres `NOTICE` logs [[@dbeckwith]]\n* [[#1684]]: Macros: Cache parsed `sqlx-data.json` instead of reparsing [[@LovecraftianHorror]]\n\n### Fixed\n* [[#1608]]: Drop worker shared state in shutdown (SQLite) [[@andrewwhitehead]]\n* [[#1619]]: Docs(macros): remove sentences banning usage of `as _` [[@k-jun]]\n* [[#1626]]: Simplify `cargo-sqlx` command-line definition [[@tranzystorek-io]]\n* [[#1636]]: Fix and extend Postgres transaction example [[@taladar]]\n* [[#1657]]: Fix typo in macro docs [[@p9s]]\n* [[#1661]]: Fix binding `Option<T>` for `Any` driver [[@ArGGu]]\n* [[#1667]]: MySQL: Avoid panicking if packet is empty [[@nappa85]]\n* [[#1692]]: Postgres: Fix power calculation when encoding `BigDecimal` into `NUMERIC` [[@VersBinarii]]\n\nAdditionally, we have introduced two mitigations for [the issue of the cyclic dependency on `ahash`][aHash#95]: \n\n* We re-downgraded our version requirement on `indexmap` from `1.7.0` back to `1.6.2` so users can pin it to that\n  version [as recommended in aHash#95][ahash-fix]. \n  * [This was regressed accidentally during a sweeping dependency upgrade before the last release][indexmap-regression],\n    sorry about that.\n* Thanks to the work of [@LovecraftianHorror] in [#1684], we no longer require the `preserve_order` feature of\n  `serde_json` which gives users another place to break the cycle by simply not enabling that feature. \n  * This may introduce extra churn in Git diffs for `sqlx-data.json`, however. If this is an issue for you but \n    the dependency cycle isn't, you can re-enable the `preserve_order` feature:\n  ```toml\n  [dependencies]\n  serde_json = { version = \"1\", features = [\"preserve_order\"] }\n  ```\n\n[aHash#95]: https://github.com/tkaitchuck/aHash/issues/95\n[ahash-fix]: https://github.com/tkaitchuck/aHash/issues/95#issuecomment-874150078\n[indexmap-regression]: https://github.com/launchbadge/sqlx/pull/1603#issuecomment-1010827637\n\n[#1605]: https://github.com/launchbadge/sqlx/pull/1605\n[#1606]: https://github.com/launchbadge/sqlx/pull/1606\n[#1608]: https://github.com/launchbadge/sqlx/pull/1608\n[#1610]: https://github.com/launchbadge/sqlx/pull/1610\n[#1619]: https://github.com/launchbadge/sqlx/pull/1619\n[#1626]: https://github.com/launchbadge/sqlx/pull/1626\n[#1636]: https://github.com/launchbadge/sqlx/pull/1636\n[#1652]: https://github.com/launchbadge/sqlx/pull/1652\n[#1657]: https://github.com/launchbadge/sqlx/pull/1657\n[#1658]: https://github.com/launchbadge/sqlx/pull/1658\n[#1661]: https://github.com/launchbadge/sqlx/pull/1661\n[#1665]: https://github.com/launchbadge/sqlx/pull/1665\n[#1667]: https://github.com/launchbadge/sqlx/pull/1667\n[#1680]: https://github.com/launchbadge/sqlx/pull/1680\n[#1684]: https://github.com/launchbadge/sqlx/pull/1684\n[#1685]: https://github.com/launchbadge/sqlx/pull/1685\n[#1687]: https://github.com/launchbadge/sqlx/pull/1687\n[#1692]: https://github.com/launchbadge/sqlx/pull/1692\n[#1696]: https://github.com/launchbadge/sqlx/pull/1696\n[#1710]: https://github.com/launchbadge/sqlx/pull/1710\n\n[0.5.11-prs]: https://github.com/launchbadge/sqlx/pulls?q=is%3Apr+is%3Amerged+merged%3A2021-12-30..2022-02-17\n\n## 0.5.10 - 2021-12-29\n[A whopping 31 pull requests][0.5.10-prs] were merged this release cycle!\n\nAccording to this changelog, we saw 18 new contributors! However, some of these folks may have missed getting\nmentioned in previous entries since we only listed highlights. To avoid anyone feeling left out, I put in the effort\nthis time and tried to list every single one here.\n\n### Added\n* [[#1228]]: Add `Pool::any_kind()` [[@nitnelave]]\n* [[#1343]]: Add `Encode/Decode` impl for `Cow<'_, str>` [[@Drevoed]]\n* [[#1474]]: Derive `Clone`, `Copy` for `AnyKind` [[@yuyawk]]\n* [[#1497]]: Update FAQ to explain how to configure docs.rs to build a project using SQLx [[@russweas]]\n* [[#1498]]: Add description of migration file structure to `migrate!()` docs [[@zbigniewzolnierowicz]]\n* [[#1508]]: Add `.persistent(bool)` to `QueryAs`, `QueryScalar` [[@akiradeveloper]]\n* [[#1514]]: Add support for serialized threading mode to SQLite [[@LLBlumire]]\n* [[#1523]]: Allow `rust_decimal::Decimal` in `PgRange` [[@meh]]\n* [[#1539]]: Support `PGOPTIONS` and adding custom configuration options in `PgConnectOptions` [[@liushuyu]]\n* [[#1562]]: Re-export `either::Either` used by `Executor::fetch_many()` [[@DoumanAsh]]\n* [[#1584]]: Add feature to use RusTLS instead of `native-tls` for `sqlx-cli` [[@SonicZentropy]]\n* [[#1592]]: Add `AnyConnection::kind()` [[@05storm26]]\n\n### Changes\n* [[#1385]]: Rewrite Postgres array handling to reduce boilerplate and allow custom types [[@jplatte]]\n* [[#1479]]: Remove outdated mention of `runtime-async-std-native-tls` as the default runtime in README.md [[@yerke]]\n* [[#1526]]: Revise `Pool` docs in a couple places [[@abonander]]\n* [[#1535]]: Bump `libsqlite-sys` to `0.23.1` [[@nitsky]]\n* [[#1551]]: SQLite: make worker thread responsible for all FFI calls [[@abonander]]\n    * If you were encountering segfaults with the SQLite driver, there's a good chance this will fix it!\n* [[#1557]]: CI: test with Postgres 14 [[@paolobarbolini]]\n* [[#1571]]: Make `whoami` dep optional, only pull it in for Postgres [[@joshtriplett]]\n* [[#1572]]: Update `rsa` crate to 0.5 [[@paolobarbolini]]\n* [[#1591]]: List SeaORM as an ORM option in the README [[@kunjee17]]\n* [[#1601]]: Update `itoa` and `dirs` [[@paolobarbolini]]\n\n### Fixes\n* [[#1475]]: Fix panic when converting a negative `chrono::Duration` to `PgInterval` [[@yuyawk]]\n* [[#1483]]: Fix error when decoding array of custom types from Postgres [[@demurgos]\n* [[#1501]]: Reduce `indexmap` version requirement to `1.6.2` [[@dimfeld]]\n* [[#1511]]: Fix element type given to Postgres for arrays of custom enums [[@chesedo]]\n* [[#1517]]: Fix mismatched type errors in MySQL type tests [[@abonander]]\n* [[#1537]]: Fix missing re-export of `PgCopyIn` [[@akiradeveloper]]\n* [[#1566]]: Match `~/.pgpass` password after URL parsing and fix user and database ordering [[@D1plo1d]]\n* [[#1582]]: `cargo sqlx prepare`: Append to existing `RUSTFLAGS` instead of overwriting [[@tkintscher]]\n* [[#1587]]: SQLite: if set, send `PRAGMA key` on a new connection before anything else. [[@parazyd]]\n    * This should fix problems with being unable to open databases using SQLCipher.\n    \n\n[#1228]: https://github.com/launchbadge/sqlx/pull/1228\n[#1343]: https://github.com/launchbadge/sqlx/pull/1343\n[#1385]: https://github.com/launchbadge/sqlx/pull/1385\n[#1474]: https://github.com/launchbadge/sqlx/pull/1474\n[#1475]: https://github.com/launchbadge/sqlx/pull/1475\n[#1479]: https://github.com/launchbadge/sqlx/pull/1479\n[#1483]: https://github.com/launchbadge/sqlx/pull/1483\n[#1497]: https://github.com/launchbadge/sqlx/pull/1497\n[#1498]: https://github.com/launchbadge/sqlx/pull/1498\n[#1501]: https://github.com/launchbadge/sqlx/pull/1501\n[#1508]: https://github.com/launchbadge/sqlx/pull/1508 \n[#1511]: https://github.com/launchbadge/sqlx/pull/1511\n[#1514]: https://github.com/launchbadge/sqlx/pull/1514\n[#1517]: https://github.com/launchbadge/sqlx/pull/1517\n[#1523]: https://github.com/launchbadge/sqlx/pull/1523\n[#1526]: https://github.com/launchbadge/sqlx/pull/1526\n[#1535]: https://github.com/launchbadge/sqlx/pull/1535\n[#1537]: https://github.com/launchbadge/sqlx/pull/1537\n[#1539]: https://github.com/launchbadge/sqlx/pull/1539\n[#1551]: https://github.com/launchbadge/sqlx/pull/1551\n[#1557]: https://github.com/launchbadge/sqlx/pull/1557\n[#1562]: https://github.com/launchbadge/sqlx/pull/1562\n[#1566]: https://github.com/launchbadge/sqlx/pull/1566\n[#1571]: https://github.com/launchbadge/sqlx/pull/1571\n[#1572]: https://github.com/launchbadge/sqlx/pull/1572\n[#1582]: https://github.com/launchbadge/sqlx/pull/1582\n[#1584]: https://github.com/launchbadge/sqlx/pull/1584\n[#1587]: https://github.com/launchbadge/sqlx/pull/1587\n[#1591]: https://github.com/launchbadge/sqlx/pull/1591\n[#1592]: https://github.com/launchbadge/sqlx/pull/1592\n[#1601]: https://github.com/launchbadge/sqlx/pull/1601\n[0.5.10-prs]: https://github.com/launchbadge/sqlx/pulls?page=1&q=is%3Apr+merged%3A2021-10-02..2021-12-31+sort%3Acreated-asc\n\n## 0.5.9 - 2021-10-01\n\nA hotfix release to address the issue of the `sqlx` crate itself still depending on older versions of `sqlx-core` and \n`sqlx-macros`.\n\nNo other changes from `0.5.8`.\n\n## 0.5.8 - 2021-10-01 (Yanked; use 0.5.9)\n\n[A total of 24 pull requests][0.5.8-prs] were merged this release cycle! Some highlights: \n\n* [[#1289]] Support the `immutable` option on SQLite connections [[@djmarcin]]\n* [[#1295]] Support custom initial options for SQLite [[@ghassmo]]\n    * Allows specifying custom `PRAGMA`s and overriding those set by SQLx.\n* [[#1345]] Initial support for Postgres `COPY FROM/TO`[[@montanalow], [@abonander]]\n* [[#1439]] Handle multiple waiting results correctly in MySQL [[@eagletmt]]\n\n[#1289]: https://github.com/launchbadge/sqlx/pull/1289\n[#1295]: https://github.com/launchbadge/sqlx/pull/1295\n[#1345]: https://github.com/launchbadge/sqlx/pull/1345\n[#1439]: https://github.com/launchbadge/sqlx/pull/1439\n[0.5.8-prs]: https://github.com/launchbadge/sqlx/pulls?q=is%3Apr+is%3Amerged+merged%3A2021-08-21..2021-10-01\n\n## 0.5.7 - 2021-08-20\n\n* [[#1392]] use `resolve_path` when getting path for `include_str!()` [[@abonander]]\n    * Fixes a regression introduced by [[#1332]].\n* [[#1393]] avoid recursively spawning tasks in `PgListener::drop()` [[@abonander]]\n    * Fixes a panic that occurs when `PgListener` is dropped in `async fn main()`.\n\n[#1392]: https://github.com/launchbadge/sqlx/pull/1392\n[#1393]: https://github.com/launchbadge/sqlx/pull/1393\n\n## 0.5.6 - 2021-08-16\n\nA large bugfix release, including but not limited to:\n\n* [[#1329]] Implement `MACADDR` type for Postgres [[@nomick]]\n* [[#1363]] Fix `PortalSuspended` for array of composite types in Postgres [[@AtkinsChang]]\n* [[#1320]] Reimplement `sqlx::Pool` internals using `futures-intrusive` [[@abonander]]\n    * This addresses a number of deadlocks/stalls on acquiring connections from the pool.\n* [[#1332]] Macros: tell the compiler about external files/env vars to watch [[@abonander]]\n    * Includes `sqlx build-script` to create a `build.rs` to watch `migrations/` for changes.\n    * Nightly users can try `RUSTFLAGS=--cfg sqlx_macros_unstable` to tell the compiler \n      to watch `migrations/` for changes instead of using a build script. \n    * See the new section in the docs for `sqlx::migrate!()` for details.\n* [[#1351]] Fix a few sources of segfaults/errors in SQLite driver [[@abonander]]\n    * Includes contributions from [[@link2ext]] and [[@madadam]].\n* [[#1323]] Keep track of column typing in SQLite EXPLAIN parsing [[@marshoepial]]\n    * This fixes errors in the macros when using `INSERT/UPDATE/DELETE ... RETURNING ...` in SQLite.\n    \n[A total of 25 pull requests][0.5.6-prs] were merged this release cycle!\n\n[#1329]: https://github.com/launchbadge/sqlx/pull/1329\n[#1363]: https://github.com/launchbadge/sqlx/pull/1363\n[#1320]: https://github.com/launchbadge/sqlx/pull/1320\n[#1332]: https://github.com/launchbadge/sqlx/pull/1332\n[#1351]: https://github.com/launchbadge/sqlx/pull/1351\n[#1323]: https://github.com/launchbadge/sqlx/pull/1323\n[0.5.6-prs]: https://github.com/launchbadge/sqlx/pulls?q=is%3Apr+is%3Amerged+merged%3A2021-05-24..2021-08-17\n\n## 0.5.5 - 2021-05-24\n\n-   [[#1242]] Fix infinite loop at compile time when using query macros [[@toshokan]]\n\n[#1242]: https://github.com/launchbadge/sqlx/pull/1242\n\n## 0.5.4 - 2021-05-22\n\n-   [[#1235]] Fix compilation with rustls from an eager update to webpki [[@ETCaton]]\n\n[#1235]: https://github.com/launchbadge/sqlx/pull/1235\n\n## 0.5.3 - 2021-05-21\n\n-   [[#1211]] Even more tweaks and fixes to the Pool internals [[@abonander]]\n\n-   [[#1213]] Add support for bytes and `chrono::NaiveDateTime` to `Any` [[@guylapid]]\n\n-   [[#1224]] Add support for `chrono::DateTime<Local>` to `Any` with `MySQL` [[@NatPRoach]]\n\n-   [[#1216]] Skip empty lines and comments in pgpass files [[@feikesteenbergen]]\n\n-   [[#1218]] Add support for `PgMoney` to the compile-time type-checking [[@iamsiddhant05]]\n\n[#1211]: https://github.com/launchbadge/sqlx/pull/1211\n[#1213]: https://github.com/launchbadge/sqlx/pull/1213\n[#1216]: https://github.com/launchbadge/sqlx/pull/1216\n[#1218]: https://github.com/launchbadge/sqlx/pull/1218\n[#1224]: https://github.com/launchbadge/sqlx/pull/1224\n\n## 0.5.2 - 2021-04-15\n\n-   [[#1149]] Tweak and optimize Pool internals [[@abonander]]\n\n-   [[#1132]] Remove `'static` bound on `Connection::transaction` [[@argv-minus-one]]\n\n-   [[#1128]] Fix `-y` flag for `sqlx db reset -y` [[@qqwa]]\n\n-   [[#1099]] [[#1097]] Truncate buffer when `BufStream` is dropped [[@Diggsey]]\n\n[#1132]: https://github.com/launchbadge/sqlx/pull/1132\n[#1149]: https://github.com/launchbadge/sqlx/pull/1149\n[#1128]: https://github.com/launchbadge/sqlx/pull/1128\n[#1099]: https://github.com/launchbadge/sqlx/pull/1099\n[#1097]: https://github.com/launchbadge/sqlx/issues/1097\n\n### PostgreSQL\n\n-   [[#1170]] Remove `Self: Type` bounds in `Encode` / `Decode` implementations for arrays [[@jplatte]]\n\n    Enables working around the lack of support for user-defined array types:\n\n    ```rust\n    #[derive(sqlx::Encode)]\n    struct Foos<'a>(&'a [Foo]);\n\n    impl sqlx::Type<sqlx::Postgres> for Foos<'_> {\n        fn type_info() -> PgTypeInfo {\n            PgTypeInfo::with_name(\"_foo\")\n        }\n    }\n\n    query_as!(\n        Whatever,\n        \"<QUERY with $1 of type foo[]>\",\n        Foos(&foo_vec) as _,\n    )\n    ```\n\n-   [[#1141]] Use `u16::MAX` instead of `i16::MAX` for a check against the largest number of parameters in a query [[@crajcan]]\n\n-   [[#1112]] Add support for `DOMAIN` types [[@demurgos]]\n\n-   [[#1100]] Explicitly `UNLISTEN` before returning connections to the pool in `PgListener` [[@Diggsey]]\n\n[#1170]: https://github.com/launchbadge/sqlx/pull/1170\n[#1141]: https://github.com/launchbadge/sqlx/pull/1141\n[#1112]: https://github.com/launchbadge/sqlx/pull/1112\n[#1100]: https://github.com/launchbadge/sqlx/pull/1100\n\n### SQLite\n\n-   [[#1161]] Catch `SQLITE_MISUSE` on connection close and panic [[@link2xt]]\n\n-   [[#1160]] Do not cast pointers to `i32` (cast to `usize`) [[@link2xt]]\n\n-   [[#1156]] Reset the statement when `fetch_many` stream is dropped [[@link2xt]]\n\n[#1161]: https://github.com/launchbadge/sqlx/pull/1161\n[#1160]: https://github.com/launchbadge/sqlx/pull/1160\n[#1156]: https://github.com/launchbadge/sqlx/pull/1156\n\n## 0.5.1 - 2021-02-04\n\n-   Update sqlx-rt to 0.3.\n\n## 0.5.0 - 2021-02-04\n\n### Changes\n\n-   [[#983]] [[#1022]] Upgrade async runtime dependencies [[@seryl], [@ant32], [@jplatte], [@robjtede]]\n\n    -   tokio 1.0\n    -   actix-rt 2.0\n\n-   [[#854]] Allow chaining `map` and `try_map` [[@jplatte]]\n\n    Additionally enables calling these combinators with the macros:\n\n    ```rust\n    let ones: Vec<i32> = query!(\"SELECT 1 as foo\")\n        .map(|row| row.foo)\n        .fetch_all(&mut conn).await?;\n    ```\n\n-   [[#940]] Rename the `#[sqlx(rename)]` attribute used to specify the type name on the database\n    side to `#[sqlx(type_name)]` [[@jplatte]].\n\n-   [[#976]] Rename the `DbDone` types to `DbQueryResult`. [[@jplatte]]\n\n-   [[#976]] Remove the `Done` trait. The `.rows_affected()` method is now available as an inherent\n    method on `PgQueryResult`, `MySqlQueryResult` and so on. [[@jplatte]]\n\n-   [[#1007]] Remove `any::AnyType` (and replace with directly implementing `Type<Any>`) [[@jplatte]]\n\n### Added\n\n-   [[#998]] [[#821]] Add `.constraint()` to `DatabaseError` [[@fl9]]\n\n-   [[#919]] For SQLite, add support for unsigned integers [[@dignifiedquire]]\n\n### Fixes\n\n-   [[#1002]] For SQLite, `GROUP BY` in `query!` caused an infinite loop at compile time. [[@pymongo]]\n\n-   [[#979]] For MySQL, fix support for non-default authentication. [[@sile]]\n\n-   [[#918]] Recover from dropping `wait_for_conn` inside Pool. [[@antialize]]\n\n[#821]: https://github.com/launchbadge/sqlx/issues/821\n[#918]: https://github.com/launchbadge/sqlx/pull/918\n[#919]: https://github.com/launchbadge/sqlx/pull/919\n[#983]: https://github.com/launchbadge/sqlx/pull/983\n[#940]: https://github.com/launchbadge/sqlx/pull/940\n[#976]: https://github.com/launchbadge/sqlx/pull/976\n[#979]: https://github.com/launchbadge/sqlx/pull/979\n[#998]: https://github.com/launchbadge/sqlx/pull/998\n[#983]: https://github.com/launchbadge/sqlx/pull/983\n[#1002]: https://github.com/launchbadge/sqlx/pull/1002\n[#1007]: https://github.com/launchbadge/sqlx/pull/1007\n[#1022]: https://github.com/launchbadge/sqlx/pull/1022\n\n## 0.4.2 - 2020-12-19\n\n-   [[#908]] Fix `whoami` crash on FreeBSD platform [[@fundon]] [[@AldaronLau]]\n\n-   [[#895]] Decrement pool size when connection is released [[@andrewwhitehead]]\n\n-   [[#878]] Fix `conn.transaction` wrapper [[@hamza1311]]\n\n    ```rust\n    conn.transaction(|transaction: &mut Transaction<Database> | {\n        // ...\n    });\n    ```\n\n-   [[#874]] Recognize `1` as `true` for `SQLX_OFFLINE [[@Pleto]]\n\n-   [[#747]] [[#867]] Replace `lru-cache` with `hashlink` [[@chertov]]\n\n-   [[#860]] Add `rename_all` to `FromRow` and add `camelCase` and `PascalCase` [[@framp]]\n\n-   [[#839]] Add (optional) support for `bstr::BStr`, `bstr::BString`, and `git2::Oid` [[@joshtriplett]]\n\n#### SQLite\n\n-   [[#893]] Fix memory leak if `create_collation` fails [[@slumber]]\n\n-   [[#852]] Fix potential 100% CPU usage in `fetch_one` / `fetch_optional` [[@markazmierczak]]\n\n-   [[#850]] Add `synchronous` option to `SqliteConnectOptions` [[@markazmierczak]]\n\n#### PostgreSQL\n\n-   [[#889]] Fix decimals (one more time) [[@slumber]]\n\n-   [[#876]] Add support for `BYTEA[]` to compile-time type-checking [[@augustocdias]]\n\n-   [[#845]] Fix path for `&[NaiveTime]` in `query!` macros [[@msrd0]]\n\n#### MySQL\n\n-   [[#880]] Consider `utf8mb4_general_ci` as a string [[@mcronce]]\n\n[#908]: https://github.com/launchbadge/sqlx/pull/908\n[#895]: https://github.com/launchbadge/sqlx/pull/895\n[#893]: https://github.com/launchbadge/sqlx/pull/893\n[#889]: https://github.com/launchbadge/sqlx/pull/889\n[#880]: https://github.com/launchbadge/sqlx/pull/880\n[#878]: https://github.com/launchbadge/sqlx/pull/878\n[#876]: https://github.com/launchbadge/sqlx/pull/876\n[#874]: https://github.com/launchbadge/sqlx/pull/874\n[#867]: https://github.com/launchbadge/sqlx/pull/867\n[#860]: https://github.com/launchbadge/sqlx/pull/860\n[#854]: https://github.com/launchbadge/sqlx/pull/854\n[#852]: https://github.com/launchbadge/sqlx/pull/852\n[#850]: https://github.com/launchbadge/sqlx/pull/850\n[#845]: https://github.com/launchbadge/sqlx/pull/845\n[#839]: https://github.com/launchbadge/sqlx/pull/839\n[#747]: https://github.com/launchbadge/sqlx/issues/747\n\n## 0.4.1 – 2020-11-13\n\nFix docs.rs build by enabling a runtime feature in the docs.rs metadata in `Cargo.toml`.\n\n## 0.4.0 - 2020-11-12\n\n-   [[#774]] Fix usage of SQLx derives with other derive crates [[@NyxCode]]\n\n-   [[#762]] Fix `migrate!()` (with no params) [[@esemeniuc]]\n\n-   [[#755]] Add `kebab-case` to `rename_all` [[@iamsiddhant05]]\n\n-   [[#735]] Support `rustls` [[@jplatte]]\n\n    Adds `-native-tls` or `-rustls` on each runtime feature:\n\n    ```toml\n    # previous\n    features = [ \"runtime-async-std\" ]\n\n    # now\n    features = [ \"runtime-async-std-native-tls\" ]\n    ```\n\n-   [[#718]] Support tuple structs with `#[derive(FromRow)]` [[@dvermd]]\n\n#### SQLite\n\n-   [[#789]] Support `$NNN` parameters [[@nitsky]]\n\n-   [[#784]] Use `futures_channel::oneshot` in worker for big perf win [[@markazmierczak]]\n\n#### PostgreSQL\n\n-   [[#781]] Fix decimal conversions handling of `0.01` [[@pimeys]]\n\n-   [[#745]] Always prefer parsing of the non-localized notice severity field [[@dstoeckel]]\n\n-   [[#742]] Enable `Vec<DateTime<Utc>>` with chrono [[@mrcd]]\n\n#### MySQL\n\n-   [[#743]] Consider `utf8mb4_bin` as a string [[@digorithm]]\n\n-   [[#739]] Fix minor protocol detail with `iteration-count` that was blocking Vitess [[@mcronce]]\n\n[#774]: https://github.com/launchbadge/sqlx/pull/774\n[#789]: https://github.com/launchbadge/sqlx/pull/789\n[#784]: https://github.com/launchbadge/sqlx/pull/784\n[#781]: https://github.com/launchbadge/sqlx/pull/781\n[#762]: https://github.com/launchbadge/sqlx/pull/762\n[#755]: https://github.com/launchbadge/sqlx/pull/755\n[#745]: https://github.com/launchbadge/sqlx/pull/745\n[#743]: https://github.com/launchbadge/sqlx/pull/743\n[#742]: https://github.com/launchbadge/sqlx/pull/742\n[#735]: https://github.com/launchbadge/sqlx/pull/735\n[#739]: https://github.com/launchbadge/sqlx/pull/739\n[#718]: https://github.com/launchbadge/sqlx/pull/718\n\n## 0.4.0-beta.1 - 2020-07-27\n\n### Highlights\n\n-   Enable compile-time type checking from cached metadata to enable building\n    in an environment without access to a development database (e.g., Docker, CI).\n\n-   Initial support for **Microsoft SQL Server**. If there is something missing that you need,\n    open an issue. We are happy to help.\n\n-   SQL migrations, both with a CLI tool and programmatically loading migrations at runtime.\n\n-   Runtime-determined database driver, `Any`, to support compile-once and run with a database\n    driver selected at runtime.\n\n-   Support for user-defined types and more generally overriding the inferred Rust type from SQL\n    with compile-time SQL verification.\n\n### Fixed\n\n#### MySQL\n\n-   [[#418]] Support zero dates and times [[@blackwolf12333]]\n\n### Added\n\n-   [[#174]] Inroduce a builder to construct connections to bypass the URL parsing\n\n    ```rust\n    // MSSQL\n    let conn = MssqlConnectOptions::new()\n        .host(\"localhost\")\n        .database(\"master\")\n        .username(\"sa\")\n        .password(\"Password\")\n        .connect().await?;\n\n    // SQLite\n    let conn = SqliteConnectOptions::from_str(\"sqlite://a.db\")?\n        .foreign_keys(false)\n        .connect().await?;\n    ```\n\n-   [[#127]] Get the last ID or Row ID inserted for MySQL or SQLite\n\n    ```rust\n    // MySQL\n    let id: u64 = query!(\"INSERT INTO table ( col ) VALUES ( ? )\", val)\n        .execute(&mut conn).await?\n        .last_insert_id(); // LAST_INSERT_ID()\n\n    // SQLite\n    let id: i64 = query!(\"INSERT INTO table ( col ) VALUES ( ?1 )\", val)\n        .execute(&mut conn).await?\n        .last_insert_rowid(); // sqlite3_last_insert_rowid()\n    ```\n\n-   [[#263]] Add hooks to the Pool: `after_connect`, `before_release`, and `after_acquire`\n\n    ```rust\n    // PostgreSQL\n    let pool = PgPoolOptions::new()\n        .after_connect(|conn| Box::pin(async move {\n            conn.execute(\"SET application_name = 'your_app';\").await?;\n            conn.execute(\"SET search_path = 'my_schema';\").await?;\n\n            Ok(())\n        }))\n        .connect(\"postgres:// …\").await?\n    ```\n\n-   [[#308]] [[#495]] Extend `derive(FromRow)` with support for `#[sqlx(default)]` on fields to allow reading in a partial query [[@OriolMunoz]]\n\n-   [[#454]] [[#456]] Support `rust_decimal::Decimal` as an alternative to `bigdecimal::BigDecimal` for `NUMERIC` columns in MySQL and PostgreSQL [[@pimeys]]\n\n-   [[#181]] Column names and type information is now accessible from `Row` via `Row::columns()` or `Row::column(name)`\n\n#### PostgreSQL\n\n-   [[#197]] [[#271]] Add initial support for `INTERVAL` (full support pending a `time::Period` type) [[@dimtion]]\n\n#### MySQL\n\n-   [[#449]] [[#450]] Support Unix Domain Sockets (UDS) for MySQL [[@pimeys]]\n\n#### SQLite\n\n-   Types are now inferred for expressions. This means its now possible to use `query!` and `query_as!` for:\n\n    ```rust\n    let row = query!(\"SELECT 10 as _1, x + 5 as _2 FROM table\").fetch_one(&mut conn).await?;\n\n    assert_eq!(row._1, 10);\n    assert_eq!(row._2, 5); // 5 + x?\n    ```\n\n-   [[#167]] Support `foreign_keys` explicitly with a `foreign_keys(true)` method available on `SqliteConnectOptions` which is a builder\n    for new SQLite connections (and can be passed into `PoolOptions` to build a pool).\n\n    ```rust\n    let conn = SqliteConnectOptions::new()\n        .foreign_keys(true) // on by default\n        .connect().await?;\n    ```\n\n-   [[#430]] [[#438]] Add method to get the raw SQLite connection handle [[@agentsim]]\n\n    ```rust\n    // conn is `SqliteConnection`\n    // this is not unsafe, but what you do with the handle will be\n    let ptr: *mut libsqlite3::sqlite3 = conn.as_raw_handle();\n    ```\n\n-   [[#164]] Support `TIMESTAMP`, `DATETIME`, `DATE`, and `TIME` via `chrono` in SQLite [[@felipesere]] [[@meteficha]]\n\n### Changed\n\n-   `Transaction` now mutably borrows a connection instead of owning it. This enables a new (or nested) transaction to be started from `&mut conn`.\n\n-   [[#145]] [[#444]] Use a least-recently-used (LRU) cache to limit the growth of the prepared statement cache for SQLite, MySQL, and PostgreSQL [[@pimeys]]\n\n#### SQLite\n\n-   [[#499]] `INTEGER` now resolves to `i64` instead of `i32`, `INT4` will still resolve to `i32`\n\n### Removed\n\n[#127]: https://github.com/launchbadge/sqlx/issues/127\n[#174]: https://github.com/launchbadge/sqlx/issues/174\n[#145]: https://github.com/launchbadge/sqlx/issues/145\n[#164]: https://github.com/launchbadge/sqlx/issues/164\n[#167]: https://github.com/launchbadge/sqlx/issues/167\n[#181]: https://github.com/launchbadge/sqlx/issues/181\n[#197]: https://github.com/launchbadge/sqlx/issues/197\n[#263]: https://github.com/launchbadge/sqlx/issues/263\n[#308]: https://github.com/launchbadge/sqlx/issues/308\n[#418]: https://github.com/launchbadge/sqlx/issues/418\n[#430]: https://github.com/launchbadge/sqlx/issues/430\n[#449]: https://github.com/launchbadge/sqlx/issues/449\n[#499]: https://github.com/launchbadge/sqlx/issues/499\n[#454]: https://github.com/launchbadge/sqlx/issues/454\n[#271]: https://github.com/launchbadge/sqlx/pull/271\n[#444]: https://github.com/launchbadge/sqlx/pull/444\n[#438]: https://github.com/launchbadge/sqlx/pull/438\n[#495]: https://github.com/launchbadge/sqlx/pull/495\n[#495]: https://github.com/launchbadge/sqlx/pull/495\n\n## 0.3.5 - 2020-05-06\n\n### Fixed\n\n-   [[#259]] Handle percent-encoded paths for SQLite [[@g-s-k]]\n\n-   [[#281]] Deallocate SQLite statements before closing the SQLite connection [[@hasali19]]\n\n-   [[#284]] Fix handling of `0` for `BigDecimal` in PostgreSQL and MySQL [[@abonander]]\n\n### Added\n\n-   [[#256]] Add `query_unchecked!` and `query_file_unchecked!` with similar semantics to `query_as_unchecked!` [[@meh]]\n\n-   [[#252]] [[#297]] Derive several traits for the `Json<T>` wrapper type [[@meh]]\n\n-   [[#261]] Add support for `#[sqlx(rename_all = \"snake_case\")]` to `#[derive(Type)]` [[@shssoichiro]]\n\n-   [[#253]] Add support for UNIX domain sockets to PostgreSQL [[@Nilix007]]\n\n-   [[#251]] Add support for textual JSON on MySQL [[@blackwolf12333]]\n\n-   [[#275]] [[#268]] Optionally log formatted SQL queries on execution [[@shssoichiro]]\n\n-   [[#267]] Support Cargo.toml relative `.env` files; allows for each crate in a workspace to use their own `.env` file and thus their own `DATABASE_URL` [[@xyzd]]\n\n[#252]: https://github.com/launchbadge/sqlx/pull/252\n[#261]: https://github.com/launchbadge/sqlx/pull/261\n[#256]: https://github.com/launchbadge/sqlx/pull/256\n[#259]: https://github.com/launchbadge/sqlx/pull/259\n[#253]: https://github.com/launchbadge/sqlx/pull/253\n[#297]: https://github.com/launchbadge/sqlx/pull/297\n[#251]: https://github.com/launchbadge/sqlx/pull/251\n[#275]: https://github.com/launchbadge/sqlx/pull/275\n[#267]: https://github.com/launchbadge/sqlx/pull/267\n[#268]: https://github.com/launchbadge/sqlx/pull/268\n[#281]: https://github.com/launchbadge/sqlx/pull/281\n[#284]: https://github.com/launchbadge/sqlx/pull/284\n\n## 0.3.4 - 2020-04-10\n\n### Fixed\n\n-   [[#241]] Type name for custom enum is not always attached to TypeInfo in PostgreSQL\n\n-   [[#237]] [[#238]] User-defined type name matching is now case-insensitive in PostgreSQL [[@qtbeee]]\n\n-   [[#231]] Handle empty queries (and those with comments) in SQLite\n\n-   [[#228]] Provide `MapRow` implementations for functions (enables `.map(|row| ...)` over `.try_map(|row| ...)`)\n\n### Added\n\n-   [[#234]] Add support for `NUMERIC` in MySQL with the `bigdecimal` crate [[@xiaopengli89]]\n\n-   [[#227]] Support `#[sqlx(rename = \"new_name\")]` on struct fields within a `FromRow` derive [[@sidred]]\n\n[#228]: https://github.com/launchbadge/sqlx/issues/228\n[#231]: https://github.com/launchbadge/sqlx/issues/231\n[#237]: https://github.com/launchbadge/sqlx/issues/237\n[#241]: https://github.com/launchbadge/sqlx/issues/241\n[#227]: https://github.com/launchbadge/sqlx/pull/227\n[#234]: https://github.com/launchbadge/sqlx/pull/234\n[#238]: https://github.com/launchbadge/sqlx/pull/238\n\n## 0.3.3 - 2020-04-01\n\n### Fixed\n\n-   [[#214]] Handle percent-encoded usernames in a database URL [[@jamwaffles]]\n\n### Changed\n\n-   [[#216]] Mark `Cursor`, `Query`, `QueryAs`, `query::Map`, and `Transaction` as `#[must_use]` [[@Ace4896]]\n\n-   [[#213]] Remove matches dependency and use matches macro from std [[@nrjais]]\n\n[#216]: https://github.com/launchbadge/sqlx/pull/216\n[#214]: https://github.com/launchbadge/sqlx/pull/214\n[#213]: https://github.com/launchbadge/sqlx/pull/213\n\n## 0.3.2 - 2020-03-31\n\n### Fixed\n\n-   [[#212]] Removed sneaky `println!` in `MySqlCursor`\n\n[#212]: https://github.com/launchbadge/sqlx/issues/212\n\n## 0.3.1 - 2020-03-30\n\n### Fixed\n\n-   [[#203]] Allow an empty password for MySQL\n\n-   [[#204]] Regression in error reporting for invalid SQL statements on PostgreSQL\n\n-   [[#200]] Fixes the incorrect handling of raw (`r#...`) fields of a struct in the `FromRow` derive [[@sidred]]\n\n[#200]: https://github.com/launchbadge/sqlx/pull/200\n[#203]: https://github.com/launchbadge/sqlx/issues/203\n[#204]: https://github.com/launchbadge/sqlx/issues/204\n\n## 0.3.0 - 2020-03-29\n\n### Breaking Changes\n\n-   `sqlx::Row` now has a lifetime (`'c`) tied to the database connection. In effect, this means that you cannot store `Row`s or collect\n    them into a collection. `Query` (returned from `sqlx::query()`) has `map()` which takes a function to map from the `Row` to\n    another type to make this transition easier.\n\n    In 0.2.x\n\n    ```rust\n    let rows = sqlx::query(\"SELECT 1\")\n        .fetch_all(&mut conn).await?;\n    ```\n\n    In 0.3.x\n\n    ```rust\n    let values: Vec<i32> = sqlx::query(\"SELECT 1\")\n        .map(|row: PgRow| row.get(0))\n        .fetch_all(&mut conn).await?;\n    ```\n\n    To assist with the above, `sqlx::query_as()` now supports querying directly into tuples (up to 9 elements) or\n    struct types with a `#[derive(FromRow)]`.\n\n    ```rust\n    // This extension trait is needed until a rust bug is fixed\n    use sqlx::postgres::PgQueryAs;\n\n    let values: Vec<(i32, bool)> = sqlx::query_as(\"SELECT 1, false\")\n        .fetch_all(&mut conn).await?;\n    ```\n\n-   `HasSqlType<T>: Database` is now `T: Type<Database>` to mirror `Encode` and `Decode`\n\n-   `Query::fetch` (returned from `query()`) now returns a new `Cursor` type. `Cursor` is a Stream-like type where the\n    item type borrows into the stream (which itself borrows from connection). This means that using `query().fetch()` you can now\n    stream directly from the database with **zero-copy** and **zero-allocation**.\n\n-   Remove `PgTypeInfo::with_oid` and replace with `PgTypeInfo::with_name`\n\n### Added\n\n-   Results from the database are now zero-copy and no allocation beyond a shared read buffer\n    for the TCP stream ( in other words, almost no per-query allocation ). Bind arguments still\n    do allocate a buffer per query.\n\n-   [[#129]] Add support for [SQLite](https://sqlite.org/index.html). Generated code should be very close to normal use of the C API.\n\n    -   Adds `Sqlite`, `SqliteConnection`, `SqlitePool`, and other supporting types\n\n-   [[#97]] [[#134]] Add support for user-defined types. [[@Freax13]]\n\n    -   Rust-only domain types or transparent wrappers around SQL types. These may be used _transparently_ inplace of\n        the SQL type.\n\n        ```rust\n        #[derive(sqlx::Type)]\n        #[repr(transparent)]\n        struct Meters(i32);\n        ```\n\n    -   Enumerations may be defined in Rust and can match SQL by integer discriminant or variant name.\n\n        ```rust\n        #[derive(sqlx::Type)]\n        #[repr(i32)] // Expects a INT in SQL\n        enum Color { Red = 1, Green = 2, Blue = 3 }\n        ```\n\n        ```rust\n        #[derive(sqlx::Type)]\n        #[sqlx(rename = \"TEXT\")] // May also be the name of a user defined enum type\n        #[sqlx(rename_all = \"lowercase\")] // similar to serde rename_all\n        enum Color { Red, Green, Blue } // expects 'red', 'green', or 'blue'\n        ```\n\n    -   **Postgres** further supports user-defined composite types.\n\n        ```rust\n        #[derive(sqlx::Type)]\n        #[sqlx(rename = \"interface_type\")]\n        struct InterfaceType {\n            name: String,\n            supplier_id: i32,\n            price: f64\n        }\n        ```\n\n-   [[#98]] [[#131]] Add support for asynchronous notifications in Postgres (`LISTEN` / `NOTIFY`). [[@thedodd]]\n\n    -   Supports automatic reconnection on connection failure.\n\n    -   `PgListener` implements `Executor` and may be used to execute queries. Be careful however as if the\n        intent is to handle and process messages rapidly you don't want to be tying up the connection\n        for too long. Messages received during queries are buffered and will be delivered on the next call\n        to `recv()`.\n\n    ```rust\n    let mut listener = PgListener::new(DATABASE_URL).await?;\n\n    listener.listen(\"topic\").await?;\n\n    loop {\n        let message = listener.recv().await?;\n\n        println!(\"payload = {}\", message.payload);\n    }\n    ```\n\n-   Add _unchecked_ variants of the query macros. These will still verify the SQL for syntactic and\n    semantic correctness with the current database but they will not check the input or output types.\n\n    This is intended as a temporary solution until `query_as!` is able to support user defined types.\n\n    -   `query_as_unchecked!`\n    -   `query_file_as_unchecked!`\n\n-   Add support for many more types in Postgres\n\n    -   `JSON`, `JSONB` [[@oeb25]]\n    -   `INET`, `CIDR` [[@PoiScript]]\n    -   Arrays [[@oeb25]]\n    -   Composites ( Rust tuples or structs with a `#[derive(Type)]` )\n    -   `NUMERIC` [[@abonander]]\n    -   `OID` (`u32`)\n    -   `\"CHAR\"` (`i8`)\n    -   `TIMESTAMP`, `TIMESTAMPTZ`, etc. with the `time` crate [[@utter-step]]\n    -   Enumerations ( Rust enums with a `#[derive(Type)]` ) [[@Freax13]]\n\n### Changed\n\n-   `Query` (and `QueryAs`; returned from `query()`, `query_as()`, `query!()`, and `query_as!()`) now will accept both `&mut Connection` or\n    `&Pool` where as in 0.2.x they required `&mut &Pool`.\n\n-   `Executor` now takes any value that implements `Execute` as a query. `Execute` is implemented for `Query` and `QueryAs` to mean\n    exactly what they've meant so far, a prepared SQL query. However, `Execute` is also implemented for just `&str` which now performs\n    a raw or unprepared SQL query. You can further use this to fetch `Row`s from the database though it is not as efficient as the\n    prepared API (notably Postgres and MySQL send data back in TEXT mode as opposed to in BINARY mode).\n\n    ```rust\n    use sqlx::Executor;\n\n    // Set the time zone parameter\n    conn.execute(\"SET TIME ZONE LOCAL;\").await\n\n    // Demonstrate two queries at once with the raw API\n    let mut cursor = conn.fetch(\"SELECT 1; SELECT 2\");\n    let row = cursor.next().await?.unwrap();\n    let value: i32 = row.get(0); // 1\n    let row = cursor.next().await?.unwrap();\n    let value: i32 = row.get(0); // 2\n    ```\n\n### Removed\n\n-   `Query` (returned from `query()`) no longer has `fetch_one`, `fetch_optional`, or `fetch_all`. You _must_ map the row using `map()` and then\n    you will have a `query::Map` value that has the former methods available.\n\n    ```rust\n    let values: Vec<i32> = sqlx::query(\"SELECT 1\")\n        .map(|row: PgRow| row.get(0))\n        .fetch_all(&mut conn).await?;\n    ```\n\n### Fixed\n\n-   [[#62]] [[#130]] [[#135]] Remove explicit set of `IntervalStyle`. Allow usage of SQLx for CockroachDB and potentially PgBouncer. [[@bmisiak]]\n\n-   [[#108]] Allow nullable and borrowed values to be used as arguments in `query!` and `query_as!`. For example, where the column would\n    resolve to `String` in Rust (TEXT, VARCHAR, etc.), you may now use `Option<String>`, `Option<&str>`, or `&str` instead. [[@abonander]]\n\n-   [[#108]] Make unknown type errors far more informative. As an example, trying to `SELECT` a `DATE` column will now try and tell you about the\n    `chrono` feature. [[@abonander]]\n\n    ```\n    optional feature `chrono` required for type DATE of column #1 (\"now\")\n    ```\n\n[#62]: https://github.com/launchbadge/sqlx/issues/62\n[#130]: https://github.com/launchbadge/sqlx/issues/130\n[#98]: https://github.com/launchbadge/sqlx/pull/98\n[#97]: https://github.com/launchbadge/sqlx/pull/97\n[#134]: https://github.com/launchbadge/sqlx/pull/134\n[#129]: https://github.com/launchbadge/sqlx/pull/129\n[#131]: https://github.com/launchbadge/sqlx/pull/131\n[#135]: https://github.com/launchbadge/sqlx/pull/135\n[#108]: https://github.com/launchbadge/sqlx/pull/108\n\n## 0.2.6 - 2020-03-10\n\n### Added\n\n-   [[#114]] Export `sqlx_core::Transaction` [[@thedodd]]\n\n### Fixed\n\n-   [[#125]] [[#126]] Fix statement execution in MySQL if it contains NULL statement values [[@repnop]]\n\n-   [[#105]] [[#109]] Allow trailing commas in query macros [[@timmythetiny]]\n\n[#105]: https://github.com/launchbadge/sqlx/pull/105\n[#109]: https://github.com/launchbadge/sqlx/pull/109\n[#114]: https://github.com/launchbadge/sqlx/pull/114\n[#125]: https://github.com/launchbadge/sqlx/pull/125\n[#126]: https://github.com/launchbadge/sqlx/pull/126\n[@timmythetiny]: https://github.com/timmythetiny\n[@thedodd]: https://github.com/thedodd\n\n## 0.2.5 - 2020-02-01\n\n### Fixed\n\n-   Fix decoding of Rows containing NULLs in Postgres [#104]\n\n-   After a large review and some battle testing by [@ianthetechie](https://github.com/ianthetechie)\n    of the `Pool`, a live leaking issue was found. This has now been fixed by [@abonander] in [#84] which\n    included refactoring to make the pool internals less brittle (using RAII instead of manual\n    work is one example) and to help any future contributors when changing the pool internals.\n\n-   Passwords are now being percent-decoded before being presented to the server [[@repnop]]\n\n-   [@100] Fix `FLOAT` and `DOUBLE` decoding in MySQL\n\n[#84]: https://github.com/launchbadge/sqlx/issues/84\n[#100]: https://github.com/launchbadge/sqlx/issues/100\n[#104]: https://github.com/launchbadge/sqlx/issues/104\n\n### Added\n\n-   [[#72]] Add `PgTypeInfo::with_oid` to allow simple construction of `PgTypeInfo` which enables `HasSqlType`\n    to be implemented by downstream consumers of SQLx [[@jplatte]]\n\n-   [[#96]] Add support for returning columns from `query!` with a name of a rust keyword by\n    using raw identifiers [[@yaahc]]\n\n-   [[#71]] Implement derives for `Encode` and `Decode`. This is the first step to supporting custom types in SQLx. [[@Freax13]]\n\n[#72]: https://github.com/launchbadge/sqlx/issues/72\n[#96]: https://github.com/launchbadge/sqlx/issues/96\n[#71]: https://github.com/launchbadge/sqlx/issues/71\n\n## 0.2.4 - 2020-01-18\n\n### Fixed\n\n-   Fix decoding of Rows containing NULLs in MySQL (and add an integration test so this doesn't break again)\n\n## 0.2.3 - 2020-01-18\n\n### Fixed\n\n-   Fix `query!` when used on a query that does not return results\n\n## 0.2.2 - 2020-01-16\n\n### Added\n\n-   [[#57]] Add support for unsigned integers and binary types in `query!` for MySQL [[@mehcode]]\n\n[#57]: https://github.com/launchbadge/sqlx/issues/57\n\n### Fixed\n\n-   Fix stall when requesting TLS from a Postgres server that explicitly does not support TLS (such as postgres running inside docker) [[@abonander]]\n\n-   [[#66]] Declare used features for `tokio` in `sqlx-macros` explicitly\n\n[#66]: https://github.com/launchbadge/sqlx/issues/66\n\n## 0.2.1 - 2020-01-16\n\n### Fixed\n\n-   [[#64], [#65]] Fix decoding of Rows containing NULLs in MySQL [[@danielakhterov]]\n\n[#64]: https://github.com/launchbadge/sqlx/pull/64\n[#65]: https://github.com/launchbadge/sqlx/pull/65\n\n-   [[#55]] Use a shared tokio runtime for the `query!` macro compile-time execution (under the `runtime-tokio` feature) [[@udoprog]]\n\n[#55]: https://github.com/launchbadge/sqlx/pull/55\n\n## 0.2.0 - 2020-01-15\n\n### Fixed\n\n-   https://github.com/launchbadge/sqlx/issues/47\n\n### Added\n\n-   Support Tokio through an optional `runtime-tokio` feature.\n\n-   Support SQL transactions. You may now use the `begin()` function on `Pool` or `Connection` to\n    start a new SQL transaction. This returns `sqlx::Transaction` which will `ROLLBACK` on `Drop`\n    or can be explicitly `COMMIT` using `commit()`.\n\n-   Support TLS connections.\n\n## 0.1.4 - 2020-01-11\n\n### Fixed\n\n-   https://github.com/launchbadge/sqlx/issues/43\n\n-   https://github.com/launchbadge/sqlx/issues/40\n\n### Added\n\n-   Support for `SCRAM-SHA-256` authentication in Postgres [#37](https://github.com/launchbadge/sqlx/pull/37) [@danielakhterov](https://github.com/danielakhterov)\n\n-   Implement `Debug` for Pool [#42](https://github.com/launchbadge/sqlx/pull/42) [@prettynatty](https://github.com/prettynatty)\n\n## 0.1.3 - 2020-01-06\n\n### Fixed\n\n-   https://github.com/launchbadge/sqlx/issues/30\n\n## 0.1.2 - 2020-01-03\n\n### Added\n\n-   Support for Authentication in MySQL 5+ including the newer authentication schemes now default in MySQL 8: `mysql_native_password`, `sha256_password`, and `caching_sha2_password`.\n\n-   [`Chrono`](https://github.com/chronotope/chrono) support for MySQL was only partially implemented (was missing `NaiveTime` and `DateTime<Utc>`).\n\n-   `Vec<u8>` (and `[u8]`) support for MySQL (`BLOB`) and Postgres (`BYTEA`).\n\n[@abonander]: https://github.com/abonander\n[@danielakhterov]: https://github.com/danielakhterov\n[@mehcode]: https://github.com/mehcode\n[@udoprog]: https://github.com/udoprog\n[@jplatte]: https://github.com/jplatte\n[@yaahc]: https://github.com/yaahc\n[@freax13]: https://github.com/Freax13\n[@repnop]: https://github.com/repnop\n[@bmisiak]: https://github.com/bmisiak\n[@oeb25]: https://github.com/oeb25\n[@poiscript]: https://github.com/PoiScript\n[@utter-step]: https://github.com/utter-step\n[@sidred]: https://github.com/sidred\n[@ace4896]: https://github.com/Ace4896\n[@jamwaffles]: https://github.com/jamwaffles\n[@nrjais]: https://github.com/nrjais\n[@qtbeee]: https://github.com/qtbeee\n[@xiaopengli89]: https://github.com/xiaopengli89\n[@meh]: https://github.com/meh\n[@shssoichiro]: https://github.com/shssoichiro\n[@nilix007]: https://github.com/Nilix007\n[@g-s-k]: https://github.com/g-s-k\n[@blackwolf12333]: https://github.com/blackwolf12333\n[@xyzd]: https://github.com/xyzd\n[@hasali19]: https://github.com/hasali19\n[@oriolmunoz]: https://github.com/OriolMunoz\n[@pimeys]: https://github.com/pimeys\n[@agentsim]: https://github.com/agentsim\n[@meteficha]: https://github.com/meteficha\n[@felipesere]: https://github.com/felipesere\n[@dimtion]: https://github.com/dimtion\n[@fundon]: https://github.com/fundon\n[@aldaronlau]: https://github.com/AldaronLau\n[@andrewwhitehead]: https://github.com/andrewwhitehead\n[@slumber]: https://github.com/slumber\n[@mcronce]: https://github.com/mcronce\n[@hamza1311]: https://github.com/hamza1311\n[@augustocdias]: https://github.com/augustocdias\n[@pleto]: https://github.com/Pleto\n[@chertov]: https://github.com/chertov\n[@framp]: https://github.com/framp\n[@markazmierczak]: https://github.com/markazmierczak\n[@msrd0]: https://github.com/msrd0\n[@joshtriplett]: https://github.com/joshtriplett\n[@nyxcode]: https://github.com/NyxCode\n[@nitsky]: https://github.com/nitsky\n[@esemeniuc]: https://github.com/esemeniuc\n[@iamsiddhant05]: https://github.com/iamsiddhant05\n[@dstoeckel]: https://github.com/dstoeckel\n[@mrcd]: https://github.com/mrcd\n[@dvermd]: https://github.com/dvermd\n[@seryl]: https://github.com/seryl\n[@ant32]: https://github.com/ant32\n[@robjtede]: https://github.com/robjtede\n[@pymongo]: https://github.com/pymongo\n[@sile]: https://github.com/sile\n[@fl9]: https://github.com/fl9\n[@antialize]: https://github.com/antialize\n[@dignifiedquire]: https://github.com/dignifiedquire\n[@argv-minus-one]: https://github.com/argv-minus-one\n[@qqwa]: https://github.com/qqwa\n[@diggsey]: https://github.com/Diggsey\n[@crajcan]: https://github.com/crajcan\n[@demurgos]: https://github.com/demurgos\n[@link2xt]: https://github.com/link2xt\n[@guylapid]: https://github.com/guylapid\n[@natproach]: https://github.com/NatPRoach\n[@feikesteenbergen]: https://github.com/feikesteenbergen\n[@etcaton]: https://github.com/ETCaton\n[@toshokan]: https://github.com/toshokan\n[@nomick]: https://github.com/nomick\n[@marshoepial]: https://github.com/marshoepial\n[@link2ext]: https://github.com/link2ext\n[@madadam]: https://github.com/madadam\n[@AtkinsChang]: https://github.com/AtkinsChang\n[@djmarcin]: https://github.com/djmarcin\n[@ghassmo]: https://github.com/ghassmo\n[@eagletmt]: https://github.com/eagletmt\n[@montanalow]: https://github.com/montanalow\n[@nitnelave]: https://github.com/nitnelave\n[@Drevoed]: https://github.com/Drevoed\n[@yuyawk]: https://github.com/yuyawk\n[@yerke]: https://github.com/yerke\n[@russweas]: https://github.com/russweas\n[@zbigniewzolnierowicz]: https://github.com/zbigniewzolnierowicz\n[@dimfeld]: https://github.com/dimfeld\n[@akiradeveloper]: https://github.com/akiradeveloper\n[@chesedo]: https://github.com/chesedo\n[@LLBlumire]: https://github.com/LLBlumire\n[@liushuyu]: https://github.com/liushuyu\n[@paolobarbolini]: https://github.com/paolobarbolini\n[@DoumanAsh]: https://github.com/DoumanAsh\n[@D1plo1d]: https://github.com/D1plo1d\n[@tkintscher]: https://github.com/tkintscher\n[@SonicZentropy]: https://github.com/SonicZentropy\n[@parazyd]: https://github.com/parazyd\n[@kunjee17]: https://github.com/kunjee17\n[@05storm26]: https://github.com/05storm26\n[@dbeckwith]: https://github.com/dbeckwith\n[@k-jun]: https://github.com/k-jun\n[@tranzystorek-io]: https://github.com/tranzystorek-io\n[@taladar]: https://github.com/taladar\n[@genusistimelord]: https://github.com/genusistimelord\n[@p9s]: https://github.com/p9s\n[@ArGGu]: https://github.com/ArGGu\n[@sedrik]: https://github.com/sedrik\n[@nappa85]: https://github.com/nappa85\n[@ifn3]: https://github.com/ifn3\n[@LovecraftianHorror]: https://github.com/LovecraftianHorror\n[@stoically]: https://github.com/stoically\n[@VersBinarii]: https://github.com/VersBinarii\n[@cemoktra]: https://github.com/cemoktra\n[@jdrouet]: https://github.com/jdrouet\n[@vbmade2000]: https://github.com/vbmade2000\n[@abreis]: https://github.com/abreis\n[@0xdeafbeef]: https://github.com/0xdeafbeef\n[@Dylan-DPC]: https://github.com/Dylan-DPC\n[@carols10cents]: https://github.com/carols10cents\n[@david-mcgillicuddy-moixa]: https://github.com/david-mcgillicuddy-moixa\n[@ipetkov]: https://github.com/ipetkov\n[@pedromfedricci]: https://github.com/pedromfedricci\n[@tm-drtina]: https://github.com/tm-drtina\n[@espindola]: https://github.com/espindola\n[@mgrachev]: https://github.com/mgrachev\n[@tyrelr]: https://github.com/tyrelr\n[@SebastienGllmt]: https://github.com/SebastienGllmt\n[@e00E]: https://github.com/e00E\n[@sebpuetz]: https://github.com/sebpuetz\n[@pruthvikar]: https://github.com/pruthvikar\n[@tobymurray]: https://github.com/tobymurray\n[@djc]: https://github.com/djc\n[@mfreeborn]: https://github.com/mfreeborn\n[@scottwey]: https://github.com/scottwey\n[@e-rhodes]: https://github.com/e-rhodes\n[@OskarPersson]: https://github.com/OskarPersson\n[@walf443]: https://github.com/walf443\n[@lovasoa]: https://github.com/lovasoa\n[@mdtusz]: https://github.com/mdtusz\n[@kianmeng]: https://github.com/kianmeng\n[@EthanYuan]: https://github.com/EthanYuan\n[@Nukesor]: https://github.com/Nukesor\n[@smonv]: https://github.com/smonv\n[@Erik1000]: https://github.com/Erik1000\n[@raviqqe]: https://github.com/raviqqe\n[@johnbcodes]: https://github.com/johnbcodes\n[@sbeckeriv]: https://github.com/sbeckeriv\n[@RomainStorai]: https://github.com/RomainStorai\n[@jayy-lmao]: https://github.com/jayy-lmao\n[@Thomasdezeeuw]: https://github.com/Thomasdezeeuw\n[@kenkoooo]: https://github.com/kenkoooo\n[@TheoOiry]: https://github.com/TheoOiry\n[@JoeyMckenzie]: https://github.com/JoeyMckenzie\n[@ivan]: https://github.com/ivan\n[@crepererum]: https://github.com/crepererum\n[@UramnOIL]: https://github.com/UramnOIL\n[@liningpan]: https://github.com/liningpan\n[@zzhengzhuo]: https://github.com/zzhengzhuo\n[@crepererum]: https://github.com/crepererum\n[@szymek156]: https://github.com/szymek156\n[@NSMustache]: https://github.com/NSMustache\n[@RustyYato]: https://github.com/RustyYato\n[@alexander-jackson]: https://github.com/alexander-jackson\n[@zlidner]: https://github.com/zlidner\n[@zlindner]: https://github.com/zlindner\n[@marcustut]: https://github.com/marcustut\n[@rakshith-ravi]: https://github.com/rakshith-ravi\n[@bradfier]: https://github.com/bradfier\n[@fuzzbuck]: https://github.com/fuzzbuck\n[@cycraig]: https://github.com/cycraig\n[@fasterthanlime]: https://github.com/fasterthanlime\n[@he4d]: https://github.com/he4d\n[@DXist]: https://github.com/DXist\n[@Wopple]: https://github.com/Wopple\n[@TravisWhitehead]: https://github.com/TravisWhitehead\n[@ThibsG]: https://github.com/ThibsG\n[@rongcuid]: https://github.com/rongcuid\n[@moatra]: https://github.com/moatra\n[@penberg]: https://github.com/penberg\n[@saiintbrisson]: https://github.com/saiintbrisson\n[@FSMaxB]: https://github.com/FSMaxB\n[@95ulisse]: https://github.com/95ulisse\n[@miles170]: https://github.com/miles170\n[@ar3s3ru]: https://github.com/ar3s3ru\n[@cdbfoster]: https://github.com/cdbfoster\n[@andyquinterom]: https://github.com/andyquinterom\n[@CosmicHorrorDev]: https://github.com/CosmicHorrorDev\n[@VictorKoenders]: https://github.com/VictorKoenders\n[@joehillen]: https://github.com/joehillen\n[@OverHash]: https://github.com/OverHash\n[@laundmo]: https://github.com/laundmo\n[@nbaztec]: https://github.com/nbaztec\n[@bgeron]: https://github.com/bgeron\n[@benesch]: https://github.com/benesch\n[@nstinus]: https://github.com/nstinus\n[@grgi]: https://github.com/grgi\n[@sergeiivankov]: https://github.com/sergeiivankov\n[@jaysonsantos]: https://github.com/jaysonsantos\n[@dbrgn]: https://github.com/dbrgn\n[@grantkee]: https://github.com/grantkee\n[@bnoctis]: https://github.com/bnoctis\n[@aschey]: https://github.com/aschey\n[@df51d]: https://github.com/df51d\n[@codahale]: https://github.com/codahale\n[@arlyon]: https://github.com/arlyon\n[@SergioBenitez]: https://github.com/SergioBenitez\n[@tgeoghegan]: https://github.com/tgeoghegan\n[@vizvasrj]: https://github.com/vizvasrj\n[@phlip9]: https://github.com/phlip9\n[@MidasLamb]: https://github.com/MidasLamb\n[@utkarshgupta137]: https://github.com/utkarshgupta137\n[@Arcayr]: https://github.com/Arcayr\n[@mdecimus]: https://github.com/mdecimus\n[@Razican]: https://github.com/Razican\n[@southball]: https://github.com/southball\n[@alilleybrinker]: https://github.com/alilleybrinker\n[@titaniumtraveler]: https://github.com/titaniumtraveler\n[@nyurik]: https://github.com/nyurik\n[@stepantubanov]: https://github.com/stepantubanov\n[@iamquang95]: https://github.com/iamquang95\n[@jnnnnn]: https://github.com/jnnnnn\n[@saolof]: https://github.com/saolof\n[@deneut]: https://github.com/deneut\n[@kitterion]: https://github.com/kitterion\n[@denschub]: https://github.com/denschub\n[@fd]: https://github.com/fd\n[@mrl5]: https://github.com/mrl5\n[@Xydez]: https://github.com/Xydez\n[@vabka]: https://github.com/vabka\n[@ldanilek]: https://github.com/ldanilek\n[@inahga]: https://github.com/inahga\n[@JockeM]: https://github.com/JockeM\n[@vmax]: https://github.com/vmax\n[@sebastianv89]: https://github.com/sebastianv89\n[@marcusirgens]: https://github.com/marcusirgens\n[@tsing]: https://github.com/tsing\n[@snf]: https://github.com/snf\n[@wyhaya]: https://github.com/wyhaya\n[@hakoerber]: https://github.com/hakoerber\n[@olback]: https://github.com/olback\n[@kryptan]: https://github.com/kryptan\n[@grant0417]: https://github.com/grant0417\n[@fermanjj]: https://github.com/fermanjj\n[@grooverdan]: https://github.com/grooverdan\n[@bobozaur]: https://github.com/bobozaur\n[@aldur]: https://github.com/aldur\n[@hgranthorner]: https://github.com/hgranthorner\n[@ripa1995]: https://github.com/ripa1995\n[@fhsgoncalves]: https://github.com/fhsgoncalves\n[@uttarayan21]: https://github.com/uttarayan21\n[@tk2217]: https://github.com/tk2217\n[@hamiltop]: https://github.com/hamiltop\n[@cameronbraid]: https://github.com/cameronbraid\n[@Baptistemontan]: https://github.com/Baptistemontan\n[@satwanjyu]: https://github.com/satwanjyu\n[@boris-lok]: https://github.com/boris-lok\n[@qwerty2501]: https://github.com/qwerty2501\n[@Nemo157]: https://github.com/Nemo157\n[@snspinn]: https://github.com/snspinn\n[@granddaifuku]: https://github.com/granddaifuku\n[@yasamoka]: https://github.com/yasamoka\n[@mattfbacon]: https://github.com/mattfbacon\n[@A248]: https://github.com/A248\n[@conradludgate]: https://github.com/conradludgate\n[@anupj]: https://github.com/anupj\n[@nanoqsh]: https://github.com/nanoqsh\n[@brianheineman]: https://github.com/brianheineman\n[@jkleinknox]: https://github.com/jkleinknox\n[@cryeprecision]: https://github.com/cryeprecision\n[@Vrajs16]: https://github.com/Vrajs16\n[@shiftrightonce]: https://github.com/shiftrightonce\n[@tamasfe]: https://github.com/tamasfe\n[@lily-mosquitoes]: https://github.com/lily-mosquitoes\n[@larsschumacher]: https://github.com/larsschumacher\n[@shengsheng]: https://github.com/shengsheng\n[@Fyko]: https://github.com/Fyko\n[@kshramt]: https://github.com/kshramt\n[@Dawsoncodes]: https://github.com/Dawsoncodes\n[@tadghh]: https://github.com/tadghh\n[@holicc]: https://github.com/holicc\n[@takenoko-gohan]: https://github.com/takenoko-gohan\n[@iangilfillan]: https://github.com/iangilfillan\n[@iamjpotts]: https://github.com/iamjpotts\n[@Icerath]: https://github.com/Icerath\n[@pawurb]: https://github.com/pawurb\n[@darkecho731]: https://github.com/darkecho731\n[@mirek26]: https://github.com/mirek26\n[@Ekleog]: https://github.com/Ekleog\n[@zoomiti]: https://github.com/zoomiti\n[@ciffelia]: https://github.com/ciffelia\n[@rafaelGuerreiro]: https://github.com/rafaelGuerreiro\n[@alu]: https://github.com/alu\n[@BadBastion]: https://github.com/BadBastion\n[@tylerhawkes]: https://github.com/tylerhawkes\n[@g-bartoszek]: https://github.com/g-bartoszek\n[@benluelo]: https://github.com/benluelo\n[@ralpha]: https://github.com/ralpha\n[@nitn3lav]: https://github.com/nitn3lav\n[@FlakM]: https://github.com/FlakM\n[@hoxxep]: https://github.com/hoxxep\n[@NfNitLoop]: https://github.com/NfNitLoop\n[@GnomedDev]: https://github.com/GnomedDev\n[@pxp9]: https://github.com/pxp9\n[@RaghavRox]: https://github.com/RaghavRox\n[@cleverjam]: https://github.com/cleverjam\n[@BlackSoulHub]: https://github.com/BlackSoulHub\n[@levkk]: https://github.com/levkk\n[@danjpgriffin]: https://github.com/danjpgriffin\n[@toxeus]: https://github.com/toxeus\n[@jasonish]: https://github.com/jasonish\n[@AlphaKeks]: https://github.com/AlphaKeks\n[@Zarathustra2]: https://github.com/Zarathustra2\n[@gridbox]: https://github.com/gridbox\n[@joelkoen]: https://github.com/joelkoen\n[@nk9]: https://github.com/nk9\n[@etorreborre]: https://github.com/etorreborre\n[@LecrisUT]: https://github.com/LecrisUT\n[@JohannesIBK]: https://github.com/JohannesIBK\n[@Lachstec]: https://github.com/Lachstec\n[@SrGesus]: https://github.com/SrGesus\n[@CommanderStorm]: https://github.com/CommanderStorm\n[@hamirmahal]: https://github.com/hamirmahal\n[@DirectorX]: https://github.com/DirectorX\n[@KobusEllis]: https://github.com/KobusEllis\n[@YgorSouza]: https://github.com/YgorSouza\n[@Zarthus]: https://github.com/Zarthus\n[@ckampfe]: https://github.com/ckampfe\n[@tottoto]: https://github.com/tottoto\n[@ods]: https://github.com/ods\n[@soucosmo]: https://github.com/soucosmo\n[@kolinfluence]: https://github.com/kolinfluence\n[@joeydewaal]: https://github.com/joeydewaal\n[@pierre-wehbe]: https://github.com/pierre-wehbe\n[@carschandler]: https://github.com/carschandler\n[@kdesjard]: https://github.com/kdesjard\n[@luveti]: https://github.com/luveti\n[@dojiong]: https://github.com/dojiong\n[@jayvdb]: https://github.com/jayvdb\n[@kurtbuilds]: https://github.com/kurtbuilds\n[@lilydjwg]: https://github.com/lilydjwg\n[@M3t0r]: https://github.com/M3t0r\n[@vsuryamurthy]: https://github.com/vsuryamurthy\n[@manifest]: https://github.com/manifest\n[@tbar4]: https://github.com/tbar4\n[@sandhose]: https://github.com/sandhose\n[@IlyaBizyaev]: https://github.com/IlyaBizyaev\n[@philipcristiano]: https://github.com/philipcristiano\n[@xuehaonan27]: https://github.com/xuehaonan27\n[@chanks]: https://github.com/chanks\n[@Ddystopia]: https://github.com/Ddystopia\n[@veigaribo]: https://github.com/veigaribo\n[@Norlock]: https://github.com/Norlock\n[@swlynch99]: https://github.com/swlynch99\n[@BenoitRanque]: https://github.com/BenoitRanque\n[@hsivonen]: https://github.com/hsivonen\n[@andreweggleston]: https://github.com/andreweggleston\n[@Suficio]: https://github.com/Suficio\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.7333984375,
          "content": "# How to contribute\n\nSo, you've decided to contribute, that's great!\n\nYou can use this document to figure out how and where to start.\n\n## Getting started\n\n- Make sure you have a [GitHub account](https://github.com/join).\n- Take a look at [existing issues](https://github.com/launchbadge/sqlx/issues).\n- If you need to create an issue:\n  - Make sure to clearly describe it.\n  - Including steps to reproduce when it is a bug.\n  - Include the version of SQLx used.\n  - Include the database driver and version.\n  - Include the database version.\n\n## Making changes\n\n- Fork the repository on GitHub.\n- Create a branch on your fork.\n  - You can usually base it on the `main` branch.\n  - Make sure not to commit directly to `main`.\n- Make commits of logical and atomic units.\n- Make sure you have added the necessary tests for your changes.\n- Push your changes to a topic branch in your fork of the repository.\n- Submit a pull request to the original repository.\n\n## What to work on\n\nWe try to mark issues with a suggested level of experience (in Rust/SQL/SQLx).\nWhere possible we try to spell out how to go about implementing the feature.\n\nTo start with, check out:\n- Issues labeled as [\"good first issue\"](https://github.com/launchbadge/sqlx/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22).\n- Issues labeled as [\"Easy\"](https://github.com/launchbadge/sqlx/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy).\n\nAdditionally, it's always good to work on improving/adding examples and documentation.\n\n## Communication\n\nIf you're unsure about your contribution or simply want to ask a question about anything, you can:\n- Visit the [SQLx Discord server](https://discord.gg/uuruzJ7)\n- Discuss something directly in the [Github issue](https://github.com/launchbadge/sqlx/issues).\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 115.9951171875,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 4\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2969dcb958b36655471fc61f7e416fa76033bdd4bfed0678d8fee1e2d07a1f0\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"allocator-api2\"\nversion = \"0.2.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0942ffc6dcaadf03badf6e6a2d0228460359d5e34b57ccdc720b7382dfbd5ec5\"\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anes\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b46cbb362ab8752921c97e041f5e366ee6297bd428a31275b9fcf1e380f7299\"\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d96bd03f33fe50a863e394ee9718a706f988b9079b20c3784fb726e7678b62fb\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8901269c6307e8d93993578286ac0edf7f195079ffff5ebdeea6a59ffb7e36bc\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c75ac65da39e5fe5ab759307499ddad880d724eed2f6ce5b5e8a26f4f387928c\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e28923312444cdd728e4738b3f9c9cac739500909bb3d3c94b43551b16517648\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1cd54b81ec8d6180e24654d0b371ad22fc3dd083b6ff8ba325b72e00c87660a7\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0952808a6c2afd1aa8947271f3a60f1a6763c7b912d210184c5149b5cf147247\"\n\n[[package]]\nname = \"argon2\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db4ce4441f99dbd377ca8a8f57b698c44d0d6e712d8329b5040da5a64aa1ce73\"\ndependencies = [\n \"base64ct\",\n \"blake2\",\n \"password-hash\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"assert_cmd\"\nversion = \"2.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed72493ac66d5804837f480ab3766c72bdfab91a65e565fc54fa9e42db0073a8\"\ndependencies = [\n \"anstyle\",\n \"bstr\",\n \"doc-comment\",\n \"predicates 3.1.0\",\n \"predicates-core\",\n \"predicates-tree\",\n \"wait-timeout\",\n]\n\n[[package]]\nname = \"async-attributes\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3203e79f4dd9bdda415ed03cf14dae5a2bf775c683a00f94e9cd1faf0f596e5\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"async-channel\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81953c529336010edd6d8e358f886d9581267795c61b19475b71314bffa46d35\"\ndependencies = [\n \"concurrent-queue\",\n \"event-listener 2.5.3\",\n \"futures-core\",\n]\n\n[[package]]\nname = \"async-channel\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f28243a43d821d11341ab73c80bed182dc015c514b951616cf79bd4af39af0c3\"\ndependencies = [\n \"concurrent-queue\",\n \"event-listener 5.2.0\",\n \"event-listener-strategy 0.5.0\",\n \"futures-core\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-executor\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17ae5ebefcc48e7452b4987947920dac9450be1110cadf34d1b8c116bdbaf97c\"\ndependencies = [\n \"async-lock 3.3.0\",\n \"async-task\",\n \"concurrent-queue\",\n \"fastrand 2.0.1\",\n \"futures-lite 2.2.0\",\n \"slab\",\n]\n\n[[package]]\nname = \"async-global-executor\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05b1b633a2115cd122d73b955eadd9916c18c8f510ec9cd1686404c60ad1c29c\"\ndependencies = [\n \"async-channel 2.2.0\",\n \"async-executor\",\n \"async-io 2.3.2\",\n \"async-lock 3.3.0\",\n \"blocking\",\n \"futures-lite 2.2.0\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"async-io\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fc5b45d93ef0529756f812ca52e44c221b35341892d3dcc34132ac02f3dd2af\"\ndependencies = [\n \"async-lock 2.8.0\",\n \"autocfg\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"futures-lite 1.13.0\",\n \"log\",\n \"parking\",\n \"polling 2.8.0\",\n \"rustix 0.37.27\",\n \"slab\",\n \"socket2 0.4.10\",\n \"waker-fn\",\n]\n\n[[package]]\nname = \"async-io\"\nversion = \"2.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcccb0f599cfa2f8ace422d3555572f47424da5648a4382a9dd0310ff8210884\"\ndependencies = [\n \"async-lock 3.3.0\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"futures-io\",\n \"futures-lite 2.2.0\",\n \"parking\",\n \"polling 3.5.0\",\n \"rustix 0.38.31\",\n \"slab\",\n \"tracing\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"async-lock\"\nversion = \"2.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"287272293e9d8c41773cec55e365490fe034813a2f172f502d6ddcf75b2f582b\"\ndependencies = [\n \"event-listener 2.5.3\",\n]\n\n[[package]]\nname = \"async-lock\"\nversion = \"3.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d034b430882f8381900d3fe6f0aaa3ad94f2cb4ac519b429692a1bc2dda4ae7b\"\ndependencies = [\n \"event-listener 4.0.3\",\n \"event-listener-strategy 0.4.0\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"async-std\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c634475f29802fde2b8f0b505b1bd00dfe4df7d4a000f0b36f7671197d5c3615\"\ndependencies = [\n \"async-attributes\",\n \"async-channel 1.9.0\",\n \"async-global-executor\",\n \"async-io 2.3.2\",\n \"async-lock 3.3.0\",\n \"crossbeam-utils\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-lite 2.2.0\",\n \"gloo-timers\",\n \"kv-log-macro\",\n \"log\",\n \"memchr\",\n \"once_cell\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n \"wasm-bindgen-futures\",\n]\n\n[[package]]\nname = \"async-task\"\nversion = \"4.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbb36e985947064623dbd357f727af08ffd077f93d696782f3c56365fa2e2799\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.77\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c980ee35e870bd1a4d2c8294d4c04d0499e67bca1e4b5cefcc693c2fa00caea9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"atoi\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f28d99ec8bfea296261ca1af174f24225171fea9664ba9003cbebee704810528\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"atomic-waker\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1505bd5d3d116872e7271a6d4e16d81d0c8570876c8de68093a09ac269d8aac0\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n\n[[package]]\nname = \"aws-lc-rs\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8a47f2fb521b70c11ce7369a6c5fa4bd6af7e5d62ec06303875bafe7c6ba245\"\ndependencies = [\n \"aws-lc-sys\",\n \"mirai-annotations\",\n \"paste\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"aws-lc-sys\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2927c7af777b460b7ccd95f8b67acd7b4c04ec8896bf0c8e80ba30523cffc057\"\ndependencies = [\n \"bindgen\",\n \"cc\",\n \"cmake\",\n \"dunce\",\n \"fs_extra\",\n \"libc\",\n \"paste\",\n]\n\n[[package]]\nname = \"axum\"\nversion = \"0.5.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acee9fd5073ab6b045a275b3e709c163dd36c90685219cb21804a147b58dba43\"\ndependencies = [\n \"async-trait\",\n \"axum-core\",\n \"axum-macros\",\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"hyper\",\n \"itoa\",\n \"matchit\",\n \"memchr\",\n \"mime\",\n \"percent-encoding\",\n \"pin-project-lite\",\n \"serde\",\n \"serde_json\",\n \"serde_urlencoded\",\n \"sync_wrapper\",\n \"tokio\",\n \"tower\",\n \"tower-http\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"axum-core\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37e5939e02c56fecd5c017c37df4238c0a839fa76b7f97acdd7efb804fd181cc\"\ndependencies = [\n \"async-trait\",\n \"bytes\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"mime\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"axum-macros\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6293dae2ec708e679da6736e857cf8532886ef258e92930f38279c12641628b8\"\ndependencies = [\n \"heck 0.4.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"backoff\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b62ddb9cb1ec0a098ad4bbf9344d0713fa193ae1a80af55febcff2627b6a00c1\"\ndependencies = [\n \"futures-core\",\n \"getrandom\",\n \"instant\",\n \"pin-project-lite\",\n \"rand\",\n \"tokio\",\n]\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2089b7e3f35b9dd2d0ed921ead4f6d318c27680d4a5bd167b3ee120edb105837\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9475866fec1451be56a3c2400fd081ff546538961565ccb5b7142cbd22bc7a51\"\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b\"\n\n[[package]]\nname = \"basic-toml\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"823388e228f614e9558c6804262db37960ec8821856535f5c3f59913140558f8\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bigdecimal\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9324c8014cd04590682b34f1e9448d38f0674d0f7b2dc553331016ef0e4e9ebc\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n \"num-bigint\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"bindgen\"\nversion = \"0.69.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a00dc851838a2120612785d195287475a3ac45514741da670b735818822129a0\"\ndependencies = [\n \"bitflags 2.4.2\",\n \"cexpr\",\n \"clang-sys\",\n \"itertools 0.12.1\",\n \"lazy_static\",\n \"lazycell\",\n \"log\",\n \"prettyplease\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"rustc-hash\",\n \"shlex\",\n \"syn 2.0.87\",\n \"which\",\n]\n\n[[package]]\nname = \"bit-vec\"\nversion = \"0.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"349f9b6a179ed607305526ca489b34ad0a41aed5f7980fa90eb03160b69598fb\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed570934406eb16438a4e976b1b4500774099c13b8cb96eec99f620f05090ddf\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"blocking\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a37913e8dc4ddcc604f0c6d3bf2887c995153af3611de9e23c352b44c1b9118\"\ndependencies = [\n \"async-channel 2.2.0\",\n \"async-lock 3.3.0\",\n \"async-task\",\n \"fastrand 2.0.1\",\n \"futures-io\",\n \"futures-lite 2.2.0\",\n \"piper\",\n \"tracing\",\n]\n\n[[package]]\nname = \"borsh\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6362ed55def622cddc70a4746a68554d7b687713770de539e59a739b249f8ed\"\ndependencies = [\n \"borsh-derive\",\n \"cfg_aliases\",\n]\n\n[[package]]\nname = \"borsh-derive\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ef8005764f53cd4dca619f5bf64cafd4664dada50ece25e4d81de54c80cc0b\"\ndependencies = [\n \"once_cell\",\n \"proc-macro-crate\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"syn_derive\",\n]\n\n[[package]]\nname = \"bstr\"\nversion = \"1.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05efc5cfd9110c8416e471df0e96702d58690178e206e61b7173706673c93706\"\ndependencies = [\n \"memchr\",\n \"regex-automata\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ff69b9dd49fd426c69a0db9fc04dd934cdb6645ff000864d98f7e2af8830eaa\"\n\n[[package]]\nname = \"bytecheck\"\nversion = \"0.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23cdc57ce23ac53c931e88a43d06d070a6fd142f2617be5855eb75efc9beb1c2\"\ndependencies = [\n \"bytecheck_derive\",\n \"ptr_meta\",\n \"simdutf8\",\n]\n\n[[package]]\nname = \"bytecheck_derive\"\nversion = \"0.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3db406d29fbcd95542e92559bed4d8ad92636d1ca8b3b72ede10b4bcc010e659\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2bd12c1caf447e69cd4528f47f94d203fd2582878ecb9e9465484c4148a8223\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"694c8807f2ae16faecc43dc17d74b3eb042482789fd0eb64b39a2e04e087053f\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror 1.0.58\",\n]\n\n[[package]]\nname = \"cassowary\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df8670b8c7b9dae1793364eafadf7239c40d669904660c5960d74cfd80b46a53\"\n\n[[package]]\nname = \"cast\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37b2a672a2cb129a2e41c10b1224bb368f9f37a2b16b612598138befd7b37eb5\"\n\n[[package]]\nname = \"castaway\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0abae9be0aaf9ea96a3b1b8b1b55c602ca751eba1b1500220cea4ecbafe7c0d5\"\ndependencies = [\n \"rustversion\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2aba8f4e9906c7ce3c73463f62a7f0c65183ada1a2d47e397cc8810827f9694f\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n]\n\n[[package]]\nname = \"cexpr\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6fac387a98bb7c37292057cffc56d62ecb629900026402633ae9160df93a8766\"\ndependencies = [\n \"nom\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eaf5903dcbc0a39312feb77df2ff4c76387d591b9fc7b04a238dcf8bb62639a\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"serde\",\n \"windows-targets 0.52.4\",\n]\n\n[[package]]\nname = \"ciborium\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42e69ffd6f0917f5c029256a24d0161db17cea3997d185db0d35926308770f0e\"\ndependencies = [\n \"ciborium-io\",\n \"ciborium-ll\",\n \"serde\",\n]\n\n[[package]]\nname = \"ciborium-io\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05afea1e0a06c9be33d539b876f1ce3692f4afea2cb41f740e7743225ed1c757\"\n\n[[package]]\nname = \"ciborium-ll\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57663b653d948a338bfb3eeba9bb2fd5fcfaecb9e199e87e1eda4d9e8b240fd9\"\ndependencies = [\n \"ciborium-io\",\n \"half\",\n]\n\n[[package]]\nname = \"clang-sys\"\nversion = \"1.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b023947811758c97c59bf9d1c188fd619ad4718dcaa767947df1cadb14f39f4\"\ndependencies = [\n \"glob\",\n \"libc\",\n \"libloading\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b230ab84b0ffdf890d5a10abdbc8b83ae1c4918275daea1ab8801f71536b2651\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae129e2e766ae0ec03484e609954119f123cc1fe650337e155d03b022f24f7b4\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim 0.11.0\",\n]\n\n[[package]]\nname = \"clap_complete\"\nversion = \"4.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"885e4d7d5af40bfb99ae6f9433e292feac98d452dcb3ec3d25dfe7552b77da8c\"\ndependencies = [\n \"clap\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"307bc0538d5f0f83b8248db3087aa92fe504e4691294d0c96c0eabc33f47ba47\"\ndependencies = [\n \"heck 0.4.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce\"\n\n[[package]]\nname = \"clipboard-win\"\nversion = \"4.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7191c27c2357d9b7ef96baac1773290d4ca63b24205b82a3fd8a0637afcf0362\"\ndependencies = [\n \"error-code\",\n \"str-buf\",\n \"winapi\",\n]\n\n[[package]]\nname = \"cmake\"\nversion = \"0.1.50\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a31c789563b815f77f4250caee12365734369f942439b7defd71e18a48197130\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"compact_str\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f86b9c4c00838774a6d902ef931eff7470720c51d90c2e32cfe15dc304737b3f\"\ndependencies = [\n \"castaway\",\n \"cfg-if\",\n \"itoa\",\n \"ryu\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"concurrent-queue\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d16048cd947b08fa32c24458a22f5dc5e835264f689f4f5653210c69fd107363\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"const-oid\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8\"\n\n[[package]]\nname = \"core-foundation\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91e195e091a93c46f7102ec7818a2aa394e1e1771c3ab4825963fa03e45afb8f\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86ec7a15cbe22e59248fc7eadb1907dab5ba09372595da4d73dd805ed4417dfe\"\ndependencies = [\n \"crc-catalog\",\n]\n\n[[package]]\nname = \"crc-catalog\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19d374276b40fb8bbdee95aef7c7fa6b5316ec764510eb64b8dd0e2ed0d7e7f5\"\n\n[[package]]\nname = \"criterion\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2b12d017a929603d80db1831cd3a24082f8137ce19c69e6447f54f5fc8d692f\"\ndependencies = [\n \"anes\",\n \"cast\",\n \"ciborium\",\n \"clap\",\n \"criterion-plot\",\n \"futures\",\n \"is-terminal\",\n \"itertools 0.10.5\",\n \"num-traits\",\n \"once_cell\",\n \"oorandom\",\n \"plotters\",\n \"rayon\",\n \"regex\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"tinytemplate\",\n \"tokio\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"criterion-plot\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b50826342786a51a89e2da3a28f1c32b06e387201bc2d19791f622c673706b1\"\ndependencies = [\n \"cast\",\n \"itertools 0.10.5\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df0346b5d5e76ac2fe4e327c5fd1118d6be7c51dfb18f9b7922923f287471e35\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345\"\n\n[[package]]\nname = \"crossterm\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f476fe445d41c9e991fd07515a6f463074b782242ccf4a5b7b1d1012e70824df\"\ndependencies = [\n \"bitflags 2.4.2\",\n \"crossterm_winapi\",\n \"libc\",\n \"mio\",\n \"parking_lot\",\n \"signal-hook\",\n \"signal-hook-mio\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crossterm_winapi\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acdd7c62a3665c7f6830a51635d9ac9b23ed385797f70a83bb8bafe9c572ab2b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54e36fcd13ed84ffdfda6f5be89b31287cbb80c439841fe69e04841435464391\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c2cf1c23a687a1feeb728783b993c4e1ad83d99f351801977dd809b48d0a70f\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim 0.10.0\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a668eda54683121533a393014d8692171709ff57a7d61f187b6e782719f8933f\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"der\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fffa369a668c8af7dbf8b5e56c9f744fbd399949ed171606040001947de40b1c\"\ndependencies = [\n \"const-oid\",\n \"pem-rfc7468\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"deranged\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b42b6fa04a440b495c8b04d0e71b707c585f83cb9cb28cf8cd0d976c315e31b4\"\ndependencies = [\n \"powerfmt\",\n \"serde\",\n]\n\n[[package]]\nname = \"difflib\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"const-oid\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ebda144c4fe02d1f7ea1a7d9641b6fc6b580adcfa024ae48797ecdeb6825b4d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"doc-comment\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10\"\n\n[[package]]\nname = \"dotenvy\"\nversion = \"0.15.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1aaf95b3e5c8f23aa320147307562d361db0ae0d51242340f558153b4eb2439b\"\n\n[[package]]\nname = \"downcast\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1435fa1053d8b2fbbe9be7e97eca7f33d37b28409959813daefc1446a14247f1\"\n\n[[package]]\nname = \"dunce\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56ce8c6da7551ec6c462cbaf3bfbc75131ebbfa1c944aeaa9dab51ca1c5f0c3b\"\n\n[[package]]\nname = \"either\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11157ac094ffbdde99aa67b23417ebdd801842852b500e395a45a9c0aac03e4a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"endian-type\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c34f04666d835ff5d62e058c3995147c06f42fe86ff053337632bca83e42702d\"\n\n[[package]]\nname = \"env_filter\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a009aa4810eb158359dda09d0c87378e4bbb89b5a801f016885a4707ba24f7ea\"\ndependencies = [\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b35839ba51819680ba087cd351788c9a3c476841207e0b8cee0b04722343b9\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"env_filter\",\n \"humantime\",\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"error-code\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64f18991e7bf11e7ffee451b5318b5c1a73c52d0d0ada6e5a3017c8c1ced6a21\"\ndependencies = [\n \"libc\",\n \"str-buf\",\n]\n\n[[package]]\nname = \"etcetera\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943\"\ndependencies = [\n \"cfg-if\",\n \"home\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"event-listener\"\nversion = \"2.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0206175f82b8d6bf6652ff7d71a1e27fd2e4efde587fd368662814d6ec1d9ce0\"\n\n[[package]]\nname = \"event-listener\"\nversion = \"4.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67b215c49b2b248c855fb73579eb1f4f26c38ffdc12973e20e07b91d78d5646e\"\ndependencies = [\n \"concurrent-queue\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"event-listener\"\nversion = \"5.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b5fb89194fa3cad959b833185b3063ba881dbfc7030680b314250779fb4cc91\"\ndependencies = [\n \"concurrent-queue\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"event-listener-strategy\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"958e4d70b6d5e81971bebec42271ec641e7ff4e170a6fa605f2b8a8b65cb97d3\"\ndependencies = [\n \"event-listener 4.0.3\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"event-listener-strategy\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"feedafcaa9b749175d5ac357452a9d41ea2911da598fde46ce1fe02c37751291\"\ndependencies = [\n \"event-listener 5.2.0\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e51093e27b0797c359783294ca4f0a911c270184cb10f85783b118614a1501be\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25cbce373ec4653f1a01a31e8a5e5ec0c622dc27ff9c4e6606eefef5cbbed4a5\"\n\n[[package]]\nname = \"fd-lock\"\nversion = \"3.0.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef033ed5e9bad94e55838ca0ca906db0e043f517adda0c8b79c7a8c66c93c1b5\"\ndependencies = [\n \"cfg-if\",\n \"rustix 0.38.31\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ee447700ac8aa0b2f2bd7bc4462ad686ba06baa6727ac149a2d6277f0d240fd\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"finl_unicode\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fcfdc7a0362c9f4444381a9e697c79d435fe65b52a37466fc2c1184cee9edc6\"\n\n[[package]]\nname = \"float-cmp\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98de4bbd547a563b716d8dfa9aad1cb19bfab00f4fa09a6a4ed21dbcf44ce9c4\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"flume\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55ac459de2512911e4b674ce33cf20befaba382d05b62b008afc1c8b57cbf181\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n \"spin 0.9.8\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"foldhash\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f81ec6369c545a7d40e4589b5597581fa1c441fe1cce96dd1de43159910a36a2\"\n\n[[package]]\nname = \"foreign-types\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f6f339eb8adc052cd2ca78910fda869aefa38d22d5cb648e6485e4d3fc06f3b1\"\ndependencies = [\n \"foreign-types-shared\",\n]\n\n[[package]]\nname = \"foreign-types-shared\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00b0228411908ca8685dba7fc2cdd70ec9990a6e753e89b6ac91a84c40fbaf4b\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"fragile\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c2141d6d6c8512188a7891b4b01590a45f6dac67afb4f255c4124dbb86d4eaa\"\n\n[[package]]\nname = \"fs_extra\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42703706b716c37f96a77aea830392ad231f44c9e9a67872fa5548707e11b11c\"\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-intrusive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d930c203dd0b6ff06e0201a4a2fe9149b43c684fd4420555b26d21b1a02956f\"\ndependencies = [\n \"futures-core\",\n \"lock_api\",\n \"parking_lot\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1\"\n\n[[package]]\nname = \"futures-lite\"\nversion = \"1.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49a9d51ce47660b1e808d3c990b4709f2f415d928835a17dfd16991515c46bce\"\ndependencies = [\n \"fastrand 1.9.0\",\n \"futures-core\",\n \"futures-io\",\n \"memchr\",\n \"parking\",\n \"pin-project-lite\",\n \"waker-fn\",\n]\n\n[[package]]\nname = \"futures-lite\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"445ba825b27408685aaecefd65178908c36c6e96aaf6d8599419d46e624192ba\"\ndependencies = [\n \"fastrand 2.0.1\",\n \"futures-core\",\n \"futures-io\",\n \"parking\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"190092ea657667030ac6a35e305e62fc4dd69fd98ac98631e5d3a2b1575a12b5\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253\"\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"gloo-timers\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bbb143cf96099802033e0d4f4963b19fd2e0b728bcf076cd9cf7f6634f092994\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"half\"\nversion = \"2.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5eceaaeec696539ddaf7b333340f1af35a5aa87ae3e4f3ead0532f72affab2e\"\ndependencies = [\n \"cfg-if\",\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.8\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash 0.8.11\",\n \"allocator-api2\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\ndependencies = [\n \"allocator-api2\",\n \"equivalent\",\n \"foldhash\",\n]\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7382cf6263419f2d8df38c55d7da83da5c18aef87fc7a7fc1fb1e344edfe14c1\"\ndependencies = [\n \"hashbrown 0.15.2\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hkdf\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b5f8eb2ad728638ea2c7d47a21db23b7b58a72ed6a38256b8a1849f15fbbdf7\"\ndependencies = [\n \"hmac\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"http\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"601cbb57e577e2f5ef5be8e7b83f0f63994f25aa94d673e54a92d5c516d101f1\"\ndependencies = [\n \"bytes\",\n \"fnv\",\n \"itoa\",\n]\n\n[[package]]\nname = \"http-body\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ceab25649e9960c0311ea418d17bee82c0dcec1bd053b5f9a66e265a693bed2\"\ndependencies = [\n \"bytes\",\n \"http\",\n \"pin-project-lite\",\n]\n\n[[package]]\nname = \"http-range-header\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"add0ab9360ddbd88cfeb3bd9574a1d85cfdfa14db10b3e21d3700dbc4328758f\"\n\n[[package]]\nname = \"httparse\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d897f394bad6a705d5f4104762e116a75639e470d80901eed05a860a95cb1904\"\n\n[[package]]\nname = \"httpdate\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df3b46402a9d5adb4c86a0cf463f42e19994e3ee891101b1841f30a545cb49a9\"\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"hyper\"\nversion = \"0.14.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf96e135eb83a2a8ddf766e426a841d8ddd7449d5f00d34ea02b41d2f19eef80\"\ndependencies = [\n \"bytes\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"httparse\",\n \"httpdate\",\n \"itoa\",\n \"pin-project-lite\",\n \"socket2 0.5.6\",\n \"tokio\",\n \"tower-service\",\n \"tracing\",\n \"want\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7d20d6b07bfbc108882d88ed8e37d39636dcc260e15e30c45e6ba089610b917c\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"if_chain\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cb56e1aa765b4b4f3aadfab769793b7087bb03a4ea4920644a6d238e2df5b9ed\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n \"serde\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b0b929d511467233429c45a44ac1dcaa21ba0f5ba11e4879e6ed28ddb4f9df4\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"ipnetwork\"\nversion = \"0.20.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf466541e9d546596ee94f9f69590f89473455f88372423e0008fc1a7daf100e\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f23ff5ef2b80d608d61efee834934d862cd92461afc0560dedf493e4c033738b\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba291022dbbd398a455acf126c1e341954079855bc60dfdda641363bd6922569\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1a46d1a171d865aa5f83f92695765caa047a9b4cbae2cbf37dbd613a793fd4c\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2b099aaa34a9751c5bf0878add70444e1ed2dd73f347be99003d4577277de6e\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"kv-log-macro\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0de8b303297635ad57c9f5059fd9cee7a47f8e8daa09df0fcd07dd39fb22977f\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\ndependencies = [\n \"spin 0.5.2\",\n]\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.153\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c198f91728a82281a64e1f4f9eeb25d82cb32a5de251c6bd1b5154d63a8e7bd\"\n\n[[package]]\nname = \"libloading\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e310b3a6b5907f99202fcdb4960ff45b93735d7c7d96b760fcff8db2dc0e103d\"\ndependencies = [\n \"cfg-if\",\n \"windows-targets 0.52.4\",\n]\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"libredox\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85c833ca1e66078851dba29046874e38f08b2c883700aa29a03ddd3b23814ee8\"\ndependencies = [\n \"bitflags 2.4.2\",\n \"libc\",\n \"redox_syscall\",\n]\n\n[[package]]\nname = \"libsqlite3-sys\"\nversion = \"0.30.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2e99fb7a497b1e3339bc746195567ed8d3e24945ecd636e3619d20b9de9e9149\"\ndependencies = [\n \"bindgen\",\n \"cc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"643cb0b8d4fcc284004d5fd0d67ccf61dfffadb7f75e1e71bc420f4688a3a704\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\ndependencies = [\n \"value-bag\",\n]\n\n[[package]]\nname = \"lru\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3262e75e648fce39813cb56ac41f3c3e3f65217ebf3844d818d1f9398cfb0dc\"\ndependencies = [\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"mac_address\"\nversion = \"1.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4863ee94f19ed315bf3bc00299338d857d4b5bc856af375cc97d237382ad3856\"\ndependencies = [\n \"nix\",\n \"winapi\",\n]\n\n[[package]]\nname = \"matchit\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73cbba799671b762df5a175adf59ce145165747bb891505c43d09aefbbf38beb\"\n\n[[package]]\nname = \"md-5\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d89e7ee0cfbedfc4da3340218492196241d89eefb6dab27de5df917a6d2e78cf\"\ndependencies = [\n \"cfg-if\",\n \"digest\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"523dc4f511e55ab87b694dc30d0f820d60906ef06413f93d4d7a1385599cc149\"\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"mime\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6877bb514081ee2a7ff5ef9de3281f14a4dd4bceac4c09388074a6b5df8a139a\"\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4a650543ca06a924e8b371db273b2756685faae30f8487da1b56505a8f78b0c\"\ndependencies = [\n \"libc\",\n \"log\",\n \"wasi\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"mirai-annotations\"\nversion = \"1.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c9be0862c1b3f26a88803c4a49de6889c10e608b3ee9344e6ef5b45fb37ad3d1\"\n\n[[package]]\nname = \"mockall\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c84490118f2ee2d74570d114f3d0493cbf02790df303d2707606c3e14e07c96\"\ndependencies = [\n \"cfg-if\",\n \"downcast\",\n \"fragile\",\n \"lazy_static\",\n \"mockall_derive\",\n \"predicates 2.1.5\",\n \"predicates-tree\",\n]\n\n[[package]]\nname = \"mockall_derive\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ce75669015c4f47b289fd4d4f56e894e4c96003ffdf3ac51313126f94c6cbb\"\ndependencies = [\n \"cfg-if\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"native-tls\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07226173c32f2926027b63cce4bcd8076c3552846cbe7925f3aaffeac0a3b92e\"\ndependencies = [\n \"lazy_static\",\n \"libc\",\n \"log\",\n \"openssl\",\n \"openssl-probe\",\n \"openssl-sys\",\n \"schannel\",\n \"security-framework\",\n \"security-framework-sys\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"nibble_vec\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a5d83df9f36fe23f0c3648c6bbb8b0298bb5f1939c8f2704431371f4b84d43\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.23.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f3790c00a0150112de0f4cd161e3d7fc4b2d8a5542ffc35f099a2562aecb35c\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"memoffset\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"normalize-line-endings\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61807f77802ff30975e01f4f071c8ba10c022052f98b3294119f3e615d13e5be\"\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"608e7659b5c3d7cba262d894801b9ec9d00de989e8a82bd4bef91d08da45cdc0\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-bigint-dig\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc84195820f291c7697304f3cbdadd1cb7199c0efc917ff5eafd71225c136151\"\ndependencies = [\n \"byteorder\",\n \"lazy_static\",\n \"libm\",\n \"num-integer\",\n \"num-iter\",\n \"num-traits\",\n \"rand\",\n \"smallvec\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"num-conv\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51d515d32fb182ee37cda2ccdcb92950d6a3c2893aa280e540671c2cd0f3b1d9\"\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-iter\"\nversion = \"0.1.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d869c01cc0c455284163fd0092f1f93835385ccab5a98a0dcc497b2f8bf055a9\"\ndependencies = [\n \"autocfg\",\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a\"\ndependencies = [\n \"autocfg\",\n \"libm\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.32.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"oorandom\"\nversion = \"11.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575\"\n\n[[package]]\nname = \"openssl\"\nversion = \"0.10.64\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95a0481286a310808298130d22dd1fef0fa571e05a8f44ec801801e84b216b1f\"\ndependencies = [\n \"bitflags 2.4.2\",\n \"cfg-if\",\n \"foreign-types\",\n \"libc\",\n \"once_cell\",\n \"openssl-macros\",\n \"openssl-sys\",\n]\n\n[[package]]\nname = \"openssl-macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a948666b637a0f465e8564c73e89d4dde00d72d4d473cc972f390fc3dcee7d9c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"openssl-probe\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff011a302c396a5197692431fc1948019154afc178baf7d8e37367442a4601cf\"\n\n[[package]]\nname = \"openssl-src\"\nversion = \"300.2.3+3.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cff92b6f71555b61bb9315f7c64da3ca43d87531622120fea0195fc761b4843\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"openssl-sys\"\nversion = \"0.9.101\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dda2b0f344e78efc2facf7d195d098df0dd72151b26ab98da807afc26c198dff\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"openssl-src\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"parking\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb813b8af86854136c6922af0598d719255ecb2179515e6e7730d468f05c9cae\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3742b2c103b9f06bc9fff0a37ff4912935851bee6d36f3c02bcc755bcfec228f\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7676374caaee8a325c9e7a2ae557f216c5563a171d6997b0ef8a65af35147700\"\ndependencies = [\n \"base64ct\",\n \"rand_core\",\n \"subtle\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de3145af08024dea9fa9914f381a17b8fc6034dfb00f3a84013f7ff43f29ed4c\"\n\n[[package]]\nname = \"pem-rfc7468\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88b39c9bfcfc231068454382784bb460aae594343fb030d46e9f50a645418412\"\ndependencies = [\n \"base64ct\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project\"\nversion = \"1.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bf43b791c5b9e34c3d182969b4abb522f9343702850a2e57f460d00d09b4b3\"\ndependencies = [\n \"pin-project-internal\",\n]\n\n[[package]]\nname = \"pin-project-internal\"\nversion = \"1.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f38a4412a78282e09a2cf38d195ea5420d15ba0602cb375210efbc877243965\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8afb450f006bf6385ca15ef45d71d2288452bc3683ce2e2cacc0d18e4be60b58\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"piper\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"668d31b1c4eba19242f2088b2bf3316b82ca31082a8335764db4e083db7485d4\"\ndependencies = [\n \"atomic-waker\",\n \"fastrand 2.0.1\",\n \"futures-io\",\n]\n\n[[package]]\nname = \"pkcs1\"\nversion = \"0.7.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8ffb9f10fa047879315e6625af03c164b16962a5368d724ed16323b68ace47f\"\ndependencies = [\n \"der\",\n \"pkcs8\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkcs8\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7\"\ndependencies = [\n \"der\",\n \"spki\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n\n[[package]]\nname = \"plotters\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2c224ba00d7cadd4d5c660deaf2098e5e80e07846537c51f9cfa4be50c1fd45\"\ndependencies = [\n \"num-traits\",\n \"plotters-backend\",\n \"plotters-svg\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"plotters-backend\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e76628b4d3a7581389a35d5b6e2139607ad7c75b17aed325f210aa91f4a9609\"\n\n[[package]]\nname = \"plotters-svg\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38f6d39893cca0701371e3c27294f09797214b86f1fb951b89ade8ec04e2abab\"\ndependencies = [\n \"plotters-backend\",\n]\n\n[[package]]\nname = \"polling\"\nversion = \"2.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b2d323e8ca7996b3e23126511a523f7e62924d93ecd5ae73b333815b0eb3dce\"\ndependencies = [\n \"autocfg\",\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"concurrent-queue\",\n \"libc\",\n \"log\",\n \"pin-project-lite\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"polling\"\nversion = \"3.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24f040dee2588b4963afb4e420540439d126f73fdacf4a9c486a96d840bac3c9\"\ndependencies = [\n \"cfg-if\",\n \"concurrent-queue\",\n \"pin-project-lite\",\n \"rustix 0.38.31\",\n \"tracing\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"powerfmt\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"439ee305def115ba05938db6eb1644ff94165c5ab5e9420d1c1bcedbba909391\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"predicates\"\nversion = \"2.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"59230a63c37f3e18569bdb90e4a89cbf5bf8b06fea0b84e65ea10cc4df47addd\"\ndependencies = [\n \"difflib\",\n \"float-cmp\",\n \"itertools 0.10.5\",\n \"normalize-line-endings\",\n \"predicates-core\",\n \"regex\",\n]\n\n[[package]]\nname = \"predicates\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68b87bfd4605926cdfefc1c3b5f8fe560e3feca9d5552cf68c466d3d8236c7e8\"\ndependencies = [\n \"anstyle\",\n \"difflib\",\n \"predicates-core\",\n]\n\n[[package]]\nname = \"predicates-core\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b794032607612e7abeb4db69adb4e33590fa6cf1149e95fd7cb00e634b92f174\"\n\n[[package]]\nname = \"predicates-tree\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368ba315fb8c5052ab692e68a0eefec6ec57b23a36959c14496f0b0df2c0cecf\"\ndependencies = [\n \"predicates-core\",\n \"termtree\",\n]\n\n[[package]]\nname = \"prettyplease\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d3928fb5db768cb86f891ff014f0144589297e3c6a1aba6ed7cecfdace270c7\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f139b0662de085916d1fb67d2b4169d1addddda1919e696f3252b740b629986e\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"promptly\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9acbc6c5a5b029fe58342f58445acb00ccfe24624e538894bc2f04ce112980ba\"\ndependencies = [\n \"rustyline\",\n]\n\n[[package]]\nname = \"ptr_meta\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0738ccf7ea06b608c10564b31debd4f5bc5e197fc8bfe088f68ae5ce81e7a4f1\"\ndependencies = [\n \"ptr_meta_derive\",\n]\n\n[[package]]\nname = \"ptr_meta_derive\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16b845dbfca988fa33db069c0e230574d15a3088f147a87b64c7589eb662c9ac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.35\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"291ec9ab5efd934aaf503a6466c5d5251535d108ee747472c3977cc5acc868ef\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"radix_trie\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c069c179fcdc6a2fe24d8d18305cf085fdbd4f922c041943e203685d6a1c58fd\"\ndependencies = [\n \"endian-type\",\n \"nibble_vec\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rand_xoshiro\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f97cdb2a36ed4183de61b2f824cc45c9f1037f28afe0a322e9fff4c108b5aaa\"\ndependencies = [\n \"rand_core\",\n]\n\n[[package]]\nname = \"ratatui\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d16546c5b5962abf8ce6e2881e722b4e0ae3b6f1a08a26ae3573c55853ca68d3\"\ndependencies = [\n \"bitflags 2.4.2\",\n \"cassowary\",\n \"compact_str\",\n \"crossterm\",\n \"itertools 0.13.0\",\n \"lru\",\n \"paste\",\n \"stability\",\n \"strum\",\n \"strum_macros\",\n \"unicode-segmentation\",\n \"unicode-truncate\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4963ed1bc86e4f3ee217022bd855b297cef07fb9eac5dfa1f788b220b49b3bd\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a18479200779601e498ada4e8c1e1f50e3ee19deb0259c25825a98b5603b2cb4\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror 1.0.58\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b62dbe01f0b06f9d8dc7d49e05a0785f153b00b2c227856282f671e0318c9b15\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c08c74e62047bb2de4ff487b251e4a92e24f48745648451635cec7d591162d9f\"\n\n[[package]]\nname = \"rend\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71fe3824f5629716b1589be05dacd749f6aa084c87e00e016714a8cdfccc997c\"\ndependencies = [\n \"bytecheck\",\n]\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin 0.9.8\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rkyv\"\nversion = \"0.7.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5cba464629b3394fc4dbc6f940ff8f5b4ff5c7aef40f29166fd4ad12acbc99c0\"\ndependencies = [\n \"bitvec\",\n \"bytecheck\",\n \"bytes\",\n \"hashbrown 0.12.3\",\n \"ptr_meta\",\n \"rend\",\n \"rkyv_derive\",\n \"seahash\",\n \"tinyvec\",\n \"uuid\",\n]\n\n[[package]]\nname = \"rkyv_derive\"\nversion = \"0.7.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7dddfff8de25e6f62b9d64e6e432bf1c6736c57d20323e15ee10435fbda7c65\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"rsa\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d0e5124fcb30e76a7e79bfee683a2746db83784b86289f6251b54b7950a0dfc\"\ndependencies = [\n \"const-oid\",\n \"digest\",\n \"num-bigint-dig\",\n \"num-integer\",\n \"num-traits\",\n \"pkcs1\",\n \"pkcs8\",\n \"rand_core\",\n \"signature\",\n \"spki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rust_decimal\"\nversion = \"1.34.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b39449a79f45e8da28c57c341891b69a183044b29518bb8f86dbac9df60bb7df\"\ndependencies = [\n \"arrayvec\",\n \"borsh\",\n \"bytes\",\n \"num-traits\",\n \"rand\",\n \"rkyv\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.37.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea8ca367a3a01fe35e6943c400addf443c0f57670e6ec51196f71a4b8762dd2\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys 0.3.8\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea3e1a662af26cd7a3ba09c0297a31af215563ecf42817c98df621387f4e949\"\ndependencies = [\n \"bitflags 2.4.2\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys 0.4.13\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4828ea528154ae444e5a642dbb7d5623354030dc9822b83fd9bb79683c7399d0\"\ndependencies = [\n \"aws-lc-rs\",\n \"once_cell\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-native-certs\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcaf18a4f2be7326cd874a5fa579fae794320a0f388d365dca7e480e55f83f8a\"\ndependencies = [\n \"openssl-probe\",\n \"rustls-pemfile\",\n \"rustls-pki-types\",\n \"schannel\",\n \"security-framework\",\n]\n\n[[package]]\nname = \"rustls-pemfile\"\nversion = \"2.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29993a25686778eb88d4189742cd713c9bce943bc54251a33509dc63cbacf73d\"\ndependencies = [\n \"base64 0.22.0\",\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"976295e77ce332211c0d24d92c0e83e50f5c5f046d11082cea19f3df13a3562d\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9a6fccd794a42c2c105b513a2f62bc3fd8f3ba57a4593677ceb0bd035164d78\"\ndependencies = [\n \"aws-lc-rs\",\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"955d28af4278de8121b7ebeb796b6a45735dc01436d898801014aced2773a3d6\"\n\n[[package]]\nname = \"rustyline\"\nversion = \"9.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db7826789c0e25614b03e5a54a0717a86f9ff6e6e5247f92b369472869320039\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"cfg-if\",\n \"clipboard-win\",\n \"dirs-next\",\n \"fd-lock\",\n \"libc\",\n \"log\",\n \"memchr\",\n \"nix\",\n \"radix_trie\",\n \"scopeguard\",\n \"smallvec\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"utf8parse\",\n \"winapi\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"schannel\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fbc91545643bcf3a0bbb6569265615222618bdf33ce4ffbbd13c4bbd4c093534\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"seahash\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b\"\n\n[[package]]\nname = \"security-framework\"\nversion = \"2.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05b64fb303737d99b81884b2c63433e9ae28abebe5eb5045dcdd175dc2ecf4de\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"core-foundation\",\n \"core-foundation-sys\",\n \"libc\",\n \"security-framework-sys\",\n]\n\n[[package]]\nname = \"security-framework-sys\"\nversion = \"2.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e932934257d3b408ed8f30db49d85ea163bfe74961f017f405b025af298f0c7a\"\ndependencies = [\n \"core-foundation-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92d43fe69e652f3df9bdc2b85b2854a0825b86e4fb76bc44d945137d053639ca\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.197\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fb1c873e1b9b056a4dc4c0c198b24c3ffa059243875552b2bd0933b1aee4ce2\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.197\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7eb0b34b42edc17f6b7cac84a52a1c5f0e1bb2227e997ca9011ea3dd34e8610b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.114\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5f09b1bd632ef549eaa9f60a1f8de742bdbc698e6cee2095fc84dde5f549ae0\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_urlencoded\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3491c14715ca2294c4d6a88f15e84739788c1d030eed8c110436aafdaa2f3fd\"\ndependencies = [\n \"form_urlencoded\",\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07ff71d2c147a7b57362cead5e22f772cd52f6ab31cfcd9edcd7f6aeb2a0afbe\"\ndependencies = [\n \"base64 0.13.1\",\n \"chrono\",\n \"hex\",\n \"indexmap 1.9.3\",\n \"serde\",\n \"serde_json\",\n \"serde_with_macros\",\n \"time\",\n]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"2.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"881b6f881b17d13214e5d494c939ebab463d01264ce1811e9d4ac3a882e7695f\"\ndependencies = [\n \"darling\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"sha1\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3bf829a2d51ab4a5ddf1352d8470c140cadc8301b2ae1789db023f01cedd6ba\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"signal-hook\"\nversion = \"0.3.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8621587d4798caf8eb44879d42e56b9a93ea5dcd315a6487c357130095b62801\"\ndependencies = [\n \"libc\",\n \"signal-hook-registry\",\n]\n\n[[package]]\nname = \"signal-hook-mio\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29ad2e15f37ec9a6cc544097b78a1ec90001e9f71b81338ca39f430adaca99af\"\ndependencies = [\n \"libc\",\n \"mio\",\n \"signal-hook\",\n]\n\n[[package]]\nname = \"signal-hook-registry\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8229b473baa5980ac72ef434c4415e70c4b5e71b423043adb4ba059f89c99a1\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"signature\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de\"\ndependencies = [\n \"digest\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"simdutf8\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f27f6278552951f1f2b8cf9da965d10969b2efdea95a6ec47987ab46edfe263a\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6ecd384b10a64542d77071bd64bd7b231f4ed5940fba55e98c3de13824cf3d7\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.4.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f7916fc008ca5542385b89a3d3ce689953c143e9304a9bf8beec1de48994c0d\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"socket2\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05ffd9c0a93b7543e062e759284fcf5f5e3b098501104bfbdde4d404db792871\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e63cff320ae2c57904679ba7cb63280a3dc4613885beafb148ee7bf9aa9042d\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\ndependencies = [\n \"lock_api\",\n]\n\n[[package]]\nname = \"spki\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d91ed6c858b01f942cd56b37a94b3e0a1798290327d1236e4d9cf4eaca44d29d\"\ndependencies = [\n \"base64ct\",\n \"der\",\n]\n\n[[package]]\nname = \"sqlx\"\nversion = \"0.8.3\"\ndependencies = [\n \"anyhow\",\n \"async-std\",\n \"criterion\",\n \"dotenvy\",\n \"env_logger\",\n \"futures\",\n \"hex\",\n \"libsqlite3-sys\",\n \"paste\",\n \"rand\",\n \"rand_xoshiro\",\n \"serde\",\n \"serde_json\",\n \"sqlx-core\",\n \"sqlx-macros\",\n \"sqlx-mysql\",\n \"sqlx-postgres\",\n \"sqlx-sqlite\",\n \"sqlx-test\",\n \"tempfile\",\n \"time\",\n \"tokio\",\n \"trybuild\",\n \"url\",\n]\n\n[[package]]\nname = \"sqlx-cli\"\nversion = \"0.8.3\"\ndependencies = [\n \"anyhow\",\n \"assert_cmd\",\n \"async-trait\",\n \"backoff\",\n \"cargo_metadata\",\n \"chrono\",\n \"clap\",\n \"clap_complete\",\n \"console\",\n \"dotenvy\",\n \"filetime\",\n \"futures\",\n \"glob\",\n \"openssl\",\n \"promptly\",\n \"serde_json\",\n \"sqlx\",\n \"tempfile\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-core\"\nversion = \"0.8.3\"\ndependencies = [\n \"async-io 1.13.0\",\n \"async-std\",\n \"bigdecimal\",\n \"bit-vec\",\n \"bstr\",\n \"bytes\",\n \"chrono\",\n \"crc\",\n \"crossbeam-queue\",\n \"either\",\n \"event-listener 5.2.0\",\n \"futures-core\",\n \"futures-intrusive\",\n \"futures-io\",\n \"futures-util\",\n \"hashbrown 0.15.2\",\n \"hashlink\",\n \"indexmap 2.2.5\",\n \"ipnetwork\",\n \"log\",\n \"mac_address\",\n \"memchr\",\n \"native-tls\",\n \"once_cell\",\n \"percent-encoding\",\n \"regex\",\n \"rust_decimal\",\n \"rustls\",\n \"rustls-native-certs\",\n \"rustls-pemfile\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"smallvec\",\n \"sqlx\",\n \"thiserror 2.0.0\",\n \"time\",\n \"tokio\",\n \"tokio-stream\",\n \"tracing\",\n \"url\",\n \"uuid\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"sqlx-example-mysql-todos\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"futures\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-axum-social\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"argon2\",\n \"axum\",\n \"dotenvy\",\n \"once_cell\",\n \"rand\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"serde_with\",\n \"sqlx\",\n \"thiserror 2.0.0\",\n \"time\",\n \"tokio\",\n \"tower\",\n \"tracing\",\n \"uuid\",\n \"validator\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-chat\"\nversion = \"0.1.0\"\ndependencies = [\n \"crossterm\",\n \"futures\",\n \"ratatui\",\n \"sqlx\",\n \"tokio\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-files\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"dotenvy\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-json\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"dotenvy\",\n \"futures\",\n \"serde\",\n \"serde_json\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-listen\"\nversion = \"0.1.0\"\ndependencies = [\n \"futures\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-mockable-todos\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"async-trait\",\n \"clap\",\n \"dotenvy\",\n \"futures\",\n \"mockall\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-todos\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"dotenvy\",\n \"futures\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-postgres-transaction\"\nversion = \"0.1.0\"\ndependencies = [\n \"futures\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-example-sqlite-todos\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"futures\",\n \"sqlx\",\n \"tokio\",\n]\n\n[[package]]\nname = \"sqlx-macros\"\nversion = \"0.8.3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"sqlx-core\",\n \"sqlx-macros-core\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"sqlx-macros-core\"\nversion = \"0.8.3\"\ndependencies = [\n \"async-std\",\n \"dotenvy\",\n \"either\",\n \"heck 0.5.0\",\n \"hex\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"sqlx-core\",\n \"sqlx-mysql\",\n \"sqlx-postgres\",\n \"sqlx-sqlite\",\n \"syn 2.0.87\",\n \"tempfile\",\n \"tokio\",\n \"url\",\n]\n\n[[package]]\nname = \"sqlx-mysql\"\nversion = \"0.8.3\"\ndependencies = [\n \"atoi\",\n \"base64 0.22.0\",\n \"bigdecimal\",\n \"bitflags 2.4.2\",\n \"byteorder\",\n \"bytes\",\n \"chrono\",\n \"crc\",\n \"digest\",\n \"dotenvy\",\n \"either\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-util\",\n \"generic-array\",\n \"hex\",\n \"hkdf\",\n \"hmac\",\n \"itoa\",\n \"log\",\n \"md-5\",\n \"memchr\",\n \"once_cell\",\n \"percent-encoding\",\n \"rand\",\n \"rsa\",\n \"rust_decimal\",\n \"serde\",\n \"sha1\",\n \"sha2\",\n \"smallvec\",\n \"sqlx\",\n \"sqlx-core\",\n \"stringprep\",\n \"thiserror 2.0.0\",\n \"time\",\n \"tracing\",\n \"uuid\",\n \"whoami\",\n]\n\n[[package]]\nname = \"sqlx-postgres\"\nversion = \"0.8.3\"\ndependencies = [\n \"atoi\",\n \"base64 0.22.0\",\n \"bigdecimal\",\n \"bit-vec\",\n \"bitflags 2.4.2\",\n \"byteorder\",\n \"chrono\",\n \"crc\",\n \"dotenvy\",\n \"etcetera\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-util\",\n \"hex\",\n \"hkdf\",\n \"hmac\",\n \"home\",\n \"ipnetwork\",\n \"itoa\",\n \"log\",\n \"mac_address\",\n \"md-5\",\n \"memchr\",\n \"num-bigint\",\n \"once_cell\",\n \"rand\",\n \"rust_decimal\",\n \"serde\",\n \"serde_json\",\n \"sha2\",\n \"smallvec\",\n \"sqlx\",\n \"sqlx-core\",\n \"stringprep\",\n \"thiserror 2.0.0\",\n \"time\",\n \"tracing\",\n \"uuid\",\n \"whoami\",\n]\n\n[[package]]\nname = \"sqlx-sqlite\"\nversion = \"0.8.3\"\ndependencies = [\n \"atoi\",\n \"chrono\",\n \"flume\",\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-intrusive\",\n \"futures-util\",\n \"libsqlite3-sys\",\n \"log\",\n \"percent-encoding\",\n \"regex\",\n \"serde\",\n \"serde_urlencoded\",\n \"sqlx\",\n \"sqlx-core\",\n \"time\",\n \"tracing\",\n \"url\",\n \"uuid\",\n]\n\n[[package]]\nname = \"sqlx-test\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"dotenvy\",\n \"env_logger\",\n \"sqlx\",\n]\n\n[[package]]\nname = \"stability\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d904e7009df136af5297832a3ace3370cd14ff1546a232f4f185036c2736fcac\"\ndependencies = [\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"str-buf\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e08d8363704e6c71fc928674353e6b7c23dcea9d82d7012c8faf2a3a025f8d0\"\n\n[[package]]\nname = \"stringprep\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb41d74e231a107a1b4ee36bd1214b11285b77768d2e3824aedafa988fd36ee6\"\ndependencies = [\n \"finl_unicode\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5ee073c9e4cd00e28217186dbe12796d692868f432bf2e97ee73bed0c56dfa01\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\"\ndependencies = [\n \"strum_macros\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25aa4ce346d03a6dcd68dd8b4010bcb74e54e62c90c573f394c46eae99aba32d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn_derive\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1329189c02ff984e9736652b1631330da25eaa6bc639089ed4915d25446cbe7b\"\ndependencies = [\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"sync_wrapper\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2047c6ded9c721764247e62cd3b03c09ffc529b2ba5b10ec482ae507a4a70160\"\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1\"\ndependencies = [\n \"cfg-if\",\n \"fastrand 2.0.1\",\n \"rustix 0.38.31\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"termtree\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76\"\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.58\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03468839009160513471e86a034bb2c5c0e4baae3b43f79ffc55c4a5427b3297\"\ndependencies = [\n \"thiserror-impl 1.0.58\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15291287e9bff1bc6f9ff3409ed9af665bec7a5fc8ac079ea96be07bca0e2668\"\ndependencies = [\n \"thiserror-impl 2.0.0\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.58\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61f3ba182994efc43764a46c018c347bc492c79f024e705f46567b418f6d4f7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22efd00f33f93fa62848a7cab956c3d38c8d43095efda1decfc2b3a5dc0b8972\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"time\"\nversion = \"0.3.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5dfd88e563464686c916c7e46e623e520ddc6d79fa6641390f2e3fa86e83e885\"\ndependencies = [\n \"deranged\",\n \"itoa\",\n \"num-conv\",\n \"powerfmt\",\n \"serde\",\n \"time-core\",\n \"time-macros\",\n]\n\n[[package]]\nname = \"time-core\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef927ca75afb808a4d64dd374f00a2adf8d0fcff8e7b184af886c3c87ec4a3f3\"\n\n[[package]]\nname = \"time-macros\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f252a68540fde3a3877aeea552b832b40ab9a69e318efd078774a01ddee1ccf\"\ndependencies = [\n \"num-conv\",\n \"time-core\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tinytemplate\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"tokio\"\nversion = \"1.36.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61285f6515fa018fb2d1e46eb21223fff441ee8db5d0f1435e8ab4f5cdb80931\"\ndependencies = [\n \"backtrace\",\n \"bytes\",\n \"libc\",\n \"mio\",\n \"num_cpus\",\n \"parking_lot\",\n \"pin-project-lite\",\n \"signal-hook-registry\",\n \"socket2 0.5.6\",\n \"tokio-macros\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"tokio-macros\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b8a1e28f2deaa14e508979454cb3a223b10b938b45af148bc0986de36f1923b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"tokio-stream\"\nversion = \"0.1.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"397c988d37662c7dda6d2208364a706264bf3d6138b11d436cbac0ad38832842\"\ndependencies = [\n \"futures-core\",\n \"pin-project-lite\",\n \"tokio\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4badfd56924ae69bcc9039335b2e017639ce3f9b001c393c1b2d1ef846ce2cbf\"\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap 2.2.5\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tower\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fa9be0de6cf49e536ce1851f987bd21a43b771b09473c3549a6c853db37c1c\"\ndependencies = [\n \"futures-core\",\n \"futures-util\",\n \"pin-project\",\n \"pin-project-lite\",\n \"tokio\",\n \"tower-layer\",\n \"tower-service\",\n \"tracing\",\n]\n\n[[package]]\nname = \"tower-http\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f873044bf02dd1e8239e9c1293ea39dad76dc594ec16185d0a1bf31d8dc8d858\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"bytes\",\n \"futures-core\",\n \"futures-util\",\n \"http\",\n \"http-body\",\n \"http-range-header\",\n \"pin-project-lite\",\n \"tower\",\n \"tower-layer\",\n \"tower-service\",\n]\n\n[[package]]\nname = \"tower-layer\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c20c8dbed6283a09604c3e69b4b7eeb54e298b8a600d4d5ecb5ad39de609f1d0\"\n\n[[package]]\nname = \"tower-service\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6bc1c9ce2b5135ac7f93c72918fc37feb872bdc6a5533a8b85eb4b86bfdae52\"\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef\"\ndependencies = [\n \"log\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"try-lock\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e421abadd41a4225275504ea4d6566923418b7f05506fbc9c0fe86ba7396114b\"\n\n[[package]]\nname = \"trybuild\"\nversion = \"1.0.89\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a9d3ba662913483d6722303f619e75ea10b7855b0f8e0d72799cf8621bb488f\"\ndependencies = [\n \"basic-toml\",\n \"glob\",\n \"once_cell\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-truncate\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3644627a5af5fa321c95b9b235a72fd24cd29c648c2c379431e6628655627bf\"\ndependencies = [\n \"itertools 0.13.0\",\n \"unicode-segmentation\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"url\"\nversion = \"2.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d157f1b96d14500ffdc1f10ba712e780825526c03d9a49b4d0324b0d9113ada\"\ndependencies = [\n \"form_urlencoded\",\n \"idna 1.0.3\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f00cc9702ca12d3c81455259621e676d0f7251cec66a21e98fe2e9a37db93b2a\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"validator\"\nversion = \"0.16.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b92f40481c04ff1f4f61f304d61793c7b56ff76ac1469f1beb199b1445b253bd\"\ndependencies = [\n \"idna 0.4.0\",\n \"lazy_static\",\n \"regex\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"url\",\n \"validator_derive\",\n]\n\n[[package]]\nname = \"validator_derive\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc44ca3088bb3ba384d9aecf40c6a23a676ce23e09bdaca2073d99c207f864af\"\ndependencies = [\n \"if_chain\",\n \"lazy_static\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn 1.0.109\",\n \"validator_types\",\n]\n\n[[package]]\nname = \"validator_types\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"111abfe30072511849c5910134e8baf8dc05de4c0e5903d681cbd5c9c4d611e3\"\ndependencies = [\n \"proc-macro2\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"value-bag\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec26a25bd6fca441cdd0f769fd7f891bae119f996de31f86a5eddccef54c1d\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"wait-timeout\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f200f5b12eb75f8c1ed65abd4b2db8a6e1b138a20de009dacee265a2498f3f6\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"waker-fn\"\nversion = \"1.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3c4517f54858c779bbcbf228f4fca63d121bf85fbecb2dc578cdf4a39395690\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"want\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa7760aed19e106de2c7c0b581b509f2f25d3dacaf737cb82ac61bc6d760b0e\"\ndependencies = [\n \"try-lock\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasite\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8dad83b4f25e74f184f64c43b150b91efe7647395b42289f38e50566d82855b\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.42\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76bc14366121efc8dbb487ab05bcc9d346b3b5ec0eaa76e46594cabbe51762c0\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77afa9a11836342370f4817622a2f0f418b134426d91a82dfb48f532d2ec13ef\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd7c23921eeb1713a4e851530e9b9756e4fb0e89978582942612524cf09f01cd\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\n \"either\",\n \"home\",\n \"once_cell\",\n \"rustix 0.38.31\",\n]\n\n[[package]]\nname = \"whoami\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a44ab49fad634e88f55bf8f9bb3abd2f27d7204172a112c7c9987e01c1c94ea9\"\ndependencies = [\n \"redox_syscall\",\n \"wasite\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f29e6f9198ba0d26b4c9f07dbe6f9ed633e1f3d5b8b414090084349e46a52596\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.4\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.4\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7dd37b7e5ab9018759f893a1952c9420d060016fc19a472b4bb20d1bdd694d1b\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.4\",\n \"windows_aarch64_msvc 0.52.4\",\n \"windows_i686_gnu 0.52.4\",\n \"windows_i686_msvc 0.52.4\",\n \"windows_x86_64_gnu 0.52.4\",\n \"windows_x86_64_gnullvm 0.52.4\",\n \"windows_x86_64_msvc 0.52.4\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcf46cf4c365c6f2d1cc93ce535f2c8b244591df96ceee75d8e83deb70a9cac9\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da9f259dd3bcf6990b55bffd094c4f7235817ba4ceebde8e6d11cd0c5633b675\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b474d8268f99e0995f25b9f095bc7434632601028cf86590aea5c8a5cb7801d3\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1515e9a29e5bed743cb4415a9ecf5dfca648ce85ee42e15873c3cd8610ff8e02\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5eee091590e89cc02ad514ffe3ead9eb6b660aedca2183455434b93546371a03\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77ca79f2451b49fa9e2af39f0747fe999fcda4f5e241b2898624dca97a1f2177\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32b752e52a2da0ddfbdbcc6fceadfeede4c939ed16d13e648833a61dfb611ed8\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c5b1314b079b0930c31e3af543d8ee1757b1951ae1e1565ec704403a7240ca5\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28cc31741b18cb6f1d5ff12f5b7523e3d6eb0852bbbad19d73905511d9849b95\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74d4d3961e53fa4c9a25a8637fc2bfaf2595b3d3ae34875568a5cf64787716be\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ce1b18ccd8e73a9321186f97e46f9f04b778851177567b1975109d26a08d2a6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91ec111ce797d0e0784a1116d0ddcdbea84322cd79e5d5ad173daeba4f93ab55\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ea7b4a3637ea8669cedf0f1fd5c286a17f3de97b8dd5a70a6c167a1730e63a5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"525b4ec142c6b68a2d10f01f7bbf6755599ca3f81ea53b8431b7dd348f5fdb2d\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.87\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 10.919921875,
          "content": "[workspace]\nmembers = [\n    \".\",\n    \"sqlx-core\",\n    \"sqlx-macros\",\n    \"sqlx-macros-core\",\n    \"sqlx-test\",\n    \"sqlx-cli\",\n    #    \"sqlx-bench\",\n    \"sqlx-mysql\",\n    \"sqlx-postgres\",\n    \"sqlx-sqlite\",\n    \"examples/mysql/todos\",\n    \"examples/postgres/axum-social-with-tests\",\n    \"examples/postgres/chat\",\n    \"examples/postgres/files\",\n    \"examples/postgres/json\",\n    \"examples/postgres/listen\",\n    \"examples/postgres/todos\",\n    \"examples/postgres/mockable-todos\",\n    \"examples/postgres/transaction\",\n    \"examples/sqlite/todos\",\n]\n\n[workspace.package]\nversion = \"0.8.3\"\nlicense = \"MIT OR Apache-2.0\"\nedition = \"2021\"\nrepository = \"https://github.com/launchbadge/sqlx\"\nkeywords = [\"database\", \"async\", \"postgres\", \"mysql\", \"sqlite\"]\ncategories = [\"database\", \"asynchronous\"]\nauthors = [\n    \"Ryan Leckey <leckey.ryan@gmail.com>\",\n    \"Austin Bonander <austin.bonander@gmail.com>\",\n    \"Chloe Ross <orangesnowfox@gmail.com>\",\n    \"Daniel Akhterov <akhterovd@gmail.com>\",\n]\n# TODO: enable this for 0.9.0\n# rust-version = \"1.80.0\"\n\n[package]\nname = \"sqlx\"\nreadme = \"README.md\"\ndocumentation = \"https://docs.rs/sqlx\"\ndescription = \"🧰 The Rust SQL Toolkit. An async, pure Rust SQL crate featuring compile-time checked queries without a DSL. Supports PostgreSQL, MySQL, and SQLite.\"\nversion.workspace = true\nlicense.workspace = true\nedition.workspace = true\nauthors.workspace = true\nrepository.workspace = true\n\n[package.metadata.docs.rs]\nfeatures = [\"all-databases\", \"_unstable-all-types\"]\nrustdoc-args = [\"--cfg\", \"docsrs\"]\n\n[features]\ndefault = [\"any\", \"macros\", \"migrate\", \"json\"]\n\nderive = [\"sqlx-macros/derive\"]\nmacros = [\"derive\", \"sqlx-macros/macros\"]\nmigrate = [\"sqlx-core/migrate\", \"sqlx-macros?/migrate\", \"sqlx-mysql?/migrate\", \"sqlx-postgres?/migrate\", \"sqlx-sqlite?/migrate\"]\n\n# intended mainly for CI and docs\nall-databases = [\"mysql\", \"sqlite\", \"postgres\", \"any\"]\n_unstable-all-types = [\n    \"bigdecimal\",\n    \"rust_decimal\",\n    \"json\",\n    \"time\",\n    \"chrono\",\n    \"ipnetwork\",\n    \"mac_address\",\n    \"uuid\",\n    \"bit-vec\",\n]\n\n# Base runtime features without TLS\nruntime-async-std = [\"_rt-async-std\", \"sqlx-core/_rt-async-std\", \"sqlx-macros?/_rt-async-std\"]\nruntime-tokio = [\"_rt-tokio\", \"sqlx-core/_rt-tokio\", \"sqlx-macros?/_rt-tokio\"]\n\n# TLS features\ntls-native-tls = [\"sqlx-core/_tls-native-tls\", \"sqlx-macros?/_tls-native-tls\"]\ntls-rustls = [\"tls-rustls-ring\"] # For backwards compatibility\ntls-rustls-aws-lc-rs = [\"sqlx-core/_tls-rustls-aws-lc-rs\", \"sqlx-macros?/_tls-rustls-aws-lc-rs\"]\ntls-rustls-ring = [\"tls-rustls-ring-webpki\"] # For backwards compatibility\ntls-rustls-ring-webpki = [\"sqlx-core/_tls-rustls-ring-webpki\", \"sqlx-macros?/_tls-rustls-ring-webpki\"]\ntls-rustls-ring-native-roots = [\"sqlx-core/_tls-rustls-ring-native-roots\", \"sqlx-macros?/_tls-rustls-ring-native-roots\"]\n\n# No-op feature used by the workflows to compile without TLS enabled. Not meant for general use.\ntls-none = []\n\n# Legacy Runtime + TLS features\n\nruntime-async-std-native-tls = [\"runtime-async-std\", \"tls-native-tls\"]\nruntime-async-std-rustls = [\"runtime-async-std\", \"tls-rustls-ring\"]\n\nruntime-tokio-native-tls = [\"runtime-tokio\", \"tls-native-tls\"]\nruntime-tokio-rustls = [\"runtime-tokio\", \"tls-rustls-ring\"]\n\n# for conditional compilation\n_rt-async-std = []\n_rt-tokio = []\n_sqlite = []\n\n# database\nany = [\"sqlx-core/any\", \"sqlx-mysql?/any\", \"sqlx-postgres?/any\", \"sqlx-sqlite?/any\"]\npostgres = [\"sqlx-postgres\", \"sqlx-macros?/postgres\"]\nmysql = [\"sqlx-mysql\", \"sqlx-macros?/mysql\"]\nsqlite = [\"_sqlite\", \"sqlx-sqlite/bundled\", \"sqlx-macros?/sqlite\"]\nsqlite-unbundled = [\"_sqlite\", \"sqlx-sqlite/unbundled\", \"sqlx-macros?/sqlite-unbundled\"]\n\n# types\njson = [\"sqlx-macros?/json\", \"sqlx-mysql?/json\", \"sqlx-postgres?/json\", \"sqlx-sqlite?/json\"]\n\nbigdecimal = [\"sqlx-core/bigdecimal\", \"sqlx-macros?/bigdecimal\", \"sqlx-mysql?/bigdecimal\", \"sqlx-postgres?/bigdecimal\"]\nbit-vec = [\"sqlx-core/bit-vec\", \"sqlx-macros?/bit-vec\", \"sqlx-postgres?/bit-vec\"]\nchrono = [\"sqlx-core/chrono\", \"sqlx-macros?/chrono\", \"sqlx-mysql?/chrono\", \"sqlx-postgres?/chrono\", \"sqlx-sqlite?/chrono\"]\nipnetwork = [\"sqlx-core/ipnetwork\", \"sqlx-macros?/ipnetwork\", \"sqlx-postgres?/ipnetwork\"]\nmac_address = [\"sqlx-core/mac_address\", \"sqlx-macros?/mac_address\", \"sqlx-postgres?/mac_address\"]\nrust_decimal = [\"sqlx-core/rust_decimal\", \"sqlx-macros?/rust_decimal\", \"sqlx-mysql?/rust_decimal\", \"sqlx-postgres?/rust_decimal\"]\ntime = [\"sqlx-core/time\", \"sqlx-macros?/time\", \"sqlx-mysql?/time\", \"sqlx-postgres?/time\", \"sqlx-sqlite?/time\"]\nuuid = [\"sqlx-core/uuid\", \"sqlx-macros?/uuid\", \"sqlx-mysql?/uuid\", \"sqlx-postgres?/uuid\", \"sqlx-sqlite?/uuid\"]\nregexp = [\"sqlx-sqlite?/regexp\"]\n\n[workspace.dependencies]\n# Core Crates\nsqlx-core = { version = \"=0.8.3\", path = \"sqlx-core\" }\nsqlx-macros-core = { version = \"=0.8.3\", path = \"sqlx-macros-core\" }\nsqlx-macros = { version = \"=0.8.3\", path = \"sqlx-macros\" }\n\n# Driver crates\nsqlx-mysql = { version = \"=0.8.3\", path = \"sqlx-mysql\" }\nsqlx-postgres = { version = \"=0.8.3\", path = \"sqlx-postgres\" }\nsqlx-sqlite = { version = \"=0.8.3\", path = \"sqlx-sqlite\" }\n\n# Facade crate (for reference from sqlx-cli)\nsqlx = { version = \"=0.8.3\", path = \".\", default-features = false }\n\n# Common type integrations shared by multiple driver crates.\n# These are optional unless enabled in a workspace crate.\nbigdecimal = \"0.4.0\"\nbit-vec = \"0.6.3\"\nchrono = { version = \"0.4.34\", default-features = false, features = [\"std\", \"clock\"] }\nipnetwork = \"0.20.0\"\nmac_address = \"1.1.5\"\nrust_decimal = { version = \"1.26.1\", default-features = false, features = [\"std\"] }\ntime = { version = \"0.3.36\", features = [\"formatting\", \"parsing\", \"macros\"] }\nuuid = \"1.1.2\"\n\n# Common utility crates\ndotenvy = { version = \"0.15.0\", default-features = false }\n\n# Runtimes\n[workspace.dependencies.async-std]\nversion = \"1.12\"\n\n[workspace.dependencies.tokio]\nversion = \"1\"\nfeatures = [\"time\", \"net\", \"sync\", \"fs\", \"io-util\", \"rt\"]\ndefault-features = false\n\n[dependencies]\nsqlx-core = { workspace = true, features = [\"offline\", \"migrate\"] }\nsqlx-macros = { workspace = true, optional = true }\n\nsqlx-mysql = { workspace = true, optional = true }\nsqlx-postgres = { workspace = true, optional = true }\nsqlx-sqlite = { workspace = true, optional = true }\n\n[dev-dependencies]\nanyhow = \"1.0.52\"\ntime_ = { version = \"0.3.2\", package = \"time\" }\nfutures = \"0.3.19\"\nenv_logger = \"0.11\"\nasync-std = { workspace = true, features = [\"attributes\"] }\ntokio = { version = \"1.15.0\", features = [\"full\"] }\ndotenvy = \"0.15.0\"\ntrybuild = \"1.0.53\"\nsqlx-test = { path = \"./sqlx-test\" }\npaste = \"1.0.6\"\nserde = { version = \"1.0.132\", features = [\"derive\"] }\nserde_json = \"1.0.73\"\nurl = \"2.2.2\"\nrand = \"0.8.4\"\nrand_xoshiro = \"0.6.0\"\nhex = \"0.4.3\"\ntempfile = \"3.10.1\"\ncriterion = { version = \"0.5.1\", features = [\"async_tokio\"] }\n\n# If this is an unconditional dev-dependency then Cargo will *always* try to build `libsqlite3-sys`,\n# even when SQLite isn't the intended test target, and fail if the build environment is not set up for compiling C code.\n[target.'cfg(sqlite_test_sqlcipher)'.dev-dependencies]\n# Enable testing with SQLCipher if specifically requested.\nlibsqlite3-sys = { version = \"0.30.1\", features = [\"bundled-sqlcipher\"] }\n\n# Common lint settings for the workspace\n[workspace.lints.clippy]\n# https://github.com/launchbadge/sqlx/issues/3440\ncast_possible_truncation = 'deny'\ncast_possible_wrap = 'deny'\ncast_sign_loss = 'deny'\n# See `clippy.toml`\ndisallowed_methods = 'deny'\n\n#\n# Any\n#\n\n[[test]]\nname = \"any\"\npath = \"tests/any/any.rs\"\nrequired-features = [\"any\"]\n\n[[test]]\nname = \"any-pool\"\npath = \"tests/any/pool.rs\"\nrequired-features = [\"any\"]\n\n#\n# Migrations\n#\n\n[[test]]\nname = \"migrate-macro\"\npath = \"tests/migrate/macro.rs\"\nrequired-features = [\"macros\", \"migrate\"]\n\n#\n# SQLite\n#\n\n[[test]]\nname = \"sqlite\"\npath = \"tests/sqlite/sqlite.rs\"\nrequired-features = [\"sqlite\"]\n\n[[test]]\nname = \"sqlite-any\"\npath = \"tests/sqlite/any.rs\"\nrequired-features = [\"sqlite\"]\n\n[[test]]\nname = \"sqlite-types\"\npath = \"tests/sqlite/types.rs\"\nrequired-features = [\"sqlite\"]\n\n[[test]]\nname = \"sqlite-describe\"\npath = \"tests/sqlite/describe.rs\"\nrequired-features = [\"sqlite\"]\n\n[[test]]\nname = \"sqlite-macros\"\npath = \"tests/sqlite/macros.rs\"\nrequired-features = [\"sqlite\", \"macros\"]\n\n[[test]]\nname = \"sqlite-unbundled-macros\"\npath = \"tests/sqlite/macros.rs\"\nrequired-features = [\"sqlite-unbundled\", \"macros\"]\n\n[[test]]\nname = \"sqlite-derives\"\npath = \"tests/sqlite/derives.rs\"\nrequired-features = [\"sqlite\", \"macros\"]\n\n[[test]]\nname = \"sqlite-error\"\npath = \"tests/sqlite/error.rs\"\nrequired-features = [\"sqlite\"]\n\n[[test]]\nname = \"sqlite-sqlcipher\"\npath = \"tests/sqlite/sqlcipher.rs\"\nrequired-features = [\"sqlite\"]\n\n[[test]]\nname = \"sqlite-test-attr\"\npath = \"tests/sqlite/test-attr.rs\"\nrequired-features = [\"sqlite\", \"macros\", \"migrate\"]\n\n[[test]]\nname = \"sqlite-migrate\"\npath = \"tests/sqlite/migrate.rs\"\nrequired-features = [\"sqlite\", \"macros\", \"migrate\"]\n\n[[test]]\nname = \"sqlite-rustsec\"\npath = \"tests/sqlite/rustsec.rs\"\nrequired-features = [\"sqlite\"]\n\n[[bench]]\nname = \"sqlite-describe\"\npath = \"benches/sqlite/describe.rs\"\nharness = false\nrequired-features = [\"sqlite\"]\n\n#\n# MySQL\n#\n\n[[test]]\nname = \"mysql\"\npath = \"tests/mysql/mysql.rs\"\nrequired-features = [\"mysql\"]\n\n[[test]]\nname = \"mysql-types\"\npath = \"tests/mysql/types.rs\"\nrequired-features = [\"mysql\"]\n\n[[test]]\nname = \"mysql-describe\"\npath = \"tests/mysql/describe.rs\"\nrequired-features = [\"mysql\"]\n\n[[test]]\nname = \"mysql-derives\"\npath = \"tests/mysql/derives.rs\"\nrequired-features = [\"mysql\", \"derive\"]\n\n[[test]]\nname = \"mysql-macros\"\npath = \"tests/mysql/macros.rs\"\nrequired-features = [\"mysql\", \"macros\"]\n\n[[test]]\nname = \"mysql-error\"\npath = \"tests/mysql/error.rs\"\nrequired-features = [\"mysql\"]\n\n[[test]]\nname = \"mysql-test-attr\"\npath = \"tests/mysql/test-attr.rs\"\nrequired-features = [\"mysql\", \"macros\", \"migrate\"]\n\n[[test]]\nname = \"mysql-migrate\"\npath = \"tests/mysql/migrate.rs\"\nrequired-features = [\"mysql\", \"macros\", \"migrate\"]\n\n[[test]]\nname = \"mysql-rustsec\"\npath = \"tests/mysql/rustsec.rs\"\nrequired-features = [\"mysql\"]\n\n#\n# PostgreSQL\n#\n\n[[test]]\nname = \"postgres\"\npath = \"tests/postgres/postgres.rs\"\nrequired-features = [\"postgres\"]\n\n[[test]]\nname = \"postgres-types\"\npath = \"tests/postgres/types.rs\"\nrequired-features = [\"postgres\"]\n\n[[test]]\nname = \"postgres-describe\"\npath = \"tests/postgres/describe.rs\"\nrequired-features = [\"postgres\"]\n\n[[test]]\nname = \"postgres-macros\"\npath = \"tests/postgres/macros.rs\"\nrequired-features = [\"postgres\", \"macros\"]\n\n[[test]]\nname = \"postgres-derives\"\npath = \"tests/postgres/derives.rs\"\nrequired-features = [\"postgres\", \"macros\"]\n\n[[test]]\nname = \"postgres-error\"\npath = \"tests/postgres/error.rs\"\nrequired-features = [\"postgres\"]\n\n[[test]]\nname = \"postgres-test-attr\"\npath = \"tests/postgres/test-attr.rs\"\nrequired-features = [\"postgres\", \"macros\", \"migrate\"]\n\n[[test]]\nname = \"postgres-migrate\"\npath = \"tests/postgres/migrate.rs\"\nrequired-features = [\"postgres\", \"macros\", \"migrate\"]\n\n\n[[test]]\nname = \"postgres-query-builder\"\npath = \"tests/postgres/query_builder.rs\"\nrequired-features = [\"postgres\"]\n\n[[test]]\nname = \"postgres-rustsec\"\npath = \"tests/postgres/rustsec.rs\"\nrequired-features = [\"postgres\", \"macros\", \"migrate\"]\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 24.6513671875,
          "content": "SQLx Frequently Asked Questions\n===============================\n\n### What database versions does SQLx support?\n\nThis is a difficult question to answer because it depends on which features of the databases are used and when those features were introduced. SQL databases tend to be very strongly backwards-compatible so it's likely that SQLx will work with some very old versions. \n\nTLS support is one of the features that ages most quickly with databases, since old SSL/TLS versions are deprecated over time as they become insecure due to weaknesses being discovered; this is especially important to consider when using RusTLS, as it only supports the latest TLS version for security reasons (see the question below mentioning RusTLS for details).\n\nAs a rule, however, we only officially support the range of versions for each database that are still actively maintained, and will drop support for versions as they reach their end-of-life.\n\n* Postgres has a page to track these versions and give their end-of-life dates: https://www.postgresql.org/support/versioning/\n* MariaDB has a similar list here (though it doesn't show the dates at which old versions were EOL'd): https://mariadb.com/kb/en/mariadb-server-release-dates/\n* MySQL's equivalent page is more concerned with what platforms are supported by the newest and oldest maintained versions: https://www.mysql.com/support/supportedplatforms/database.html\n    * However, its Wikipedia page helpfully tracks its versions and their announced EOL dates: https://en.wikipedia.org/wiki/MySQL#Release_history\n* SQLite is easy as only SQLite 3 is supported and the current version depends on the version of the `libsqlite3-sys` crate being used.\n\nFor each database and where applicable, we test against the latest and oldest versions that we intend to support. You can see the current versions being tested against by looking at our CI config: https://github.com/launchbadge/sqlx/blob/main/.github/workflows/sqlx.yml#L168\n\n-------------------------------------------------------------------\n### What versions of Rust does SQLx support? What is SQLx's MSRV\\*?\n\nSQLx's MSRV is the second-to-latest stable release as of the beginning of the current release cycle (`0.x.0`).\nIt will remain there until the next major release (`0.{x + 1}.0`).\n\nFor example, as of the `0.8.0` release of SQLx, the latest stable Rust version was `1.79.0`, so the MSRV for the\n`0.8.x` release cycle of SQLx is `1.78.0`.\n\nThis guarantees that SQLx will compile with a Rust version that is _at least_ six weeks old, which should be plenty\nof time for it to make it through any packaging system that is being actively kept up to date.\n\nWe do _not_ recommend installing Rust through operating system packages, \nas they can often be a whole year or more out-of-date.\n\n\\*Minimum Supported Rust Version\n\n[`rust-version`]: https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-rust-version-field\n\n----------------------------------------------------------------\n### I'm getting `HandshakeFailure` or `CorruptMessage` when trying to connect to a server over TLS using RusTLS. What gives?\n\nTo encourage good security practices and limit cruft, RusTLS does not support older versions of TLS or cryptographic algorithms \nthat are considered insecure. `HandshakeFailure` is a normal error returned when RusTLS and the server cannot agree on parameters for\na secure connection. \n\nCheck the supported TLS versions for the database server version you're running. If it does not support TLS 1.2 or greater, then\nyou likely will not be able to connect to it with RusTLS.\n\nThe ideal solution, of course, is to upgrade your database server to a version that supports at least TLS 1.2.  \n\n* MySQL: [has supported TLS 1.2 since 5.6.46](https://dev.mysql.com/doc/refman/5.6/en/encrypted-connection-protocols-ciphers.html#encrypted-connection-supported-protocols). \n* PostgreSQL: depends on the system OpenSSL version.\n* MSSQL: TLS is not supported yet.\n\nIf you're running a third-party database that talks one of these protocols, consult its documentation for supported TLS versions.\n\nIf you're stuck on an outdated version, which is unfortunate but tends to happen for one reason or another, try switching to the corresponding\n`runtime-<tokio, async-std, actix>-native-tls` feature for SQLx. That will use the system APIs for TLS which tend to have much wider support.\nSee [the `native-tls` crate docs](https://docs.rs/native-tls/latest/native_tls/) for details.\n\nThe `CorruptMessage` error occurs in similar situations and many users have had success with switching to `-native-tls` to get around it.\nHowever, if you do encounter this error, please try to capture a Wireshark or `tcpdump` trace of the TLS handshake as the RusTLS folks are interested\nin covering cases that trigger this (as it might indicate a protocol handling bug or the server is doing something non-standard): \nhttps://github.com/rustls/rustls/issues/893\n\n----------------------------------------------------------------\n### How does SQLx help prevent SQL Injection?\n### How do Query Parameters work?\n### Why does SQLx use Prepared Statements for most queries?\n### Can I Use Query Parameters to add conditional SQL to my query?\n### Why can't I use DDL (e.g. `CREATE TABLE`, `ALTER TABLE`, etc.) with the `sqlx::query*()` functions or `sqlx::query*!()` macros?\n\nThese questions can all be answered by a thorough explanation of prepared statements. Feel free to skip the parts you already know.\n\nBack in the day, if a web application wanted to include user input in a SQL query,\na search parameter for example, it had no choice but to simply format that data into the query.\nPHP applications used to be full of snippets like this:\n\n```php\n/* Imagine this is user input */\n$city = \"Munich\";\n\n/* $query = \"SELECT country FROM city WHERE name='Munich'\" */\n$query = sprintf(\"SELECT country FROM city WHERE name='%s'\", $city);\n$result = $mysqli->query($query);\n```\n\nHowever, this leaves the application vulnerable to [SQL injection attacks](https://en.wikipedia.org/wiki/SQL_injection),\nbecause it's trivial to craft an input string that will terminate the existing query and begin a new one,\nand the database won't know the difference and will execute both. As illustrated in the famous XKCD #327:\n\n<a href=\"https://xkcd.com/327/\"><img src=\"https://imgs.xkcd.com/comics/exploits_of_a_mom.png\" title=\"Her daughter is named Help I'm trapped in a driver's license factory.\" alt=\"Exploits of a Mom\" srcset=\"https:////imgs.xkcd.com/comics/exploits_of_a_mom_2x.png 2x\" style=\"image-orientation:none\">\n\nThe fictional school's student database application might have contained a query that looked like this:\n```php\n$student_name = \"Robert');DROP TABLE Students;--\"\n\n$query = sprintf(\"INSERT INTO Students (name) VALUES ('%s')\", $student_name);\n$result = $mysqli->query($query);\n```\n\nWhen formatted into the middle of this query, the maliciously crafted input string closes the quotes and finishes the statement (`Robert');`),\nthen starts another one with the nefarious payload (`DROP TABLE Students;`), and causes the rest of the original query to be ignored by starting a SQL comment (`--`).\nThus, the database server sees, and executes, three separate statements like so:\n\n```SQL\nINSERT INTO Students(firstname) VALUES ('Robert');\nDROP TABLE Students;\n--');\n```\n\nAnd thus the school has lost this year's student records (at least they had last years' backed up?).\n\nThe original mitigation for this attack was to make sure that any untrustworthy user input was properly escaped (or \"sanitized\"),\nand many frameworks provided utility functions for this, such as PHP's [`mysqli::real_escape_string()`](https://www.php.net/manual/en/mysqli.real-escape-string.php) (not to be confused with the obsolete [`mysql_real_escape_string()`](https://www.php.net/manual/en/function.mysql-real-escape-string) or [`mysql_escape_string()`](https://www.php.net/manual/en/function.mysql-escape-string.php)).\n\nThese would prefix any syntactically significant characters (in this case, quotation marks) with a backslash,\nso it's less likely to affect the database server's interpretation of the query:\n\n```php\n$student_name = $mysqli->real_escape_string(\"Robert');DROP TABLE Students;--\");\n\n/*\n    Everything is okay now as the dastardly single-quote has been inactivated by the backslash:\n    \"INSERT INTO Students (name) VALUES ('Robert\\');DROP TABLE Students;--');\"\n*/\n$query = sprintf(\"INSERT INTO Students (name) VALUES ('%s')\", $student_name);\n```\n\nThe database server sees the backslash and knows that the single-quote is part of the string content, not its terminating character.\n\nHowever, this was something that you still had to _remember_ to do, making it only half a solution. Additionally, properly escaping the string requires knowledge of the current character set of the connection which is why the `mysqli` object is a required parameter \n(or the receiver in object-oriented style). And you could always just forget to wrap the string parameter in quotes (`'%s'`) in the first place, which these wouldn't help with.\n\nEven when everything is working correctly, formatting dynamic data into a query still requires the database server to \nre-parse and generate a new query plan with every new variant--caching helps, but is not a silver bullet.\n\n#### Prepared Statements to the rescue!\n\nThese solve both problems (injection and re-parsing) by **completely separating** the query from any dynamic input data.\n\nInstead of formatting data into the query, you use a (database-specific) token to signify a value that will be passed separately:\n\n```SQL\n-- MySQL\nINSERT INTO Students (name) VALUES(?);\n-- Postgres and SQLite\nINSERT INTO Students (name) VALUES($1);\n```\n\nThe database will substitute a given value when _executing_ the query, long after it's finished parsing it. \nThe database will effectively treat the parameter as a variable.\nThere is, by design, **no way** for a query parameter to modify the SQL of a query, \nunless you're using some `exec()`-like SQL function that lets you execute a string as a query, \nbut then hopefully you know what you're doing.\n\nIn fact, parsing and executing prepared statements are explicitly separate steps in pretty much every database's protocol,\nwhere the query string, without any values attached, is parsed first and given an identifier, then a separate execution step\nsimply passes that identifier along with the values to substitute.\n\nThe response from the initial parsing often contains useful metadata about the query, which SQLx's query macros use to great effect \n(see \"How do the query macros work under the hood?\" below).\n\nUnfortunately, query parameters do not appear to be standardized, as every database has a different syntax.\nLook through the project for specific examples for your database, and consult your database manual about prepared statements\nfor more information.\n\nThe syntax SQLite supports is effectively a superset of many databases' syntaxes, including MySQL and Postgres.\nTo simplify our examples, we use the same syntax for Postgres and SQLite; though SQLite's syntax technically allows\nalphanumeric identifiers, that's not currently exposed in SQLx, and it's expected to be a numeric 1-based index like Postgres.\n\nSome databases, like MySQL and PostgreSQL, may have special statements that let the user explicitly create and execute prepared statements (often `PREPARE` and `EXECUTE`, respectively),\nbut most of the time an application, or library like SQLx, will interact with prepared statements using specialized messages in the database's client/server protocol.\nPrepared statements created through this protocol may or may not be accessible using explicit SQL statements, depending on the database flavor.\n\nSince the dynamic data is handled separately, an application only needs to prepare a statement once,\nand then it can execute it as many times as it wants with all kinds of different data (at least of the same type and number).\nPrepared statements are generally tracked per-connection, so an application may need to re-prepare a statement several times over its lifetime as it opens new connections. \nIf it uses a connection pool, ideally all connections will eventually have all statements already prepared (assuming a closed set of statements),\nso the overhead of parsing and generating a query plan is amortized.\n\nQuery parameters are also usually transmitted in a compact binary format, which saves bandwidth over having to send them as human-readable strings.\n\nBecause of the obvious security and performance benefits of prepared statements, the design of SQLx tries to make them as easy to use and transparent as possible.\nThe `sqlx::query*()` family of functions, as well as the `sqlx::query*!()` macros, will always prefer prepared statements. This was an explicit goal from day one.\n\nSQLx will **never** substitute query parameters for values on the client-side, it will always let the database server handle that. We have concepts for making certain usage patterns easier, \nlike expanding a dynamic list of parameters (e.g. `?, ?, ?, ?, ...`) since MySQL and SQLite don't really support arrays, but will never simply format data into a query implicitly.\n\nOur pervasive use of prepared statements can cause some problems with third-party database implementations, e.g. projects like CockroachDB or PGBouncer that support the Postgres protocol but have their own semantics.\nIn this case, you might try setting [`.persistent(false)`](https://docs.rs/sqlx/latest/sqlx/query/struct.Query.html#method.persistent) before executing a query, which will cause the connection not to retain\nthe prepared statement after executing it.\n\nNot all SQL statements are allowed in prepared statements, either. \nAs a general rule, DML (Data Manipulation Language, i.e. `SELECT`, `INSERT`, `UPDATE`, `DELETE`) is allowed while DDL (Data Definition Language, e.g. `CREATE TABLE`, `ALTER TABLE`, etc.) is not.\nConsult your database manual for details.\n\nTo execute DDL requires using a different API than `query*()` or `query*!()` in SQLx. \nIdeally, we'd like to encourage you to use SQLx's built-in support for migrations (though that could be better documented, we'll get to it).\nHowever, in the event that isn't feasible, or you have different needs, you can execute pretty much any statement,\nincluding multiple statements separated by semicolons (`;`), by directly invoking methods of the [`Executor` trait](https://docs.rs/sqlx/latest/sqlx/trait.Executor.html#method.execute)\non any type that implements it, and passing your query string, e.g.:\n\n```rust\nuse sqlx::postgres::PgConnection;\nuse sqlx::Executor;\n\nlet mut conn: PgConnection = connect().await?;\n\nconn\n    .execute(\n        \"CREATE TABLE IF NOT EXISTS StudentContactInfo (student_id INTEGER, person_name TEXT, relation TEXT, phone TEXT);\\\n         INSERT INTO StudentContactInfo (student_id, person_name, relation, phone) \\\n             SELECT student_id, guardian_name, guardian_relation, guardian_phone FROM Students;\\\n         ALTER TABLE Students DROP guardian_name, guardian_relation, guardian_phone;\"\n    )\n    .await?;\n```\n\nThis is also pending a redesign to make it easier to discover and utilize.\n\n----------------------------------------------------------------\n### How can I do a `SELECT ... WHERE foo IN (...)` query?\n\n\nIn the future SQLx will support binding arrays as a comma-separated list for every database,\nbut unfortunately there's no general solution for that currently in SQLx itself.\nYou would need to manually generate the query, at which point it\ncannot be used with the macros.\n\nHowever, **in Postgres** you can work around this limitation by binding the arrays directly and using `= ANY()`:\n\n```rust\nlet db: PgPool = /* ... */;\nlet foo_ids: Vec<i64> = vec![/* ... */];\n\nlet foos = sqlx::query!(\n    \"SELECT * FROM foo WHERE id = ANY($1)\",\n    // a bug of the parameter typechecking code requires all array parameters to be slices\n    &foo_ids[..]\n)\n    .fetch_all(&db)\n    .await?;\n```\n\nEven when SQLx gains generic placeholder expansion for arrays, this will still be the optimal way to do it for Postgres,\nas comma-expansion means each possible length of the array generates a different query \n(and represents a combinatorial explosion if more than one array is used).\n\nNote that you can use any operator that returns a boolean, but beware that `!= ANY($1)` is **not equivalent** to `NOT IN (...)` as it effectively works like this:\n\n`lhs != ANY(rhs) -> false OR lhs != rhs[0] OR lhs != rhs[1] OR ... lhs != rhs[length(rhs) - 1]`\n\nThe equivalent of `NOT IN (...)` would be `!= ALL($1)`:\n\n`lhs != ALL(rhs) -> true AND lhs != rhs[0] AND lhs != rhs[1] AND ... lhs != rhs[length(rhs) - 1]`\n\nNote that `ANY` using any operator and passed an empty array will return `false`, thus the leading `false OR ...`.  \nMeanwhile, `ALL` with any operator and passed an empty array will return `true`, thus the leading `true AND ...`.\n\nSee also: [Postgres Manual, Section 9.24: Row and Array Comparisons](https://www.postgresql.org/docs/current/functions-comparisons.html)\n\n-----\n### How can I bind an array to a `VALUES()` clause? How can I do bulk inserts?\n\nLike the above, SQLx currently does not support this in the general case right now but will in the future.\n\nHowever, **Postgres** also has a feature to save the day here! You can pass an array to `UNNEST()` and\nit will treat it as a temporary table:\n\n```rust\nlet foo_texts: Vec<String> = vec![/* ... */];\n\nsqlx::query!(\n    // because `UNNEST()` is a generic function, Postgres needs the cast on the parameter here\n    // in order to know what type to expect there when preparing the query\n    \"INSERT INTO foo(text_column) SELECT * FROM UNNEST($1::text[])\",\n    &foo_texts[..]\n)\n    .execute(&db)\n    .await?; \n```\n\n`UNNEST()` can also take more than one array, in which case it'll treat each array as a column in the temporary table:\n\n```rust\n// this solution currently requires each column to be its own vector\n// in the future we're aiming to allow binding iterators directly as arrays\n// so you can take a vector of structs and bind iterators mapping to each field\nlet foo_texts: Vec<String> = vec![/* ... */];\nlet foo_bools: Vec<bool> = vec![/* ... */];\nlet foo_ints: Vec<i64> = vec![/* ... */];\nlet foo_opt_texts: Vec<Option<String>> = vec![/* ... */];\nlet foo_opt_naive_dts: Vec<Option<NaiveDateTime>> = vec![/* ... */]\n\n\nsqlx::query!(\n    \"\n        INSERT INTO foo(text_column, bool_column, int_column, opt_text_column, opt_naive_dt_column) \n        SELECT * FROM UNNEST($1::text[], $2::bool[], $3::int8[], $4::text[], $5::timestamp[])\n    \",\n    &foo_texts[..],\n    &foo_bools[..],\n    &foo_ints[..],\n    // Due to a limitation in how SQLx typechecks query parameters, `Vec<Option<T>>` is unable to be typechecked.\n    // This demonstrates the explicit type override syntax, which tells SQLx not to typecheck these parameters.\n    // See the documentation for `query!()` for more details.\n    &foo_opt_texts as &[Option<String>],\n    &foo_opt_naive_dts as &[Option<NaiveDateTime>]\n)\n    .execute(&db)\n    .await?;\n```\n\nAgain, even with comma-expanded lists in the future this will likely still be the most performant way to run bulk inserts\nwith Postgres--at least until we get around to implementing an interface for `COPY FROM STDIN`, though\nthis solution with `UNNEST()` will still be more flexible as you can use it in queries that are more complex\nthan just inserting into a table.\n\nNote that if some vectors are shorter than others, `UNNEST` will fill the corresponding columns with  `NULL`s\nto match the longest vector.\n\nFor example, if `foo_texts` is length 5, `foo_bools` is length 4, `foo_ints` is length 3, the resulting table will\nlook like this:\n\n| Row # | `text_column`  | `bool_column`  | `int_column`  |\n| ----- | -------------- | -------------- | ------------- |\n| 1     | `foo_texts[0]` | `foo_bools[0]` | `foo_ints[0]` |\n| 2     | `foo_texts[1]` | `foo_bools[1]` | `foo_ints[1]` |\n| 3     | `foo_texts[2]` | `foo_bools[2]` | `foo_ints[2]` |\n| 4     | `foo_texts[3]` | `foo_bools[3]` | `NULL`        |\n| 5     | `foo_texts[4]` | `NULL`         | `NULL`        |\n\nSee Also:\n* [Postgres Manual, Section 7.2.1.4: Table Functions](https://www.postgresql.org/docs/current/queries-table-expressions.html#QUERIES-TABLEFUNCTIONS)\n* [Postgres Manual, Section 9.19: Array Functions and Operators](https://www.postgresql.org/docs/current/functions-array.html)\n\n----\n### How do I compile with the macros without needing a database, e.g. in CI?\n\nThe macros support an offline mode which saves data for existing queries to a `.sqlx` directory,\nso the macros can just read those instead of talking to a database.\n\nSee the following:\n\n* [the docs for `query!()`](https://docs.rs/sqlx/0.5.5/sqlx/macro.query.html#offline-mode-requires-the-offline-feature)\n* [the README for `sqlx-cli`](sqlx-cli/README.md#enable-building-in-offline-mode-with-query)\n\nTo keep `.sqlx` up-to-date you need to run `cargo sqlx prepare` before every commit that\nadds or changes a query; you can do this with a Git pre-commit hook:\n\n```shell\n$ echo \"cargo sqlx prepare > /dev/null 2>&1; git add .sqlx > /dev/null\" > .git/hooks/pre-commit \n```\n\nNote that this may make committing take some time as it'll cause your project to be recompiled, and\nas an ergonomic choice it does _not_ block committing if `cargo sqlx prepare` fails.\n\nWe're working on a way for the macros to save their data to the filesystem automatically which should be part of SQLx 0.7,\nso your pre-commit hook would then just need to stage the changed files. This can be enabled by creating a directory \nand setting the `SQLX_OFFLINE_DIR` environment variable to it before compiling. \nHowever, this behaviour is not considered stable and it is still recommended to use `cargo sqlx prepare`.\n\n----\n\n### How do the query macros work under the hood?\n\nThe macros work by talking to the database at compile time. When a(n) SQL client asks to create a prepared statement \nfrom a query string, the response from the server typically includes information about the following:\n\n* the number of bind parameters, and their expected types if the database is capable of inferring that\n* the number, names and types of result columns, as well as the original table and columns names before aliasing \n  \nIn MySQL/MariaDB, we also get boolean flag signaling if a column is `NOT NULL`, however \nin Postgres and SQLite, we need to do a bit more work to determine whether a column can be `NULL` or not.\n\nAfter preparing, the Postgres driver will first look up the result columns in their source table and check if they have \na `NOT NULL` constraint. Then, it will execute `EXPLAIN (VERBOSE, FORMAT JSON) <your query>` to determine which columns \ncome from half-open joins (LEFT and RIGHT joins), which makes a normally `NOT NULL` column nullable. Since the\n`EXPLAIN VERBOSE` format is not stable or completely documented, this inference isn't perfect. However, it does err on\nthe side of producing false-positives (marking a column nullable when it's `NOT NULL`) to avoid errors at runtime.\n\nIf you do encounter false-positives please feel free to open an issue; make sure to include your query, any relevant\nschema as well as the output of `EXPLAIN (VERBOSE, FORMAT JSON) <your query>` which will make this easier to debug.\n\nThe SQLite driver will pull the bytecode of the prepared statement and step through it to find any instructions\nthat produce a null value for any column in the output.\n\n---\n### Why can't SQLx just look at my database schema/migrations and parse the SQL itself?\n\nTake a moment and think of the effort that would be required to do that.\n\nTo implement this for a single database driver, SQLx would need to:\n\n* know how to parse SQL, and not just standard SQL but the specific dialect of that particular database\n* know how to analyze and typecheck SQL queries in the context of the original schema\n* if inferring schema from migrations it would need to simulate all the schema-changing effects of those migrations\n\nThis is effectively reimplementing a good chunk of the database server's frontend, \n\n_and_ maintaining and ensuring correctness of that reimplementation,\n\nincluding bugs and idiosyncrasies,\n\nfor the foreseeable future,\n\nfor _every_ database we intend to support. \n\nEven Sisyphus would pity us.\n\n----\n\n### Why does my project using sqlx query macros not build on docs.rs?\n\nDocs.rs doesn't have access to your database, so it needs to be provided prepared queries in a `.sqlx` directory and be instructed to set the `SQLX_OFFLINE` environment variable to true while compiling your project. Luckily for us, docs.rs creates a `DOCS_RS` environment variable that we can access in a custom build script to achieve this functionality.\n\nTo do so, first, make sure that you have run `cargo sqlx prepare` to generate a `.sqlx` directory in your project.\n\nNext, create a file called `build.rs` in the root of your project directory (at the same level as `Cargo.toml`). Add the following code to it:\n```rs\nfn main() {\n    // When building in docs.rs, we want to set SQLX_OFFLINE mode to true\n    if std::env::var_os(\"DOCS_RS\").is_some() {\n        println!(\"cargo:rustc-env=SQLX_OFFLINE=true\");\n    }\n}\n```\n"
        },
        {
          "name": "LICENSE-APACHE",
          "type": "blob",
          "size": 10.0029296875,
          "content": "Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and\n\n(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and\n\n(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.\n\nYou may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work.\n\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"[]\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\n\nCopyright 2020 LaunchBadge, LLC\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2020 LaunchBadge, LLC\n\nPermission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.9794921875,
          "content": "<h1 align=\"center\">SQLx</h1>\n<div align=\"center\">\n <strong>\n   🧰 The Rust SQL Toolkit\n </strong>\n</div>\n\n<br />\n\n<div align=\"center\">\n  <!-- Github Actions -->\n  <a href=\"https://github.com/launchbadge/sqlx/actions/workflows/sqlx.yml?query=branch%3Amain\">\n    <img src=\"https://img.shields.io/github/actions/workflow/status/launchbadge/sqlx/sqlx.yml?branch=main&style=flat-square\" alt=\"actions status\" /></a>\n  <!-- Version -->\n  <a href=\"https://crates.io/crates/sqlx\">\n    <img src=\"https://img.shields.io/crates/v/sqlx.svg?style=flat-square\"\n    alt=\"Crates.io version\" /></a>\n  <!-- Discord -->\n  <a href=\"https://discord.gg/uuruzJ7\">\n  <img src=\"https://img.shields.io/discord/665528275556106240?style=flat-square\" alt=\"chat\" /></a>\n  <!-- Docs -->\n  <a href=\"https://docs.rs/sqlx\">\n  <img src=\"https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square\" alt=\"docs.rs docs\" /></a>\n  <!-- Downloads -->\n  <a href=\"https://crates.io/crates/sqlx\">\n    <img src=\"https://img.shields.io/crates/d/sqlx.svg?style=flat-square\" alt=\"Download\" />\n  </a>\n</div>\n\n<div align=\"center\">\n  <h4>\n    <a href=\"#install\">\n      Install\n    </a>\n    <span> | </span>\n    <a href=\"#usage\">\n      Usage\n    </a>\n    <span> | </span>\n    <a href=\"https://docs.rs/sqlx\">\n      Docs\n    </a>\n    <span> | </span>\n    <a href=\"https://github.com/launchbadge/sqlx/wiki/Ecosystem\">\n      Ecosystem\n    </a>    \n    <span> | </span>\n    <a href=\"https://discord.gg/uuruzJ7\">\n      Discord\n    </a>\n  </h4>\n</div>\n\n<br />\n\n<div align=\"center\">\n  <small>Built with ❤️ by <a href=\"https://launchbadge.com\">The LaunchBadge team</a></small>\n</div>\n\n<br />\n\n<div align=\"center\">\n    <h5>Have a question? Be sure to <a href=\"FAQ.md\">check the FAQ first!</a></h5>\n</div>\n\n<br />\n\nSQLx is an async, pure Rust<sub>†</sub> SQL crate featuring compile-time checked queries without a DSL.\n\n-   **Truly Asynchronous**. Built from the ground-up using async/await for maximum concurrency.\n\n-   **Compile-time checked queries** (if you want). See [SQLx is not an ORM](#sqlx-is-not-an-orm).\n\n-   **Database Agnostic**. Support for [PostgreSQL], [MySQL], [MariaDB], [SQLite].\n    -   [MSSQL] was supported prior to version 0.7, but has been removed pending a full rewrite of the driver as part of our [SQLx Pro initiative].\n\n-   **Pure Rust**. The Postgres and MySQL/MariaDB drivers are written in pure Rust using **zero** unsafe<sub>††</sub> code.\n\n-   **Runtime Agnostic**. Works on different runtimes ([`async-std`] / [`tokio`] / [`actix`]) and TLS backends ([`native-tls`], [`rustls`]).\n\n<small><small>\n\n† The SQLite driver uses the libsqlite3 C library as SQLite is an embedded database (the only way\nwe could be pure Rust for SQLite is by porting _all_ of SQLite to Rust).\n\n†† SQLx uses `#![forbid(unsafe_code)]` unless the `sqlite` feature is enabled.\nThe SQLite driver directly invokes the SQLite3 API via `libsqlite3-sys`, which requires `unsafe`.\n\n</small></small>\n\n[postgresql]: http://postgresql.org/\n[sqlite]: https://sqlite.org/\n[mysql]: https://www.mysql.com/\n[mariadb]: https://www.mariadb.org/\n[mssql]: https://www.microsoft.com/en-us/sql-server\n[SQLx Pro initiative]: https://github.com/launchbadge/sqlx/discussions/1616\n\n---\n\n-   Cross-platform. Being native Rust, SQLx will compile anywhere Rust is supported.\n\n-   Built-in connection pooling with `sqlx::Pool`.\n\n-   Row streaming. Data is read asynchronously from the database and decoded on demand.\n\n-   Automatic statement preparation and caching. When using the high-level query API (`sqlx::query`), statements are\n    prepared and cached per connection.\n\n-   Simple (unprepared) query execution including fetching results into the same `Row` types used by\n    the high-level API. Supports batch execution and returns results from all statements.\n\n-   Transport Layer Security (TLS) where supported ([MySQL], [MariaDB] and [PostgreSQL]).\n\n-   Asynchronous notifications using `LISTEN` and `NOTIFY` for [PostgreSQL].\n\n-   Nested transactions with support for save points.\n\n-   `Any` database driver for changing the database driver at runtime. An `AnyPool` connects to the driver indicated by the URL scheme.\n\n## Install\n\nSQLx is compatible with the [`async-std`], [`tokio`], and [`actix`] runtimes; and, the [`native-tls`] and [`rustls`] TLS backends. When adding the dependency, you must choose a runtime feature that is `runtime` + `tls`.\n\n[`async-std`]: https://github.com/async-rs/async-std\n[`tokio`]: https://github.com/tokio-rs/tokio\n[`actix`]: https://github.com/actix/actix-net\n[`native-tls`]: https://crates.io/crates/native-tls\n[`rustls`]: https://crates.io/crates/rustls\n\n```toml\n# Cargo.toml\n[dependencies]\n# PICK ONE OF THE FOLLOWING:\n\n# tokio (no TLS)\nsqlx = { version = \"0.8\", features = [ \"runtime-tokio\" ] }\n# tokio + native-tls\nsqlx = { version = \"0.8\", features = [ \"runtime-tokio\", \"tls-native-tls\" ] }\n# tokio + rustls with ring and WebPKI CA certificates\nsqlx = { version = \"0.8\", features = [ \"runtime-tokio\", \"tls-rustls-ring-webpki\" ] }\n# tokio + rustls with ring and platform's native CA certificates\nsqlx = { version = \"0.8\", features = [ \"runtime-tokio\", \"tls-rustls-ring-native-roots\" ] }\n# tokio + rustls with aws-lc-rs\nsqlx = { version = \"0.8\", features = [ \"runtime-tokio\", \"tls-rustls-aws-lc-rs\" ] }\n\n# async-std (no TLS)\nsqlx = { version = \"0.8\", features = [ \"runtime-async-std\" ] }\n# async-std + native-tls\nsqlx = { version = \"0.8\", features = [ \"runtime-async-std\", \"tls-native-tls\" ] }\n# async-std + rustls with ring and WebPKI CA certificates\nsqlx = { version = \"0.8\", features = [ \"runtime-async-std\", \"tls-rustls-ring-webpki\" ] }\n# async-std + rustls with ring and platform's native CA certificates\nsqlx = { version = \"0.8\", features = [ \"runtime-async-std\", \"tls-rustls-ring-native-roots\" ] }\n# async-std + rustls with aws-lc-rs\nsqlx = { version = \"0.8\", features = [ \"runtime-async-std\", \"tls-rustls-aws-lc-rs\" ] }\n```\n\n#### Cargo Feature Flags\n\nFor backward-compatibility reasons, the runtime and TLS features can either be chosen together as a single feature,\nor separately.\n\nFor forward compatibility, you should use the separate runtime and TLS features as the combination features may\nbe removed in the future.\n\n-   `runtime-async-std`: Use the `async-std` runtime without enabling a TLS backend.\n\n-   `runtime-async-std-native-tls`: Use the `async-std` runtime and `native-tls` TLS backend (SOFT-DEPRECATED).\n\n-   `runtime-async-std-rustls`: Use the `async-std` runtime and `rustls` TLS backend (SOFT-DEPRECATED).\n\n-   `runtime-tokio`: Use the `tokio` runtime without enabling a TLS backend.\n\n-   `runtime-tokio-native-tls`: Use the `tokio` runtime and `native-tls` TLS backend (SOFT-DEPRECATED).\n\n-   `runtime-tokio-rustls`: Use the `tokio` runtime and `rustls` TLS backend (SOFT-DEPRECATED).\n\n    - Actix-web is fully compatible with Tokio and so a separate runtime feature is no longer needed.\n\n-   `tls-native-tls`: Use the `native-tls` TLS backend (OpenSSL on *nix, SChannel on Windows, Secure Transport on macOS).\n\n-   `tls-rustls`: Use the `rustls` TLS backend (cross-platform backend, only supports TLS 1.2 and 1.3).\n\n-   `postgres`: Add support for the Postgres database server.\n\n-   `mysql`: Add support for the MySQL/MariaDB database server.\n\n-   `mssql`: Add support for the MSSQL database server.\n\n-   `sqlite`: Add support for the self-contained [SQLite](https://sqlite.org/) database engine with SQLite bundled and statically-linked.\n\n-   `sqlite-unbundled`: The same as above (`sqlite`), but link SQLite from the system instead of the bundled version.\n    * Allows updating SQLite independently of SQLx or using forked versions.\n    * You must have SQLite installed on the system or provide a path to the library at build time.\n       See [the `rusqlite` README](https://github.com/rusqlite/rusqlite?tab=readme-ov-file#notes-on-building-rusqlite-and-libsqlite3-sys) for details.\n    * May result in link errors if the SQLite version is too old. Version `3.20.0` or newer is recommended.\n    * Can increase build time due to the use of bindgen.\n\n-   `any`: Add support for the `Any` database driver, which can proxy to a database driver at runtime.\n\n-   `derive`: Add support for the derive family macros, those are `FromRow`, `Type`, `Encode`, `Decode`.\n\n-   `macros`: Add support for the `query*!` macros, which allows compile-time checked queries.\n\n-   `migrate`: Add support for the migration management and `migrate!` macro, which allow compile-time embedded migrations.\n\n-   `uuid`: Add support for UUID (in Postgres).\n\n-   `chrono`: Add support for date and time types from `chrono`.\n\n-   `time`: Add support for date and time types from `time` crate (alternative to `chrono`, which is preferred by `query!` macro, if both enabled)\n\n-   `bstr`: Add support for `bstr::BString`.\n\n-   `bigdecimal`: Add support for `NUMERIC` using the `bigdecimal` crate.\n\n-   `rust_decimal`: Add support for `NUMERIC` using the `rust_decimal` crate.\n\n-   `ipnetwork`: Add support for `INET` and `CIDR` (in postgres) using the `ipnetwork` crate.\n\n-   `json`: Add support for `JSON` and `JSONB` (in postgres) using the `serde_json` crate.\n\n-   Offline mode is now always enabled. See [sqlx-cli/README.md][readme-offline].\n\n[readme-offline]: sqlx-cli/README.md#enable-building-in-offline-mode-with-query\n\n## SQLx is not an ORM!\n\nSQLx supports **compile-time checked queries**. It does not, however, do this by providing a Rust\nAPI or DSL (domain-specific language) for building queries. Instead, it provides macros that take\nregular SQL as input and ensure that it is valid for your database. The way this works is that\nSQLx connects to your development DB at compile time to have the database itself verify (and return\nsome info on) your SQL queries. This has some potentially surprising implications:\n\n- Since SQLx never has to parse the SQL string itself, any syntax that the development DB accepts\n  can be used (including things added by database extensions)\n- Due to the different amount of information databases let you retrieve about queries, the extent of\n  SQL verification you get from the query macros depends on the database\n\n**If you are looking for an (asynchronous) ORM,** you can check out our new [Ecosystem wiki page](https://github.com/launchbadge/sqlx/wiki/Ecosystem#orms)!\n\n[`ormx`]: https://crates.io/crates/ormx\n[`SeaORM`]: https://github.com/SeaQL/sea-orm\n## Usage\n\nSee the `examples/` folder for more in-depth usage.\n\n### Quickstart\n\n```rust\nuse sqlx::postgres::PgPoolOptions;\n// use sqlx::mysql::MySqlPoolOptions;\n// etc.\n\n#[async_std::main] // Requires the `attributes` feature of `async-std`\n// or #[tokio::main]\n// or #[actix_web::main]\nasync fn main() -> Result<(), sqlx::Error> {\n    // Create a connection pool\n    //  for MySQL/MariaDB, use MySqlPoolOptions::new()\n    //  for SQLite, use SqlitePoolOptions::new()\n    //  etc.\n    let pool = PgPoolOptions::new()\n        .max_connections(5)\n        .connect(\"postgres://postgres:password@localhost/test\").await?;\n\n    // Make a simple query to return the given parameter (use a question mark `?` instead of `$1` for MySQL/MariaDB)\n    let row: (i64,) = sqlx::query_as(\"SELECT $1\")\n        .bind(150_i64)\n        .fetch_one(&pool).await?;\n\n    assert_eq!(row.0, 150);\n\n    Ok(())\n}\n```\n\n\n### Connecting\n\nA single connection can be established using any of the database connection types and calling `connect()`.\n\n```rust\nuse sqlx::Connection;\n\nlet conn = SqliteConnection::connect(\"sqlite::memory:\").await?;\n```\n\nGenerally, you will want to instead create a connection pool (`sqlx::Pool`) for the application to\nregulate how many server-side connections it's using.\n\n```rust\nlet pool = MySqlPool::connect(\"mysql://user:pass@host/database\").await?;\n```\n\n### Querying\n\nIn SQL, queries can be separated into prepared (parameterized) or unprepared (simple). Prepared queries have their\nquery plan _cached_, use a binary mode of communication (lower bandwidth and faster decoding), and utilize parameters\nto avoid SQL injection. Unprepared queries are simple and intended only for use where a prepared statement\nwill not work, such as various database commands (e.g., `PRAGMA` or `SET` or `BEGIN`).\n\nSQLx supports all operations with both types of queries. In SQLx, a `&str` is treated as an unprepared query,\nand a `Query` or `QueryAs` struct is treated as a prepared query.\n\n```rust\n// low-level, Executor trait\nconn.execute(\"BEGIN\").await?; // unprepared, simple query\nconn.execute(sqlx::query(\"DELETE FROM table\")).await?; // prepared, cached query\n```\n\nWe should prefer to use the high-level `query` interface whenever possible. To make this easier, there are finalizers\non the type to avoid the need to wrap with an executor.\n\n```rust\nsqlx::query(\"DELETE FROM table\").execute(&mut conn).await?;\nsqlx::query(\"DELETE FROM table\").execute(&pool).await?;\n```\n\nThe `execute` query finalizer returns the number of affected rows, if any, and drops all received results.\nIn addition, there are `fetch`, `fetch_one`, `fetch_optional`, and `fetch_all` to receive results.\n\nThe `Query` type returned from `sqlx::query` will return `Row<'conn>` from the database. Column values can be accessed\nby ordinal or by name with `row.get()`. As the `Row` retains an immutable borrow on the connection, only one\n`Row` may exist at a time.\n\nThe `fetch` query finalizer returns a stream-like type that iterates through the rows in the result sets.\n\n```rust\n// provides `try_next`\nuse futures::TryStreamExt;\n// provides `try_get`\nuse sqlx::Row;\n\nlet mut rows = sqlx::query(\"SELECT * FROM users WHERE email = ?\")\n    .bind(email)\n    .fetch(&mut conn);\n\nwhile let Some(row) = rows.try_next().await? {\n    // map the row into a user-defined domain type\n    let email: &str = row.try_get(\"email\")?;\n}\n```\n\nTo assist with mapping the row into a domain type, one of two idioms may be used:\n\n```rust\nlet mut stream = sqlx::query(\"SELECT * FROM users\")\n    .map(|row: PgRow| {\n        // map the row into a user-defined domain type\n    })\n    .fetch(&mut conn);\n```\n\n```rust\n#[derive(sqlx::FromRow)]\nstruct User { name: String, id: i64 }\n\nlet mut stream = sqlx::query_as::<_, User>(\"SELECT * FROM users WHERE email = ? OR name = ?\")\n    .bind(user_email)\n    .bind(user_name)\n    .fetch(&mut conn);\n```\n\nInstead of a stream of results, we can use `fetch_one` or `fetch_optional` to request one required or optional result\nfrom the database.\n\n### Compile-time verification\n\nWe can use the macro, `sqlx::query!` to achieve compile-time syntactic and semantic verification of the SQL, with\nan output to an anonymous record type where each SQL column is a Rust field (using raw identifiers where needed).\n\n```rust\nlet countries = sqlx::query!(\n        \"\nSELECT country, COUNT(*) as count\nFROM users\nGROUP BY country\nWHERE organization = ?\n        \",\n        organization\n    )\n    .fetch_all(&pool) // -> Vec<{ country: String, count: i64 }>\n    .await?;\n\n// countries[0].country\n// countries[0].count\n```\n\nDifferences from `query()`:\n\n-   The input (or bind) parameters must be given all at once (and they are compile-time validated to be\n    the right number and the right type).\n\n-   The output type is an anonymous record. In the above example the type would be similar to:\n\n    ```rust\n    { country: String, count: i64 }\n    ```\n\n-   The `DATABASE_URL` environment variable must be set at build time to a database which it can prepare\n    queries against; the database does not have to contain any data but must be the same\n    kind (MySQL, Postgres, etc.) and have the same schema as the database you will be connecting to at runtime.\n\n    For convenience, you can use [a `.env` file][dotenv]<sup>1</sup> to set DATABASE_URL so that you don't have to pass it every time:\n\n    ```\n    DATABASE_URL=mysql://localhost/my_database\n    ```\n\n[dotenv]: https://github.com/dotenv-rs/dotenv#examples\n\nThe biggest downside to `query!()` is that the output type cannot be named (due to Rust not\nofficially supporting anonymous records). To address that, there is a `query_as!()` macro that is\nmostly identical except that you can name the output type.\n\n```rust\n// no traits are needed\nstruct Country { country: String, count: i64 }\n\nlet countries = sqlx::query_as!(Country,\n        \"\nSELECT country, COUNT(*) as count\nFROM users\nGROUP BY country\nWHERE organization = ?\n        \",\n        organization\n    )\n    .fetch_all(&pool) // -> Vec<Country>\n    .await?;\n\n// countries[0].country\n// countries[0].count\n```\n\nTo avoid the need of having a development database around to compile the project even when no\nmodifications (to the database-accessing parts of the code) are done, you can enable \"offline mode\"\nto cache the results of the SQL query analysis using the `sqlx` command-line tool. See\n[sqlx-cli/README.md](./sqlx-cli/README.md#enable-building-in-offline-mode-with-query).\n\nCompile-time verified queries do quite a bit of work at compile time. Incremental actions like\n`cargo check` and `cargo build` can be significantly faster when using an optimized build by\nputting the following in your `Cargo.toml` (More information in the\n[Profiles section](https://doc.rust-lang.org/cargo/reference/profiles.html) of The Cargo Book)\n\n```toml\n[profile.dev.package.sqlx-macros]\nopt-level = 3\n```\n\n<sup>1</sup> The `dotenv` crate itself appears abandoned as of [December 2021](https://github.com/dotenv-rs/dotenv/issues/74)\nso we now use the `dotenvy` crate instead. The file format is the same.\n\n## Safety\n\nThis crate uses `#![forbid(unsafe_code)]` to ensure everything is implemented in 100% Safe Rust.\n\nIf the `sqlite` feature is enabled, this is downgraded to `#![deny(unsafe_code)]` with `#![allow(unsafe_code)]` on the\n`sqlx::sqlite` module. There are several places where we interact with the C SQLite API. We try to document each call for the invariants we're assuming. We absolutely welcome auditing of, and feedback on, our unsafe code usage.\n\n## License\n\nLicensed under either of\n\n-   Apache License, Version 2.0\n    ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n-   MIT license\n    ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions.\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.4169921875,
          "content": "[[disallowed-methods]]\npath = \"core::cmp::Ord::min\"\nreason = '''\ntoo easy to misread `x.min(y)` as \"let the minimum value of `x` be `y`\" when it actually means the exact opposite;\nuse `std::cmp::min` instead.\n'''\n\n[[disallowed-methods]]\npath = \"core::cmp::Ord::max\"\nreason = '''\ntoo easy to misread `x.max(y)` as \"let the maximum value of `x` be `y`\" when it actually means the exact opposite;\nuse `std::cmp::max` instead.\n'''\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen-changelog.sh",
          "type": "blob",
          "size": 3.095703125,
          "content": "# Requires Github CLI and `jq`\n# Usage: `./gen-changelog.sh YYYY-mm-dd`\n# Generates changelog entries for all PRs merged on or after the given date.\nset -e\n\nPULLS='[]'\nCURSOR='null'\n\nMIN_MERGED_AT=$(date --date=\"$1\" +%s)\n\nwhile true\ndo\n  # Use the GraphQL API to paginate merged pull requests.\n  # The REST API doesn't allow filtering only merged pull requests.\n  # We scan all merged pull requests from the beginning because it's not unheard of to have a very old PR finally get\n  # merged; e.g. #1081, merged a year and a half after it was opened.\n  if [ \"$CURSOR\" != \"null\" ];\n  then\n    PAGE=$(gh api graphql -f after=\"$CURSOR\" -f query='query($after: String) {\n               repository(owner: \"launchbadge\", name: \"sqlx\") {\n                 pullRequests(first:100,orderBy: {field:CREATED_AT, direction:ASC},states:MERGED, after: $after) {\n                   nodes {\n                     number\n                     author { login }\n                     title\n                     url\n                     mergedAt\n                   }\n                   pageInfo {\n                     hasNextPage\n                     endCursor\n                   }\n                 }\n               }\n             }');\n  else\n        PAGE=$(gh api graphql -f query='query {\n                   repository(owner: \"launchbadge\", name: \"sqlx\") {\n                     pullRequests(first:100,orderBy: {field:CREATED_AT, direction:ASC},states:MERGED) {\n                       nodes {\n                         number\n                         author { login }\n                         title\n                         url\n                         mergedAt\n                       }\n                       pageInfo {\n                         hasNextPage\n                         endCursor\n                       }\n                     }\n                   }\n                 }');\n  fi\n\n  CURSOR=$(echo \"$PAGE\" | jq -r '.data.repository.pullRequests.pageInfo.endCursor');\n\n  HAS_NEXT_PAGE=$(echo \"$PAGE\" | jq '.data.repository.pullRequests.pageInfo.hasNextPage');\n\n  PULLS=$(echo \"$PAGE\" | jq \"$PULLS + (.data.repository.pullRequests.nodes | map(select(.mergedAt | fromdate >= $MIN_MERGED_AT)))\");\n\n  # can't use `\"$CURSOR\" == 'null'` because the last page still gives a valid cursor\n  if ! $HAS_NEXT_PAGE; then break; fi;\ndone\n\nCOUNT=$(echo \"$PULLS\" | jq \"length\");\n\necho \"Found $COUNT pull requests merged on or after $1\\n\"\n\nif [ -z $COUNT ]; then exit 0; fi;\n\necho \"Entries:\"\necho \"$PULLS\" | jq -r 'map(\"* [[#\\(.number)]]: \\(.title) [[@\\(.author.login)]]\") | join(\"\\n\")'\n\necho \"\\nLinks:\"\necho \"$PULLS\" | jq -r 'map(\"[#\\(.number)]: \\(.url)\") | join(\"\\n\")'\n\necho \"\\nNew Authors:\"\nDUPE_AUTHORS=''\n\n# Generate link entries for new authors at the end of the changelog.\necho \"$PULLS\" | jq -r '.[].author.login' | while read author; do\n  author_url=\"https://github.com/$author\"\n  author_entry=\"[@$author]: $author_url\"\n\n  # Check if the entry already exists in the changelog or in our list of new authors.\n  if grep -qF \"$author_entry\" CHANGELOG.md || echo \"$DUPE_AUTHORS\" | grep -qF \"$author_entry\";\n  then continue;\n  fi;\n\n  DUPE_AUTHORS=\"$DUPE_AUTHORS$author_entry\\n\"\n  echo $author_entry\ndone\n"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.109375,
          "content": "# Note: should NOT increase during a minor/patch release cycle\n[toolchain]\nchannel = \"1.78\"\nprofile = \"minimal\"\n"
        },
        {
          "name": "sqlx-bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-macros-core",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-mysql",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-postgres",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-sqlite",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlx-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}