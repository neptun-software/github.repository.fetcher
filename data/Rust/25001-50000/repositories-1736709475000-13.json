{
  "metadata": {
    "timestamp": 1736709475000,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "astral-sh/ruff",
      "stars": 34454,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.37109375,
          "content": "# Check http://editorconfig.org for more information\n# This is the main config file for this project:\nroot = true\n\n[*]\ncharset = utf-8\ntrim_trailing_whitespace = true\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\nindent_size = 2\n\n[*.{rs,py,pyi}]\nindent_size = 4\n\n[*.snap]\ntrim_trailing_whitespace = false\n\n[*.md]\nmax_line_length = 100\n\n[*.toml]\nindent_size = 4"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.97265625,
          "content": "* text=auto eol=lf\n\ncrates/ruff_linter/resources/test/fixtures/isort/line_ending_crlf.py text eol=crlf\ncrates/ruff_linter/resources/test/fixtures/pycodestyle/W605_1.py text eol=crlf\ncrates/ruff_linter/resources/test/fixtures/pycodestyle/W391_2.py text eol=crlf\ncrates/ruff_linter/resources/test/fixtures/pycodestyle/W391_3.py text eol=crlf\n\ncrates/ruff_python_formatter/resources/test/fixtures/ruff/docstring_code_examples_crlf.py text eol=crlf\ncrates/ruff_python_formatter/tests/snapshots/format@docstring_code_examples_crlf.py.snap text eol=crlf\n\ncrates/ruff_python_parser/resources/invalid/re_lexing/line_continuation_windows_eol.py text eol=crlf\ncrates/ruff_python_parser/resources/invalid/re_lex_logical_token_windows_eol.py text eol=crlf\ncrates/ruff_python_parser/resources/invalid/re_lex_logical_token_mac_eol.py text eol=cr\n\ncrates/ruff_python_parser/resources/inline linguist-generated=true\n\nruff.schema.json linguist-generated=true text=auto eol=lf\n*.md.snap linguist-language=Markdown\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 4.6220703125,
          "content": "# Benchmarking cpython (CONTRIBUTING.md)\ncrates/ruff_linter/resources/test/cpython\n# generate_mkdocs.py\nmkdocs.generated.yml\n# check_ecosystem.py\nruff-old\ngithub_search*.jsonl\n# update_schemastore.py\nschemastore\n# `maturin develop` and ecosystem_all_check.sh\n.venv*\n# Formatter debugging (crates/ruff_python_formatter/README.md)\nscratch.*\n# Created by `perf` (CONTRIBUTING.md)\nperf.data\nperf.data.old\n# Created by `flamegraph` (CONTRIBUTING.md)\nflamegraph.svg\n# Additional target directories that don't invalidate the main compile cache when changing linker settings,\n# e.g. `CARGO_TARGET_DIR=target-maturin maturin build --release --strip` or\n# `CARGO_TARGET_DIR=target-llvm-lines RUSTFLAGS=\"-Csymbol-mangling-version=v0\" cargo llvm-lines -p ruff --lib`\n/target*\n\n# samply profiles\nprofile.json\n\n# tracing-flame traces\ntracing.folded\ntracing-flamechart.svg\ntracing-flamegraph.svg\n\n###\n# Rust.gitignore\n###\n\n# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n\n###\n# Python.gitignore\n###\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\nrepos/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n.idea/\n.vimspector.json\n\n# Visual Studio Code\n.vscode/\n\n# VIM\n.*.sw?\n.sw?\n\n# Custom re-inclusions for the resolver test cases\n!crates/ruff_python_resolver/resources/test/airflow/venv/\n!crates/ruff_python_resolver/resources/test/airflow/venv/lib\n!crates/ruff_python_resolver/resources/test/airflow/venv/lib/python3.11/site-packages/_watchdog_fsevents.cpython-311-darwin.so\n!crates/ruff_python_resolver/resources/test/airflow/venv/lib/python3.11/site-packages/orjson/orjson.cpython-311-darwin.so\n"
        },
        {
          "name": ".markdownlint.yaml",
          "type": "blob",
          "size": 0.6298828125,
          "content": "# default to true for all rules\ndefault: true\n\n# MD007/unordered-list-indent\nMD007:\n  indent: 4\n\n# MD033/no-inline-html\nMD033: false\n\n# MD041/first-line-h1\nMD041: false\n\n# MD013/line-length\nMD013: false\n\n# MD014/commands-show-output\nMD014: false\n\n# MD024/no-duplicate-heading\nMD024:\n  # Allow when nested under different parents e.g. CHANGELOG.md\n  siblings_only: true\n\n# MD046/code-block-style\n#\n# Ignore this because it conflicts with the code block style used in content\n# tabs of mkdocs-material which is to add a blank line after the content title.\n#\n# Ref: https://github.com/astral-sh/ruff/pull/15011#issuecomment-2544790854\nMD046: false\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 3.7109375,
          "content": "fail_fast: false\n\nexclude: |\n  (?x)^(\n    .github/workflows/release.yml|\n    crates/red_knot_vendored/vendor/.*|\n    crates/red_knot_workspace/resources/.*|\n    crates/ruff_linter/resources/.*|\n    crates/ruff_linter/src/rules/.*/snapshots/.*|\n    crates/ruff_notebook/resources/.*|\n    crates/ruff_server/resources/.*|\n    crates/ruff/resources/.*|\n    crates/ruff_python_formatter/resources/.*|\n    crates/ruff_python_formatter/tests/snapshots/.*|\n    crates/ruff_python_resolver/resources/.*|\n    crates/ruff_python_resolver/tests/snapshots/.*\n  )$\n\nrepos:\n  - repo: https://github.com/abravalheri/validate-pyproject\n    rev: v0.23\n    hooks:\n      - id: validate-pyproject\n\n  - repo: https://github.com/executablebooks/mdformat\n    rev: 0.7.21\n    hooks:\n      - id: mdformat\n        additional_dependencies:\n          - mdformat-mkdocs==4.0.0\n          - mdformat-footnote==0.1.1\n        exclude: |\n          (?x)^(\n            docs/formatter/black\\.md\n            | docs/\\w+\\.md\n          )$\n\n  - repo: https://github.com/igorshubovych/markdownlint-cli\n    rev: v0.43.0\n    hooks:\n      - id: markdownlint-fix\n        exclude: |\n          (?x)^(\n            docs/formatter/black\\.md\n            | docs/\\w+\\.md\n          )$\n\n  - repo: https://github.com/adamchainz/blacken-docs\n    rev: 1.19.1\n    hooks:\n      - id: blacken-docs\n        args: [\"--pyi\", \"--line-length\", \"130\"]\n        files: '^crates/.*/resources/mdtest/.*\\.md'\n        exclude: |\n          (?x)^(\n            .*?invalid(_.+)*_syntax\\.md\n          )$\n        additional_dependencies:\n          - black==24.10.0\n\n  - repo: https://github.com/crate-ci/typos\n    rev: v1.29.4\n    hooks:\n      - id: typos\n\n  - repo: local\n    hooks:\n      - id: cargo-fmt\n        name: cargo fmt\n        entry: cargo fmt --\n        language: system\n        types: [rust]\n        pass_filenames: false # This makes it a lot faster\n\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    rev: v0.9.1\n    hooks:\n      - id: ruff-format\n      - id: ruff\n        args: [--fix, --exit-non-zero-on-fix]\n        types_or: [python, pyi]\n        require_serial: true\n\n  # Prettier\n  - repo: https://github.com/rbubley/mirrors-prettier\n    rev: v3.4.2\n    hooks:\n      - id: prettier\n        types: [yaml]\n\n  # zizmor detects security vulnerabilities in GitHub Actions workflows.\n  # Additional configuration for the tool is found in `.github/zizmor.yml`\n  - repo: https://github.com/woodruffw/zizmor-pre-commit\n    rev: v1.0.1\n    hooks:\n      - id: zizmor\n\n  - repo: https://github.com/python-jsonschema/check-jsonschema\n    rev: 0.31.0\n    hooks:\n      - id: check-github-workflows\n\n  # `actionlint` hook, for verifying correct syntax in GitHub Actions workflows.\n  # Some additional configuration for `actionlint` can be found in `.github/actionlint.yaml`.\n  - repo: https://github.com/rhysd/actionlint\n    rev: v1.7.6\n    hooks:\n      - id: actionlint\n        stages:\n          # This hook is disabled by default, since it's quite slow.\n          # To run all hooks *including* this hook, use `uvx pre-commit run -a --hook-stage=manual`.\n          # To run *just* this hook, use `uvx pre-commit run -a actionlint --hook-stage=manual`.\n          - manual\n        args:\n          - \"-ignore=SC2129\" # ignorable stylistic lint from shellcheck\n          - \"-ignore=SC2016\" # another shellcheck lint: seems to have false positives?\n        additional_dependencies:\n          # actionlint has a shellcheck integration which extracts shell scripts in `run:` steps from GitHub Actions\n          # and checks these with shellcheck. This is arguably its most useful feature,\n          # but the integration only works if shellcheck is installed\n          - \"github.com/wasilibs/go-shellcheck/cmd/shellcheck@v0.10.0\"\n\nci:\n  skip: [cargo-fmt, dev-generate-all]\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.0625,
          "content": "# Auto-generated by `cargo-dist`.\n.github/workflows/release.yml\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "BREAKING_CHANGES.md",
          "type": "blob",
          "size": 21.974609375,
          "content": "# Breaking Changes\n\n## 0.9.0\n\nRuff now formats your code according to the 2025 style guide. As a result, your code might now get formatted differently. See the [changelog](./CHANGELOG.md#090) for a detailed list of changes.\n\n## 0.8.0\n\n- **Default to Python 3.9**\n\n    Ruff now defaults to Python 3.9 instead of 3.8 if no explicit Python version is configured using [`ruff.target-version`](https://docs.astral.sh/ruff/settings/#target-version) or [`project.requires-python`](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#python-requires) ([#13896](https://github.com/astral-sh/ruff/pull/13896))\n\n- **Changed location of `pydoclint` diagnostics**\n\n    [`pydoclint`](https://docs.astral.sh/ruff/rules/#pydoclint-doc) diagnostics now point to the first-line of the problematic docstring. Previously, this was not the case.\n\n    If you've opted into these preview rules but have them suppressed using\n    [`noqa`](https://docs.astral.sh/ruff/linter/#error-suppression) comments in\n    some places, this change may mean that you need to move the `noqa` suppression\n    comments. Most users should be unaffected by this change.\n\n- **Use XDG (i.e. `~/.local/bin`) instead of the Cargo home directory in the standalone installer**\n\n    Previously, Ruff's installer used `$CARGO_HOME` or `~/.cargo/bin` for its target install directory. Now, Ruff will be installed into `$XDG_BIN_HOME`, `$XDG_DATA_HOME/../bin`, or `~/.local/bin` (in that order).\n\n    This change is only relevant to users of the standalone Ruff installer (using the shell or PowerShell script). If you installed Ruff using uv or pip, you should be unaffected.\n\n- **Changes to the line width calculation**\n\n    Ruff now uses a new version of the [unicode-width](https://github.com/unicode-rs/unicode-width) Rust crate to calculate the line width. In very rare cases, this may lead to lines containing Unicode characters being reformatted, or being considered too long when they were not before ([`E501`](https://docs.astral.sh/ruff/rules/line-too-long/)).\n\n## 0.7.0\n\n- The pytest rules `PT001` and `PT023` now default to omitting the decorator parentheses when there are no arguments\n    ([#12838](https://github.com/astral-sh/ruff/pull/12838), [#13292](https://github.com/astral-sh/ruff/pull/13292)).\n    This was a change that we attempted to make in Ruff v0.6.0, but only partially made due to an error on our part.\n    See the [blog post](https://astral.sh/blog/ruff-v0.7.0) for more details.\n- The `useless-try-except` rule (in our `tryceratops` category) has been recoded from `TRY302` to\n    `TRY203` ([#13502](https://github.com/astral-sh/ruff/pull/13502)). This ensures Ruff's code is consistent with\n    the same rule in the [`tryceratops`](https://github.com/guilatrova/tryceratops) linter.\n- The `lint.allow-unused-imports` setting has been removed ([#13677](https://github.com/astral-sh/ruff/pull/13677)). Use\n    [`lint.pyflakes.allow-unused-imports`](https://docs.astral.sh/ruff/settings/#lint_pyflakes_allowed-unused-imports)\n    instead.\n\n## 0.6.0\n\n- Detect imports in `src` layouts by default for `isort` rules ([#12848](https://github.com/astral-sh/ruff/pull/12848))\n\n- The pytest rules `PT001` and `PT023` now default to omitting the decorator parentheses when there are no arguments ([#12838](https://github.com/astral-sh/ruff/pull/12838)).\n\n- Lint and format Jupyter Notebook by default ([#12878](https://github.com/astral-sh/ruff/pull/12878)).\n\n    You can disable specific rules for notebooks using [`per-file-ignores`](https://docs.astral.sh/ruff/settings/#lint_per-file-ignores):\n\n    ```toml\n    [tool.ruff.lint.per-file-ignores]\n    \"*.ipynb\" = [\"E501\"] # disable line-too-long in notebooks\n    ```\n\n    If you'd prefer to either only lint or only format Jupyter Notebook files, you can use the\n    section-specific `exclude` option to do so. For example, the following would only lint Jupyter\n    Notebook files and not format them:\n\n    ```toml\n    [tool.ruff.format]\n    exclude = [\"*.ipynb\"]\n    ```\n\n    And, conversely, the following would only format Jupyter Notebook files and not lint them:\n\n    ```toml\n    [tool.ruff.lint]\n    exclude = [\"*.ipynb\"]\n    ```\n\n    You can completely disable Jupyter Notebook support by updating the [`extend-exclude`](https://docs.astral.sh/ruff/settings/#extend-exclude) setting:\n\n    ```toml\n    [tool.ruff]\n    extend-exclude = [\"*.ipynb\"]\n    ```\n\n## 0.5.0\n\n- Follow the XDG specification to discover user-level configurations on macOS (same as on other Unix platforms)\n- Selecting `ALL` now excludes deprecated rules\n- The released archives now include an extra level of nesting, which can be removed with `--strip-components=1` when untarring.\n- The release artifact's file name no longer includes the version tag. This enables users to install via `/latest` URLs on GitHub.\n\n## 0.3.0\n\n### Ruff 2024.2 style\n\nThe formatter now formats code according to the Ruff 2024.2 style guide. Read the [changelog](./CHANGELOG.md#030) for a detailed list of stabilized style changes.\n\n### `isort`: Use one blank line after imports in typing stub files ([#9971](https://github.com/astral-sh/ruff/pull/9971))\n\nPreviously, Ruff used one or two blank lines (or the number configured by `isort.lines-after-imports`) after imports in typing stub files (`.pyi` files).\nThe [typing style guide for stubs](https://typing.readthedocs.io/en/latest/source/stubs.html#style-guide) recommends using at most 1 blank line for grouping.\nAs of this release, `isort` now always uses one blank line after imports in stub files, the same as the formatter.\n\n### `build` is no longer excluded by default ([#10093](https://github.com/astral-sh/ruff/pull/10093))\n\nRuff maintains a list of directories and files that are excluded by default. This list now consists of the following patterns:\n\n- `.bzr`\n- `.direnv`\n- `.eggs`\n- `.git`\n- `.git-rewrite`\n- `.hg`\n- `.ipynb_checkpoints`\n- `.mypy_cache`\n- `.nox`\n- `.pants.d`\n- `.pyenv`\n- `.pytest_cache`\n- `.pytype`\n- `.ruff_cache`\n- `.svn`\n- `.tox`\n- `.venv`\n- `.vscode`\n- `__pypackages__`\n- `_build`\n- `buck-out`\n- `dist`\n- `node_modules`\n- `site-packages`\n- `venv`\n\nPreviously, the `build` directory was included in this list. However, the `build` directory tends to be a not-unpopular directory\nname, and excluding it by default caused confusion. Ruff now no longer excludes `build` except if it is excluded by a `.gitignore` file\nor because it is listed in `extend-exclude`.\n\n### `--format` is no longer a valid `rule` or `linter` command option\n\nPreviously, `ruff rule` and `ruff linter` accepted the `--format <FORMAT>` option as an alias for `--output-format`. Ruff no longer\nsupports this alias. Please use `ruff rule --output-format <FORMAT>` and `ruff linter --output-format <FORMAT>` instead.\n\n## 0.1.9\n\n### `site-packages` is now excluded by default ([#5513](https://github.com/astral-sh/ruff/pull/5513))\n\nRuff maintains a list of default exclusions, which now consists of the following patterns:\n\n- `.bzr`\n- `.direnv`\n- `.eggs`\n- `.git-rewrite`\n- `.git`\n- `.hg`\n- `.ipynb_checkpoints`\n- `.mypy_cache`\n- `.nox`\n- `.pants.d`\n- `.pyenv`\n- `.pytest_cache`\n- `.pytype`\n- `.ruff_cache`\n- `.svn`\n- `.tox`\n- `.venv`\n- `.vscode`\n- `__pypackages__`\n- `_build`\n- `buck-out`\n- `build`\n- `dist`\n- `node_modules`\n- `site-packages`\n- `venv`\n\nPreviously, the `site-packages` directory was not excluded by default. While `site-packages` tends\nto be excluded anyway by virtue of the `.venv` exclusion, this may not be the case when using Ruff\nfrom VS Code outside a virtual environment.\n\n## 0.1.0\n\n### The deprecated `format` setting has been removed\n\nRuff previously used the `format` setting, `--format` CLI option, and `RUFF_FORMAT` environment variable to\nconfigure the output format of the CLI. This usage was deprecated in `v0.0.291` — the `format` setting is now used\nto control Ruff's code formatting. As of this release:\n\n- The `format` setting cannot be used to configure the output format, use `output-format` instead\n- The `RUFF_FORMAT` environment variable is ignored, use `RUFF_OUTPUT_FORMAT` instead\n- The `--format` option has been removed from `ruff check`, use `--output-format` instead\n\n### Unsafe fixes are not applied by default ([#7769](https://github.com/astral-sh/ruff/pull/7769))\n\nRuff labels fixes as \"safe\" and \"unsafe\". The meaning and intent of your code will be retained when applying safe\nfixes, but the meaning could be changed when applying unsafe fixes. Previously, unsafe fixes were always displayed\nand applied when fixing was enabled. Now, unsafe fixes are hidden by default and not applied. The `--unsafe-fixes`\nflag or `unsafe-fixes` configuration option can be used to enable unsafe fixes.\n\nSee the [docs](https://docs.astral.sh/ruff/configuration/#fix-safety) for details.\n\n### Remove formatter-conflicting rules from the default rule set ([#7900](https://github.com/astral-sh/ruff/pull/7900))\n\nPreviously, Ruff enabled all implemented rules in Pycodestyle (`E`) by default. Ruff now only includes the\nPycodestyle prefixes `E4`, `E7`, and `E9` to exclude rules that conflict with automatic formatters. Consequently,\nthe stable rule set no longer includes `line-too-long` (`E501`) and `mixed-spaces-and-tabs` (`E101`). Other\nexcluded Pycodestyle rules include whitespace enforcement in `E1` and `E2`; these rules are currently in preview, and are already omitted by default.\n\nThis change only affects those using Ruff under its default rule set. Users that include `E` in their `select` will experience no change in behavior.\n\n## 0.0.288\n\n### Remove support for emoji identifiers ([#7212](https://github.com/astral-sh/ruff/pull/7212))\n\nPreviously, Ruff supported the non-standard compliant emoji identifiers e.g. `📦 = 1`.\nWe decided to remove this non-standard language extension, and Ruff now reports syntax errors for emoji identifiers in your code, the same as CPython.\n\n### Improved GitLab fingerprints ([#7203](https://github.com/astral-sh/ruff/pull/7203))\n\nGitLab uses fingerprints to identify new, existing, or fixed violations. Previously, Ruff included the violation's position in the fingerprint. Using the location has the downside that changing any code before the violation causes the fingerprint to change, resulting in GitLab reporting one fixed and one new violation even though it is a pre-existing violation.\n\nRuff now uses a more stable location-agnostic fingerprint to minimize that existing violations incorrectly get marked as fixed and re-reported as new violations.\n\nExpect GitLab to report each pre-existing violation in your project as fixed and a new violation in your Ruff upgrade PR.\n\n## 0.0.283 / 0.284\n\n### The target Python version now defaults to 3.8 instead of 3.10 ([#6397](https://github.com/astral-sh/ruff/pull/6397))\n\nPreviously, when a target Python version was not specified, Ruff would use a default of Python 3.10. However, it is safer to default to an _older_ Python version to avoid assuming the availability of new features. We now default to the oldest supported Python version which is currently Python 3.8.\n\n(We still support Python 3.7 but since [it has reached EOL](https://devguide.python.org/versions/#unsupported-versions) we've decided not to make it the default here.)\n\nNote this change was announced in 0.0.283 but not active until 0.0.284.\n\n## 0.0.277\n\n### `.ipynb_checkpoints`, `.pyenv`, `.pytest_cache`, and `.vscode` are now excluded by default ([#5513](https://github.com/astral-sh/ruff/pull/5513))\n\nRuff maintains a list of default exclusions, which now consists of the following patterns:\n\n- `.bzr`\n- `.direnv`\n- `.eggs`\n- `.git`\n- `.git-rewrite`\n- `.hg`\n- `.ipynb_checkpoints`\n- `.mypy_cache`\n- `.nox`\n- `.pants.d`\n- `.pyenv`\n- `.pytest_cache`\n- `.pytype`\n- `.ruff_cache`\n- `.svn`\n- `.tox`\n- `.venv`\n- `.vscode`\n- `__pypackages__`\n- `_build`\n- `buck-out`\n- `build`\n- `dist`\n- `node_modules`\n- `venv`\n\nPreviously, the `.ipynb_checkpoints`, `.pyenv`, `.pytest_cache`, and `.vscode` directories were not\nexcluded by default. This change brings Ruff's default exclusions in line with other tools like\nBlack.\n\n## 0.0.276\n\n### The `keep-runtime-typing` setting has been reinstated ([#5470](https://github.com/astral-sh/ruff/pull/5470))\n\nThe `keep-runtime-typing` setting has been reinstated with revised semantics. This setting was\nremoved in [#4427](https://github.com/astral-sh/ruff/pull/4427), as it was equivalent to ignoring\nthe `UP006` and `UP007` rules via Ruff's standard `ignore` mechanism.\n\nTaking `UP006` (rewrite `List[int]` to `list[int]`) as an example, the setting now behaves as\nfollows:\n\n- On Python 3.7 and Python 3.8, setting `keep-runtime-typing = true` will cause Ruff to ignore\n    `UP006` violations, even if `from __future__ import annotations` is present in the file.\n    While such annotations are valid in Python 3.7 and Python 3.8 when combined with\n    `from __future__ import annotations`, they aren't supported by libraries like Pydantic and\n    FastAPI, which rely on runtime type checking.\n- On Python 3.9 and above, the setting has no effect, as `list[int]` is a valid type annotation,\n    and libraries like Pydantic and FastAPI support it without issue.\n\nIn short: `keep-runtime-typing` can be used to ensure that Ruff doesn't introduce type annotations\nthat are not supported at runtime by the current Python version, which are unsupported by libraries\nlike Pydantic and FastAPI.\n\nNote that this is not a breaking change, but is included here to complement the previous removal\nof `keep-runtime-typing`.\n\n## 0.0.268\n\n### The `keep-runtime-typing` setting has been removed ([#4427](https://github.com/astral-sh/ruff/pull/4427))\n\nEnabling the `keep-runtime-typing` option, located under the `pyupgrade` section, is equivalent\nto ignoring the `UP006` and `UP007` rules via Ruff's standard `ignore` mechanism. As there's no\nneed for a dedicated setting to disable these rules, the `keep-runtime-typing` option has been\nremoved.\n\n## 0.0.267\n\n### `update-check` is no longer a valid configuration option ([#4313](https://github.com/astral-sh/ruff/pull/4313))\n\nThe `update-check` functionality was deprecated in [#2530](https://github.com/astral-sh/ruff/pull/2530),\nin that the behavior itself was removed, and Ruff was changed to warn when that option was enabled.\n\nNow, Ruff will throw an error when `update-check` is provided via a configuration file (e.g.,\n`update-check = false`) or through the command-line, since it has no effect. Users should remove\nthis option from their configuration.\n\n## 0.0.265\n\n### `--fix-only` now exits with a zero exit code, unless `--exit-non-zero-on-fix` is specified ([#4146](https://github.com/astral-sh/ruff/pull/4146))\n\nPreviously, `--fix-only` would exit with a non-zero exit code if any fixes were applied. This\nbehavior was inconsistent with `--fix`, and further, meant that `--exit-non-zero-on-fix` was\neffectively ignored when `--fix-only` was specified.\n\nNow, `--fix-only` will exit with a zero exit code, unless `--exit-non-zero-on-fix` is specified,\nin which case it will exit with a non-zero exit code if any fixes were applied.\n\n## 0.0.260\n\n### Fixes are now represented as a list of edits ([#3709](https://github.com/astral-sh/ruff/pull/3709))\n\nPreviously, Ruff represented each fix as a single edit, which prohibited Ruff from automatically\nfixing violations that required multiple edits across a file. As such, Ruff now represents each\nfix as a list of edits.\n\nThis primarily affects the JSON API. Ruff's JSON representation used to represent the `fix` field as\na single edit, like so:\n\n```json\n{\n    \"message\": \"Remove unused import: `sys`\",\n    \"content\": \"\",\n    \"location\": {\"row\": 1, \"column\": 0},\n    \"end_location\": {\"row\": 2, \"column\": 0}\n}\n```\n\nThe updated representation instead includes a list of edits:\n\n```json\n{\n    \"message\": \"Remove unused import: `sys`\",\n    \"edits\": [\n        {\n            \"content\": \"\",\n            \"location\": {\"row\": 1, \"column\": 0},\n            \"end_location\": {\"row\": 2, \"column\": 0},\n        }\n    ]\n}\n```\n\n## 0.0.246\n\n### `multiple-statements-on-one-line-def` (`E704`) was removed ([#2773](https://github.com/astral-sh/ruff/pull/2773))\n\nThis rule was introduced in v0.0.245. However, it turns out that pycodestyle and Flake8 ignore this\nrule by default, as it is not part of PEP 8. As such, we've removed it from Ruff.\n\n## 0.0.245\n\n### Ruff's public `check` method was removed ([#2709](https://github.com/astral-sh/ruff/pull/2709))\n\nPreviously, Ruff exposed a `check` method as a public Rust API. This method was used by few,\nif any clients, and was not well documented or supported. As such, it has been removed, with\nthe intention of adding a stable public API in the future.\n\n## 0.0.238\n\n### `select`, `extend-select`, `ignore`, and `extend-ignore` have new semantics ([#2312](https://github.com/astral-sh/ruff/pull/2312))\n\nPreviously, the interplay between `select` and its related options could lead to unexpected\nbehavior. For example, `ruff --select E501 --ignore ALL` and `ruff --select E501 --extend-ignore ALL`\nbehaved differently. (See [#2312](https://github.com/astral-sh/ruff/pull/2312) for more\nexamples.)\n\nWhen Ruff determines the enabled rule set, it has to reconcile `select` and `ignore` from a variety\nof sources, including the current `pyproject.toml`, any inherited `pyproject.toml` files, and the\nCLI.\n\nThe new semantics are such that Ruff uses the \"highest-priority\" `select` as the basis for the rule\nset, and then applies any `extend-select`, `ignore`, and `extend-ignore` adjustments. CLI options\nare given higher priority than `pyproject.toml` options, and the current `pyproject.toml` file is\ngiven higher priority than any inherited `pyproject.toml` files.\n\n`extend-select` and `extend-ignore` are no longer given \"top priority\"; instead, they merely append\nto the `select` and `ignore` lists, as in Flake8.\n\nThis change is largely backwards compatible -- most users should experience no change in behavior.\nHowever, as an example of a breaking change, consider the following:\n\n```toml\n[tool.ruff]\nignore = [\"F401\"]\n```\n\nRunning `ruff --select F` would previously have enabled all `F` rules, apart from `F401`. Now, it\nwill enable all `F` rules, including `F401`, as the command line's `--select` resets the resolution.\n\n### `remove-six-compat` (`UP016`) has been removed ([#2332](https://github.com/astral-sh/ruff/pull/2332))\n\nThe `remove-six-compat` rule has been removed. This rule was only useful for one-time Python 2-to-3\nupgrades.\n\n## 0.0.237\n\n### `--explain`, `--clean`, and `--generate-shell-completion` are now subcommands ([#2190](https://github.com/astral-sh/ruff/pull/2190))\n\n`--explain`, `--clean`, and `--generate-shell-completion` are now implemented as subcommands:\n\n```console\nruff .         # Still works! And will always work.\nruff check .   # New! Also works.\n\nruff --explain E402   # Still works.\nruff rule E402        # New! Also works. (And preferred.)\n\n# Oops! The command has to come first.\nruff --format json --explain E402   # No longer works.\nruff --explain E402 --format json   # Still works!\nruff rule E402   --format json      # Works! (And preferred.)\n```\n\nThis change is largely backwards compatible -- most users should experience\nno change in behavior. However, please note the following exceptions:\n\n- Subcommands will now fail when invoked with unsupported arguments, instead\n    of silently ignoring them. For example, the following will now fail:\n\n    ```console\n    ruff --clean --respect-gitignore\n    ```\n\n    (the `clean` command doesn't support `--respect-gitignore`.)\n\n- The semantics of `ruff <arg>` have changed slightly when `<arg>` is a valid subcommand.\n    For example, prior to this release, running `ruff rule` would run `ruff` over a file or\n    directory called `rule`. Now, `ruff rule` would invoke the `rule` subcommand. This should\n    only impact projects with files or directories named `rule`, `check`, `explain`, `clean`,\n    or `generate-shell-completion`.\n\n- Scripts that invoke ruff should supply `--` before any positional arguments.\n    (The semantics of `ruff -- <arg>` have not changed.)\n\n- `--explain` previously treated `--format grouped` as a synonym for `--format text`.\n    This is no longer supported; instead, use `--format text`.\n\n## 0.0.226\n\n### `misplaced-comparison-constant` (`PLC2201`) was deprecated in favor of `SIM300` ([#1980](https://github.com/astral-sh/ruff/pull/1980))\n\nThese two rules contain (nearly) identical logic. To deduplicate the rule set, we've upgraded\n`SIM300` to handle a few more cases, and deprecated `PLC2201` in favor of `SIM300`.\n\n## 0.0.225\n\n### `@functools.cache` rewrites have been moved to a standalone rule (`UP033`) ([#1938](https://github.com/astral-sh/ruff/pull/1938))\n\nPreviously, `UP011` handled both `@functools.lru_cache()`-to-`@functools.lru_cache` conversions,\n_and_ `@functools.lru_cache(maxsize=None)`-to-`@functools.cache` conversions. The latter has been\nmoved out to its own rule (`UP033`). As such, some `# noqa: UP011` comments may need to be updated\nto reflect the change in rule code.\n\n## 0.0.222\n\n### `--max-complexity` has been removed from the CLI ([#1877](https://github.com/astral-sh/ruff/pull/1877))\n\nThe McCabe plugin's `--max-complexity` setting has been removed from the CLI, for consistency with\nthe treatment of other, similar settings.\n\nTo set the maximum complexity, use the `max-complexity` property in your `pyproject.toml` file,\nlike so:\n\n```toml\n[tool.ruff.mccabe]\nmax-complexity = 10\n```\n\n## 0.0.181\n\n### Files excluded by `.gitignore` are now ignored ([#1234](https://github.com/astral-sh/ruff/pull/1234))\n\nRuff will now avoid checking files that are excluded by `.ignore`, `.gitignore`,\n`.git/info/exclude`, and global `gitignore` files. This behavior is powered by the [`ignore`](https://docs.rs/ignore/latest/ignore/struct.WalkBuilder.html#ignore-rules)\ncrate, and is applied in addition to Ruff's built-in `exclude` system.\n\nTo disable this behavior, set `respect-gitignore = false` in your `pyproject.toml` file.\n\nNote that hidden files (i.e., files and directories prefixed with a `.`) are _not_ ignored by\ndefault.\n\n## 0.0.178\n\n### Configuration files are now resolved hierarchically ([#1190](https://github.com/astral-sh/ruff/pull/1190))\n\n`pyproject.toml` files are now resolved hierarchically, such that for each Python file, we find\nthe first `pyproject.toml` file in its path, and use that to determine its lint settings.\n\nSee the [documentation](https://docs.astral.sh/ruff/configuration/#python-file-discovery) for more.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 228.0185546875,
          "content": "# Changelog\n\n## 0.9.1\n\n### Preview features\n\n- \\[`pycodestyle`\\] Run `too-many-newlines-at-end-of-file` on each cell in notebooks (`W391`) ([#15308](https://github.com/astral-sh/ruff/pull/15308))\n- \\[`ruff`\\] Omit diagnostic for shadowed private function parameters in `used-dummy-variable` (`RUF052`) ([#15376](https://github.com/astral-sh/ruff/pull/15376))\n\n### Rule changes\n\n- \\[`flake8-bugbear`\\] Improve `assert-raises-exception` message (`B017`) ([#15389](https://github.com/astral-sh/ruff/pull/15389))\n\n### Formatter\n\n- Preserve trailing end-of line comments for the last string literal in implicitly concatenated strings ([#15378](https://github.com/astral-sh/ruff/pull/15378))\n\n### Server\n\n- Fix a bug where the server and client notebooks were out of sync after reordering cells ([#15398](https://github.com/astral-sh/ruff/pull/15398))\n\n### Bug fixes\n\n- \\[`flake8-pie`\\] Correctly remove wrapping parentheses (`PIE800`) ([#15394](https://github.com/astral-sh/ruff/pull/15394))\n- \\[`pyupgrade`\\] Handle comments and multiline expressions correctly (`UP037`) ([#15337](https://github.com/astral-sh/ruff/pull/15337))\n\n## 0.9.0\n\nCheck out the [blog post](https://astral.sh/blog/ruff-v0.9.0) for a migration guide and overview of the changes!\n\n### Breaking changes\n\nRuff now formats your code according to the 2025 style guide. As a result, your code might now get formatted differently. See the formatter section for a detailed list of changes.\n\nThis release doesn’t remove or remap any existing stable rules.\n\n### Stabilization\n\nThe following rules have been stabilized and are no longer in preview:\n\n- [`stdlib-module-shadowing`](https://docs.astral.sh/ruff/rules/stdlib-module-shadowing/) (`A005`).\n    This rule has also been renamed: previously, it was called `builtin-module-shadowing`.\n- [`builtin-lambda-argument-shadowing`](https://docs.astral.sh/ruff/rules/builtin-lambda-argument-shadowing/) (`A006`)\n- [`slice-to-remove-prefix-or-suffix`](https://docs.astral.sh/ruff/rules/slice-to-remove-prefix-or-suffix/) (`FURB188`)\n- [`boolean-chained-comparison`](https://docs.astral.sh/ruff/rules/boolean-chained-comparison/) (`PLR1716`)\n- [`decimal-from-float-literal`](https://docs.astral.sh/ruff/rules/decimal-from-float-literal/) (`RUF032`)\n- [`post-init-default`](https://docs.astral.sh/ruff/rules/post-init-default/) (`RUF033`)\n- [`useless-if-else`](https://docs.astral.sh/ruff/rules/useless-if-else/) (`RUF034`)\n\nThe following behaviors have been stabilized:\n\n- [`pytest-parametrize-names-wrong-type`](https://docs.astral.sh/ruff/rules/pytest-parametrize-names-wrong-type/) (`PT006`): Detect [`pytest.parametrize`](https://docs.pytest.org/en/7.1.x/how-to/parametrize.html#parametrize) calls outside decorators and calls with keyword arguments.\n- [`module-import-not-at-top-of-file`](https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/) (`E402`): Ignore [`pytest.importorskip`](https://docs.pytest.org/en/7.1.x/reference/reference.html#pytest-importorskip) calls between import statements.\n- [`mutable-dataclass-default`](https://docs.astral.sh/ruff/rules/mutable-dataclass-default/) (`RUF008`) and [`function-call-in-dataclass-default-argument`](https://docs.astral.sh/ruff/rules/function-call-in-dataclass-default-argument/) (`RUF009`): Add support for [`attrs`](https://www.attrs.org/en/stable/).\n- [`bad-version-info-comparison`](https://docs.astral.sh/ruff/rules/bad-version-info-comparison/) (`PYI006`): Extend the rule to check non-stub files.\n\nThe following fixes or improvements to fixes have been stabilized:\n\n- [`redundant-numeric-union`](https://docs.astral.sh/ruff/rules/redundant-numeric-union/) (`PYI041`)\n- [`duplicate-union-members`](https://docs.astral.sh/ruff/rules/duplicate-union-member/) (`PYI016`)\n\n### Formatter\n\nThis release introduces the new 2025 stable style ([#13371](https://github.com/astral-sh/ruff/issues/13371)), stabilizing the following changes:\n\n- Format expressions in f-string elements ([#7594](https://github.com/astral-sh/ruff/issues/7594))\n- Alternate quotes for strings inside f-strings ([#13860](https://github.com/astral-sh/ruff/pull/13860))\n- Preserve the casing of hex codes in f-string debug expressions ([#14766](https://github.com/astral-sh/ruff/issues/14766))\n- Choose the quote style for each string literal in an implicitly concatenated f-string rather than for the entire string ([#13539](https://github.com/astral-sh/ruff/pull/13539))\n- Automatically join an implicitly concatenated string into a single string literal if it fits on a single line ([#9457](https://github.com/astral-sh/ruff/issues/9457))\n- Remove the [`ISC001`](https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/) incompatibility warning ([#15123](https://github.com/astral-sh/ruff/pull/15123))\n- Prefer parenthesizing the `assert` message over breaking the assertion expression ([#9457](https://github.com/astral-sh/ruff/issues/9457))\n- Automatically parenthesize over-long `if` guards in `match` `case` clauses ([#13513](https://github.com/astral-sh/ruff/pull/13513))\n- More consistent formatting for `match` `case` patterns ([#6933](https://github.com/astral-sh/ruff/issues/6933))\n- Avoid unnecessary parentheses around return type annotations ([#13381](https://github.com/astral-sh/ruff/pull/13381))\n- Keep the opening parentheses on the same line as the `if` keyword for comprehensions where the condition has a leading comment ([#12282](https://github.com/astral-sh/ruff/pull/12282))\n- More consistent formatting for `with` statements with a single context manager for Python 3.8 or older ([#10276](https://github.com/astral-sh/ruff/pull/10276))\n- Correctly calculate the line-width for code blocks in docstrings when using `max-doc-code-line-length = \"dynamic\"` ([#13523](https://github.com/astral-sh/ruff/pull/13523))\n\n### Preview features\n\n- \\[`flake8-bugbear`\\] Implement `class-as-data-structure` (`B903`) ([#9601](https://github.com/astral-sh/ruff/pull/9601))\n- \\[`flake8-type-checking`\\] Apply `quoted-type-alias` more eagerly in `TYPE_CHECKING` blocks and ignore it in stubs (`TC008`) ([#15180](https://github.com/astral-sh/ruff/pull/15180))\n- \\[`pylint`\\] Ignore `eq-without-hash` in stub files (`PLW1641`) ([#15310](https://github.com/astral-sh/ruff/pull/15310))\n- \\[`pyupgrade`\\] Split `UP007` into two individual rules: `UP007` for `Union` and `UP045` for `Optional` (`UP007`, `UP045`) ([#15313](https://github.com/astral-sh/ruff/pull/15313))\n- \\[`ruff`\\] New rule that detects classes that are both an enum and a `dataclass` (`RUF049`) ([#15299](https://github.com/astral-sh/ruff/pull/15299))\n- \\[`ruff`\\] Recode `RUF025` to `RUF037` (`RUF037`) ([#15258](https://github.com/astral-sh/ruff/pull/15258))\n\n### Rule changes\n\n- \\[`flake8-builtins`\\] Ignore [`stdlib-module-shadowing`](https://docs.astral.sh/ruff/rules/stdlib-module-shadowing/) in stub files(`A005`) ([#15350](https://github.com/astral-sh/ruff/pull/15350))\n- \\[`flake8-return`\\] Add support for functions returning `typing.Never` (`RET503`) ([#15298](https://github.com/astral-sh/ruff/pull/15298))\n\n### Server\n\n- Improve the observability by removing the need for the [\"trace\" value](https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#traceValue) to turn on or off logging. The server logging is solely controlled using the [`logLevel` server setting](https://docs.astral.sh/ruff/editors/settings/#loglevel)\n    which defaults to `info`. This addresses the issue where users were notified about an error and told to consult the log, but it didn’t contain any messages. ([#15232](https://github.com/astral-sh/ruff/pull/15232))\n- Ignore diagnostics from other sources for code action requests ([#15373](https://github.com/astral-sh/ruff/pull/15373))\n\n### CLI\n\n- Improve the error message for `--config key=value` when the `key` is for a table and it’s a simple `value`\n\n### Bug fixes\n\n- \\[`eradicate`\\] Ignore metadata blocks directly followed by normal blocks (`ERA001`) ([#15330](https://github.com/astral-sh/ruff/pull/15330))\n- \\[`flake8-django`\\] Recognize other magic methods (`DJ012`) ([#15365](https://github.com/astral-sh/ruff/pull/15365))\n- \\[`pycodestyle`\\] Avoid false positives related to type aliases (`E252`) ([#15356](https://github.com/astral-sh/ruff/pull/15356))\n- \\[`pydocstyle`\\] Avoid treating newline-separated sections as sub-sections (`D405`) ([#15311](https://github.com/astral-sh/ruff/pull/15311))\n- \\[`pyflakes`\\] Remove call when removing final argument from `format` (`F523`) ([#15309](https://github.com/astral-sh/ruff/pull/15309))\n- \\[`refurb`\\] Mark fix as unsafe when the right-hand side is a string (`FURB171`) ([#15273](https://github.com/astral-sh/ruff/pull/15273))\n- \\[`ruff`\\] Treat `)` as a regex metacharacter (`RUF043`, `RUF055`) ([#15318](https://github.com/astral-sh/ruff/pull/15318))\n- \\[`ruff`\\] Parenthesize the `int`-call argument when removing the `int` call would change semantics (`RUF046`) ([#15277](https://github.com/astral-sh/ruff/pull/15277))\n\n## 0.8.6\n\n### Preview features\n\n- \\[`format`\\]: Preserve multiline implicit concatenated strings in docstring positions ([#15126](https://github.com/astral-sh/ruff/pull/15126))\n- \\[`ruff`\\] Add rule to detect empty literal in deque call (`RUF025`) ([#15104](https://github.com/astral-sh/ruff/pull/15104))\n- \\[`ruff`\\] Avoid reporting when `ndigits` is possibly negative (`RUF057`) ([#15234](https://github.com/astral-sh/ruff/pull/15234))\n\n### Rule changes\n\n- \\[`flake8-todos`\\] remove issue code length restriction (`TD003`) ([#15175](https://github.com/astral-sh/ruff/pull/15175))\n- \\[`pyflakes`\\] Ignore errors in `@no_type_check` string annotations (`F722`, `F821`) ([#15215](https://github.com/astral-sh/ruff/pull/15215))\n\n### CLI\n\n- Show errors for attempted fixes only when passed `--verbose` ([#15237](https://github.com/astral-sh/ruff/pull/15237))\n\n### Bug fixes\n\n- \\[`ruff`\\] Avoid syntax error when removing int over multiple lines (`RUF046`) ([#15230](https://github.com/astral-sh/ruff/pull/15230))\n- \\[`pyupgrade`\\] Revert \"Add all PEP-585 names to `UP006` rule\" ([#15250](https://github.com/astral-sh/ruff/pull/15250))\n\n## 0.8.5\n\n### Preview features\n\n- \\[`airflow`\\] Extend names moved from core to provider (`AIR303`) ([#15145](https://github.com/astral-sh/ruff/pull/15145), [#15159](https://github.com/astral-sh/ruff/pull/15159), [#15196](https://github.com/astral-sh/ruff/pull/15196), [#15216](https://github.com/astral-sh/ruff/pull/15216))\n- \\[`airflow`\\] Extend rule to check class attributes, methods, arguments (`AIR302`) ([#15054](https://github.com/astral-sh/ruff/pull/15054), [#15083](https://github.com/astral-sh/ruff/pull/15083))\n- \\[`fastapi`\\] Update `FAST002` to check keyword-only arguments ([#15119](https://github.com/astral-sh/ruff/pull/15119))\n- \\[`flake8-type-checking`\\] Disable `TC006` and `TC007` in stub files ([#15179](https://github.com/astral-sh/ruff/pull/15179))\n- \\[`pylint`\\] Detect nested methods correctly (`PLW1641`) ([#15032](https://github.com/astral-sh/ruff/pull/15032))\n- \\[`ruff`\\] Detect more strict-integer expressions (`RUF046`) ([#14833](https://github.com/astral-sh/ruff/pull/14833))\n- \\[`ruff`\\] Implement `falsy-dict-get-fallback` (`RUF056`) ([#15160](https://github.com/astral-sh/ruff/pull/15160))\n- \\[`ruff`\\] Implement `unnecessary-round` (`RUF057`) ([#14828](https://github.com/astral-sh/ruff/pull/14828))\n\n### Rule changes\n\n- Visit PEP 764 inline `TypedDict` keys as non-type-expressions ([#15073](https://github.com/astral-sh/ruff/pull/15073))\n- \\[`flake8-comprehensions`\\] Skip `C416` if comprehension contains unpacking ([#14909](https://github.com/astral-sh/ruff/pull/14909))\n- \\[`flake8-pie`\\] Allow `cast(SomeType, ...)` (`PIE796`) ([#15141](https://github.com/astral-sh/ruff/pull/15141))\n- \\[`flake8-simplify`\\] More precise inference for dictionaries (`SIM300`) ([#15164](https://github.com/astral-sh/ruff/pull/15164))\n- \\[`flake8-use-pathlib`\\] Catch redundant joins in `PTH201` and avoid syntax errors ([#15177](https://github.com/astral-sh/ruff/pull/15177))\n- \\[`pycodestyle`\\] Preserve original value format (`E731`) ([#15097](https://github.com/astral-sh/ruff/pull/15097))\n- \\[`pydocstyle`\\] Split on first whitespace character (`D403`) ([#15082](https://github.com/astral-sh/ruff/pull/15082))\n- \\[`pyupgrade`\\] Add all PEP-585 names to `UP006` rule ([#5454](https://github.com/astral-sh/ruff/pull/5454))\n\n### Configuration\n\n- \\[`flake8-type-checking`\\] Improve flexibility of `runtime-evaluated-decorators` ([#15204](https://github.com/astral-sh/ruff/pull/15204))\n- \\[`pydocstyle`\\] Add setting to ignore missing documentation for `*args` and `**kwargs` parameters (`D417`) ([#15210](https://github.com/astral-sh/ruff/pull/15210))\n- \\[`ruff`\\] Add an allowlist for `unsafe-markup-use` (`RUF035`) ([#15076](https://github.com/astral-sh/ruff/pull/15076))\n\n### Bug fixes\n\n- Fix type subscript on older python versions ([#15090](https://github.com/astral-sh/ruff/pull/15090))\n- Use `TypeChecker` for detecting `fastapi` routes ([#15093](https://github.com/astral-sh/ruff/pull/15093))\n- \\[`pycodestyle`\\] Avoid false positives and negatives related to type parameter default syntax (`E225`, `E251`) ([#15214](https://github.com/astral-sh/ruff/pull/15214))\n\n### Documentation\n\n- Fix incorrect doc in `shebang-not-executable` (`EXE001`) and add git+windows solution to executable bit ([#15208](https://github.com/astral-sh/ruff/pull/15208))\n- Rename rules currently not conforming to naming convention ([#15102](https://github.com/astral-sh/ruff/pull/15102))\n\n## 0.8.4\n\n### Preview features\n\n- \\[`airflow`\\] Extend `AIR302` with additional functions and classes ([#15015](https://github.com/astral-sh/ruff/pull/15015))\n- \\[`airflow`\\] Implement `moved-to-provider-in-3` for modules that has been moved to Airflow providers (`AIR303`) ([#14764](https://github.com/astral-sh/ruff/pull/14764))\n- \\[`flake8-use-pathlib`\\] Extend check for invalid path suffix to include the case `\".\"` (`PTH210`) ([#14902](https://github.com/astral-sh/ruff/pull/14902))\n- \\[`perflint`\\] Fix panic in `PERF401` when list variable is after the `for` loop ([#14971](https://github.com/astral-sh/ruff/pull/14971))\n- \\[`perflint`\\] Simplify finding the loop target in `PERF401` ([#15025](https://github.com/astral-sh/ruff/pull/15025))\n- \\[`pylint`\\] Preserve original value format (`PLR6104`) ([#14978](https://github.com/astral-sh/ruff/pull/14978))\n- \\[`ruff`\\] Avoid false positives for `RUF027` for typing context bindings ([#15037](https://github.com/astral-sh/ruff/pull/15037))\n- \\[`ruff`\\] Check for ambiguous pattern passed to `pytest.raises()` (`RUF043`) ([#14966](https://github.com/astral-sh/ruff/pull/14966))\n\n### Rule changes\n\n- \\[`flake8-bandit`\\] Check `S105` for annotated assignment ([#15059](https://github.com/astral-sh/ruff/pull/15059))\n- \\[`flake8-pyi`\\] More autofixes for `redundant-none-literal` (`PYI061`) ([#14872](https://github.com/astral-sh/ruff/pull/14872))\n- \\[`pydocstyle`\\] Skip leading whitespace for `D403` ([#14963](https://github.com/astral-sh/ruff/pull/14963))\n- \\[`ruff`\\] Skip `SQLModel` base classes for `mutable-class-default` (`RUF012`) ([#14949](https://github.com/astral-sh/ruff/pull/14949))\n\n### Bug\n\n- \\[`perflint`\\] Parenthesize walrus expressions in autofix for `manual-list-comprehension` (`PERF401`) ([#15050](https://github.com/astral-sh/ruff/pull/15050))\n\n### Server\n\n- Check diagnostic refresh support from client capability which enables dynamic configuration for various editors ([#15014](https://github.com/astral-sh/ruff/pull/15014))\n\n## 0.8.3\n\n### Preview features\n\n- Fix fstring formatting removing overlong implicit concatenated string in expression part ([#14811](https://github.com/astral-sh/ruff/pull/14811))\n- \\[`airflow`\\] Add fix to remove deprecated keyword arguments (`AIR302`) ([#14887](https://github.com/astral-sh/ruff/pull/14887))\n- \\[`airflow`\\]: Extend rule to include deprecated names for Airflow 3.0 (`AIR302`) ([#14765](https://github.com/astral-sh/ruff/pull/14765) and [#14804](https://github.com/astral-sh/ruff/pull/14804))\n- \\[`flake8-bugbear`\\] Improve error messages for `except*` (`B025`, `B029`, `B030`, `B904`) ([#14815](https://github.com/astral-sh/ruff/pull/14815))\n- \\[`flake8-bugbear`\\] `itertools.batched()` without explicit `strict` (`B911`) ([#14408](https://github.com/astral-sh/ruff/pull/14408))\n- \\[`flake8-use-pathlib`\\] Dotless suffix passed to `Path.with_suffix()` (`PTH210`) ([#14779](https://github.com/astral-sh/ruff/pull/14779))\n- \\[`pylint`\\] Include parentheses and multiple comparators in check for `boolean-chained-comparison` (`PLR1716`) ([#14781](https://github.com/astral-sh/ruff/pull/14781))\n- \\[`ruff`\\] Do not simplify `round()` calls (`RUF046`) ([#14832](https://github.com/astral-sh/ruff/pull/14832))\n- \\[`ruff`\\] Don't emit `used-dummy-variable` on function parameters (`RUF052`) ([#14818](https://github.com/astral-sh/ruff/pull/14818))\n- \\[`ruff`\\] Implement `if-key-in-dict-del` (`RUF051`) ([#14553](https://github.com/astral-sh/ruff/pull/14553))\n- \\[`ruff`\\] Mark autofix for `RUF052` as always unsafe ([#14824](https://github.com/astral-sh/ruff/pull/14824))\n- \\[`ruff`\\] Teach autofix for `used-dummy-variable` about TypeVars etc. (`RUF052`) ([#14819](https://github.com/astral-sh/ruff/pull/14819))\n\n### Rule changes\n\n- \\[`flake8-bugbear`\\] Offer unsafe autofix for `no-explicit-stacklevel` (`B028`) ([#14829](https://github.com/astral-sh/ruff/pull/14829))\n- \\[`flake8-pyi`\\] Skip all type definitions in `string-or-bytes-too-long` (`PYI053`) ([#14797](https://github.com/astral-sh/ruff/pull/14797))\n- \\[`pyupgrade`\\] Do not report when a UTF-8 comment is followed by a non-UTF-8 one (`UP009`) ([#14728](https://github.com/astral-sh/ruff/pull/14728))\n- \\[`pyupgrade`\\] Mark fixes for `convert-typed-dict-functional-to-class` and `convert-named-tuple-functional-to-class` as unsafe if they will remove comments (`UP013`, `UP014`) ([#14842](https://github.com/astral-sh/ruff/pull/14842))\n\n### Bug fixes\n\n- Raise syntax error for mixing `except` and `except*` ([#14895](https://github.com/astral-sh/ruff/pull/14895))\n- \\[`flake8-bugbear`\\] Fix `B028` to allow `stacklevel` to be explicitly assigned as a positional argument ([#14868](https://github.com/astral-sh/ruff/pull/14868))\n- \\[`flake8-bugbear`\\] Skip `B028` if `warnings.warn` is called with `*args` or `**kwargs` ([#14870](https://github.com/astral-sh/ruff/pull/14870))\n- \\[`flake8-comprehensions`\\] Skip iterables with named expressions in `unnecessary-map` (`C417`) ([#14827](https://github.com/astral-sh/ruff/pull/14827))\n- \\[`flake8-pyi`\\] Also remove `self` and `cls`'s annotation (`PYI034`) ([#14801](https://github.com/astral-sh/ruff/pull/14801))\n- \\[`flake8-pytest-style`\\] Fix `pytest-parametrize-names-wrong-type` (`PT006`) to edit both `argnames` and `argvalues` if both of them are single-element tuples/lists ([#14699](https://github.com/astral-sh/ruff/pull/14699))\n- \\[`perflint`\\] Improve autofix for `PERF401` ([#14369](https://github.com/astral-sh/ruff/pull/14369))\n- \\[`pylint`\\] Fix `PLW1508` false positive for default string created via a mult operation ([#14841](https://github.com/astral-sh/ruff/pull/14841))\n\n## 0.8.2\n\n### Preview features\n\n- \\[`airflow`\\] Avoid deprecated values (`AIR302`) ([#14582](https://github.com/astral-sh/ruff/pull/14582))\n- \\[`airflow`\\] Extend removed names for `AIR302` ([#14734](https://github.com/astral-sh/ruff/pull/14734))\n- \\[`ruff`\\] Extend `unnecessary-regular-expression` to non-literal strings (`RUF055`) ([#14679](https://github.com/astral-sh/ruff/pull/14679))\n- \\[`ruff`\\] Implement `used-dummy-variable` (`RUF052`) ([#14611](https://github.com/astral-sh/ruff/pull/14611))\n- \\[`ruff`\\] Implement `unnecessary-cast-to-int` (`RUF046`) ([#14697](https://github.com/astral-sh/ruff/pull/14697))\n\n### Rule changes\n\n- \\[`airflow`\\] Check `AIR001` from builtin or providers `operators` module ([#14631](https://github.com/astral-sh/ruff/pull/14631))\n- \\[`flake8-pytest-style`\\] Remove `@` in `pytest.mark.parametrize` rule messages ([#14770](https://github.com/astral-sh/ruff/pull/14770))\n- \\[`pandas-vet`\\] Skip rules if the `panda` module hasn't been seen ([#14671](https://github.com/astral-sh/ruff/pull/14671))\n- \\[`pylint`\\] Fix false negatives for `ascii` and `sorted` in `len-as-condition` (`PLC1802`) ([#14692](https://github.com/astral-sh/ruff/pull/14692))\n- \\[`refurb`\\] Guard `hashlib` imports and mark `hashlib-digest-hex` fix as safe (`FURB181`) ([#14694](https://github.com/astral-sh/ruff/pull/14694))\n\n### Configuration\n\n- \\[`flake8-import-conventions`\\] Improve syntax check for aliases supplied in configuration for `unconventional-import-alias` (`ICN001`) ([#14745](https://github.com/astral-sh/ruff/pull/14745))\n\n### Bug fixes\n\n- Revert: [pyflakes] Avoid false positives in `@no_type_check` contexts (`F821`, `F722`) (#14615) ([#14726](https://github.com/astral-sh/ruff/pull/14726))\n- \\[`pep8-naming`\\] Avoid false positive for `class Bar(type(foo))` (`N804`) ([#14683](https://github.com/astral-sh/ruff/pull/14683))\n- \\[`pycodestyle`\\] Handle f-strings properly for `invalid-escape-sequence` (`W605`) ([#14748](https://github.com/astral-sh/ruff/pull/14748))\n- \\[`pylint`\\] Ignore `@overload` in `PLR0904` ([#14730](https://github.com/astral-sh/ruff/pull/14730))\n- \\[`refurb`\\] Handle non-finite decimals in `verbose-decimal-constructor` (`FURB157`) ([#14596](https://github.com/astral-sh/ruff/pull/14596))\n- \\[`ruff`\\] Avoid emitting `assignment-in-assert` when all references to the assigned variable are themselves inside `assert`s (`RUF018`) ([#14661](https://github.com/astral-sh/ruff/pull/14661))\n\n### Documentation\n\n- Improve docs for `flake8-use-pathlib` rules ([#14741](https://github.com/astral-sh/ruff/pull/14741))\n- Improve error messages and docs for `flake8-comprehensions` rules ([#14729](https://github.com/astral-sh/ruff/pull/14729))\n- \\[`flake8-type-checking`\\] Expands `TC006` docs to better explain itself ([#14749](https://github.com/astral-sh/ruff/pull/14749))\n\n## 0.8.1\n\n### Preview features\n\n- Formatter: Avoid invalid syntax for format-spec with quotes for all Python versions ([#14625](https://github.com/astral-sh/ruff/pull/14625))\n- Formatter: Consider quotes inside format-specs when choosing the quotes for an f-string ([#14493](https://github.com/astral-sh/ruff/pull/14493))\n- Formatter: Do not consider f-strings with escaped newlines as multiline ([#14624](https://github.com/astral-sh/ruff/pull/14624))\n- Formatter: Fix f-string formatting in assignment statement ([#14454](https://github.com/astral-sh/ruff/pull/14454))\n- Formatter: Fix unnecessary space around power operator (`**`) in overlong f-string expressions ([#14489](https://github.com/astral-sh/ruff/pull/14489))\n- \\[`airflow`\\] Avoid implicit `schedule` argument to `DAG` and `@dag` (`AIR301`) ([#14581](https://github.com/astral-sh/ruff/pull/14581))\n- \\[`flake8-builtins`\\] Exempt private built-in modules (`A005`) ([#14505](https://github.com/astral-sh/ruff/pull/14505))\n- \\[`flake8-pytest-style`\\] Fix `pytest.mark.parametrize` rules to check calls instead of decorators ([#14515](https://github.com/astral-sh/ruff/pull/14515))\n- \\[`flake8-type-checking`\\] Implement `runtime-cast-value` (`TC006`) ([#14511](https://github.com/astral-sh/ruff/pull/14511))\n- \\[`flake8-type-checking`\\] Implement `unquoted-type-alias` (`TC007`) and `quoted-type-alias` (`TC008`) ([#12927](https://github.com/astral-sh/ruff/pull/12927))\n- \\[`flake8-use-pathlib`\\] Recommend `Path.iterdir()` over `os.listdir()` (`PTH208`) ([#14509](https://github.com/astral-sh/ruff/pull/14509))\n- \\[`pylint`\\] Extend `invalid-envvar-default` to detect `os.environ.get` (`PLW1508`) ([#14512](https://github.com/astral-sh/ruff/pull/14512))\n- \\[`pylint`\\] Implement `len-test` (`PLC1802`) ([#14309](https://github.com/astral-sh/ruff/pull/14309))\n- \\[`refurb`\\] Fix bug where methods defined using lambdas were flagged by `FURB118` ([#14639](https://github.com/astral-sh/ruff/pull/14639))\n- \\[`ruff`\\] Auto-add `r` prefix when string has no backslashes for `unraw-re-pattern` (`RUF039`) ([#14536](https://github.com/astral-sh/ruff/pull/14536))\n- \\[`ruff`\\] Implement `invalid-assert-message-literal-argument` (`RUF040`) ([#14488](https://github.com/astral-sh/ruff/pull/14488))\n- \\[`ruff`\\] Implement `unnecessary-nested-literal` (`RUF041`) ([#14323](https://github.com/astral-sh/ruff/pull/14323))\n- \\[`ruff`\\] Implement `unnecessary-regular-expression` (`RUF055`) ([#14659](https://github.com/astral-sh/ruff/pull/14659))\n\n### Rule changes\n\n- Ignore more rules for stub files ([#14541](https://github.com/astral-sh/ruff/pull/14541))\n- \\[`pep8-naming`\\] Eliminate false positives for single-letter names (`N811`, `N814`) ([#14584](https://github.com/astral-sh/ruff/pull/14584))\n- \\[`pyflakes`\\] Avoid false positives in `@no_type_check` contexts (`F821`, `F722`) ([#14615](https://github.com/astral-sh/ruff/pull/14615))\n- \\[`ruff`\\] Detect redirected-noqa in file-level comments (`RUF101`) ([#14635](https://github.com/astral-sh/ruff/pull/14635))\n- \\[`ruff`\\] Mark fixes for `unsorted-dunder-all` and `unsorted-dunder-slots` as unsafe when there are complex comments in the sequence (`RUF022`, `RUF023`) ([#14560](https://github.com/astral-sh/ruff/pull/14560))\n\n### Bug fixes\n\n- Avoid fixing code to `None | None` for `redundant-none-literal` (`PYI061`) and `never-union` (`RUF020`) ([#14583](https://github.com/astral-sh/ruff/pull/14583), [#14589](https://github.com/astral-sh/ruff/pull/14589))\n- \\[`flake8-bugbear`\\] Fix `mutable-contextvar-default` to resolve annotated function calls properly (`B039`) ([#14532](https://github.com/astral-sh/ruff/pull/14532))\n- \\[`flake8-pyi`, `ruff`\\] Fix traversal of nested literals and unions (`PYI016`, `PYI051`, `PYI055`, `PYI062`, `RUF041`) ([#14641](https://github.com/astral-sh/ruff/pull/14641))\n- \\[`flake8-pyi`\\] Avoid rewriting invalid type expressions in `unnecessary-type-union` (`PYI055`) ([#14660](https://github.com/astral-sh/ruff/pull/14660))\n- \\[`flake8-type-checking`\\] Avoid syntax errors and type checking problem for quoted annotations autofix (`TC003`, `TC006`) ([#14634](https://github.com/astral-sh/ruff/pull/14634))\n- \\[`pylint`\\] Do not wrap function calls in parentheses in the fix for unnecessary-dunder-call (`PLC2801`) ([#14601](https://github.com/astral-sh/ruff/pull/14601))\n- \\[`ruff`\\] Handle `attrs`'s `auto_attribs` correctly (`RUF009`) ([#14520](https://github.com/astral-sh/ruff/pull/14520))\n\n## 0.8.0\n\nCheck out the [blog post](https://astral.sh/blog/ruff-v0.8.0) for a migration guide and overview of the changes!\n\n### Breaking changes\n\nSee also, the \"Remapped rules\" section which may result in disabled rules.\n\n- **Default to Python 3.9**\n\n    Ruff now defaults to Python 3.9 instead of 3.8 if no explicit Python version is configured using [`ruff.target-version`](https://docs.astral.sh/ruff/settings/#target-version) or [`project.requires-python`](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#python-requires) ([#13896](https://github.com/astral-sh/ruff/pull/13896))\n\n- **Changed location of `pydoclint` diagnostics**\n\n    [`pydoclint`](https://docs.astral.sh/ruff/rules/#pydoclint-doc) diagnostics now point to the first-line of the problematic docstring. Previously, this was not the case.\n\n    If you've opted into these preview rules but have them suppressed using\n    [`noqa`](https://docs.astral.sh/ruff/linter/#error-suppression) comments in\n    some places, this change may mean that you need to move the `noqa` suppression\n    comments. Most users should be unaffected by this change.\n\n- **Use XDG (i.e. `~/.local/bin`) instead of the Cargo home directory in the standalone installer**\n\n    Previously, Ruff's installer used `$CARGO_HOME` or `~/.cargo/bin` for its target install directory. Now, Ruff will be installed into `$XDG_BIN_HOME`, `$XDG_DATA_HOME/../bin`, or `~/.local/bin` (in that order).\n\n    This change is only relevant to users of the standalone Ruff installer (using the shell or PowerShell script). If you installed Ruff using uv or pip, you should be unaffected.\n\n- **Changes to the line width calculation**\n\n    Ruff now uses a new version of the [unicode-width](https://github.com/unicode-rs/unicode-width) Rust crate to calculate the line width. In very rare cases, this may lead to lines containing Unicode characters being reformatted, or being considered too long when they were not before ([`E501`](https://docs.astral.sh/ruff/rules/line-too-long/)).\n\n### Removed Rules\n\nThe following deprecated rules have been removed:\n\n- [`missing-type-self`](https://docs.astral.sh/ruff/rules/missing-type-self/) (`ANN101`)\n- [`missing-type-cls`](https://docs.astral.sh/ruff/rules/missing-type-cls/) (`ANN102`)\n- [`syntax-error`](https://docs.astral.sh/ruff/rules/syntax-error/) (`E999`)\n- [`pytest-missing-fixture-name-underscore`](https://docs.astral.sh/ruff/rules/pytest-missing-fixture-name-underscore/) (`PT004`)\n- [`pytest-incorrect-fixture-name-underscore`](https://docs.astral.sh/ruff/rules/pytest-incorrect-fixture-name-underscore/) (`PT005`)\n- [`unpacked-list-comprehension`](https://docs.astral.sh/ruff/rules/unpacked-list-comprehension/) (`UP027`)\n\n### Remapped rules\n\nThe following rules have been remapped to new rule codes:\n\n- [`flake8-type-checking`](https://docs.astral.sh/ruff/rules/#flake8-type-checking-tc): `TCH` to `TC`\n\n### Stabilization\n\nThe following rules have been stabilized and are no longer in preview:\n\n- [`builtin-import-shadowing`](https://docs.astral.sh/ruff/rules/builtin-import-shadowing/) (`A004`)\n- [`mutable-contextvar-default`](https://docs.astral.sh/ruff/rules/mutable-contextvar-default/) (`B039`)\n- [`fast-api-redundant-response-model`](https://docs.astral.sh/ruff/rules/fast-api-redundant-response-model/) (`FAST001`)\n- [`fast-api-non-annotated-dependency`](https://docs.astral.sh/ruff/rules/fast-api-non-annotated-dependency/) (`FAST002`)\n- [`dict-index-missing-items`](https://docs.astral.sh/ruff/rules/dict-index-missing-items/) (`PLC0206`)\n- [`pep484-style-positional-only-parameter`](https://docs.astral.sh/ruff/rules/pep484-style-positional-only-parameter/) (`PYI063`)\n- [`redundant-final-literal`](https://docs.astral.sh/ruff/rules/redundant-final-literal/) (`PYI064`)\n- [`bad-version-info-order`](https://docs.astral.sh/ruff/rules/bad-version-info-order/) (`PYI066`)\n- [`parenthesize-chained-operators`](https://docs.astral.sh/ruff/rules/parenthesize-chained-operators/) (`RUF021`)\n- [`unsorted-dunder-all`](https://docs.astral.sh/ruff/rules/unsorted-dunder-all/) (`RUF022`)\n- [`unsorted-dunder-slots`](https://docs.astral.sh/ruff/rules/unsorted-dunder-slots/) (`RUF023`)\n- [`assert-with-print-message`](https://docs.astral.sh/ruff/rules/assert-with-print-message/) (`RUF030`)\n- [`unnecessary-default-type-args`](https://docs.astral.sh/ruff/rules/unnecessary-default-type-args/) (`UP043`)\n\nThe following behaviors have been stabilized:\n\n- [`ambiguous-variable-name`](https://docs.astral.sh/ruff/rules/ambiguous-variable-name/) (`E741`): Violations in stub files are now ignored. Stub authors typically don't control variable names.\n- [`printf-string-formatting`](https://docs.astral.sh/ruff/rules/printf-string-formatting/) (`UP031`): Report all `printf`-like usages even if no autofix is available\n\nThe following fixes have been stabilized:\n\n- [`zip-instead-of-pairwise`](https://docs.astral.sh/ruff/rules/zip-instead-of-pairwise/) (`RUF007`)\n\n### Preview features\n\n- \\[`flake8-datetimez`\\] Exempt `min.time()` and `max.time()` (`DTZ901`) ([#14394](https://github.com/astral-sh/ruff/pull/14394))\n- \\[`flake8-pie`\\] Mark fix as unsafe if the following statement is a string literal (`PIE790`) ([#14393](https://github.com/astral-sh/ruff/pull/14393))\n- \\[`flake8-pyi`\\] New rule `redundant-none-literal` (`PYI061`) ([#14316](https://github.com/astral-sh/ruff/pull/14316))\n- \\[`flake8-pyi`\\] Add autofix for `redundant-numeric-union` (`PYI041`) ([#14273](https://github.com/astral-sh/ruff/pull/14273))\n- \\[`ruff`\\] New rule `map-int-version-parsing` (`RUF048`) ([#14373](https://github.com/astral-sh/ruff/pull/14373))\n- \\[`ruff`\\] New rule `redundant-bool-literal` (`RUF038`) ([#14319](https://github.com/astral-sh/ruff/pull/14319))\n- \\[`ruff`\\] New rule `unraw-re-pattern` (`RUF039`) ([#14446](https://github.com/astral-sh/ruff/pull/14446))\n- \\[`pycodestyle`\\] Exempt `pytest.importorskip()` calls (`E402`) ([#14474](https://github.com/astral-sh/ruff/pull/14474))\n- \\[`pylint`\\] Autofix suggests using sets when possible (`PLR1714`) ([#14372](https://github.com/astral-sh/ruff/pull/14372))\n\n### Rule changes\n\n- [`invalid-pyproject-toml`](https://docs.astral.sh/ruff/rules/invalid-pyproject-toml/) (`RUF200`): Updated to reflect the provisionally accepted [PEP 639](https://peps.python.org/pep-0639/).\n- \\[`flake8-pyi`\\] Avoid panic in unfixable case (`PYI041`) ([#14402](https://github.com/astral-sh/ruff/pull/14402))\n- \\[`flake8-type-checking`\\] Correctly handle quotes in subscript expression when generating an autofix ([#14371](https://github.com/astral-sh/ruff/pull/14371))\n- \\[`pylint`\\] Suggest correct autofix for `__contains__` (`PLC2801`) ([#14424](https://github.com/astral-sh/ruff/pull/14424))\n\n### Configuration\n\n- Ruff now emits a warning instead of an error when a configuration [`ignore`](https://docs.astral.sh/ruff/settings/#lint_ignore)s a rule that has been removed ([#14435](https://github.com/astral-sh/ruff/pull/14435))\n- Ruff now validates that `lint.flake8-import-conventions.aliases` only uses valid module names and aliases ([#14477](https://github.com/astral-sh/ruff/pull/14477))\n\n## 0.7.4\n\n### Preview features\n\n- \\[`flake8-datetimez`\\] Detect usages of `datetime.max`/`datetime.min` (`DTZ901`) ([#14288](https://github.com/astral-sh/ruff/pull/14288))\n- \\[`flake8-logging`\\] Implement `root-logger-calls` (`LOG015`) ([#14302](https://github.com/astral-sh/ruff/pull/14302))\n- \\[`flake8-no-pep420`\\] Detect empty implicit namespace packages (`INP001`) ([#14236](https://github.com/astral-sh/ruff/pull/14236))\n- \\[`flake8-pyi`\\] Add \"replace with `Self`\" fix (`PYI019`) ([#14238](https://github.com/astral-sh/ruff/pull/14238))\n- \\[`perflint`\\] Implement quick-fix for `manual-list-comprehension` (`PERF401`) ([#13919](https://github.com/astral-sh/ruff/pull/13919))\n- \\[`pylint`\\] Implement `shallow-copy-environ` (`W1507`) ([#14241](https://github.com/astral-sh/ruff/pull/14241))\n- \\[`ruff`\\] Implement `none-not-at-end-of-union` (`RUF036`) ([#14314](https://github.com/astral-sh/ruff/pull/14314))\n- \\[`ruff`\\] Implementation `unsafe-markup-call` from `flake8-markupsafe` plugin (`RUF035`) ([#14224](https://github.com/astral-sh/ruff/pull/14224))\n- \\[`ruff`\\] Report problems for `attrs` dataclasses (`RUF008`, `RUF009`) ([#14327](https://github.com/astral-sh/ruff/pull/14327))\n\n### Rule changes\n\n- \\[`flake8-boolean-trap`\\] Exclude dunder methods that define operators (`FBT001`) ([#14203](https://github.com/astral-sh/ruff/pull/14203))\n- \\[`flake8-pyi`\\] Add \"replace with `Self`\" fix (`PYI034`) ([#14217](https://github.com/astral-sh/ruff/pull/14217))\n- \\[`flake8-pyi`\\] Always autofix `duplicate-union-members` (`PYI016`) ([#14270](https://github.com/astral-sh/ruff/pull/14270))\n- \\[`flake8-pyi`\\] Improve autofix for nested and mixed type unions for `unnecessary-type-union` (`PYI055`) ([#14272](https://github.com/astral-sh/ruff/pull/14272))\n- \\[`flake8-pyi`\\] Mark fix as unsafe when type annotation contains comments for `duplicate-literal-member` (`PYI062`) ([#14268](https://github.com/astral-sh/ruff/pull/14268))\n\n### Server\n\n- Use the current working directory to resolve settings from `ruff.configuration` ([#14352](https://github.com/astral-sh/ruff/pull/14352))\n\n### Bug fixes\n\n- Avoid conflicts between `PLC014` (`useless-import-alias`) and `I002` (`missing-required-import`) by considering `lint.isort.required-imports` for `PLC014` ([#14287](https://github.com/astral-sh/ruff/pull/14287))\n- \\[`flake8-type-checking`\\] Skip quoting annotation if it becomes invalid syntax (`TCH001`)\n- \\[`flake8-pyi`\\] Avoid using `typing.Self` in stub files pre-Python 3.11 (`PYI034`) ([#14230](https://github.com/astral-sh/ruff/pull/14230))\n- \\[`flake8-pytest-style`\\] Flag `pytest.raises` call with keyword argument `expected_exception` (`PT011`) ([#14298](https://github.com/astral-sh/ruff/pull/14298))\n- \\[`flake8-simplify`\\] Infer \"unknown\" truthiness for literal iterables whose items are all unpacks (`SIM222`) ([#14263](https://github.com/astral-sh/ruff/pull/14263))\n- \\[`flake8-type-checking`\\] Fix false positives for `typing.Annotated` (`TCH001`) ([#14311](https://github.com/astral-sh/ruff/pull/14311))\n- \\[`pylint`\\] Allow `await` at the top-level scope of a notebook (`PLE1142`) ([#14225](https://github.com/astral-sh/ruff/pull/14225))\n- \\[`pylint`\\] Fix miscellaneous issues in `await-outside-async` detection (`PLE1142`) ([#14218](https://github.com/astral-sh/ruff/pull/14218))\n- \\[`pyupgrade`\\] Avoid applying PEP 646 rewrites in invalid contexts (`UP044`) ([#14234](https://github.com/astral-sh/ruff/pull/14234))\n- \\[`pyupgrade`\\] Detect permutations in redundant open modes (`UP015`) ([#14255](https://github.com/astral-sh/ruff/pull/14255))\n- \\[`refurb`\\] Avoid triggering `hardcoded-string-charset` for reordered sets (`FURB156`) ([#14233](https://github.com/astral-sh/ruff/pull/14233))\n- \\[`refurb`\\] Further special cases added to `verbose-decimal-constructor` (`FURB157`) ([#14216](https://github.com/astral-sh/ruff/pull/14216))\n- \\[`refurb`\\] Use `UserString` instead of non-existent `UserStr` (`FURB189`) ([#14209](https://github.com/astral-sh/ruff/pull/14209))\n- \\[`ruff`\\] Avoid treating lowercase letters as `# noqa` codes (`RUF100`) ([#14229](https://github.com/astral-sh/ruff/pull/14229))\n- \\[`ruff`\\] Do not report when `Optional` has no type arguments (`RUF013`) ([#14181](https://github.com/astral-sh/ruff/pull/14181))\n\n### Documentation\n\n- Add \"Notebook behavior\" section for `F704`, `PLE1142` ([#14266](https://github.com/astral-sh/ruff/pull/14266))\n- Document comment policy around fix safety ([#14300](https://github.com/astral-sh/ruff/pull/14300))\n\n## 0.7.3\n\n### Preview features\n\n- Formatter: Disallow single-line implicit concatenated strings ([#13928](https://github.com/astral-sh/ruff/pull/13928))\n- \\[`flake8-pyi`\\] Include all Python file types for `PYI006` and `PYI066` ([#14059](https://github.com/astral-sh/ruff/pull/14059))\n- \\[`flake8-simplify`\\] Implement `split-of-static-string` (`SIM905`) ([#14008](https://github.com/astral-sh/ruff/pull/14008))\n- \\[`refurb`\\] Implement `subclass-builtin` (`FURB189`) ([#14105](https://github.com/astral-sh/ruff/pull/14105))\n- \\[`ruff`\\] Improve diagnostic messages and docs (`RUF031`, `RUF032`, `RUF034`) ([#14068](https://github.com/astral-sh/ruff/pull/14068))\n\n### Rule changes\n\n- Detect items that hash to same value in duplicate sets (`B033`, `PLC0208`) ([#14064](https://github.com/astral-sh/ruff/pull/14064))\n- \\[`eradicate`\\] Better detection of IntelliJ language injection comments (`ERA001`) ([#14094](https://github.com/astral-sh/ruff/pull/14094))\n- \\[`flake8-pyi`\\] Add autofix for `docstring-in-stub` (`PYI021`) ([#14150](https://github.com/astral-sh/ruff/pull/14150))\n- \\[`flake8-pyi`\\] Update `duplicate-literal-member` (`PYI062`) to alawys provide an autofix ([#14188](https://github.com/astral-sh/ruff/pull/14188))\n- \\[`pyflakes`\\] Detect items that hash to same value in duplicate dictionaries (`F601`) ([#14065](https://github.com/astral-sh/ruff/pull/14065))\n- \\[`ruff`\\] Fix false positive for decorators (`RUF028`) ([#14061](https://github.com/astral-sh/ruff/pull/14061))\n\n### Bug fixes\n\n- Avoid parsing joint rule codes as distinct codes in `# noqa` ([#12809](https://github.com/astral-sh/ruff/pull/12809))\n- \\[`eradicate`\\] ignore `# language=` in commented-out-code rule (ERA001) ([#14069](https://github.com/astral-sh/ruff/pull/14069))\n- \\[`flake8-bugbear`\\] - do not run `mutable-argument-default` on stubs (`B006`) ([#14058](https://github.com/astral-sh/ruff/pull/14058))\n- \\[`flake8-builtins`\\] Skip lambda expressions in `builtin-argument-shadowing (A002)` ([#14144](https://github.com/astral-sh/ruff/pull/14144))\n- \\[`flake8-comprehension`\\] Also remove trailing comma while fixing `C409` and `C419` ([#14097](https://github.com/astral-sh/ruff/pull/14097))\n- \\[`flake8-simplify`\\] Allow `open` without context manager in `return` statement (`SIM115`) ([#14066](https://github.com/astral-sh/ruff/pull/14066))\n- \\[`pylint`\\] Respect hash-equivalent literals in `iteration-over-set` (`PLC0208`) ([#14063](https://github.com/astral-sh/ruff/pull/14063))\n- \\[`pylint`\\] Update known dunder methods for Python 3.13 (`PLW3201`) ([#14146](https://github.com/astral-sh/ruff/pull/14146))\n- \\[`pyupgrade`\\] - ignore kwarg unpacking for `UP044` ([#14053](https://github.com/astral-sh/ruff/pull/14053))\n- \\[`refurb`\\] Parse more exotic decimal strings in `verbose-decimal-constructor` (`FURB157`) ([#14098](https://github.com/astral-sh/ruff/pull/14098))\n\n### Documentation\n\n- Add links to missing related options within rule documentations ([#13971](https://github.com/astral-sh/ruff/pull/13971))\n- Add rule short code to mkdocs tags to allow searching via rule codes ([#14040](https://github.com/astral-sh/ruff/pull/14040))\n\n## 0.7.2\n\n### Preview features\n\n- Fix formatting of single with-item with trailing comment ([#14005](https://github.com/astral-sh/ruff/pull/14005))\n- \\[`pyupgrade`\\] Add PEP 646 `Unpack` conversion to `*` with fix (`UP044`) ([#13988](https://github.com/astral-sh/ruff/pull/13988))\n\n### Rule changes\n\n- Regenerate `known_stdlibs.rs` with stdlibs 2024.10.25 ([#13963](https://github.com/astral-sh/ruff/pull/13963))\n- \\[`flake8-no-pep420`\\] Skip namespace package enforcement for PEP 723 scripts (`INP001`) ([#13974](https://github.com/astral-sh/ruff/pull/13974))\n\n### Server\n\n- Fix server panic when undoing an edit ([#14010](https://github.com/astral-sh/ruff/pull/14010))\n\n### Bug fixes\n\n- Fix issues in discovering ruff in pip build environments ([#13881](https://github.com/astral-sh/ruff/pull/13881))\n- \\[`flake8-type-checking`\\] Fix false positive for `singledispatchmethod` (`TCH003`) ([#13941](https://github.com/astral-sh/ruff/pull/13941))\n- \\[`flake8-type-checking`\\] Treat return type of `singledispatch` as runtime-required (`TCH003`) ([#13957](https://github.com/astral-sh/ruff/pull/13957))\n\n### Documentation\n\n- \\[`flake8-simplify`\\] Include caveats of enabling `if-else-block-instead-of-if-exp` (`SIM108`) ([#14019](https://github.com/astral-sh/ruff/pull/14019))\n\n## 0.7.1\n\n### Preview features\n\n- Fix `E221` and `E222` to flag missing or extra whitespace around `==` operator ([#13890](https://github.com/astral-sh/ruff/pull/13890))\n- Formatter: Alternate quotes for strings inside f-strings in preview ([#13860](https://github.com/astral-sh/ruff/pull/13860))\n- Formatter: Join implicit concatenated strings when they fit on a line ([#13663](https://github.com/astral-sh/ruff/pull/13663))\n- \\[`pylint`\\] Restrict `iteration-over-set` to only work on sets of literals (`PLC0208`) ([#13731](https://github.com/astral-sh/ruff/pull/13731))\n\n### Rule changes\n\n- \\[`flake8-type-checking`\\] Support auto-quoting when annotations contain quotes ([#11811](https://github.com/astral-sh/ruff/pull/11811))\n\n### Server\n\n- Avoid indexing the workspace for single-file mode ([#13770](https://github.com/astral-sh/ruff/pull/13770))\n\n### Bug fixes\n\n- Make `ARG002` compatible with `EM101` when raising `NotImplementedError` ([#13714](https://github.com/astral-sh/ruff/pull/13714))\n\n### Other changes\n\n- Introduce more Docker tags for Ruff (similar to uv) ([#13274](https://github.com/astral-sh/ruff/pull/13274))\n\n## 0.7.0\n\nCheck out the [blog post](https://astral.sh/blog/ruff-v0.7.0) for a migration guide and overview of the changes!\n\n### Breaking changes\n\n- The pytest rules `PT001` and `PT023` now default to omitting the decorator parentheses when there are no arguments\n    ([#12838](https://github.com/astral-sh/ruff/pull/12838), [#13292](https://github.com/astral-sh/ruff/pull/13292)).\n    This was a change that we attempted to make in Ruff v0.6.0, but only partially made due to an error on our part.\n    See the [blog post](https://astral.sh/blog/ruff-v0.7.0) for more details.\n- The `useless-try-except` rule (in our `tryceratops` category) has been recoded from `TRY302` to\n    `TRY203` ([#13502](https://github.com/astral-sh/ruff/pull/13502)). This ensures Ruff's code is consistent with\n    the same rule in the [`tryceratops`](https://github.com/guilatrova/tryceratops) linter.\n- The `lint.allow-unused-imports` setting has been removed ([#13677](https://github.com/astral-sh/ruff/pull/13677)). Use\n    [`lint.pyflakes.allow-unused-imports`](https://docs.astral.sh/ruff/settings/#lint_pyflakes_allowed-unused-imports)\n    instead.\n\n### Formatter preview style\n\n- Normalize implicit concatenated f-string quotes per part ([#13539](https://github.com/astral-sh/ruff/pull/13539))\n\n### Preview linter features\n\n- \\[`refurb`\\] implement `hardcoded-string-charset` (FURB156) ([#13530](https://github.com/astral-sh/ruff/pull/13530))\n- \\[`refurb`\\] Count codepoints not bytes for `slice-to-remove-prefix-or-suffix (FURB188)` ([#13631](https://github.com/astral-sh/ruff/pull/13631))\n\n### Rule changes\n\n- \\[`pylint`\\] Mark `PLE1141` fix as unsafe ([#13629](https://github.com/astral-sh/ruff/pull/13629))\n- \\[`flake8-async`\\] Consider async generators to be \"checkpoints\" for `cancel-scope-no-checkpoint` (`ASYNC100`) ([#13639](https://github.com/astral-sh/ruff/pull/13639))\n- \\[`flake8-bugbear`\\] Do not suggest setting parameter `strict=` to `False` in `B905` diagnostic message ([#13656](https://github.com/astral-sh/ruff/pull/13656))\n- \\[`flake8-todos`\\] Only flag the word \"TODO\", not words starting with \"todo\" (`TD006`) ([#13640](https://github.com/astral-sh/ruff/pull/13640))\n- \\[`pycodestyle`\\] Fix whitespace-related false positives and false negatives inside type-parameter lists (`E231`, `E251`) ([#13704](https://github.com/astral-sh/ruff/pull/13704))\n- \\[`flake8-simplify`\\] Stabilize preview behavior for `SIM115` so that the rule can detect files\n    being opened from a wider range of standard-library functions ([#12959](https://github.com/astral-sh/ruff/pull/12959)).\n\n### CLI\n\n- Add explanation of fixable in `--statistics` command ([#13774](https://github.com/astral-sh/ruff/pull/13774))\n\n### Bug fixes\n\n- \\[`pyflakes`\\] Allow `ipytest` cell magic (`F401`) ([#13745](https://github.com/astral-sh/ruff/pull/13745))\n- \\[`flake8-use-pathlib`\\] Fix `PTH123` false positive when `open` is passed a file descriptor ([#13616](https://github.com/astral-sh/ruff/pull/13616))\n- \\[`flake8-bandit`\\] Detect patterns from multi line SQL statements (`S608`) ([#13574](https://github.com/astral-sh/ruff/pull/13574))\n- \\[`flake8-pyi`\\] - Fix dropped expressions in `PYI030` autofix ([#13727](https://github.com/astral-sh/ruff/pull/13727))\n\n## 0.6.9\n\n### Preview features\n\n- Fix codeblock dynamic line length calculation for indented docstring examples ([#13523](https://github.com/astral-sh/ruff/pull/13523))\n- \\[`refurb`\\] Mark `FURB118` fix as unsafe ([#13613](https://github.com/astral-sh/ruff/pull/13613))\n\n### Rule changes\n\n- \\[`pydocstyle`\\] Don't raise `D208` when last line is non-empty ([#13372](https://github.com/astral-sh/ruff/pull/13372))\n- \\[`pylint`\\] Preserve trivia (i.e. comments) in `PLR5501` autofix ([#13573](https://github.com/astral-sh/ruff/pull/13573))\n\n### Configuration\n\n- \\[`pyflakes`\\] Add `allow-unused-imports` setting for `unused-import` rule (`F401`) ([#13601](https://github.com/astral-sh/ruff/pull/13601))\n\n### Bug fixes\n\n- Support ruff discovery in pip build environments ([#13591](https://github.com/astral-sh/ruff/pull/13591))\n- \\[`flake8-bugbear`\\] Avoid short circuiting `B017` for multiple context managers ([#13609](https://github.com/astral-sh/ruff/pull/13609))\n- \\[`pylint`\\] Do not offer an invalid fix for `PLR1716` when the comparisons contain parenthesis ([#13527](https://github.com/astral-sh/ruff/pull/13527))\n- \\[`pyupgrade`\\] Fix `UP043` to apply to `collections.abc.Generator` and `collections.abc.AsyncGenerator` ([#13611](https://github.com/astral-sh/ruff/pull/13611))\n- \\[`refurb`\\] Fix handling of slices in tuples for `FURB118`, e.g., `x[:, 1]` ([#13518](https://github.com/astral-sh/ruff/pull/13518))\n\n### Documentation\n\n- Update GitHub Action link to `astral-sh/ruff-action` ([#13551](https://github.com/astral-sh/ruff/pull/13551))\n\n## 0.6.8\n\n### Preview features\n\n- Remove unnecessary parentheses around `match case` clauses ([#13510](https://github.com/astral-sh/ruff/pull/13510))\n- Parenthesize overlong `if` guards in `match..case` clauses ([#13513](https://github.com/astral-sh/ruff/pull/13513))\n- Detect basic wildcard imports in `ruff analyze graph` ([#13486](https://github.com/astral-sh/ruff/pull/13486))\n- \\[`pylint`\\] Implement `boolean-chained-comparison` (`R1716`) ([#13435](https://github.com/astral-sh/ruff/pull/13435))\n\n### Rule changes\n\n- \\[`lake8-simplify`\\] Detect `SIM910` when using variadic keyword arguments, i.e., `**kwargs` ([#13503](https://github.com/astral-sh/ruff/pull/13503))\n- \\[`pyupgrade`\\] Avoid false negatives with non-reference shadowed bindings of loop variables (`UP028`) ([#13504](https://github.com/astral-sh/ruff/pull/13504))\n\n### Bug fixes\n\n- Detect tuples bound to variadic positional arguments i.e. `*args` ([#13512](https://github.com/astral-sh/ruff/pull/13512))\n- Exit gracefully on broken pipe errors ([#13485](https://github.com/astral-sh/ruff/pull/13485))\n- Avoid panic when analyze graph hits broken pipe ([#13484](https://github.com/astral-sh/ruff/pull/13484))\n\n### Performance\n\n- Reuse `BTreeSets` in module resolver ([#13440](https://github.com/astral-sh/ruff/pull/13440))\n- Skip traversal for non-compound statements ([#13441](https://github.com/astral-sh/ruff/pull/13441))\n\n## 0.6.7\n\n### Preview features\n\n- Add Python version support to ruff analyze CLI ([#13426](https://github.com/astral-sh/ruff/pull/13426))\n- Add `exclude` support to `ruff analyze` ([#13425](https://github.com/astral-sh/ruff/pull/13425))\n- Fix parentheses around return type annotations ([#13381](https://github.com/astral-sh/ruff/pull/13381))\n\n### Rule changes\n\n- \\[`pycodestyle`\\] Fix: Don't autofix if the first line ends in a question mark? (D400) ([#13399](https://github.com/astral-sh/ruff/pull/13399))\n\n### Bug fixes\n\n- Respect `lint.exclude` in ruff check `--add-noqa` ([#13427](https://github.com/astral-sh/ruff/pull/13427))\n\n### Performance\n\n- Avoid tracking module resolver files in Salsa ([#13437](https://github.com/astral-sh/ruff/pull/13437))\n- Use `forget` for module resolver database ([#13438](https://github.com/astral-sh/ruff/pull/13438))\n\n## 0.6.6\n\n### Preview features\n\n- \\[`refurb`\\] Skip `slice-to-remove-prefix-or-suffix` (`FURB188`) when non-trivial slice steps are present ([#13405](https://github.com/astral-sh/ruff/pull/13405))\n- Add a subcommand to generate dependency graphs ([#13402](https://github.com/astral-sh/ruff/pull/13402))\n\n### Formatter\n\n- Fix placement of inline parameter comments ([#13379](https://github.com/astral-sh/ruff/pull/13379))\n\n### Server\n\n- Fix off-by one error in the `LineIndex::offset` calculation ([#13407](https://github.com/astral-sh/ruff/pull/13407))\n\n### Bug fixes\n\n- \\[`fastapi`\\] Respect FastAPI aliases in route definitions ([#13394](https://github.com/astral-sh/ruff/pull/13394))\n- \\[`pydocstyle`\\] Respect word boundaries when detecting function signature in docs ([#13388](https://github.com/astral-sh/ruff/pull/13388))\n\n### Documentation\n\n- Add backlinks to rule overview linter ([#13368](https://github.com/astral-sh/ruff/pull/13368))\n- Fix documentation for editor vim plugin ALE ([#13348](https://github.com/astral-sh/ruff/pull/13348))\n- Fix rendering of `FURB188` docs ([#13406](https://github.com/astral-sh/ruff/pull/13406))\n\n## 0.6.5\n\n### Preview features\n\n- \\[`pydoclint`\\] Ignore `DOC201` when function name is \"**new**\" ([#13300](https://github.com/astral-sh/ruff/pull/13300))\n- \\[`refurb`\\] Implement `slice-to-remove-prefix-or-suffix` (`FURB188`) ([#13256](https://github.com/astral-sh/ruff/pull/13256))\n\n### Rule changes\n\n- \\[`eradicate`\\] Ignore script-comments with multiple end-tags (`ERA001`) ([#13283](https://github.com/astral-sh/ruff/pull/13283))\n- \\[`pyflakes`\\] Improve error message for `UndefinedName` when a builtin was added in a newer version than specified in Ruff config (`F821`) ([#13293](https://github.com/astral-sh/ruff/pull/13293))\n\n### Server\n\n- Add support for extensionless Python files for server ([#13326](https://github.com/astral-sh/ruff/pull/13326))\n- Fix configuration inheritance for configurations specified in the LSP settings ([#13285](https://github.com/astral-sh/ruff/pull/13285))\n\n### Bug fixes\n\n- \\[`ruff`\\] Handle unary operators in `decimal-from-float-literal` (`RUF032`) ([#13275](https://github.com/astral-sh/ruff/pull/13275))\n\n### CLI\n\n- Only include rules with diagnostics in SARIF metadata ([#13268](https://github.com/astral-sh/ruff/pull/13268))\n\n### Playground\n\n- Add \"Copy as pyproject.toml/ruff.toml\" and \"Paste from TOML\" ([#13328](https://github.com/astral-sh/ruff/pull/13328))\n- Fix errors not shown for restored snippet on page load ([#13262](https://github.com/astral-sh/ruff/pull/13262))\n\n## 0.6.4\n\n### Preview features\n\n- \\[`flake8-builtins`\\] Use dynamic builtins list based on Python version ([#13172](https://github.com/astral-sh/ruff/pull/13172))\n- \\[`pydoclint`\\] Permit yielding `None` in `DOC402` and `DOC403` ([#13148](https://github.com/astral-sh/ruff/pull/13148))\n- \\[`pylint`\\] Update diagnostic message for `PLW3201` ([#13194](https://github.com/astral-sh/ruff/pull/13194))\n- \\[`ruff`\\] Implement `post-init-default` (`RUF033`) ([#13192](https://github.com/astral-sh/ruff/pull/13192))\n- \\[`ruff`\\] Implement useless if-else (`RUF034`) ([#13218](https://github.com/astral-sh/ruff/pull/13218))\n\n### Rule changes\n\n- \\[`flake8-pyi`\\] Respect `pep8_naming.classmethod-decorators` settings when determining if a method is a classmethod in `custom-type-var-return-type` (`PYI019`) ([#13162](https://github.com/astral-sh/ruff/pull/13162))\n- \\[`flake8-pyi`\\] Teach various rules that annotations might be stringized ([#12951](https://github.com/astral-sh/ruff/pull/12951))\n- \\[`pylint`\\] Avoid `no-self-use` for `attrs`-style validators ([#13166](https://github.com/astral-sh/ruff/pull/13166))\n- \\[`pylint`\\] Recurse into subscript subexpressions when searching for list/dict lookups (`PLR1733`, `PLR1736`) ([#13186](https://github.com/astral-sh/ruff/pull/13186))\n- \\[`pyupgrade`\\] Detect `aiofiles.open` calls in `UP015` ([#13173](https://github.com/astral-sh/ruff/pull/13173))\n- \\[`pyupgrade`\\] Mark `sys.version_info[0] < 3` and similar comparisons as outdated (`UP036`) ([#13175](https://github.com/astral-sh/ruff/pull/13175))\n\n### CLI\n\n- Enrich messages of SARIF results ([#13180](https://github.com/astral-sh/ruff/pull/13180))\n- Handle singular case for incompatible rules warning in `ruff format` output ([#13212](https://github.com/astral-sh/ruff/pull/13212))\n\n### Bug fixes\n\n- \\[`pydocstyle`\\] Improve heuristics for detecting Google-style docstrings ([#13142](https://github.com/astral-sh/ruff/pull/13142))\n- \\[`refurb`\\] Treat `sep` arguments with effects as unsafe removals (`FURB105`) ([#13165](https://github.com/astral-sh/ruff/pull/13165))\n\n## 0.6.3\n\n### Preview features\n\n- \\[`flake8-simplify`\\] Extend `open-file-with-context-handler` to work with `dbm.sqlite3` (`SIM115`) ([#13104](https://github.com/astral-sh/ruff/pull/13104))\n- \\[`pycodestyle`\\] Disable `E741` in stub files (`.pyi`) ([#13119](https://github.com/astral-sh/ruff/pull/13119))\n- \\[`pydoclint`\\] Avoid `DOC201` on explicit returns in functions that only return `None` ([#13064](https://github.com/astral-sh/ruff/pull/13064))\n\n### Rule changes\n\n- \\[`flake8-async`\\] Disable check for `asyncio` before Python 3.11 (`ASYNC109`) ([#13023](https://github.com/astral-sh/ruff/pull/13023))\n\n### Bug fixes\n\n- \\[`FastAPI`\\] Avoid introducing invalid syntax in fix for `fast-api-non-annotated-dependency` (`FAST002`) ([#13133](https://github.com/astral-sh/ruff/pull/13133))\n- \\[`flake8-implicit-str-concat`\\] Normalize octals before merging concatenated strings in `single-line-implicit-string-concatenation` (`ISC001`) ([#13118](https://github.com/astral-sh/ruff/pull/13118))\n- \\[`flake8-pytest-style`\\] Improve help message for `pytest-incorrect-mark-parentheses-style` (`PT023`) ([#13092](https://github.com/astral-sh/ruff/pull/13092))\n- \\[`pylint`\\] Avoid autofix for calls that aren't `min` or `max` as starred expression (`PLW3301`) ([#13089](https://github.com/astral-sh/ruff/pull/13089))\n- \\[`ruff`\\] Add `datetime.time`, `datetime.tzinfo`, and `datetime.timezone` as immutable function calls (`RUF009`) ([#13109](https://github.com/astral-sh/ruff/pull/13109))\n- \\[`ruff`\\] Extend comment deletion for `RUF100` to include trailing text from `noqa` directives while preserving any following comments on the same line, if any ([#13105](https://github.com/astral-sh/ruff/pull/13105))\n- Fix dark theme on initial page load for the Ruff playground ([#13077](https://github.com/astral-sh/ruff/pull/13077))\n\n## 0.6.2\n\n### Preview features\n\n- \\[`flake8-simplify`\\] Extend `open-file-with-context-handler` to work with other standard-library IO modules (`SIM115`) ([#12959](https://github.com/astral-sh/ruff/pull/12959))\n- \\[`ruff`\\] Avoid `unused-async` for functions with FastAPI route decorator (`RUF029`) ([#12938](https://github.com/astral-sh/ruff/pull/12938))\n- \\[`ruff`\\] Ignore `fstring-missing-syntax` (`RUF027`) for `fastAPI` paths ([#12939](https://github.com/astral-sh/ruff/pull/12939))\n- \\[`ruff`\\] Implement check for Decimal called with a float literal (RUF032) ([#12909](https://github.com/astral-sh/ruff/pull/12909))\n\n### Rule changes\n\n- \\[`flake8-bugbear`\\] Update diagnostic message when expression is at the end of function (`B015`) ([#12944](https://github.com/astral-sh/ruff/pull/12944))\n- \\[`flake8-pyi`\\] Skip type annotations in `string-or-bytes-too-long` (`PYI053`) ([#13002](https://github.com/astral-sh/ruff/pull/13002))\n- \\[`flake8-type-checking`\\] Always recognise relative imports as first-party ([#12994](https://github.com/astral-sh/ruff/pull/12994))\n- \\[`flake8-unused-arguments`\\] Ignore unused arguments on stub functions (`ARG001`) ([#12966](https://github.com/astral-sh/ruff/pull/12966))\n- \\[`pylint`\\] Ignore augmented assignment for `self-cls-assignment` (`PLW0642`) ([#12957](https://github.com/astral-sh/ruff/pull/12957))\n\n### Server\n\n- Show full context in error log messages ([#13029](https://github.com/astral-sh/ruff/pull/13029))\n\n### Bug fixes\n\n- \\[`pep8-naming`\\] Don't flag `from` imports following conventional import names (`N817`) ([#12946](https://github.com/astral-sh/ruff/pull/12946))\n- \\[`pylint`\\] - Allow `__new__` methods to have `cls` as their first argument even if decorated with `@staticmethod` for `bad-staticmethod-argument` (`PLW0211`) ([#12958](https://github.com/astral-sh/ruff/pull/12958))\n\n### Documentation\n\n- Add `hyperfine` installation instructions; update `hyperfine` code samples ([#13034](https://github.com/astral-sh/ruff/pull/13034))\n- Expand note to use Ruff with other language server in Kate ([#12806](https://github.com/astral-sh/ruff/pull/12806))\n- Update example for `PT001` as per the new default behavior ([#13019](https://github.com/astral-sh/ruff/pull/13019))\n- \\[`perflint`\\] Improve docs for `try-except-in-loop` (`PERF203`) ([#12947](https://github.com/astral-sh/ruff/pull/12947))\n- \\[`pydocstyle`\\] Add reference to `lint.pydocstyle.ignore-decorators` setting to rule docs ([#12996](https://github.com/astral-sh/ruff/pull/12996))\n\n## 0.6.1\n\nThis is a hotfix release to address an issue with `ruff-pre-commit`. In v0.6,\nRuff changed its behavior to lint and format Jupyter notebooks by default;\nhowever, due to an oversight, these files were still excluded by default if\nRuff was run via pre-commit, leading to inconsistent behavior.\nThis has [now been fixed](https://github.com/astral-sh/ruff-pre-commit/pull/96).\n\n### Preview features\n\n- \\[`fastapi`\\] Implement `fast-api-unused-path-parameter` (`FAST003`) ([#12638](https://github.com/astral-sh/ruff/pull/12638))\n\n### Rule changes\n\n- \\[`pylint`\\] Rename `too-many-positional` to `too-many-positional-arguments` (`R0917`) ([#12905](https://github.com/astral-sh/ruff/pull/12905))\n\n### Server\n\n- Fix crash when applying \"fix-all\" code-action to notebook cells ([#12929](https://github.com/astral-sh/ruff/pull/12929))\n\n### Other changes\n\n- \\[`flake8-naming`\\]: Respect import conventions (`N817`) ([#12922](https://github.com/astral-sh/ruff/pull/12922))\n\n## 0.6.0\n\nCheck out the [blog post](https://astral.sh/blog/ruff-v0.6.0) for a migration guide and overview of the changes!\n\n### Breaking changes\n\nSee also, the \"Remapped rules\" section which may result in disabled rules.\n\n- Lint and format Jupyter Notebook by default ([#12878](https://github.com/astral-sh/ruff/pull/12878)).\n- Detect imports in `src` layouts by default for `isort` rules ([#12848](https://github.com/astral-sh/ruff/pull/12848))\n- The pytest rules `PT001` and `PT023` now default to omitting the decorator parentheses when there are no arguments ([#12838](https://github.com/astral-sh/ruff/pull/12838)).\n\n### Deprecations\n\nThe following rules are now deprecated:\n\n- [`pytest-missing-fixture-name-underscore`](https://docs.astral.sh/ruff/rules/pytest-missing-fixture-name-underscore/) (`PT004`)\n- [`pytest-incorrect-fixture-name-underscore`](https://docs.astral.sh/ruff/rules/pytest-incorrect-fixture-name-underscore/) (`PT005`)\n- [`unpacked-list-comprehension`](https://docs.astral.sh/ruff/rules/unpacked-list-comprehension/) (`UP027`)\n\n### Remapped rules\n\nThe following rules have been remapped to new rule codes:\n\n- [`unnecessary-dict-comprehension-for-iterable`](https://docs.astral.sh/ruff/rules/unnecessary-dict-comprehension-for-iterable/): `RUF025` to `C420`\n\n### Stabilization\n\nThe following rules have been stabilized and are no longer in preview:\n\n- [`singledispatch-method`](https://docs.astral.sh/ruff/rules/singledispatch-method/) (`PLE1519`)\n- [`singledispatchmethod-function`](https://docs.astral.sh/ruff/rules/singledispatchmethod-function/) (`PLE1520`)\n- [`bad-staticmethod-argument`](https://docs.astral.sh/ruff/rules/bad-staticmethod-argument/) (`PLW0211`)\n- [`if-stmt-min-max`](https://docs.astral.sh/ruff/rules/if-stmt-min-max/) (`PLR1730`)\n- [`invalid-bytes-return-type`](https://docs.astral.sh/ruff/rules/invalid-bytes-return-type/) (`PLE0308`)\n- [`invalid-hash-return-type`](https://docs.astral.sh/ruff/rules/invalid-hash-return-type/) (`PLE0309`)\n- [`invalid-index-return-type`](https://docs.astral.sh/ruff/rules/invalid-index-return-type/) (`PLE0305`)\n- [`invalid-length-return-type`](https://docs.astral.sh/ruff/rules/invalid-length-return-type/) (`PLEE303`)\n- [`self-or-cls-assignment`](https://docs.astral.sh/ruff/rules/self-or-cls-assignment/) (`PLW0642`)\n- [`byte-string-usage`](https://docs.astral.sh/ruff/rules/byte-string-usage/) (`PYI057`)\n- [`duplicate-literal-member`](https://docs.astral.sh/ruff/rules/duplicate-literal-member/) (`PYI062`)\n- [`redirected-noqa`](https://docs.astral.sh/ruff/rules/redirected-noqa/) (`RUF101`)\n\nThe following behaviors have been stabilized:\n\n- [`cancel-scope-no-checkpoint`](https://docs.astral.sh/ruff/rules/cancel-scope-no-checkpoint/) (`ASYNC100`): Support `asyncio` and `anyio` context mangers.\n- [`async-function-with-timeout`](https://docs.astral.sh/ruff/rules/async-function-with-timeout/) (`ASYNC109`): Support `asyncio` and `anyio` context mangers.\n- [`async-busy-wait`](https://docs.astral.sh/ruff/rules/async-busy-wait/) (`ASYNC110`): Support `asyncio` and `anyio` context mangers.\n- [`async-zero-sleep`](https://docs.astral.sh/ruff/rules/async-zero-sleep/) (`ASYNC115`): Support `anyio` context mangers.\n- [`long-sleep-not-forever`](https://docs.astral.sh/ruff/rules/long-sleep-not-forever/) (`ASYNC116`): Support `anyio` context mangers.\n\nThe following fixes have been stabilized:\n\n- [`superfluous-else-return`](https://docs.astral.sh/ruff/rules/superfluous-else-return/) (`RET505`)\n- [`superfluous-else-raise`](https://docs.astral.sh/ruff/rules/superfluous-else-raise/) (`RET506`)\n- [`superfluous-else-continue`](https://docs.astral.sh/ruff/rules/superfluous-else-continue/) (`RET507`)\n- [`superfluous-else-break`](https://docs.astral.sh/ruff/rules/superfluous-else-break/) (`RET508`)\n\n### Preview features\n\n- \\[`flake8-simplify`\\] Further simplify to binary in preview for (`SIM108`) ([#12796](https://github.com/astral-sh/ruff/pull/12796))\n- \\[`pyupgrade`\\] Show violations without auto-fix (`UP031`) ([#11229](https://github.com/astral-sh/ruff/pull/11229))\n\n### Rule changes\n\n- \\[`flake8-import-conventions`\\] Add `xml.etree.ElementTree` to default conventions ([#12455](https://github.com/astral-sh/ruff/pull/12455))\n- \\[`flake8-pytest-style`\\] Add a space after comma in CSV output (`PT006`) ([#12853](https://github.com/astral-sh/ruff/pull/12853))\n\n### Server\n\n- Show a message for incorrect settings ([#12781](https://github.com/astral-sh/ruff/pull/12781))\n\n### Bug fixes\n\n- \\[`flake8-async`\\] Do not lint yield in context manager (`ASYNC100`) ([#12896](https://github.com/astral-sh/ruff/pull/12896))\n- \\[`flake8-comprehensions`\\] Do not lint `async for` comprehensions (`C419`) ([#12895](https://github.com/astral-sh/ruff/pull/12895))\n- \\[`flake8-return`\\] Only add return `None` at end of a function (`RET503`) ([#11074](https://github.com/astral-sh/ruff/pull/11074))\n- \\[`flake8-type-checking`\\] Avoid treating `dataclasses.KW_ONLY` as typing-only (`TCH003`) ([#12863](https://github.com/astral-sh/ruff/pull/12863))\n- \\[`pep8-naming`\\] Treat `type(Protocol)` et al as metaclass base (`N805`) ([#12770](https://github.com/astral-sh/ruff/pull/12770))\n- \\[`pydoclint`\\] Don't enforce returns and yields in abstract methods (`DOC201`, `DOC202`) ([#12771](https://github.com/astral-sh/ruff/pull/12771))\n- \\[`ruff`\\] Skip tuples with slice expressions in (`RUF031`) ([#12768](https://github.com/astral-sh/ruff/pull/12768))\n- \\[`ruff`\\] Ignore unparenthesized tuples in subscripts when the subscript is a type annotation or type alias (`RUF031`) ([#12762](https://github.com/astral-sh/ruff/pull/12762))\n- \\[`ruff`\\] Ignore template strings passed to logging and `builtins._()` calls (`RUF027`) ([#12889](https://github.com/astral-sh/ruff/pull/12889))\n- \\[`ruff`\\] Do not remove parens for tuples with starred expressions in Python \\<=3.10 (`RUF031`) ([#12784](https://github.com/astral-sh/ruff/pull/12784))\n- Evaluate default parameter values for a function in that function's enclosing scope ([#12852](https://github.com/astral-sh/ruff/pull/12852))\n\n### Other changes\n\n- Respect VS Code cell metadata when detecting the language of Jupyter Notebook cells ([#12864](https://github.com/astral-sh/ruff/pull/12864))\n- Respect `kernelspec` notebook metadata when detecting the preferred language for a Jupyter Notebook ([#12875](https://github.com/astral-sh/ruff/pull/12875))\n\n## 0.5.7\n\n### Preview features\n\n- \\[`flake8-comprehensions`\\] Account for list and set comprehensions in `unnecessary-literal-within-tuple-call` (`C409`) ([#12657](https://github.com/astral-sh/ruff/pull/12657))\n- \\[`flake8-pyi`\\] Add autofix for `future-annotations-in-stub` (`PYI044`) ([#12676](https://github.com/astral-sh/ruff/pull/12676))\n- \\[`flake8-return`\\] Avoid syntax error when auto-fixing `RET505` with mixed indentation (space and tabs) ([#12740](https://github.com/astral-sh/ruff/pull/12740))\n- \\[`pydoclint`\\] Add `docstring-missing-yields` (`DOC402`) and `docstring-extraneous-yields` (`DOC403`) ([#12538](https://github.com/astral-sh/ruff/pull/12538))\n- \\[`pydoclint`\\] Avoid `DOC201` if docstring begins with \"Return\", \"Returns\", \"Yield\", or \"Yields\" ([#12675](https://github.com/astral-sh/ruff/pull/12675))\n- \\[`pydoclint`\\] Deduplicate collected exceptions after traversing function bodies (`DOC501`) ([#12642](https://github.com/astral-sh/ruff/pull/12642))\n- \\[`pydoclint`\\] Ignore `DOC` errors for stub functions ([#12651](https://github.com/astral-sh/ruff/pull/12651))\n- \\[`pydoclint`\\] Teach rules to understand reraised exceptions as being explicitly raised (`DOC501`, `DOC502`) ([#12639](https://github.com/astral-sh/ruff/pull/12639))\n- \\[`ruff`\\] Implement `incorrectly-parenthesized-tuple-in-subscript` (`RUF031`) ([#12480](https://github.com/astral-sh/ruff/pull/12480))\n- \\[`ruff`\\] Mark `RUF023` fix as unsafe if `__slots__` is not a set and the binding is used elsewhere ([#12692](https://github.com/astral-sh/ruff/pull/12692))\n\n### Rule changes\n\n- \\[`refurb`\\] Add autofix for `implicit-cwd` (`FURB177`) ([#12708](https://github.com/astral-sh/ruff/pull/12708))\n- \\[`ruff`\\] Add autofix for `zip-instead-of-pairwise` (`RUF007`) ([#12663](https://github.com/astral-sh/ruff/pull/12663))\n- \\[`tryceratops`\\] Add `BaseException` to `raise-vanilla-class` rule (`TRY002`) ([#12620](https://github.com/astral-sh/ruff/pull/12620))\n\n### Server\n\n- Ignore non-file workspace URL; Ruff will display a warning notification in this case ([#12725](https://github.com/astral-sh/ruff/pull/12725))\n\n### CLI\n\n- Fix cache invalidation for nested `pyproject.toml` files ([#12727](https://github.com/astral-sh/ruff/pull/12727))\n\n### Bug fixes\n\n- \\[`flake8-async`\\] Fix false positives with multiple `async with` items (`ASYNC100`) ([#12643](https://github.com/astral-sh/ruff/pull/12643))\n- \\[`flake8-bandit`\\] Avoid false-positives for list concatenations in SQL construction (`S608`) ([#12720](https://github.com/astral-sh/ruff/pull/12720))\n- \\[`flake8-bugbear`\\] Treat `return` as equivalent to `break` (`B909`) ([#12646](https://github.com/astral-sh/ruff/pull/12646))\n- \\[`flake8-comprehensions`\\] Set comprehensions not a violation for `sum` in `unnecessary-comprehension-in-call` (`C419`) ([#12691](https://github.com/astral-sh/ruff/pull/12691))\n- \\[`flake8-simplify`\\] Parenthesize conditions based on precedence when merging if arms (`SIM114`) ([#12737](https://github.com/astral-sh/ruff/pull/12737))\n- \\[`pydoclint`\\] Try both 'Raises' section styles when convention is unspecified (`DOC501`) ([#12649](https://github.com/astral-sh/ruff/pull/12649))\n\n## 0.5.6\n\nRuff 0.5.6 automatically enables linting and formatting of notebooks in *preview mode*.\nYou can opt-out of this behavior by adding `*.ipynb` to the `extend-exclude` setting.\n\n```toml\n[tool.ruff]\nextend-exclude = [\"*.ipynb\"]\n```\n\n### Preview features\n\n- Enable notebooks by default in preview mode ([#12621](https://github.com/astral-sh/ruff/pull/12621))\n- \\[`flake8-builtins`\\] Implement import, lambda, and module shadowing ([#12546](https://github.com/astral-sh/ruff/pull/12546))\n- \\[`pydoclint`\\] Add `docstring-missing-returns` (`DOC201`) and `docstring-extraneous-returns` (`DOC202`) ([#12485](https://github.com/astral-sh/ruff/pull/12485))\n\n### Rule changes\n\n- \\[`flake8-return`\\] Exempt cached properties and other property-like decorators from explicit return rule (`RET501`) ([#12563](https://github.com/astral-sh/ruff/pull/12563))\n\n### Server\n\n- Make server panic hook more error resilient ([#12610](https://github.com/astral-sh/ruff/pull/12610))\n- Use `$/logTrace` for server trace logs in Zed and VS Code ([#12564](https://github.com/astral-sh/ruff/pull/12564))\n- Keep track of deleted cells for reorder change request ([#12575](https://github.com/astral-sh/ruff/pull/12575))\n\n### Configuration\n\n- \\[`flake8-implicit-str-concat`\\] Always allow explicit multi-line concatenations when implicit concatenations are banned ([#12532](https://github.com/astral-sh/ruff/pull/12532))\n\n### Bug fixes\n\n- \\[`flake8-async`\\] Avoid flagging `asyncio.timeout`s as unused when the context manager includes `asyncio.TaskGroup` ([#12605](https://github.com/astral-sh/ruff/pull/12605))\n- \\[`flake8-slots`\\] Avoid recommending `__slots__` for classes that inherit from more than `namedtuple` ([#12531](https://github.com/astral-sh/ruff/pull/12531))\n- \\[`isort`\\] Avoid marking required imports as unused ([#12537](https://github.com/astral-sh/ruff/pull/12537))\n- \\[`isort`\\] Preserve trailing inline comments on import-from statements ([#12498](https://github.com/astral-sh/ruff/pull/12498))\n- \\[`pycodestyle`\\] Add newlines before comments (`E305`) ([#12606](https://github.com/astral-sh/ruff/pull/12606))\n- \\[`pycodestyle`\\] Don't attach comments with mismatched indents ([#12604](https://github.com/astral-sh/ruff/pull/12604))\n- \\[`pyflakes`\\] Fix preview-mode bugs in `F401` when attempting to autofix unused first-party submodule imports in an `__init__.py` file ([#12569](https://github.com/astral-sh/ruff/pull/12569))\n- \\[`pylint`\\] Respect start index in `unnecessary-list-index-lookup` ([#12603](https://github.com/astral-sh/ruff/pull/12603))\n- \\[`pyupgrade`\\] Avoid recommending no-argument super in `slots=True` dataclasses ([#12530](https://github.com/astral-sh/ruff/pull/12530))\n- \\[`pyupgrade`\\] Use colon rather than dot formatting for integer-only types ([#12534](https://github.com/astral-sh/ruff/pull/12534))\n- Fix NFKC normalization bug when removing unused imports ([#12571](https://github.com/astral-sh/ruff/pull/12571))\n\n### Other changes\n\n- Consider more stdlib decorators to be property-like ([#12583](https://github.com/astral-sh/ruff/pull/12583))\n- Improve handling of metaclasses in various linter rules ([#12579](https://github.com/astral-sh/ruff/pull/12579))\n- Improve consistency between linter rules in determining whether a function is property ([#12581](https://github.com/astral-sh/ruff/pull/12581))\n\n## 0.5.5\n\n### Preview features\n\n- \\[`fastapi`\\] Implement `fastapi-redundant-response-model` (`FAST001`) and `fastapi-non-annotated-dependency`(`FAST002`) ([#11579](https://github.com/astral-sh/ruff/pull/11579))\n- \\[`pydoclint`\\] Implement `docstring-missing-exception` (`DOC501`) and `docstring-extraneous-exception` (`DOC502`) ([#11471](https://github.com/astral-sh/ruff/pull/11471))\n\n### Rule changes\n\n- \\[`numpy`\\] Fix NumPy 2.0 rule for `np.alltrue` and `np.sometrue` ([#12473](https://github.com/astral-sh/ruff/pull/12473))\n- \\[`numpy`\\] Ignore `NPY201` inside `except` blocks for compatibility with older numpy versions ([#12490](https://github.com/astral-sh/ruff/pull/12490))\n- \\[`pep8-naming`\\] Avoid applying `ignore-names` to `self` and `cls` function names (`N804`, `N805`) ([#12497](https://github.com/astral-sh/ruff/pull/12497))\n\n### Formatter\n\n- Fix incorrect placement of leading function comment with type params ([#12447](https://github.com/astral-sh/ruff/pull/12447))\n\n### Server\n\n- Do not bail code action resolution when a quick fix is requested ([#12462](https://github.com/astral-sh/ruff/pull/12462))\n\n### Bug fixes\n\n- Fix `Ord` implementation of `cmp_fix` ([#12471](https://github.com/astral-sh/ruff/pull/12471))\n- Raise syntax error for unparenthesized generator expression in multi-argument call ([#12445](https://github.com/astral-sh/ruff/pull/12445))\n- \\[`pydoclint`\\] Fix panic in `DOC501` reported in [#12428](https://github.com/astral-sh/ruff/pull/12428) ([#12435](https://github.com/astral-sh/ruff/pull/12435))\n- \\[`flake8-bugbear`\\] Allow singleton tuples with starred expressions in `B013` ([#12484](https://github.com/astral-sh/ruff/pull/12484))\n\n### Documentation\n\n- Add Eglot setup guide for Emacs editor ([#12426](https://github.com/astral-sh/ruff/pull/12426))\n- Add note about the breaking change in `nvim-lspconfig` ([#12507](https://github.com/astral-sh/ruff/pull/12507))\n- Add note to include notebook files for native server ([#12449](https://github.com/astral-sh/ruff/pull/12449))\n- Add setup docs for Zed editor ([#12501](https://github.com/astral-sh/ruff/pull/12501))\n\n## 0.5.4\n\n### Rule changes\n\n- \\[`ruff`\\] Rename `RUF007` to `zip-instead-of-pairwise` ([#12399](https://github.com/astral-sh/ruff/pull/12399))\n\n### Bug fixes\n\n- \\[`flake8-builtins`\\] Avoid shadowing diagnostics for `@override` methods ([#12415](https://github.com/astral-sh/ruff/pull/12415))\n- \\[`flake8-comprehensions`\\] Insert parentheses for multi-argument generators ([#12422](https://github.com/astral-sh/ruff/pull/12422))\n- \\[`pydocstyle`\\] Handle escaped docstrings within docstring (`D301`) ([#12192](https://github.com/astral-sh/ruff/pull/12192))\n\n### Documentation\n\n- Fix GitHub link to Neovim setup ([#12410](https://github.com/astral-sh/ruff/pull/12410))\n- Fix `output-format` default in settings reference ([#12409](https://github.com/astral-sh/ruff/pull/12409))\n\n## 0.5.3\n\n**Ruff 0.5.3 marks the stable release of the Ruff language server and introduces revamped\n[documentation](https://docs.astral.sh/ruff/editors), including [setup guides for your editor of\nchoice](https://docs.astral.sh/ruff/editors/setup) and [the language server\nitself](https://docs.astral.sh/ruff/editors/settings)**.\n\n### Preview features\n\n- Formatter: Insert empty line between suite and alternative branch after function/class definition ([#12294](https://github.com/astral-sh/ruff/pull/12294))\n- \\[`pyupgrade`\\] Implement `unnecessary-default-type-args` (`UP043`) ([#12371](https://github.com/astral-sh/ruff/pull/12371))\n\n### Rule changes\n\n- \\[`flake8-bugbear`\\] Detect enumerate iterations in `loop-iterator-mutation` (`B909`) ([#12366](https://github.com/astral-sh/ruff/pull/12366))\n- \\[`flake8-bugbear`\\] Remove `discard`, `remove`, and `pop` allowance for `loop-iterator-mutation` (`B909`) ([#12365](https://github.com/astral-sh/ruff/pull/12365))\n- \\[`pylint`\\] Allow `repeated-equality-comparison` for mixed operations (`PLR1714`) ([#12369](https://github.com/astral-sh/ruff/pull/12369))\n- \\[`pylint`\\] Ignore `self` and `cls` when counting arguments (`PLR0913`) ([#12367](https://github.com/astral-sh/ruff/pull/12367))\n- \\[`pylint`\\] Use UTF-8 as default encoding in `unspecified-encoding` fix (`PLW1514`) ([#12370](https://github.com/astral-sh/ruff/pull/12370))\n\n### Server\n\n- Build settings index in parallel for the native server ([#12299](https://github.com/astral-sh/ruff/pull/12299))\n- Use fallback settings when indexing the project ([#12362](https://github.com/astral-sh/ruff/pull/12362))\n- Consider `--preview` flag for `server` subcommand for the linter and formatter ([#12208](https://github.com/astral-sh/ruff/pull/12208))\n\n### Bug fixes\n\n- \\[`flake8-comprehensions`\\] Allow additional arguments for `sum` and `max` comprehensions (`C419`) ([#12364](https://github.com/astral-sh/ruff/pull/12364))\n- \\[`pylint`\\] Avoid dropping extra boolean operations in `repeated-equality-comparison` (`PLR1714`) ([#12368](https://github.com/astral-sh/ruff/pull/12368))\n- \\[`pylint`\\] Consider expression before statement when determining binding kind (`PLR1704`) ([#12346](https://github.com/astral-sh/ruff/pull/12346))\n\n### Documentation\n\n- Add docs for Ruff language server ([#12344](https://github.com/astral-sh/ruff/pull/12344))\n- Migrate to standalone docs repo ([#12341](https://github.com/astral-sh/ruff/pull/12341))\n- Update versioning policy for editor integration ([#12375](https://github.com/astral-sh/ruff/pull/12375))\n\n### Other changes\n\n- Publish Wasm API to npm ([#12317](https://github.com/astral-sh/ruff/pull/12317))\n\n## 0.5.2\n\n### Preview features\n\n- Use `space` separator before parenthesized expressions in comprehensions with leading comments ([#12282](https://github.com/astral-sh/ruff/pull/12282))\n- \\[`flake8-async`\\] Update `ASYNC100` to include `anyio` and `asyncio` ([#12221](https://github.com/astral-sh/ruff/pull/12221))\n- \\[`flake8-async`\\] Update `ASYNC109` to include `anyio` and `asyncio` ([#12236](https://github.com/astral-sh/ruff/pull/12236))\n- \\[`flake8-async`\\] Update `ASYNC110` to include `anyio` and `asyncio` ([#12261](https://github.com/astral-sh/ruff/pull/12261))\n- \\[`flake8-async`\\] Update `ASYNC115` to include `anyio` and `asyncio` ([#12262](https://github.com/astral-sh/ruff/pull/12262))\n- \\[`flake8-async`\\] Update `ASYNC116` to include `anyio` and `asyncio` ([#12266](https://github.com/astral-sh/ruff/pull/12266))\n\n### Rule changes\n\n- \\[`flake8-return`\\] Exempt properties from explicit return rule (`RET501`) ([#12243](https://github.com/astral-sh/ruff/pull/12243))\n- \\[`numpy`\\] Add `np.NAN`-to-`np.nan` diagnostic ([#12292](https://github.com/astral-sh/ruff/pull/12292))\n- \\[`refurb`\\] Make `list-reverse-copy` an unsafe fix ([#12303](https://github.com/astral-sh/ruff/pull/12303))\n\n### Server\n\n- Consider `include` and `extend-include` settings in native server ([#12252](https://github.com/astral-sh/ruff/pull/12252))\n- Include nested configurations in settings reloading ([#12253](https://github.com/astral-sh/ruff/pull/12253))\n\n### CLI\n\n- Omit code frames for fixes with empty ranges ([#12304](https://github.com/astral-sh/ruff/pull/12304))\n- Warn about formatter incompatibility for `D203` ([#12238](https://github.com/astral-sh/ruff/pull/12238))\n\n### Bug fixes\n\n- Make cache-write failures non-fatal on Windows ([#12302](https://github.com/astral-sh/ruff/pull/12302))\n- Treat `not` operations as boolean tests ([#12301](https://github.com/astral-sh/ruff/pull/12301))\n- \\[`flake8-bandit`\\] Avoid `S310` violations for HTTP-safe f-strings ([#12305](https://github.com/astral-sh/ruff/pull/12305))\n- \\[`flake8-bandit`\\] Support explicit string concatenations in S310 HTTP detection ([#12315](https://github.com/astral-sh/ruff/pull/12315))\n- \\[`flake8-bandit`\\] fix S113 false positive for httpx without `timeout` argument ([#12213](https://github.com/astral-sh/ruff/pull/12213))\n- \\[`pycodestyle`\\] Remove \"non-obvious\" allowance for E721 ([#12300](https://github.com/astral-sh/ruff/pull/12300))\n- \\[`pyflakes`\\] Consider `with` blocks as single-item branches for redefinition analysis ([#12311](https://github.com/astral-sh/ruff/pull/12311))\n- \\[`refurb`\\] Restrict forwarding for `newline` argument in `open()` calls to Python versions >= 3.10 ([#12244](https://github.com/astral-sh/ruff/pull/12244))\n\n### Documentation\n\n- Update help and documentation to reflect `--output-format full` default ([#12248](https://github.com/astral-sh/ruff/pull/12248))\n\n### Performance\n\n- Use more threads when discovering Python files ([#12258](https://github.com/astral-sh/ruff/pull/12258))\n\n## 0.5.1\n\n### Preview features\n\n- \\[`flake8-bugbear`\\] Implement mutable-contextvar-default (B039) ([#12113](https://github.com/astral-sh/ruff/pull/12113))\n- \\[`pycodestyle`\\] Whitespace after decorator (`E204`) ([#12140](https://github.com/astral-sh/ruff/pull/12140))\n- \\[`pytest`\\] Reverse `PT001` and `PT0023` defaults ([#12106](https://github.com/astral-sh/ruff/pull/12106))\n\n### Rule changes\n\n- Enable token-based rules on source with syntax errors ([#11950](https://github.com/astral-sh/ruff/pull/11950))\n- \\[`flake8-bandit`\\] Detect `httpx` for `S113` ([#12174](https://github.com/astral-sh/ruff/pull/12174))\n- \\[`numpy`\\] Update `NPY201` to include exception deprecations ([#12065](https://github.com/astral-sh/ruff/pull/12065))\n- \\[`pylint`\\] Generate autofix for `duplicate-bases` (`PLE0241`) ([#12105](https://github.com/astral-sh/ruff/pull/12105))\n\n### Server\n\n- Avoid syntax error notification for source code actions ([#12148](https://github.com/astral-sh/ruff/pull/12148))\n- Consider the content of the new cells during notebook sync ([#12203](https://github.com/astral-sh/ruff/pull/12203))\n- Fix replacement edit range computation ([#12171](https://github.com/astral-sh/ruff/pull/12171))\n\n### Bug fixes\n\n- Disable auto-fix when source has syntax errors ([#12134](https://github.com/astral-sh/ruff/pull/12134))\n- Fix cache key collisions for paths with separators ([#12159](https://github.com/astral-sh/ruff/pull/12159))\n- Make `requires-python` inference robust to `==` ([#12091](https://github.com/astral-sh/ruff/pull/12091))\n- Use char-wise width instead of `str`-width ([#12135](https://github.com/astral-sh/ruff/pull/12135))\n- \\[`pycodestyle`\\] Avoid `E275` if keyword followed by comma ([#12136](https://github.com/astral-sh/ruff/pull/12136))\n- \\[`pycodestyle`\\] Avoid `E275` if keyword is followed by a semicolon ([#12095](https://github.com/astral-sh/ruff/pull/12095))\n- \\[`pylint`\\] Skip [dummy variables](https://docs.astral.sh/ruff/settings/#lint_dummy-variable-rgx) for `PLR1704` ([#12190](https://github.com/astral-sh/ruff/pull/12190))\n\n### Performance\n\n- Remove allocation in `parse_identifier` ([#12103](https://github.com/astral-sh/ruff/pull/12103))\n- Use `CompactString` for `Identifier` AST node ([#12101](https://github.com/astral-sh/ruff/pull/12101))\n\n## 0.5.0\n\nCheck out the [blog post](https://astral.sh/blog/ruff-v0.5.0) for a migration guide and overview of the changes!\n\n### Breaking changes\n\nSee also, the \"Remapped rules\" section which may result in disabled rules.\n\n- Follow the XDG specification to discover user-level configurations on macOS (same as on other Unix platforms)\n- Selecting `ALL` now excludes deprecated rules\n- The released archives now include an extra level of nesting, which can be removed with `--strip-components=1` when untarring.\n- The release artifact's file name no longer includes the version tag. This enables users to install via `/latest` URLs on GitHub.\n- The diagnostic ranges for some `flake8-bandit` rules were modified ([#10667](https://github.com/astral-sh/ruff/pull/10667)).\n\n### Deprecations\n\nThe following rules are now deprecated:\n\n- [`syntax-error`](https://docs.astral.sh/ruff/rules/syntax-error/) (`E999`): Syntax errors are now always shown\n\n### Remapped rules\n\nThe following rules have been remapped to new rule codes:\n\n- [`blocking-http-call-in-async-function`](https://docs.astral.sh/ruff/rules/blocking-http-call-in-async-function/): `ASYNC100` to `ASYNC210`\n- [`open-sleep-or-subprocess-in-async-function`](https://docs.astral.sh/ruff/rules/open-sleep-or-subprocess-in-async-function/): `ASYNC101` split into `ASYNC220`, `ASYNC221`, `ASYNC230`, and `ASYNC251`\n- [`blocking-os-call-in-async-function`](https://docs.astral.sh/ruff/rules/blocking-os-call-in-async-function/): `ASYNC102` has been merged into `ASYNC220` and `ASYNC221`\n- [`trio-timeout-without-await`](https://docs.astral.sh/ruff/rules/trio-timeout-without-await/): `TRIO100` to `ASYNC100`\n- [`trio-sync-call`](https://docs.astral.sh/ruff/rules/trio-sync-call/): `TRIO105` to `ASYNC105`\n- [`trio-async-function-with-timeout`](https://docs.astral.sh/ruff/rules/trio-async-function-with-timeout/): `TRIO109` to `ASYNC109`\n- [`trio-unneeded-sleep`](https://docs.astral.sh/ruff/rules/trio-unneeded-sleep/): `TRIO110` to `ASYNC110`\n- [`trio-zero-sleep-call`](https://docs.astral.sh/ruff/rules/trio-zero-sleep-call/): `TRIO115` to `ASYNC115`\n- [`repeated-isinstance-calls`](https://docs.astral.sh/ruff/rules/repeated-isinstance-calls/): `PLR1701` to `SIM101`\n\n### Stabilization\n\nThe following rules have been stabilized and are no longer in preview:\n\n- [`mutable-fromkeys-value`](https://docs.astral.sh/ruff/rules/mutable-fromkeys-value/) (`RUF024`)\n- [`default-factory-kwarg`](https://docs.astral.sh/ruff/rules/default-factory-kwarg/) (`RUF026`)\n- [`django-extra`](https://docs.astral.sh/ruff/rules/django-extra/) (`S610`)\n- [`manual-dict-comprehension`](https://docs.astral.sh/ruff/rules/manual-dict-comprehension/) (`PERF403`)\n- [`print-empty-string`](https://docs.astral.sh/ruff/rules/print-empty-string/) (`FURB105`)\n- [`readlines-in-for`](https://docs.astral.sh/ruff/rules/readlines-in-for/) (`FURB129`)\n- [`if-expr-min-max`](https://docs.astral.sh/ruff/rules/if-expr-min-max/) (`FURB136`)\n- [`bit-count`](https://docs.astral.sh/ruff/rules/bit-count/) (`FURB161`)\n- [`redundant-log-base`](https://docs.astral.sh/ruff/rules/redundant-log-base/) (`FURB163`)\n- [`regex-flag-alias`](https://docs.astral.sh/ruff/rules/regex-flag-alias/) (`FURB167`)\n- [`isinstance-type-none`](https://docs.astral.sh/ruff/rules/isinstance-type-none/) (`FURB168`)\n- [`type-none-comparison`](https://docs.astral.sh/ruff/rules/type-none-comparison/) (`FURB169`)\n- [`implicit-cwd`](https://docs.astral.sh/ruff/rules/implicit-cwd/) (`FURB177`)\n- [`hashlib-digest-hex`](https://docs.astral.sh/ruff/rules/hashlib-digest-hex/) (`FURB181`)\n- [`list-reverse-copy`](https://docs.astral.sh/ruff/rules/list-reverse-copy/) (`FURB187`)\n- [`bad-open-mode`](https://docs.astral.sh/ruff/rules/bad-open-mode/) (`PLW1501`)\n- [`empty-comment`](https://docs.astral.sh/ruff/rules/empty-comment/) (`PLR2044`)\n- [`global-at-module-level`](https://docs.astral.sh/ruff/rules/global-at-module-level/) (`PLW0604`)\n- [`misplaced-bare-raise`](https://docs.astral.sh/ruff/rules/misplaced-bare-raise/) (`PLE0744`)\n- [`non-ascii-import-name`](https://docs.astral.sh/ruff/rules/non-ascii-import-name/) (`PLC2403`)\n- [`non-ascii-name`](https://docs.astral.sh/ruff/rules/non-ascii-name/) (`PLC2401`)\n- [`nonlocal-and-global`](https://docs.astral.sh/ruff/rules/nonlocal-and-global/) (`PLE0115`)\n- [`potential-index-error`](https://docs.astral.sh/ruff/rules/potential-index-error/) (`PLE0643`)\n- [`redeclared-assigned-name`](https://docs.astral.sh/ruff/rules/redeclared-assigned-name/) (`PLW0128`)\n- [`redefined-argument-from-local`](https://docs.astral.sh/ruff/rules/redefined-argument-from-local/) (`PLR1704`)\n- [`repeated-keyword-argument`](https://docs.astral.sh/ruff/rules/repeated-keyword-argument/) (`PLE1132`)\n- [`super-without-brackets`](https://docs.astral.sh/ruff/rules/super-without-brackets/) (`PLW0245`)\n- [`unnecessary-list-index-lookup`](https://docs.astral.sh/ruff/rules/unnecessary-list-index-lookup/) (`PLR1736`)\n- [`useless-exception-statement`](https://docs.astral.sh/ruff/rules/useless-exception-statement/) (`PLW0133`)\n- [`useless-with-lock`](https://docs.astral.sh/ruff/rules/useless-with-lock/) (`PLW2101`)\n\nThe following behaviors have been stabilized:\n\n- [`is-literal`](https://docs.astral.sh/ruff/rules/is-literal/) (`F632`) now warns for identity checks against list, set or dictionary literals\n- [`needless-bool`](https://docs.astral.sh/ruff/rules/needless-bool/) (`SIM103`) now detects `if` expressions with implicit `else` branches\n- [`module-import-not-at-top-of-file`](https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/) (`E402`) now allows `os.environ` modifications between import statements\n- [`type-comparison`](https://docs.astral.sh/ruff/rules/type-comparison/) (`E721`) now allows idioms such as `type(x) is int`\n- [`yoda-condition`](https://docs.astral.sh/ruff/rules/yoda-conditions/) (`SIM300`) now flags a wider range of expressions\n\n### Removals\n\nThe following deprecated settings have been removed:\n\n- `output-format=text`; use `output-format=concise` or `output-format=full`\n- `tab-size`; use `indent-width`\n\nThe following deprecated CLI options have been removed:\n\n- `--show-source`; use `--output-format=full`\n- `--no-show-source`; use `--output-format=concise`\n\nThe following deprecated CLI commands have been removed:\n\n- `ruff <path>`; use `ruff check <path>`\n- `ruff --clean`; use `ruff clean`\n- `ruff --generate-shell-completion`; use `ruff generate-shell-completion`\n\n### Preview features\n\n- \\[`ruff`\\] Add `assert-with-print-message` rule ([#11981](https://github.com/astral-sh/ruff/pull/11981))\n\n### CLI\n\n- Use rule name rather than message in `--statistics` ([#11697](https://github.com/astral-sh/ruff/pull/11697))\n- Use the output format `full` by default ([#12010](https://github.com/astral-sh/ruff/pull/12010))\n- Don't log syntax errors to the console ([#11902](https://github.com/astral-sh/ruff/pull/11902))\n\n### Rule changes\n\n- \\[`ruff`\\] Fix false positives if `gettext` is imported using an alias (`RUF027`) ([#12025](https://github.com/astral-sh/ruff/pull/12025))\n- \\[`numpy`\\] Update `trapz` and `in1d` deprecation (`NPY201`) ([#11948](https://github.com/astral-sh/ruff/pull/11948))\n- \\[`flake8-bandit`\\] Modify diagnostic ranges for shell-related rules ([#10667](https://github.com/astral-sh/ruff/pull/10667))\n\n### Server\n\n- Closing an untitled, unsaved notebook document no longer throws an error ([#11942](https://github.com/astral-sh/ruff/pull/11942))\n- Support the usage of tildes and environment variables in `logFile` ([#11945](https://github.com/astral-sh/ruff/pull/11945))\n- Add option to configure whether to show syntax errors ([#12059](https://github.com/astral-sh/ruff/pull/12059))\n\n### Bug fixes\n\n- \\[`pycodestyle`\\] Avoid `E203` for f-string debug expression ([#12024](https://github.com/astral-sh/ruff/pull/12024))\n- \\[`pep8-naming`\\] Match import-name ignores against both name and alias (`N812`, `N817`) ([#12033](https://github.com/astral-sh/ruff/pull/12033))\n- \\[`pyflakes`\\] Detect assignments that shadow definitions (`F811`) ([#11961](https://github.com/astral-sh/ruff/pull/11961))\n\n### Parser\n\n- Emit a syntax error for an empty type parameter list ([#12030](https://github.com/astral-sh/ruff/pull/12030))\n- Avoid consuming the newline for unterminated strings ([#12067](https://github.com/astral-sh/ruff/pull/12067))\n- Do not include the newline in the unterminated string range ([#12017](https://github.com/astral-sh/ruff/pull/12017))\n- Use the correct range to highlight line continuation errors ([#12016](https://github.com/astral-sh/ruff/pull/12016))\n- Consider 2-character EOL before line continuations ([#12035](https://github.com/astral-sh/ruff/pull/12035))\n- Consider line continuation character for re-lexing ([#12008](https://github.com/astral-sh/ruff/pull/12008))\n\n### Other changes\n\n- Upgrade the Unicode table used for measuring the line-length ([#11194](https://github.com/astral-sh/ruff/pull/11194))\n- Remove the deprecation error message for the nursery selector ([#10172](https://github.com/astral-sh/ruff/pull/10172))\n\n## 0.4.10\n\n### Parser\n\n- Implement re-lexing logic for better error recovery ([#11845](https://github.com/astral-sh/ruff/pull/11845))\n\n### Rule changes\n\n- \\[`flake8-copyright`\\] Update `CPY001` to check the first 4096 bytes instead of 1024 ([#11927](https://github.com/astral-sh/ruff/pull/11927))\n- \\[`pycodestyle`\\] Update `E999` to show all syntax errors instead of just the first one ([#11900](https://github.com/astral-sh/ruff/pull/11900))\n\n### Server\n\n- Add tracing setup guide to Helix documentation ([#11883](https://github.com/astral-sh/ruff/pull/11883))\n- Add tracing setup guide to Neovim documentation ([#11884](https://github.com/astral-sh/ruff/pull/11884))\n- Defer notebook cell deletion to avoid an error message ([#11864](https://github.com/astral-sh/ruff/pull/11864))\n\n### Security\n\n- Guard against malicious ecosystem comment artifacts ([#11879](https://github.com/astral-sh/ruff/pull/11879))\n\n## 0.4.9\n\n### Preview features\n\n- \\[`pylint`\\] Implement `consider-dict-items` (`C0206`) ([#11688](https://github.com/astral-sh/ruff/pull/11688))\n- \\[`refurb`\\] Implement `repeated-global` (`FURB154`) ([#11187](https://github.com/astral-sh/ruff/pull/11187))\n\n### Rule changes\n\n- \\[`pycodestyle`\\] Adapt fix for `E203` to work identical to `ruff format` ([#10999](https://github.com/astral-sh/ruff/pull/10999))\n\n### Formatter\n\n- Fix formatter instability for lines only consisting of zero-width characters ([#11748](https://github.com/astral-sh/ruff/pull/11748))\n\n### Server\n\n- Add supported commands in server capabilities ([#11850](https://github.com/astral-sh/ruff/pull/11850))\n- Use real file path when available in `ruff server` ([#11800](https://github.com/astral-sh/ruff/pull/11800))\n- Improve error message when a command is run on an unavailable document ([#11823](https://github.com/astral-sh/ruff/pull/11823))\n- Introduce the `ruff.printDebugInformation` command ([#11831](https://github.com/astral-sh/ruff/pull/11831))\n- Tracing system now respects log level and trace level, with options to log to a file ([#11747](https://github.com/astral-sh/ruff/pull/11747))\n\n### CLI\n\n- Handle non-printable characters in diff view ([#11687](https://github.com/astral-sh/ruff/pull/11687))\n\n### Bug fixes\n\n- \\[`refurb`\\] Avoid suggesting starmap when arguments are used outside call (`FURB140`) ([#11830](https://github.com/astral-sh/ruff/pull/11830))\n- \\[`flake8-bugbear`\\] Avoid panic in `B909` when checking large loop blocks ([#11772](https://github.com/astral-sh/ruff/pull/11772))\n- \\[`refurb`\\] Fix misbehavior of `operator.itemgetter` when getter param is a tuple (`FURB118`) ([#11774](https://github.com/astral-sh/ruff/pull/11774))\n\n## 0.4.8\n\n### Performance\n\n- Linter performance has been improved by around 10% on some microbenchmarks by refactoring the lexer and parser to maintain synchronicity between them ([#11457](https://github.com/astral-sh/ruff/pull/11457))\n\n### Preview features\n\n- \\[`flake8-bugbear`\\] Implement `return-in-generator` (`B901`) ([#11644](https://github.com/astral-sh/ruff/pull/11644))\n- \\[`flake8-pyi`\\] Implement `pep484-style-positional-only-parameter` (`PYI063`) ([#11699](https://github.com/astral-sh/ruff/pull/11699))\n- \\[`pygrep_hooks`\\] Check blanket ignores via file-level pragmas (`PGH004`) ([#11540](https://github.com/astral-sh/ruff/pull/11540))\n\n### Rule changes\n\n- \\[`pyupgrade`\\] Update `UP035` for Python 3.13 and the latest version of `typing_extensions` ([#11693](https://github.com/astral-sh/ruff/pull/11693))\n- \\[`numpy`\\] Update `NPY001` rule for NumPy 2.0 ([#11735](https://github.com/astral-sh/ruff/pull/11735))\n\n### Server\n\n- Formatting a document with syntax problems no longer spams a visible error popup ([#11745](https://github.com/astral-sh/ruff/pull/11745))\n\n### CLI\n\n- Add RDJson support for `--output-format` flag ([#11682](https://github.com/astral-sh/ruff/pull/11682))\n\n### Bug fixes\n\n- \\[`pyupgrade`\\] Write empty string in lieu of panic when fixing `UP032` ([#11696](https://github.com/astral-sh/ruff/pull/11696))\n- \\[`flake8-simplify`\\] Simplify double negatives in `SIM103` ([#11684](https://github.com/astral-sh/ruff/pull/11684))\n- Ensure the expression generator adds a newline before `type` statements ([#11720](https://github.com/astral-sh/ruff/pull/11720))\n- Respect per-file ignores for blanket and redirected noqa rules ([#11728](https://github.com/astral-sh/ruff/pull/11728))\n\n## 0.4.7\n\n### Preview features\n\n- \\[`flake8-pyi`\\] Implement `PYI064` ([#11325](https://github.com/astral-sh/ruff/pull/11325))\n- \\[`flake8-pyi`\\] Implement `PYI066` ([#11541](https://github.com/astral-sh/ruff/pull/11541))\n- \\[`flake8-pyi`\\] Implement `PYI057` ([#11486](https://github.com/astral-sh/ruff/pull/11486))\n- \\[`pyflakes`\\] Enable `F822` in `__init__.py` files by default ([#11370](https://github.com/astral-sh/ruff/pull/11370))\n\n### Formatter\n\n- Fix incorrect placement of trailing stub function comments ([#11632](https://github.com/astral-sh/ruff/pull/11632))\n\n### Server\n\n- Respect file exclusions in `ruff server` ([#11590](https://github.com/astral-sh/ruff/pull/11590))\n- Add support for documents not exist on disk ([#11588](https://github.com/astral-sh/ruff/pull/11588))\n- Add Vim and Kate setup guide for `ruff server` ([#11615](https://github.com/astral-sh/ruff/pull/11615))\n\n### Bug fixes\n\n- Avoid removing newlines between docstring headers and rST blocks ([#11609](https://github.com/astral-sh/ruff/pull/11609))\n- Infer indentation with imports when logical indent is absent ([#11608](https://github.com/astral-sh/ruff/pull/11608))\n- Use char index rather than position for indent slice ([#11645](https://github.com/astral-sh/ruff/pull/11645))\n- \\[`flake8-comprehension`\\] Strip parentheses around generators in `C400` ([#11607](https://github.com/astral-sh/ruff/pull/11607))\n- Mark `repeated-isinstance-calls` as unsafe on Python 3.10 and later ([#11622](https://github.com/astral-sh/ruff/pull/11622))\n\n## 0.4.6\n\n### Breaking changes\n\n- Use project-relative paths when calculating GitLab fingerprints ([#11532](https://github.com/astral-sh/ruff/pull/11532))\n- Bump minimum supported Windows version to Windows 10 ([#11613](https://github.com/astral-sh/ruff/pull/11613))\n\n### Preview features\n\n- \\[`flake8-async`\\] Sleep with >24 hour interval should usually sleep forever (`ASYNC116`) ([#11498](https://github.com/astral-sh/ruff/pull/11498))\n\n### Rule changes\n\n- \\[`numpy`\\] Add missing functions to NumPy 2.0 migration rule ([#11528](https://github.com/astral-sh/ruff/pull/11528))\n- \\[`mccabe`\\] Consider irrefutable pattern similar to `if .. else` for `C901` ([#11565](https://github.com/astral-sh/ruff/pull/11565))\n- Consider `match`-`case` statements for `C901`, `PLR0912`, and `PLR0915` ([#11521](https://github.com/astral-sh/ruff/pull/11521))\n- Remove empty strings when converting to f-string (`UP032`) ([#11524](https://github.com/astral-sh/ruff/pull/11524))\n- \\[`flake8-bandit`\\] `request-without-timeout` should warn for `requests.request` ([#11548](https://github.com/astral-sh/ruff/pull/11548))\n- \\[`flake8-self`\\] Ignore sunder accesses in `flake8-self` rules ([#11546](https://github.com/astral-sh/ruff/pull/11546))\n- \\[`pyupgrade`\\] Lint for `TypeAliasType` usages (`UP040`) ([#11530](https://github.com/astral-sh/ruff/pull/11530))\n\n### Server\n\n- Respect excludes in `ruff server` configuration discovery ([#11551](https://github.com/astral-sh/ruff/pull/11551))\n- Use default settings if initialization options is empty or not provided ([#11566](https://github.com/astral-sh/ruff/pull/11566))\n- `ruff server` correctly treats `.pyi` files as stub files ([#11535](https://github.com/astral-sh/ruff/pull/11535))\n- `ruff server` searches for configuration in parent directories ([#11537](https://github.com/astral-sh/ruff/pull/11537))\n- `ruff server`: An empty code action filter no longer returns notebook source actions ([#11526](https://github.com/astral-sh/ruff/pull/11526))\n\n### Bug fixes\n\n- \\[`flake8-logging-format`\\] Fix autofix title in `logging-warn` (`G010`) ([#11514](https://github.com/astral-sh/ruff/pull/11514))\n- \\[`refurb`\\] Avoid recommending `operator.itemgetter` with dependence on lambda arguments ([#11574](https://github.com/astral-sh/ruff/pull/11574))\n- \\[`flake8-simplify`\\] Avoid recommending context manager in `__enter__` implementations ([#11575](https://github.com/astral-sh/ruff/pull/11575))\n- Create intermediary directories for `--output-file` ([#11550](https://github.com/astral-sh/ruff/pull/11550))\n- Propagate reads on global variables ([#11584](https://github.com/astral-sh/ruff/pull/11584))\n- Treat all `singledispatch` arguments as runtime-required ([#11523](https://github.com/astral-sh/ruff/pull/11523))\n\n## 0.4.5\n\n### Ruff's language server is now in Beta\n\n`v0.4.5` marks the official Beta release of `ruff server`, an integrated language server built into Ruff.\n`ruff server` supports the same feature set as `ruff-lsp`, powering linting, formatting, and\ncode fixes in Ruff's editor integrations -- but with superior performance and\nno installation required. We'd love your feedback!\n\nYou can enable `ruff server` in the [VS Code extension](https://github.com/astral-sh/ruff-vscode?tab=readme-ov-file#enabling-the-rust-based-language-server) today.\n\nTo read more about this exciting milestone, check out our [blog post](https://astral.sh/blog/ruff-v0.4.5)!\n\n### Rule changes\n\n- \\[`flake8-future-annotations`\\] Reword `future-rewritable-type-annotation` (`FA100`) message ([#11381](https://github.com/astral-sh/ruff/pull/11381))\n- \\[`isort`\\] Expanded the set of standard-library modules to include `_string`, etc. ([#11374](https://github.com/astral-sh/ruff/pull/11374))\n- \\[`pycodestyle`\\] Consider soft keywords for `E27` rules ([#11446](https://github.com/astral-sh/ruff/pull/11446))\n- \\[`pyflakes`\\] Recommend adding unused import bindings to `__all__` ([#11314](https://github.com/astral-sh/ruff/pull/11314))\n- \\[`pyflakes`\\] Update documentation and deprecate `ignore_init_module_imports` ([#11436](https://github.com/astral-sh/ruff/pull/11436))\n- \\[`pyupgrade`\\] Mark quotes as unnecessary for non-evaluated annotations ([#11485](https://github.com/astral-sh/ruff/pull/11485))\n\n### Formatter\n\n- Avoid multiline quotes warning with `quote-style = preserve` ([#11490](https://github.com/astral-sh/ruff/pull/11490))\n\n### Server\n\n- Support Jupyter Notebook files ([#11206](https://github.com/astral-sh/ruff/pull/11206))\n- Support `noqa` comment code actions ([#11276](https://github.com/astral-sh/ruff/pull/11276))\n- Fix automatic configuration reloading ([#11492](https://github.com/astral-sh/ruff/pull/11492))\n- Fix several issues with configuration in Neovim and Helix ([#11497](https://github.com/astral-sh/ruff/pull/11497))\n\n### CLI\n\n- Add `--output-format` as a CLI option for `ruff config` ([#11438](https://github.com/astral-sh/ruff/pull/11438))\n\n### Bug fixes\n\n- Avoid `PLE0237` for property with setter ([#11377](https://github.com/astral-sh/ruff/pull/11377))\n- Avoid `TCH005` for `if` stmt with `elif`/`else` block ([#11376](https://github.com/astral-sh/ruff/pull/11376))\n- Avoid flagging `__future__` annotations as required for non-evaluated type annotations ([#11414](https://github.com/astral-sh/ruff/pull/11414))\n- Check for ruff executable in 'bin' directory as installed by 'pip install --target'. ([#11450](https://github.com/astral-sh/ruff/pull/11450))\n- Sort edits prior to deduplicating in quotation fix ([#11452](https://github.com/astral-sh/ruff/pull/11452))\n- Treat escaped newline as valid sequence ([#11465](https://github.com/astral-sh/ruff/pull/11465))\n- \\[`flake8-pie`\\] Preserve parentheses in `unnecessary-dict-kwargs` ([#11372](https://github.com/astral-sh/ruff/pull/11372))\n- \\[`pylint`\\] Ignore `__slots__` with dynamic values ([#11488](https://github.com/astral-sh/ruff/pull/11488))\n- \\[`pylint`\\] Remove `try` body from branch counting ([#11487](https://github.com/astral-sh/ruff/pull/11487))\n- \\[`refurb`\\] Respect operator precedence in `FURB110` ([#11464](https://github.com/astral-sh/ruff/pull/11464))\n\n### Documentation\n\n- Add `--preview` to the README ([#11395](https://github.com/astral-sh/ruff/pull/11395))\n- Add Python 3.13 to list of allowed Python versions ([#11411](https://github.com/astral-sh/ruff/pull/11411))\n- Simplify Neovim setup documentation ([#11489](https://github.com/astral-sh/ruff/pull/11489))\n- Update CONTRIBUTING.md to reflect the new parser ([#11434](https://github.com/astral-sh/ruff/pull/11434))\n- Update server documentation with new migration guide ([#11499](https://github.com/astral-sh/ruff/pull/11499))\n- \\[`pycodestyle`\\] Clarify motivation for `E713` and `E714` ([#11483](https://github.com/astral-sh/ruff/pull/11483))\n- \\[`pyflakes`\\] Update docs to describe WAI behavior (F541) ([#11362](https://github.com/astral-sh/ruff/pull/11362))\n- \\[`pylint`\\] Clearly indicate what is counted as a branch ([#11423](https://github.com/astral-sh/ruff/pull/11423))\n\n## 0.4.4\n\n### Preview features\n\n- \\[`pycodestyle`\\] Ignore end-of-line comments when determining blank line rules ([#11342](https://github.com/astral-sh/ruff/pull/11342))\n- \\[`pylint`\\] Detect `pathlib.Path.open` calls in `unspecified-encoding` (`PLW1514`) ([#11288](https://github.com/astral-sh/ruff/pull/11288))\n- \\[`flake8-pyi`\\] Implement `PYI059` (`generic-not-last-base-class`) ([#11233](https://github.com/astral-sh/ruff/pull/11233))\n- \\[`flake8-pyi`\\] Implement `PYI062` (`duplicate-literal-member`) ([#11269](https://github.com/astral-sh/ruff/pull/11269))\n\n### Rule changes\n\n- \\[`flake8-boolean-trap`\\] Allow passing booleans as positional-only arguments in code such as `set(True)` ([#11287](https://github.com/astral-sh/ruff/pull/11287))\n- \\[`flake8-bugbear`\\] Ignore enum classes in `cached-instance-method` (`B019`) ([#11312](https://github.com/astral-sh/ruff/pull/11312))\n\n### Server\n\n- Expand tildes when resolving Ruff server configuration file ([#11283](https://github.com/astral-sh/ruff/pull/11283))\n- Fix `ruff server` hanging after Neovim closes ([#11291](https://github.com/astral-sh/ruff/pull/11291))\n- Editor settings are used by default if no file-based configuration exists ([#11266](https://github.com/astral-sh/ruff/pull/11266))\n\n### Bug fixes\n\n- \\[`pylint`\\] Consider `with` statements for `too-many-branches` (`PLR0912`) ([#11321](https://github.com/astral-sh/ruff/pull/11321))\n- \\[`flake8-blind-except`, `tryceratops`\\] Respect logged and re-raised expressions in nested statements (`BLE001`, `TRY201`) ([#11301](https://github.com/astral-sh/ruff/pull/11301))\n- Recognise assignments such as `__all__ = builtins.list([\"foo\", \"bar\"])` as valid `__all__` definitions ([#11335](https://github.com/astral-sh/ruff/pull/11335))\n\n## 0.4.3\n\n### Enhancements\n\n- Add support for PEP 696 syntax ([#11120](https://github.com/astral-sh/ruff/pull/11120))\n\n### Preview features\n\n- \\[`refurb`\\] Use function range for `reimplemented-operator` diagnostics ([#11271](https://github.com/astral-sh/ruff/pull/11271))\n- \\[`refurb`\\] Ignore methods in `reimplemented-operator` (`FURB118`) ([#11270](https://github.com/astral-sh/ruff/pull/11270))\n- \\[`refurb`\\] Implement `fstring-number-format` (`FURB116`) ([#10921](https://github.com/astral-sh/ruff/pull/10921))\n- \\[`ruff`\\] Implement `redirected-noqa` (`RUF101`) ([#11052](https://github.com/astral-sh/ruff/pull/11052))\n- \\[`pyflakes`\\] Distinguish between first-party and third-party imports for fix suggestions ([#11168](https://github.com/astral-sh/ruff/pull/11168))\n\n### Rule changes\n\n- \\[`flake8-bugbear`\\] Ignore non-abstract class attributes when enforcing `B024` ([#11210](https://github.com/astral-sh/ruff/pull/11210))\n- \\[`flake8-logging`\\] Include inline instantiations when detecting loggers ([#11154](https://github.com/astral-sh/ruff/pull/11154))\n- \\[`pylint`\\] Also emit `PLR0206` for properties with variadic parameters ([#11200](https://github.com/astral-sh/ruff/pull/11200))\n- \\[`ruff`\\] Detect duplicate codes as part of `unused-noqa` (`RUF100`) ([#10850](https://github.com/astral-sh/ruff/pull/10850))\n\n### Formatter\n\n- Avoid multiline expression if format specifier is present ([#11123](https://github.com/astral-sh/ruff/pull/11123))\n\n### LSP\n\n- Write `ruff server` setup guide for Helix ([#11183](https://github.com/astral-sh/ruff/pull/11183))\n- `ruff server` no longer hangs after shutdown ([#11222](https://github.com/astral-sh/ruff/pull/11222))\n- `ruff server` reads from a configuration TOML file in the user configuration directory if no local configuration exists ([#11225](https://github.com/astral-sh/ruff/pull/11225))\n- `ruff server` respects `per-file-ignores` configuration ([#11224](https://github.com/astral-sh/ruff/pull/11224))\n- `ruff server`: Support a custom TOML configuration file ([#11140](https://github.com/astral-sh/ruff/pull/11140))\n- `ruff server`: Support setting to prioritize project configuration over editor configuration ([#11086](https://github.com/astral-sh/ruff/pull/11086))\n\n### Bug fixes\n\n- Avoid debug assertion around NFKC renames ([#11249](https://github.com/astral-sh/ruff/pull/11249))\n- \\[`pyflakes`\\] Prioritize `redefined-while-unused` over `unused-import` ([#11173](https://github.com/astral-sh/ruff/pull/11173))\n- \\[`ruff`\\] Respect `async` expressions in comprehension bodies ([#11219](https://github.com/astral-sh/ruff/pull/11219))\n- \\[`pygrep_hooks`\\] Fix `blanket-noqa` panic when last line has noqa with no newline (`PGH004`) ([#11108](https://github.com/astral-sh/ruff/pull/11108))\n- \\[`perflint`\\] Ignore list-copy recommendations for async `for` loops ([#11250](https://github.com/astral-sh/ruff/pull/11250))\n- \\[`pyflakes`\\] Improve `invalid-print-syntax` documentation ([#11171](https://github.com/astral-sh/ruff/pull/11171))\n\n### Performance\n\n- Avoid allocations for isort module names ([#11251](https://github.com/astral-sh/ruff/pull/11251))\n- Build a separate ARM wheel for macOS ([#11149](https://github.com/astral-sh/ruff/pull/11149))\n\n### Windows\n\n- Increase the minimum requirement to Windows 10.\n\n## 0.4.2\n\n### Rule changes\n\n- \\[`flake8-pyi`\\] Allow for overloaded `__exit__` and `__aexit__` definitions (`PYI036`) ([#11057](https://github.com/astral-sh/ruff/pull/11057))\n- \\[`pyupgrade`\\] Catch usages of `\"%s\" % var` and provide an unsafe fix (`UP031`) ([#11019](https://github.com/astral-sh/ruff/pull/11019))\n- \\[`refurb`\\] Implement new rule that suggests min/max over `sorted()` (`FURB192`) ([#10868](https://github.com/astral-sh/ruff/pull/10868))\n\n### Server\n\n- Fix an issue with missing diagnostics for Neovim and Helix ([#11092](https://github.com/astral-sh/ruff/pull/11092))\n- Implement hover documentation for `noqa` codes ([#11096](https://github.com/astral-sh/ruff/pull/11096))\n- Introduce common Ruff configuration options with new server settings ([#11062](https://github.com/astral-sh/ruff/pull/11062))\n\n### Bug fixes\n\n- Use `macos-12` for building release wheels to enable macOS 11 compatibility ([#11146](https://github.com/astral-sh/ruff/pull/11146))\n- \\[`flake8-blind-expect`\\] Allow raise from in `BLE001` ([#11131](https://github.com/astral-sh/ruff/pull/11131))\n- \\[`flake8-pyi`\\] Allow simple assignments to `None` in enum class scopes (`PYI026`) ([#11128](https://github.com/astral-sh/ruff/pull/11128))\n- \\[`flake8-simplify`\\] Avoid raising `SIM911` for non-`zip` attribute calls ([#11126](https://github.com/astral-sh/ruff/pull/11126))\n- \\[`refurb`\\] Avoid `operator.itemgetter` suggestion for single-item tuple ([#11095](https://github.com/astral-sh/ruff/pull/11095))\n- \\[`ruff`\\] Respect per-file-ignores for `RUF100` with no other diagnostics ([#11058](https://github.com/astral-sh/ruff/pull/11058))\n- \\[`ruff`\\] Fix async comprehension false positive (`RUF029`) ([#11070](https://github.com/astral-sh/ruff/pull/11070))\n\n### Documentation\n\n- \\[`flake8-bugbear`\\] Document explicitly disabling strict zip (`B905`) ([#11040](https://github.com/astral-sh/ruff/pull/11040))\n- \\[`flake8-type-checking`\\] Mention `lint.typing-modules` in `TCH001`, `TCH002`, and `TCH003` ([#11144](https://github.com/astral-sh/ruff/pull/11144))\n- \\[`isort`\\] Improve documentation around custom `isort` sections ([#11050](https://github.com/astral-sh/ruff/pull/11050))\n- \\[`pylint`\\] Fix documentation oversight for `invalid-X-returns` ([#11094](https://github.com/astral-sh/ruff/pull/11094))\n\n### Performance\n\n- Use `matchit` to resolve per-file settings ([#11111](https://github.com/astral-sh/ruff/pull/11111))\n\n## 0.4.1\n\n### Preview features\n\n- \\[`pylint`\\] Implement `invalid-hash-returned` (`PLE0309`) ([#10961](https://github.com/astral-sh/ruff/pull/10961))\n- \\[`pylint`\\] Implement `invalid-index-returned` (`PLE0305`) ([#10962](https://github.com/astral-sh/ruff/pull/10962))\n\n### Bug fixes\n\n- \\[`pylint`\\] Allow `NoReturn`-like functions for `__str__`, `__len__`, etc. (`PLE0307`) ([#11017](https://github.com/astral-sh/ruff/pull/11017))\n- Parser: Use empty range when there's \"gap\" in token source ([#11032](https://github.com/astral-sh/ruff/pull/11032))\n- \\[`ruff`\\] Ignore stub functions in `unused-async` (`RUF029`) ([#11026](https://github.com/astral-sh/ruff/pull/11026))\n- Parser: Expect indented case block instead of match stmt ([#11033](https://github.com/astral-sh/ruff/pull/11033))\n\n## 0.4.0\n\n### A new, hand-written parser\n\nRuff's new parser is **>2x faster**, which translates to a **20-40% speedup** for all linting and formatting invocations.\nThere's a lot to say about this exciting change, so check out the [blog post](https://astral.sh/blog/ruff-v0.4.0) for more details!\n\nSee [#10036](https://github.com/astral-sh/ruff/pull/10036) for implementation details.\n\n### A new language server in Rust\n\nWith this release, we also want to highlight our new language server. `ruff server` is a Rust-powered language\nserver that comes built-in with Ruff. It can be used with any editor that supports the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) (LSP).\nIt uses a multi-threaded, lock-free architecture inspired by `rust-analyzer` and it will open the door for a lot\nof exciting features. It’s also faster than our previous [Python-based language server](https://github.com/astral-sh/ruff-lsp)\n-- but you probably guessed that already.\n\n`ruff server` is only in alpha, but it has a lot of features that you can try out today:\n\n- Lints Python files automatically and shows quick-fixes when available\n- Formats Python files, with support for range formatting\n- Comes with commands for quickly performing actions: `ruff.applyAutofix`, `ruff.applyFormat`, and `ruff.applyOrganizeImports`\n- Supports `source.fixAll` and `source.organizeImports` source actions\n- Automatically reloads your project configuration when you change it\n\nTo setup `ruff server` with your editor, refer to the [README.md](https://github.com/astral-sh/ruff/blob/main/crates/ruff_server/README.md).\n\n### Preview features\n\n- \\[`pycodestyle`\\] Do not trigger `E3` rules on `def`s following a function/method with a dummy body ([#10704](https://github.com/astral-sh/ruff/pull/10704))\n- \\[`pylint`\\] Implement `invalid-bytes-returned` (`E0308`) ([#10959](https://github.com/astral-sh/ruff/pull/10959))\n- \\[`pylint`\\] Implement `invalid-length-returned` (`E0303`) ([#10963](https://github.com/astral-sh/ruff/pull/10963))\n- \\[`pylint`\\] Implement `self-cls-assignment` (`W0642`) ([#9267](https://github.com/astral-sh/ruff/pull/9267))\n- \\[`pylint`\\] Omit stubs from `invalid-bool` and `invalid-str-return-type` ([#11008](https://github.com/astral-sh/ruff/pull/11008))\n- \\[`ruff`\\] New rule `unused-async` (`RUF029`) to detect unneeded `async` keywords on functions ([#9966](https://github.com/astral-sh/ruff/pull/9966))\n\n### Rule changes\n\n- \\[`flake8-bandit`\\] Allow `urllib.request.urlopen` calls with static `Request` argument (`S310`) ([#10964](https://github.com/astral-sh/ruff/pull/10964))\n- \\[`flake8-bugbear`\\] Treat `raise NotImplemented`-only bodies as stub functions (`B006`) ([#10990](https://github.com/astral-sh/ruff/pull/10990))\n- \\[`flake8-slots`\\] Respect same-file `Enum` subclasses (`SLOT000`) ([#11006](https://github.com/astral-sh/ruff/pull/11006))\n- \\[`pylint`\\] Support inverted comparisons (`PLR1730`) ([#10920](https://github.com/astral-sh/ruff/pull/10920))\n\n### Linter\n\n- Improve handling of builtin symbols in linter rules ([#10919](https://github.com/astral-sh/ruff/pull/10919))\n- Improve display of rules in `--show-settings` ([#11003](https://github.com/astral-sh/ruff/pull/11003))\n- Improve inference capabilities of the `BuiltinTypeChecker` ([#10976](https://github.com/astral-sh/ruff/pull/10976))\n- Resolve classes and functions relative to script name ([#10965](https://github.com/astral-sh/ruff/pull/10965))\n- Improve performance of `RuleTable::any_enabled` ([#10971](https://github.com/astral-sh/ruff/pull/10971))\n\n### Server\n\n*This section is devoted to updates for our new language server, written in Rust.*\n\n- Enable ruff-specific source actions ([#10916](https://github.com/astral-sh/ruff/pull/10916))\n- Refreshes diagnostics for open files when file configuration is changed ([#10988](https://github.com/astral-sh/ruff/pull/10988))\n- Important errors are now shown as popups ([#10951](https://github.com/astral-sh/ruff/pull/10951))\n- Introduce settings for directly configuring the linter and formatter ([#10984](https://github.com/astral-sh/ruff/pull/10984))\n- Resolve configuration for each document individually ([#10950](https://github.com/astral-sh/ruff/pull/10950))\n- Write a setup guide for Neovim ([#10987](https://github.com/astral-sh/ruff/pull/10987))\n\n### Configuration\n\n- Add `RUFF_OUTPUT_FILE` environment variable support ([#10992](https://github.com/astral-sh/ruff/pull/10992))\n\n### Bug fixes\n\n- Avoid `non-augmented-assignment` for reversed, non-commutative operators (`PLR6104`) ([#10909](https://github.com/astral-sh/ruff/pull/10909))\n- Limit commutative non-augmented-assignments to primitive data types (`PLR6104`) ([#10912](https://github.com/astral-sh/ruff/pull/10912))\n- Respect `per-file-ignores` for `RUF100` on blanket `# noqa` ([#10908](https://github.com/astral-sh/ruff/pull/10908))\n- Consider `if` expression for parenthesized with items parsing ([#11010](https://github.com/astral-sh/ruff/pull/11010))\n- Consider binary expr for parenthesized with items parsing ([#11012](https://github.com/astral-sh/ruff/pull/11012))\n- Reset `FOR_TARGET` context for all kinds of parentheses ([#11009](https://github.com/astral-sh/ruff/pull/11009))\n\n## 0.3.7\n\n### Preview features\n\n- \\[`flake8-bugbear`\\] Implement `loop-iterator-mutation` (`B909`) ([#9578](https://github.com/astral-sh/ruff/pull/9578))\n- \\[`pylint`\\] Implement rule to prefer augmented assignment (`PLR6104`) ([#9932](https://github.com/astral-sh/ruff/pull/9932))\n\n### Bug fixes\n\n- Avoid TOCTOU errors in cache initialization ([#10884](https://github.com/astral-sh/ruff/pull/10884))\n- \\[`pylint`\\] Recode `nan-comparison` rule to `W0177` ([#10894](https://github.com/astral-sh/ruff/pull/10894))\n- \\[`pylint`\\] Reverse min-max logic in `if-stmt-min-max` ([#10890](https://github.com/astral-sh/ruff/pull/10890))\n\n## 0.3.6\n\n### Preview features\n\n- \\[`pylint`\\] Implement `bad-staticmethod-argument` (`PLW0211`) ([#10781](https://github.com/astral-sh/ruff/pull/10781))\n- \\[`pylint`\\] Implement `if-stmt-min-max` (`PLR1730`, `PLR1731`) ([#10002](https://github.com/astral-sh/ruff/pull/10002))\n- \\[`pyupgrade`\\] Replace `str,Enum` multiple inheritance with `StrEnum` `UP042` ([#10713](https://github.com/astral-sh/ruff/pull/10713))\n- \\[`refurb`\\] Implement `if-expr-instead-of-or-operator` (`FURB110`) ([#10687](https://github.com/astral-sh/ruff/pull/10687))\n- \\[`refurb`\\] Implement `int-on-sliced-str` (`FURB166`) ([#10650](https://github.com/astral-sh/ruff/pull/10650))\n- \\[`refurb`\\] Implement `write-whole-file` (`FURB103`) ([#10802](https://github.com/astral-sh/ruff/pull/10802))\n- \\[`refurb`\\] Support `itemgetter` in `reimplemented-operator` (`FURB118`) ([#10526](https://github.com/astral-sh/ruff/pull/10526))\n- \\[`flake8_comprehensions`\\] Add `sum`/`min`/`max` to unnecessary comprehension check (`C419`) ([#10759](https://github.com/astral-sh/ruff/pull/10759))\n\n### Rule changes\n\n- \\[`pydocstyle`\\] Require capitalizing docstrings where the first sentence is a single word (`D403`) ([#10776](https://github.com/astral-sh/ruff/pull/10776))\n- \\[`pycodestyle`\\] Ignore annotated lambdas in class scopes (`E731`) ([#10720](https://github.com/astral-sh/ruff/pull/10720))\n- \\[`flake8-pyi`\\] Various improvements to PYI034 ([#10807](https://github.com/astral-sh/ruff/pull/10807))\n- \\[`flake8-slots`\\] Flag subclasses of call-based `typing.NamedTuple`s as well as subclasses of `collections.namedtuple()` (`SLOT002`) ([#10808](https://github.com/astral-sh/ruff/pull/10808))\n- \\[`pyflakes`\\] Allow forward references in class bases in stub files (`F821`) ([#10779](https://github.com/astral-sh/ruff/pull/10779))\n- \\[`pygrep-hooks`\\] Improve `blanket-noqa` error message (`PGH004`) ([#10851](https://github.com/astral-sh/ruff/pull/10851))\n\n### CLI\n\n- Support `FORCE_COLOR` env var ([#10839](https://github.com/astral-sh/ruff/pull/10839))\n\n### Configuration\n\n- Support negated patterns in `[extend-]per-file-ignores` ([#10852](https://github.com/astral-sh/ruff/pull/10852))\n\n### Bug fixes\n\n- \\[`flake8-import-conventions`\\] Accept non-aliased (but correct) import in `unconventional-import-alias` (`ICN001`) ([#10729](https://github.com/astral-sh/ruff/pull/10729))\n- \\[`flake8-quotes`\\] Add semantic model flag when inside f-string replacement field ([#10766](https://github.com/astral-sh/ruff/pull/10766))\n- \\[`pep8-naming`\\] Recursively resolve `TypeDicts` for N815 violations ([#10719](https://github.com/astral-sh/ruff/pull/10719))\n- \\[`flake8-quotes`\\] Respect `Q00*` ignores in `flake8-quotes` rules ([#10728](https://github.com/astral-sh/ruff/pull/10728))\n- \\[`flake8-simplify`\\] Show negated condition in `needless-bool` diagnostics (`SIM103`) ([#10854](https://github.com/astral-sh/ruff/pull/10854))\n- \\[`ruff`\\] Use within-scope shadowed bindings in `asyncio-dangling-task` (`RUF006`) ([#10793](https://github.com/astral-sh/ruff/pull/10793))\n- \\[`flake8-pytest-style`\\] Fix single-tuple conversion in `pytest-parametrize-values-wrong-type` (`PT007`) ([#10862](https://github.com/astral-sh/ruff/pull/10862))\n- \\[`flake8-return`\\] Ignore assignments to annotated variables in `unnecessary-assign` (`RET504`) ([#10741](https://github.com/astral-sh/ruff/pull/10741))\n- \\[`refurb`\\] Do not allow any keyword arguments for `read-whole-file` in `rb` mode (`FURB101`) ([#10803](https://github.com/astral-sh/ruff/pull/10803))\n- \\[`pylint`\\] Don't recommend decorating staticmethods with `@singledispatch` (`PLE1519`, `PLE1520`) ([#10637](https://github.com/astral-sh/ruff/pull/10637))\n- \\[`pydocstyle`\\] Use section name range for all section-related docstring diagnostics ([#10740](https://github.com/astral-sh/ruff/pull/10740))\n- Respect `# noqa` directives on `__all__` openers ([#10798](https://github.com/astral-sh/ruff/pull/10798))\n\n## 0.3.5\n\n### Preview features\n\n- \\[`pylint`\\] Implement `modified-iterating-set` (`E4703`) ([#10473](https://github.com/astral-sh/ruff/pull/10473))\n- \\[`refurb`\\] Implement `for-loop-set-mutations` (`FURB142`) ([#10583](https://github.com/astral-sh/ruff/pull/10583))\n- \\[`refurb`\\] Implement `unnecessary-from-float` (`FURB164`) ([#10647](https://github.com/astral-sh/ruff/pull/10647))\n- \\[`refurb`\\] Implement `verbose-decimal-constructor` (`FURB157`) ([#10533](https://github.com/astral-sh/ruff/pull/10533))\n\n### Rule changes\n\n- \\[`flake8-comprehensions`\\] Handled special case for `C401` which also matches `C416` ([#10596](https://github.com/astral-sh/ruff/pull/10596))\n- \\[`flake8-pyi`\\] Mark `unaliased-collections-abc-set-import` fix as \"safe\" for more cases in stub files (`PYI025`) ([#10547](https://github.com/astral-sh/ruff/pull/10547))\n- \\[`numpy`\\] Add `row_stack` to NumPy 2.0 migration rule ([#10646](https://github.com/astral-sh/ruff/pull/10646))\n- \\[`pycodestyle`\\] Allow cell magics before an import (`E402`) ([#10545](https://github.com/astral-sh/ruff/pull/10545))\n- \\[`pycodestyle`\\] Avoid blank line rules for the first logical line in cell ([#10291](https://github.com/astral-sh/ruff/pull/10291))\n\n### Configuration\n\n- Respected nested namespace packages ([#10541](https://github.com/astral-sh/ruff/pull/10541))\n- \\[`flake8-boolean-trap`\\] Add setting for user defined allowed boolean trap ([#10531](https://github.com/astral-sh/ruff/pull/10531))\n\n### Bug fixes\n\n- Correctly handle references in `__all__` definitions when renaming symbols in autofixes ([#10527](https://github.com/astral-sh/ruff/pull/10527))\n- Track ranges of names inside `__all__` definitions ([#10525](https://github.com/astral-sh/ruff/pull/10525))\n- \\[`flake8-bugbear`\\] Avoid false positive for usage after `continue` (`B031`) ([#10539](https://github.com/astral-sh/ruff/pull/10539))\n- \\[`flake8-copyright`\\] Accept commas in default copyright pattern ([#9498](https://github.com/astral-sh/ruff/pull/9498))\n- \\[`flake8-datetimez`\\] Allow f-strings with `%z` for `DTZ007` ([#10651](https://github.com/astral-sh/ruff/pull/10651))\n- \\[`flake8-pytest-style`\\] Fix `PT014` autofix for last item in list ([#10532](https://github.com/astral-sh/ruff/pull/10532))\n- \\[`flake8-quotes`\\] Ignore `Q000`, `Q001` when string is inside forward ref ([#10585](https://github.com/astral-sh/ruff/pull/10585))\n- \\[`isort`\\] Always place non-relative imports after relative imports ([#10669](https://github.com/astral-sh/ruff/pull/10669))\n- \\[`isort`\\] Respect Unicode characters in import sorting ([#10529](https://github.com/astral-sh/ruff/pull/10529))\n- \\[`pyflakes`\\] Fix F821 false negatives when `from __future__ import annotations` is active (attempt 2) ([#10524](https://github.com/astral-sh/ruff/pull/10524))\n- \\[`pyflakes`\\] Make `unnecessary-lambda` an always-unsafe fix ([#10668](https://github.com/astral-sh/ruff/pull/10668))\n- \\[`pylint`\\] Fixed false-positive on the rule `PLW1641` (`eq-without-hash`) ([#10566](https://github.com/astral-sh/ruff/pull/10566))\n- \\[`ruff`\\] Fix panic in unused `# noqa` removal with multi-byte space (`RUF100`) ([#10682](https://github.com/astral-sh/ruff/pull/10682))\n\n### Documentation\n\n- Add PR title format to `CONTRIBUTING.md` ([#10665](https://github.com/astral-sh/ruff/pull/10665))\n- Fix list markup to include blank lines required ([#10591](https://github.com/astral-sh/ruff/pull/10591))\n- Put `flake8-logging` next to the other flake8 plugins in registry ([#10587](https://github.com/astral-sh/ruff/pull/10587))\n- \\[`flake8-bandit`\\] Update warning message for rule `S305` to address insecure block cipher mode use ([#10602](https://github.com/astral-sh/ruff/pull/10602))\n- \\[`flake8-bugbear`\\] Document use of anonymous assignment in `useless-expression` ([#10551](https://github.com/astral-sh/ruff/pull/10551))\n- \\[`flake8-datetimez`\\] Clarify error messages and docs for `DTZ` rules ([#10621](https://github.com/astral-sh/ruff/pull/10621))\n- \\[`pycodestyle`\\] Use same before vs. after numbers for `space-around-operator` ([#10640](https://github.com/astral-sh/ruff/pull/10640))\n- \\[`ruff`\\] Change `quadratic-list-summation` docs to use `iadd` consistently ([#10666](https://github.com/astral-sh/ruff/pull/10666))\n\n## 0.3.4\n\n### Preview features\n\n- \\[`flake8-simplify`\\] Detect implicit `else` cases in `needless-bool` (`SIM103`) ([#10414](https://github.com/astral-sh/ruff/pull/10414))\n- \\[`pylint`\\] Implement `nan-comparison` (`PLW0117`) ([#10401](https://github.com/astral-sh/ruff/pull/10401))\n- \\[`pylint`\\] Implement `nonlocal-and-global` (`E115`) ([#10407](https://github.com/astral-sh/ruff/pull/10407))\n- \\[`pylint`\\] Implement `singledispatchmethod-function` (`PLE5120`) ([#10428](https://github.com/astral-sh/ruff/pull/10428))\n- \\[`refurb`\\] Implement `list-reverse-copy` (`FURB187`) ([#10212](https://github.com/astral-sh/ruff/pull/10212))\n\n### Rule changes\n\n- \\[`flake8-pytest-style`\\] Add automatic fix for `pytest-parametrize-values-wrong-type` (`PT007`) ([#10461](https://github.com/astral-sh/ruff/pull/10461))\n- \\[`pycodestyle`\\] Allow SPDX license headers to exceed the line length (`E501`) ([#10481](https://github.com/astral-sh/ruff/pull/10481))\n\n### Formatter\n\n- Fix unstable formatting for trailing subscript end-of-line comment ([#10492](https://github.com/astral-sh/ruff/pull/10492))\n\n### Bug fixes\n\n- Avoid code comment detection in PEP 723 script tags ([#10464](https://github.com/astral-sh/ruff/pull/10464))\n- Avoid incorrect tuple transformation in single-element case (`C409`) ([#10491](https://github.com/astral-sh/ruff/pull/10491))\n- Bug fix: Prevent fully defined links [`name`](link) from being reformatted ([#10442](https://github.com/astral-sh/ruff/pull/10442))\n- Consider raw source code for `W605` ([#10480](https://github.com/astral-sh/ruff/pull/10480))\n- Docs: Link inline settings when not part of options section ([#10499](https://github.com/astral-sh/ruff/pull/10499))\n- Don't treat annotations as redefinitions in `.pyi` files ([#10512](https://github.com/astral-sh/ruff/pull/10512))\n- Fix `E231` bug: Inconsistent catch compared to pycodestyle, such as when dict nested in list ([#10469](https://github.com/astral-sh/ruff/pull/10469))\n- Fix pylint upstream categories not showing in docs ([#10441](https://github.com/astral-sh/ruff/pull/10441))\n- Add missing `Options` references to blank line docs ([#10498](https://github.com/astral-sh/ruff/pull/10498))\n- 'Revert \"F821: Fix false negatives in .py files when `from __future__ import annotations` is active (#10362)\"' ([#10513](https://github.com/astral-sh/ruff/pull/10513))\n- Apply NFKC normalization to unicode identifiers in the lexer ([#10412](https://github.com/astral-sh/ruff/pull/10412))\n- Avoid failures due to non-deterministic binding ordering ([#10478](https://github.com/astral-sh/ruff/pull/10478))\n- \\[`flake8-bugbear`\\] Allow tuples of exceptions (`B030`) ([#10437](https://github.com/astral-sh/ruff/pull/10437))\n- \\[`flake8-quotes`\\] Avoid syntax errors due to invalid quotes (`Q000, Q002`) ([#10199](https://github.com/astral-sh/ruff/pull/10199))\n\n## 0.3.3\n\n### Preview features\n\n- \\[`flake8-bandit`\\]: Implement `S610` rule ([#10316](https://github.com/astral-sh/ruff/pull/10316))\n- \\[`pycodestyle`\\] Implement `blank-line-at-end-of-file` (`W391`) ([#10243](https://github.com/astral-sh/ruff/pull/10243))\n- \\[`pycodestyle`\\] Implement `redundant-backslash` (`E502`) ([#10292](https://github.com/astral-sh/ruff/pull/10292))\n- \\[`pylint`\\] - implement `redeclared-assigned-name` (`W0128`) ([#9268](https://github.com/astral-sh/ruff/pull/9268))\n\n### Rule changes\n\n- \\[`flake8_comprehensions`\\] Handled special case for `C400` which also matches `C416` ([#10419](https://github.com/astral-sh/ruff/pull/10419))\n- \\[`flake8-bandit`\\] Implement upstream updates for `S311`, `S324` and `S605` ([#10313](https://github.com/astral-sh/ruff/pull/10313))\n- \\[`pyflakes`\\] Remove `F401` fix for `__init__` imports by default and allow opt-in to unsafe fix ([#10365](https://github.com/astral-sh/ruff/pull/10365))\n- \\[`pylint`\\] Implement `invalid-bool-return-type` (`E304`) ([#10377](https://github.com/astral-sh/ruff/pull/10377))\n- \\[`pylint`\\] Include builtin warnings in useless-exception-statement (`PLW0133`) ([#10394](https://github.com/astral-sh/ruff/pull/10394))\n\n### CLI\n\n- Add message on success to `ruff check` ([#8631](https://github.com/astral-sh/ruff/pull/8631))\n\n### Bug fixes\n\n- \\[`PIE970`\\] Allow trailing ellipsis in `typing.TYPE_CHECKING` ([#10413](https://github.com/astral-sh/ruff/pull/10413))\n- Avoid `TRIO115` if the argument is a variable ([#10376](https://github.com/astral-sh/ruff/pull/10376))\n- \\[`F811`\\] Avoid removing shadowed imports that point to different symbols ([#10387](https://github.com/astral-sh/ruff/pull/10387))\n- Fix `F821` and `F822` false positives in `.pyi` files ([#10341](https://github.com/astral-sh/ruff/pull/10341))\n- Fix `F821` false negatives in `.py` files when `from __future__ import annotations` is active ([#10362](https://github.com/astral-sh/ruff/pull/10362))\n- Fix case where `Indexer` fails to identify continuation preceded by newline #10351 ([#10354](https://github.com/astral-sh/ruff/pull/10354))\n- Sort hash maps in `Settings` display ([#10370](https://github.com/astral-sh/ruff/pull/10370))\n- Track conditional deletions in the semantic model ([#10415](https://github.com/astral-sh/ruff/pull/10415))\n- \\[`C413`\\] Wrap expressions in parentheses when negating ([#10346](https://github.com/astral-sh/ruff/pull/10346))\n- \\[`pycodestyle`\\] Do not ignore lines before the first logical line in blank lines rules. ([#10382](https://github.com/astral-sh/ruff/pull/10382))\n- \\[`pycodestyle`\\] Do not trigger `E225` and `E275` when the next token is a ')' ([#10315](https://github.com/astral-sh/ruff/pull/10315))\n- \\[`pylint`\\] Avoid false-positive slot non-assignment for `__dict__` (`PLE0237`) ([#10348](https://github.com/astral-sh/ruff/pull/10348))\n- Gate f-string struct size test for Rustc < 1.76 ([#10371](https://github.com/astral-sh/ruff/pull/10371))\n\n### Documentation\n\n- Use `ruff.toml` format in README ([#10393](https://github.com/astral-sh/ruff/pull/10393))\n- \\[`RUF008`\\] Make it clearer that a mutable default in a dataclass is only valid if it is typed as a ClassVar ([#10395](https://github.com/astral-sh/ruff/pull/10395))\n- \\[`pylint`\\] Extend docs and test in `invalid-str-return-type` (`E307`) ([#10400](https://github.com/astral-sh/ruff/pull/10400))\n- Remove `.` from `check` and `format` commands ([#10217](https://github.com/astral-sh/ruff/pull/10217))\n\n## 0.3.2\n\n### Preview features\n\n- Improve single-`with` item formatting for Python 3.8 or older ([#10276](https://github.com/astral-sh/ruff/pull/10276))\n\n### Rule changes\n\n- \\[`pyupgrade`\\] Allow fixes for f-string rule regardless of line length (`UP032`) ([#10263](https://github.com/astral-sh/ruff/pull/10263))\n- \\[`pycodestyle`\\] Include actual conditions in E712 diagnostics ([#10254](https://github.com/astral-sh/ruff/pull/10254))\n\n### Bug fixes\n\n- Fix trailing kwargs end of line comment after slash ([#10297](https://github.com/astral-sh/ruff/pull/10297))\n- Fix unstable `with` items formatting ([#10274](https://github.com/astral-sh/ruff/pull/10274))\n- Avoid repeating function calls in f-string conversions ([#10265](https://github.com/astral-sh/ruff/pull/10265))\n- Fix E203 false positive for slices in format strings ([#10280](https://github.com/astral-sh/ruff/pull/10280))\n- Fix incorrect `Parameter` range for `*args` and `**kwargs` ([#10283](https://github.com/astral-sh/ruff/pull/10283))\n- Treat `typing.Annotated` subscripts as type definitions ([#10285](https://github.com/astral-sh/ruff/pull/10285))\n\n## 0.3.1\n\n### Preview features\n\n- \\[`pycodestyle`\\] Fix E301 not triggering on decorated methods. ([#10117](https://github.com/astral-sh/ruff/pull/10117))\n- \\[`pycodestyle`\\] Respect `isort` settings in blank line rules (`E3*`) ([#10096](https://github.com/astral-sh/ruff/pull/10096))\n- \\[`pycodestyle`\\] Make blank lines in typing stub files optional (`E3*`) ([#10098](https://github.com/astral-sh/ruff/pull/10098))\n- \\[`pylint`\\] Implement `singledispatch-method` (`E1519`) ([#10140](https://github.com/astral-sh/ruff/pull/10140))\n- \\[`pylint`\\] Implement `useless-exception-statement` (`W0133`) ([#10176](https://github.com/astral-sh/ruff/pull/10176))\n\n### Rule changes\n\n- \\[`flake8-debugger`\\] Check for use of `debugpy` and `ptvsd` debug modules (#10177) ([#10194](https://github.com/astral-sh/ruff/pull/10194))\n- \\[`pyupgrade`\\] Generate diagnostic for all valid f-string conversions regardless of line length (`UP032`) ([#10238](https://github.com/astral-sh/ruff/pull/10238))\n- \\[`pep8_naming`\\] Add fixes for `N804` and `N805` ([#10215](https://github.com/astral-sh/ruff/pull/10215))\n\n### CLI\n\n- Colorize the output of `ruff format --diff` ([#10110](https://github.com/astral-sh/ruff/pull/10110))\n- Make `--config` and `--isolated` global flags ([#10150](https://github.com/astral-sh/ruff/pull/10150))\n- Correctly expand tildes and environment variables in paths passed to `--config` ([#10219](https://github.com/astral-sh/ruff/pull/10219))\n\n### Configuration\n\n- Accept a PEP 440 version specifier for `required-version` ([#10216](https://github.com/astral-sh/ruff/pull/10216))\n- Implement isort's `default-section` setting ([#10149](https://github.com/astral-sh/ruff/pull/10149))\n\n### Bug fixes\n\n- Remove trailing space from `CapWords` message ([#10220](https://github.com/astral-sh/ruff/pull/10220))\n- Respect external codes in file-level exemptions ([#10203](https://github.com/astral-sh/ruff/pull/10203))\n- \\[`flake8-raise`\\] Avoid false-positives for parens-on-raise with `future.exception()` (`RSE102`) ([#10206](https://github.com/astral-sh/ruff/pull/10206))\n- \\[`pylint`\\] Add fix for unary expressions in `PLC2801` ([#9587](https://github.com/astral-sh/ruff/pull/9587))\n- \\[`ruff`\\] Fix RUF028 not allowing `# fmt: skip` on match cases ([#10178](https://github.com/astral-sh/ruff/pull/10178))\n\n## 0.3.0\n\nThis release introduces the new Ruff formatter 2024.2 style and adds a new lint rule to\ndetect invalid formatter suppression comments.\n\n### Preview features\n\n- \\[`flake8-bandit`\\] Remove suspicious-lxml-import (`S410`) ([#10154](https://github.com/astral-sh/ruff/pull/10154))\n- \\[`pycodestyle`\\] Allow `os.environ` modifications between imports (`E402`) ([#10066](https://github.com/astral-sh/ruff/pull/10066))\n- \\[`pycodestyle`\\] Don't warn about a single whitespace character before a comma in a tuple (`E203`) ([#10094](https://github.com/astral-sh/ruff/pull/10094))\n\n### Rule changes\n\n- \\[`eradicate`\\] Detect commented out `case` statements (`ERA001`) ([#10055](https://github.com/astral-sh/ruff/pull/10055))\n- \\[`eradicate`\\] Detect single-line code for `try:`, `except:`, etc. (`ERA001`) ([#10057](https://github.com/astral-sh/ruff/pull/10057))\n- \\[`flake8-boolean-trap`\\] Allow boolean positionals in `__post_init__` ([#10027](https://github.com/astral-sh/ruff/pull/10027))\n- \\[`flake8-copyright`\\] Allow © in copyright notices ([#10065](https://github.com/astral-sh/ruff/pull/10065))\n- \\[`isort`\\]: Use one blank line after imports in typing stub files ([#9971](https://github.com/astral-sh/ruff/pull/9971))\n- \\[`pylint`\\] New Rule `dict-iter-missing-items` (`PLE1141`) ([#9845](https://github.com/astral-sh/ruff/pull/9845))\n- \\[`pylint`\\] Ignore `sys.version` and `sys.platform` (`PLR1714`) ([#10054](https://github.com/astral-sh/ruff/pull/10054))\n- \\[`pyupgrade`\\] Detect literals with unary operators (`UP018`) ([#10060](https://github.com/astral-sh/ruff/pull/10060))\n- \\[`ruff`\\] Expand rule for `list(iterable).pop(0)` idiom (`RUF015`) ([#10148](https://github.com/astral-sh/ruff/pull/10148))\n\n### Formatter\n\nThis release introduces the Ruff 2024.2 style, stabilizing the following changes:\n\n- Prefer splitting the assignment's value over the target or type annotation ([#8943](https://github.com/astral-sh/ruff/pull/8943))\n- Remove blank lines before class docstrings ([#9154](https://github.com/astral-sh/ruff/pull/9154))\n- Wrap multiple context managers in `with` parentheses when targeting Python 3.9 or newer ([#9222](https://github.com/astral-sh/ruff/pull/9222))\n- Add a blank line after nested classes with a dummy body (`...`) in typing stub files ([#9155](https://github.com/astral-sh/ruff/pull/9155))\n- Reduce vertical spacing for classes and functions with a dummy (`...`) body ([#7440](https://github.com/astral-sh/ruff/issues/7440), [#9240](https://github.com/astral-sh/ruff/pull/9240))\n- Add a blank line after the module docstring ([#8283](https://github.com/astral-sh/ruff/pull/8283))\n- Parenthesize long type hints in assignments ([#9210](https://github.com/astral-sh/ruff/pull/9210))\n- Preserve indent for single multiline-string call-expressions ([#9673](https://github.com/astral-sh/ruff/pull/9637))\n- Normalize hex escape and unicode escape sequences ([#9280](https://github.com/astral-sh/ruff/pull/9280))\n- Format module docstrings ([#9725](https://github.com/astral-sh/ruff/pull/9725))\n\n### CLI\n\n- Explicitly disallow `extend` as part of a `--config` flag ([#10135](https://github.com/astral-sh/ruff/pull/10135))\n- Remove `build` from the default exclusion list ([#10093](https://github.com/astral-sh/ruff/pull/10093))\n- Deprecate `ruff <path>`, `ruff --explain`, `ruff --clean`, and `ruff --generate-shell-completion` in favor of `ruff check <path>`, `ruff rule`, `ruff clean`, and `ruff generate-shell-completion` ([#10169](https://github.com/astral-sh/ruff/pull/10169))\n- Remove the deprecated CLI option `--format` from `ruff rule` and `ruff linter` ([#10170](https://github.com/astral-sh/ruff/pull/10170))\n\n### Bug fixes\n\n- \\[`flake8-bugbear`\\] Avoid adding default initializers to stubs (`B006`) ([#10152](https://github.com/astral-sh/ruff/pull/10152))\n- \\[`flake8-type-checking`\\] Respect runtime-required decorators for function signatures ([#10091](https://github.com/astral-sh/ruff/pull/10091))\n- \\[`pycodestyle`\\] Mark fixes overlapping with a multiline string as unsafe (`W293`) ([#10049](https://github.com/astral-sh/ruff/pull/10049))\n- \\[`pydocstyle`\\] Trim whitespace when removing blank lines after section (`D413`) ([#10162](https://github.com/astral-sh/ruff/pull/10162))\n- \\[`pylint`\\] Delete entire statement, including semicolons (`PLR0203`) ([#10074](https://github.com/astral-sh/ruff/pull/10074))\n- \\[`ruff`\\] Avoid f-string false positives in `gettext` calls (`RUF027`) ([#10118](https://github.com/astral-sh/ruff/pull/10118))\n- Fix `ruff` crashing on PowerPC systems because of too small page size ([#10080](https://github.com/astral-sh/ruff/pull/10080))\n\n### Performance\n\n- Add cold attribute to less likely printer queue branches in the formatter ([#10121](https://github.com/astral-sh/ruff/pull/10121))\n- Skip unnecessary string normalization in the formatter ([#10116](https://github.com/astral-sh/ruff/pull/10116))\n\n### Documentation\n\n- Remove \"Beta\" Label from formatter documentation ([#10144](https://github.com/astral-sh/ruff/pull/10144))\n- `line-length` option: fix link to `pycodestyle.max-line-length` ([#10136](https://github.com/astral-sh/ruff/pull/10136))\n\n## 0.2.2\n\nHighlights include:\n\n- Initial support formatting f-strings (in `--preview`).\n- Support for overriding arbitrary configuration options via the CLI through an expanded `--config` argument (e.g., `--config \"lint.isort.combine-as-imports=false\"`).\n- Significant performance improvements in Ruff's lexer, parser, and lint rules.\n\n### Preview features\n\n- Implement minimal f-string formatting ([#9642](https://github.com/astral-sh/ruff/pull/9642))\n- \\[`pycodestyle`\\] Add blank line(s) rules (`E301`, `E302`, `E303`, `E304`, `E305`, `E306`) ([#9266](https://github.com/astral-sh/ruff/pull/9266))\n- \\[`refurb`\\] Implement `readlines_in_for` (`FURB129`) ([#9880](https://github.com/astral-sh/ruff/pull/9880))\n\n### Rule changes\n\n- \\[`ruff`\\] Ensure closing parentheses for multiline sequences are always on their own line (`RUF022`, `RUF023`) ([#9793](https://github.com/astral-sh/ruff/pull/9793))\n- \\[`numpy`\\] Add missing deprecation violations (`NPY002`) ([#9862](https://github.com/astral-sh/ruff/pull/9862))\n- \\[`flake8-bandit`\\] Detect `mark_safe` usages in decorators ([#9887](https://github.com/astral-sh/ruff/pull/9887))\n- \\[`ruff`\\] Expand `asyncio-dangling-task` (`RUF006`) to include `new_event_loop` ([#9976](https://github.com/astral-sh/ruff/pull/9976))\n- \\[`flake8-pyi`\\] Ignore 'unused' private type dicts in class scopes ([#9952](https://github.com/astral-sh/ruff/pull/9952))\n\n### Formatter\n\n- Docstring formatting: Preserve tab indentation when using `indent-style=tabs` ([#9915](https://github.com/astral-sh/ruff/pull/9915))\n- Disable top-level docstring formatting for notebooks ([#9957](https://github.com/astral-sh/ruff/pull/9957))\n- Stabilize quote-style's `preserve` mode ([#9922](https://github.com/astral-sh/ruff/pull/9922))\n\n### CLI\n\n- Allow arbitrary configuration options to be overridden via the CLI ([#9599](https://github.com/astral-sh/ruff/pull/9599))\n\n### Bug fixes\n\n- Make `show-settings` filters directory-agnostic ([#9866](https://github.com/astral-sh/ruff/pull/9866))\n- Respect duplicates when rewriting type aliases ([#9905](https://github.com/astral-sh/ruff/pull/9905))\n- Respect tuple assignments in typing analyzer ([#9969](https://github.com/astral-sh/ruff/pull/9969))\n- Use atomic write when persisting cache ([#9981](https://github.com/astral-sh/ruff/pull/9981))\n- Use non-parenthesized range for `DebugText` ([#9953](https://github.com/astral-sh/ruff/pull/9953))\n- \\[`flake8-simplify`\\] Avoid false positive with `async` for loops (`SIM113`) ([#9996](https://github.com/astral-sh/ruff/pull/9996))\n- \\[`flake8-trio`\\] Respect `async with` in `timeout-without-await` ([#9859](https://github.com/astral-sh/ruff/pull/9859))\n- \\[`perflint`\\] Catch a wider range of mutations in `PERF101` ([#9955](https://github.com/astral-sh/ruff/pull/9955))\n- \\[`pycodestyle`\\] Fix `E30X` panics on blank lines with trailing white spaces ([#9907](https://github.com/astral-sh/ruff/pull/9907))\n- \\[`pydocstyle`\\] Allow using `parameters` as a subsection header (`D405`) ([#9894](https://github.com/astral-sh/ruff/pull/9894))\n- \\[`pydocstyle`\\] Fix blank-line docstring rules for module-level docstrings ([#9878](https://github.com/astral-sh/ruff/pull/9878))\n- \\[`pylint`\\] Accept 0.0 and 1.0 as common magic values (`PLR2004`) ([#9964](https://github.com/astral-sh/ruff/pull/9964))\n- \\[`pylint`\\] Avoid suggesting set rewrites for non-hashable types ([#9956](https://github.com/astral-sh/ruff/pull/9956))\n- \\[`ruff`\\] Avoid false negatives with string literals inside of method calls (`RUF027`) ([#9865](https://github.com/astral-sh/ruff/pull/9865))\n- \\[`ruff`\\] Fix panic on with f-string detection (`RUF027`) ([#9990](https://github.com/astral-sh/ruff/pull/9990))\n- \\[`ruff`\\] Ignore builtins when detecting missing f-strings ([#9849](https://github.com/astral-sh/ruff/pull/9849))\n\n### Performance\n\n- Use `memchr` for string lexing ([#9888](https://github.com/astral-sh/ruff/pull/9888))\n- Use `memchr` for tab-indentation detection ([#9853](https://github.com/astral-sh/ruff/pull/9853))\n- Reduce `Result<Tok, LexicalError>` size by using `Box<str>` instead of `String` ([#9885](https://github.com/astral-sh/ruff/pull/9885))\n- Reduce size of `Expr` from 80 to 64 bytes ([#9900](https://github.com/astral-sh/ruff/pull/9900))\n- Improve trailing comma rule performance ([#9867](https://github.com/astral-sh/ruff/pull/9867))\n- Remove unnecessary string cloning from the parser ([#9884](https://github.com/astral-sh/ruff/pull/9884))\n\n## 0.2.1\n\nThis release includes support for range formatting (i.e., the ability to format specific lines\nwithin a source file).\n\n### Preview features\n\n- \\[`refurb`\\] Implement `missing-f-string-syntax` (`RUF027`) ([#9728](https://github.com/astral-sh/ruff/pull/9728))\n- Format module-level docstrings ([#9725](https://github.com/astral-sh/ruff/pull/9725))\n\n### Formatter\n\n- Add `--range` option to `ruff format` ([#9733](https://github.com/astral-sh/ruff/pull/9733))\n- Don't trim last empty line in docstrings ([#9813](https://github.com/astral-sh/ruff/pull/9813))\n\n### Bug fixes\n\n- Skip empty lines when determining base indentation ([#9795](https://github.com/astral-sh/ruff/pull/9795))\n- Drop `__get__` and `__set__` from `unnecessary-dunder-call` ([#9791](https://github.com/astral-sh/ruff/pull/9791))\n- Respect generic `Protocol` in ellipsis removal ([#9841](https://github.com/astral-sh/ruff/pull/9841))\n- Revert \"Use publicly available Apple Silicon runners (#9726)\" ([#9834](https://github.com/astral-sh/ruff/pull/9834))\n\n### Performance\n\n- Skip LibCST parsing for standard dedent adjustments ([#9769](https://github.com/astral-sh/ruff/pull/9769))\n- Remove CST-based fixer for `C408` ([#9822](https://github.com/astral-sh/ruff/pull/9822))\n- Add our own ignored-names abstractions ([#9802](https://github.com/astral-sh/ruff/pull/9802))\n- Remove CST-based fixers for `C400`, `C401`, `C410`, and `C418` ([#9819](https://github.com/astral-sh/ruff/pull/9819))\n- Use `AhoCorasick` to speed up quote match ([#9773](https://github.com/astral-sh/ruff/pull/9773))\n- Remove CST-based fixers for `C405` and `C409` ([#9821](https://github.com/astral-sh/ruff/pull/9821))\n- Add fast-path for comment detection ([#9808](https://github.com/astral-sh/ruff/pull/9808))\n- Invert order of checks in `zero-sleep-call` ([#9766](https://github.com/astral-sh/ruff/pull/9766))\n- Short-circuit typing matches based on imports ([#9800](https://github.com/astral-sh/ruff/pull/9800))\n- Run dunder method rule on methods directly ([#9815](https://github.com/astral-sh/ruff/pull/9815))\n- Track top-level module imports in the semantic model ([#9775](https://github.com/astral-sh/ruff/pull/9775))\n- Slight speed-up for lowercase and uppercase identifier checks ([#9798](https://github.com/astral-sh/ruff/pull/9798))\n- Remove LibCST-based fixer for `C403` ([#9818](https://github.com/astral-sh/ruff/pull/9818))\n\n### Documentation\n\n- Update `max-pos-args` example to `max-positional-args` ([#9797](https://github.com/astral-sh/ruff/pull/9797))\n- Fixed example code in `weak_cryptographic_key.rs` ([#9774](https://github.com/astral-sh/ruff/pull/9774))\n- Fix references to deprecated `ANN` rules in changelog ([#9771](https://github.com/astral-sh/ruff/pull/9771))\n- Fix default for `max-positional-args` ([#9838](https://github.com/astral-sh/ruff/pull/9838))\n\n## 0.2.0\n\n### Breaking changes\n\n- The `NURSERY` selector cannot be used anymore\n- Legacy selection of nursery rules by exact codes is no longer allowed without preview enabled\n\nSee also, the \"Remapped rules\" section which may result in disabled rules.\n\n### Deprecations\n\nThe following rules are now deprecated:\n\n- [`missing-type-self`](https://docs.astral.sh/ruff/rules/missing-type-self/) (`ANN101`)\n- [`missing-type-cls`](https://docs.astral.sh/ruff/rules/missing-type-cls/) (`ANN102`)\n\nThe following command line options are now deprecated:\n\n- `--show-source`; use `--output-format full` instead\n- `--no-show-source`; use `--output-format concise` instead\n- `--output-format text`; use `full` or `concise` instead\n\nThe following settings have moved and the previous name is deprecated:\n\n- `ruff.allowed-confusables` → [`ruff.lint.allowed-confusables`](https://docs.astral.sh//ruff/settings/#lint_allowed-confusables)\n- `ruff.dummy-variable-rgx` → [`ruff.lint.dummy-variable-rgx`](https://docs.astral.sh//ruff/settings/#lint_dummy-variable-rgx)\n- `ruff.explicit-preview-rules` → [`ruff.lint.explicit-preview-rules`](https://docs.astral.sh//ruff/settings/#lint_explicit-preview-rules)\n- `ruff.extend-fixable` → [`ruff.lint.extend-fixable`](https://docs.astral.sh//ruff/settings/#lint_extend-fixable)\n- `ruff.extend-ignore` → [`ruff.lint.extend-ignore`](https://docs.astral.sh//ruff/settings/#lint_extend-ignore)\n- `ruff.extend-per-file-ignores` → [`ruff.lint.extend-per-file-ignores`](https://docs.astral.sh//ruff/settings/#lint_extend-per-file-ignores)\n- `ruff.extend-safe-fixes` → [`ruff.lint.extend-safe-fixes`](https://docs.astral.sh//ruff/settings/#lint_extend-safe-fixes)\n- `ruff.extend-select` → [`ruff.lint.extend-select`](https://docs.astral.sh//ruff/settings/#lint_extend-select)\n- `ruff.extend-unfixable` → [`ruff.lint.extend-unfixable`](https://docs.astral.sh//ruff/settings/#lint_extend-unfixable)\n- `ruff.extend-unsafe-fixes` → [`ruff.lint.extend-unsafe-fixes`](https://docs.astral.sh//ruff/settings/#lint_extend-unsafe-fixes)\n- `ruff.external` → [`ruff.lint.external`](https://docs.astral.sh//ruff/settings/#lint_external)\n- `ruff.fixable` → [`ruff.lint.fixable`](https://docs.astral.sh//ruff/settings/#lint_fixable)\n- `ruff.flake8-annotations` → [`ruff.lint.flake8-annotations`](https://docs.astral.sh//ruff/settings/#lint_flake8-annotations)\n- `ruff.flake8-bandit` → [`ruff.lint.flake8-bandit`](https://docs.astral.sh//ruff/settings/#lint_flake8-bandit)\n- `ruff.flake8-bugbear` → [`ruff.lint.flake8-bugbear`](https://docs.astral.sh//ruff/settings/#lint_flake8-bugbear)\n- `ruff.flake8-builtins` → [`ruff.lint.flake8-builtins`](https://docs.astral.sh//ruff/settings/#lint_flake8-builtins)\n- `ruff.flake8-comprehensions` → [`ruff.lint.flake8-comprehensions`](https://docs.astral.sh//ruff/settings/#lint_flake8-comprehensions)\n- `ruff.flake8-copyright` → [`ruff.lint.flake8-copyright`](https://docs.astral.sh//ruff/settings/#lint_flake8-copyright)\n- `ruff.flake8-errmsg` → [`ruff.lint.flake8-errmsg`](https://docs.astral.sh//ruff/settings/#lint_flake8-errmsg)\n- `ruff.flake8-gettext` → [`ruff.lint.flake8-gettext`](https://docs.astral.sh//ruff/settings/#lint_flake8-gettext)\n- `ruff.flake8-implicit-str-concat` → [`ruff.lint.flake8-implicit-str-concat`](https://docs.astral.sh//ruff/settings/#lint_flake8-implicit-str-concat)\n- `ruff.flake8-import-conventions` → [`ruff.lint.flake8-import-conventions`](https://docs.astral.sh//ruff/settings/#lint_flake8-import-conventions)\n- `ruff.flake8-pytest-style` → [`ruff.lint.flake8-pytest-style`](https://docs.astral.sh//ruff/settings/#lint_flake8-pytest-style)\n- `ruff.flake8-quotes` → [`ruff.lint.flake8-quotes`](https://docs.astral.sh//ruff/settings/#lint_flake8-quotes)\n- `ruff.flake8-self` → [`ruff.lint.flake8-self`](https://docs.astral.sh//ruff/settings/#lint_flake8-self)\n- `ruff.flake8-tidy-imports` → [`ruff.lint.flake8-tidy-imports`](https://docs.astral.sh//ruff/settings/#lint_flake8-tidy-imports)\n- `ruff.flake8-type-checking` → [`ruff.lint.flake8-type-checking`](https://docs.astral.sh//ruff/settings/#lint_flake8-type-checking)\n- `ruff.flake8-unused-arguments` → [`ruff.lint.flake8-unused-arguments`](https://docs.astral.sh//ruff/settings/#lint_flake8-unused-arguments)\n- `ruff.ignore` → [`ruff.lint.ignore`](https://docs.astral.sh//ruff/settings/#lint_ignore)\n- `ruff.ignore-init-module-imports` → [`ruff.lint.ignore-init-module-imports`](https://docs.astral.sh//ruff/settings/#lint_ignore-init-module-imports)\n- `ruff.isort` → [`ruff.lint.isort`](https://docs.astral.sh//ruff/settings/#lint_isort)\n- `ruff.logger-objects` → [`ruff.lint.logger-objects`](https://docs.astral.sh//ruff/settings/#lint_logger-objects)\n- `ruff.mccabe` → [`ruff.lint.mccabe`](https://docs.astral.sh//ruff/settings/#lint_mccabe)\n- `ruff.pep8-naming` → [`ruff.lint.pep8-naming`](https://docs.astral.sh//ruff/settings/#lint_pep8-naming)\n- `ruff.per-file-ignores` → [`ruff.lint.per-file-ignores`](https://docs.astral.sh//ruff/settings/#lint_per-file-ignores)\n- `ruff.pycodestyle` → [`ruff.lint.pycodestyle`](https://docs.astral.sh//ruff/settings/#lint_pycodestyle)\n- `ruff.pydocstyle` → [`ruff.lint.pydocstyle`](https://docs.astral.sh//ruff/settings/#lint_pydocstyle)\n- `ruff.pyflakes` → [`ruff.lint.pyflakes`](https://docs.astral.sh//ruff/settings/#lint_pyflakes)\n- `ruff.pylint` → [`ruff.lint.pylint`](https://docs.astral.sh//ruff/settings/#lint_pylint)\n- `ruff.pyupgrade` → [`ruff.lint.pyupgrade`](https://docs.astral.sh//ruff/settings/#lint_pyupgrade)\n- `ruff.select` → [`ruff.lint.select`](https://docs.astral.sh//ruff/settings/#lint_select)\n- `ruff.task-tags` → [`ruff.lint.task-tags`](https://docs.astral.sh//ruff/settings/#lint_task-tags)\n- `ruff.typing-modules` → [`ruff.lint.typing-modules`](https://docs.astral.sh//ruff/settings/#lint_typing-modules)\n- `ruff.unfixable` → [`ruff.lint.unfixable`](https://docs.astral.sh//ruff/settings/#lint_unfixable)\n\n### Remapped rules\n\nThe following rules have been remapped to new codes:\n\n- [`raise-without-from-inside-except`](https://docs.astral.sh/ruff/rules/raise-without-from-inside-except/): `TRY200` to `B904`\n- [`suspicious-eval-usage`](https://docs.astral.sh/ruff/rules/suspicious-eval-usage/): `PGH001` to `S307`\n- [`logging-warn`](https://docs.astral.sh/ruff/rules/logging-warn/): `PGH002` to `G010`\n- [`static-key-dict-comprehension`](https://docs.astral.sh/ruff/rules/static-key-dict-comprehension): `RUF011` to `B035`\n- [`runtime-string-union`](https://docs.astral.sh/ruff/rules/runtime-string-union): `TCH006` to `TCH010`\n\n### Stabilizations\n\nThe following rules have been stabilized and are no longer in preview:\n\n- [`trio-timeout-without-await`](https://docs.astral.sh/ruff/rules/trio-timeout-without-await) (`TRIO100`)\n- [`trio-sync-call`](https://docs.astral.sh/ruff/rules/trio-sync-call) (`TRIO105`)\n- [`trio-async-function-with-timeout`](https://docs.astral.sh/ruff/rules/trio-async-function-with-timeout) (`TRIO109`)\n- [`trio-unneeded-sleep`](https://docs.astral.sh/ruff/rules/trio-unneeded-sleep) (`TRIO110`)\n- [`trio-zero-sleep-call`](https://docs.astral.sh/ruff/rules/trio-zero-sleep-call) (`TRIO115`)\n- [`unnecessary-escaped-quote`](https://docs.astral.sh/ruff/rules/unnecessary-escaped-quote) (`Q004`)\n- [`enumerate-for-loop`](https://docs.astral.sh/ruff/rules/enumerate-for-loop) (`SIM113`)\n- [`zip-dict-keys-and-values`](https://docs.astral.sh/ruff/rules/zip-dict-keys-and-values) (`SIM911`)\n- [`timeout-error-alias`](https://docs.astral.sh/ruff/rules/timeout-error-alias) (`UP041`)\n- [`flask-debug-true`](https://docs.astral.sh/ruff/rules/flask-debug-true) (`S201`)\n- [`tarfile-unsafe-members`](https://docs.astral.sh/ruff/rules/tarfile-unsafe-members) (`S202`)\n- [`ssl-insecure-version`](https://docs.astral.sh/ruff/rules/ssl-insecure-version) (`S502`)\n- [`ssl-with-bad-defaults`](https://docs.astral.sh/ruff/rules/ssl-with-bad-defaults) (`S503`)\n- [`ssl-with-no-version`](https://docs.astral.sh/ruff/rules/ssl-with-no-version) (`S504`)\n- [`weak-cryptographic-key`](https://docs.astral.sh/ruff/rules/weak-cryptographic-key) (`S505`)\n- [`ssh-no-host-key-verification`](https://docs.astral.sh/ruff/rules/ssh-no-host-key-verification) (`S507`)\n- [`django-raw-sql`](https://docs.astral.sh/ruff/rules/django-raw-sql) (`S611`)\n- [`mako-templates`](https://docs.astral.sh/ruff/rules/mako-templates) (`S702`)\n- [`generator-return-from-iter-method`](https://docs.astral.sh/ruff/rules/generator-return-from-iter-method) (`PYI058`)\n- [`runtime-string-union`](https://docs.astral.sh/ruff/rules/runtime-string-union) (`TCH006`)\n- [`numpy2-deprecation`](https://docs.astral.sh/ruff/rules/numpy2-deprecation) (`NPY201`)\n- [`quadratic-list-summation`](https://docs.astral.sh/ruff/rules/quadratic-list-summation) (`RUF017`)\n- [`assignment-in-assert`](https://docs.astral.sh/ruff/rules/assignment-in-assert) (`RUF018`)\n- [`unnecessary-key-check`](https://docs.astral.sh/ruff/rules/unnecessary-key-check) (`RUF019`)\n- [`never-union`](https://docs.astral.sh/ruff/rules/never-union) (`RUF020`)\n- [`direct-logger-instantiation`](https://docs.astral.sh/ruff/rules/direct-logger-instantiation) (`LOG001`)\n- [`invalid-get-logger-argument`](https://docs.astral.sh/ruff/rules/invalid-get-logger-argument) (`LOG002`)\n- [`exception-without-exc-info`](https://docs.astral.sh/ruff/rules/exception-without-exc-info) (`LOG007`)\n- [`undocumented-warn`](https://docs.astral.sh/ruff/rules/undocumented-warn) (`LOG009`)\n\nFixes for the following rules have been stabilized and are now available without preview:\n\n- [`triple-single-quotes`](https://docs.astral.sh/ruff/rules/triple-single-quotes) (`D300`)\n- [`non-pep604-annotation`](https://docs.astral.sh/ruff/rules/non-pep604-annotation) (`UP007`)\n- [`dict-get-with-none-default`](https://docs.astral.sh/ruff/rules/dict-get-with-none-default) (`SIM910`)\n- [`in-dict-keys`](https://docs.astral.sh/ruff/rules/in-dict-keys) (`SIM118`)\n- [`collapsible-else-if`](https://docs.astral.sh/ruff/rules/collapsible-else-if) (`PLR5501`)\n- [`if-with-same-arms`](https://docs.astral.sh/ruff/rules/if-with-same-arms) (`SIM114`)\n- [`useless-else-on-loop`](https://docs.astral.sh/ruff/rules/useless-else-on-loop) (`PLW0120`)\n- [`unnecessary-literal-union`](https://docs.astral.sh/ruff/rules/unnecessary-literal-union) (`PYI030`)\n- [`unnecessary-spread`](https://docs.astral.sh/ruff/rules/unnecessary-spread) (`PIE800`)\n- [`error-instead-of-exception`](https://docs.astral.sh/ruff/rules/error-instead-of-exception) (`TRY400`)\n- [`redefined-while-unused`](https://docs.astral.sh/ruff/rules/redefined-while-unused) (`F811`)\n- [`duplicate-value`](https://docs.astral.sh/ruff/rules/duplicate-value) (`B033`)\n- [`multiple-imports-on-one-line`](https://docs.astral.sh/ruff/rules/multiple-imports-on-one-line) (`E401`)\n- [`non-pep585-annotation`](https://docs.astral.sh/ruff/rules/non-pep585-annotation) (`UP006`)\n\nFixes for the following rules have been promoted from unsafe to safe:\n\n- [`unaliased-collections-abc-set-import`](https://docs.astral.sh/ruff/rules/unaliased-collections-abc-set-import) (`PYI025`)\n\nThe following behaviors have been stabilized:\n\n- [`module-import-not-at-top-of-file`](https://docs.astral.sh/ruff/rules/module-import-not-at-top-of-file/) (`E402`) allows `sys.path` modifications between imports\n- [`reimplemented-container-builtin`](https://docs.astral.sh/ruff/rules/reimplemented-container-builtin/) (`PIE807`) includes lambdas that can be replaced with `dict`\n- [`unnecessary-placeholder`](https://docs.astral.sh/ruff/rules/unnecessary-placeholder/) (`PIE790`) applies to unnecessary ellipses (`...`)\n- [`if-else-block-instead-of-dict-get`](https://docs.astral.sh/ruff/rules/if-else-block-instead-of-dict-get/) (`SIM401`) applies to `if-else` expressions\n\n### Preview features\n\n- \\[`refurb`\\] Implement `metaclass_abcmeta` (`FURB180`) ([#9658](https://github.com/astral-sh/ruff/pull/9658))\n- Implement `blank_line_after_nested_stub_class` preview style ([#9155](https://github.com/astral-sh/ruff/pull/9155))\n- The preview rule [`and-or-ternary`](https://docs.astral.sh/ruff/rules/and-or-ternary) (`PLR1706`) was removed\n\n### Bug fixes\n\n- \\[`flake8-async`\\] Take `pathlib.Path` into account when analyzing async functions ([#9703](https://github.com/astral-sh/ruff/pull/9703))\n- \\[`flake8-return`\\] - fix indentation syntax error (`RET505`) ([#9705](https://github.com/astral-sh/ruff/pull/9705))\n- Detect multi-statement lines in else removal ([#9748](https://github.com/astral-sh/ruff/pull/9748))\n- `RUF022`, `RUF023`: never add two trailing commas to the end of a sequence ([#9698](https://github.com/astral-sh/ruff/pull/9698))\n- `RUF023`: Don't sort `__match_args__`, only `__slots__` ([#9724](https://github.com/astral-sh/ruff/pull/9724))\n- \\[`flake8-simplify`\\] - Fix syntax error in autofix (`SIM114`) ([#9704](https://github.com/astral-sh/ruff/pull/9704))\n- \\[`pylint`\\] Show verbatim constant in `magic-value-comparison` (`PLR2004`) ([#9694](https://github.com/astral-sh/ruff/pull/9694))\n- Removing trailing whitespace inside multiline strings is unsafe ([#9744](https://github.com/astral-sh/ruff/pull/9744))\n- Support `IfExp` with dual string arms in `invalid-envvar-default` ([#9734](https://github.com/astral-sh/ruff/pull/9734))\n- \\[`pylint`\\] Add `__mro_entries__` to known dunder methods (`PLW3201`) ([#9706](https://github.com/astral-sh/ruff/pull/9706))\n\n### Documentation\n\n- Removed rules are now retained in the documentation ([#9691](https://github.com/astral-sh/ruff/pull/9691))\n- Deprecated rules are now indicated in the documentation ([#9689](https://github.com/astral-sh/ruff/pull/9689))\n\n## 0.1.15\n\n### Preview features\n\n- Error when `NURSERY` selector is used with `--preview` ([#9682](https://github.com/astral-sh/ruff/pull/9682))\n- Preserve indentation around multiline strings in formatter ([#9637](https://github.com/astral-sh/ruff/pull/9637))\n- \\[`flake8-return`\\] Add fixes for all rules (`RET505`, `RET506`, `RET507`, `RET508`) ([#9595](https://github.com/astral-sh/ruff/pull/9595))\n- \\[`flake8-simplify`\\] Add fix for `if-with-same-arms` (`SIM114`) ([#9591](https://github.com/astral-sh/ruff/pull/9591))\n- \\[`pycodestyle`\\] Add fix for `multiple-imports-on-one-line` (`E401`) ([#9518](https://github.com/astral-sh/ruff/pull/9518))\n- \\[`pylint`\\] Add fix for `collapsible-else-if` (`PLR5501`) ([#9594](https://github.com/astral-sh/ruff/pull/9594))\n- \\[`pylint`\\] Add fix for `useless-else-on-loop` (`PLW0120`) ([#9590](https://github.com/astral-sh/ruff/pull/9590))\n- \\[`pylint`\\] Implement `assigning-non-slot` (`E0237`) ([#9623](https://github.com/astral-sh/ruff/pull/9623))\n- \\[`pylint`\\] Implement `potential-index-error` (`PLE0643`) ([#9545](https://github.com/astral-sh/ruff/pull/9545))\n- \\[`pylint`\\] Implement `too-many-nested-blocks` (`PLR1702`) ([#9172](https://github.com/astral-sh/ruff/pull/9172))\n- \\[`ruff`\\] Add rule to sort `__slots__` and `__match_args__` ([#9564](https://github.com/astral-sh/ruff/pull/9564))\n- \\[`ruff`\\] Detect unnecessary `dict` comprehensions for iterables (`RUF025`) ([#9613](https://github.com/astral-sh/ruff/pull/9613))\n- \\[`ruff`\\] Guard against use of `default_factory` as a keyword argument (`RUF026`) ([#9651](https://github.com/astral-sh/ruff/pull/9651))\n- \\[`ruff`\\] Implement `mutable-fromkeys-value` (`RUF024`) ([#9597](https://github.com/astral-sh/ruff/pull/9597))\n\n### CLI\n\n- Enable auto-wrapping of `--help` output ([#9633](https://github.com/astral-sh/ruff/pull/9633))\n\n### Bug fixes\n\n- Avoid rendering display-only rules as fixable ([#9649](https://github.com/astral-sh/ruff/pull/9649))\n- Detect automagic-like assignments in notebooks ([#9653](https://github.com/astral-sh/ruff/pull/9653))\n- Generate custom JSON schema for dynamic setting ([#9632](https://github.com/astral-sh/ruff/pull/9632))\n- \\[`flake8-no-pep420`\\] Include global `--config` when determining namespace packages ([#9603](https://github.com/astral-sh/ruff/pull/9603))\n- \\[`flake8-pie`\\] Omit bound tuples passed to `.startswith` or `.endswith` ([#9661](https://github.com/astral-sh/ruff/pull/9661))\n- \\[`flake8-return`\\] Avoid panic when fixing inlined else blocks ([#9657](https://github.com/astral-sh/ruff/pull/9657))\n- \\[`flake8-return`\\] Consider exception suppression in unnecessary assignment ([#9673](https://github.com/astral-sh/ruff/pull/9673))\n- \\[`flake8-return`\\] Take `NoReturn` annotation into account when analyzing implicit returns ([#9636](https://github.com/astral-sh/ruff/pull/9636))\n- \\[`flake8-simplify`\\] Support inverted returns in `needless-bool` (`SIM103`) ([#9619](https://github.com/astral-sh/ruff/pull/9619))\n- \\[`flake8-type-checking`\\] Add Pydantic's `BaseConfig` to default-copy list ([#9650](https://github.com/astral-sh/ruff/pull/9650))\n- \\[`flake8-type-checking`\\] Avoid marking `InitVar` as a typing-only annotation ([#9688](https://github.com/astral-sh/ruff/pull/9688))\n- \\[`pycodestyle`\\] Allow `dtype` comparisons in `type-comparison` ([#9676](https://github.com/astral-sh/ruff/pull/9676))\n- \\[`pydocstyle`\\] Re-implement `last-line-after-section` (`D413`) ([#9654](https://github.com/astral-sh/ruff/pull/9654))\n\n### Documentation\n\n- \\[`flake8-pytest-style`\\] Add fix safety documentation for `duplicate-parameterize-test-cases` ([#9678](https://github.com/astral-sh/ruff/pull/9678))\n- \\[`pylint`\\] Document `literal-membership` fix safety conditions ([#9677](https://github.com/astral-sh/ruff/pull/9677))\n- \\[`isort`\\] Fix reference to `isort` rule code ([#9598](https://github.com/astral-sh/ruff/pull/9598))\n\n## 0.1.14\n\n### Preview features\n\n- \\[`flake8-bugbear`\\] Add fix for `duplicate-value` (`B033`) ([#9510](https://github.com/astral-sh/ruff/pull/9510))\n- \\[`flake8-simplify`\\] Implement `enumerate-for-loop` (`SIM113`) ([#7777](https://github.com/astral-sh/ruff/pull/7777))\n- \\[`pygrep_hooks`\\] Add fix for `deprecated-log-warn` (`PGH002`) ([#9519](https://github.com/astral-sh/ruff/pull/9519))\n- \\[`pylint`\\] Implement `import-private-name` (`C2701`) ([#5920](https://github.com/astral-sh/ruff/pull/5920))\n- \\[`refurb`\\] Implement `regex-flag-alias` with fix (`FURB167`) ([#9516](https://github.com/astral-sh/ruff/pull/9516))\n- \\[`ruff`\\] Add rule and fix to sort contents of `__all__` (`RUF022`) ([#9474](https://github.com/astral-sh/ruff/pull/9474))\n- \\[`tryceratops`\\] Add fix for `error-instead-of-exception` (`TRY400`) ([#9520](https://github.com/astral-sh/ruff/pull/9520))\n\n### Rule changes\n\n- \\[`flake8-pyi`\\] Fix `PYI047` false negatives on PEP-695 type aliases ([#9566](https://github.com/astral-sh/ruff/pull/9566))\n- \\[`flake8-pyi`\\] Fix `PYI049` false negatives on call-based `TypedDict`s ([#9567](https://github.com/astral-sh/ruff/pull/9567))\n- \\[`pylint`\\] Exclude `self` and `cls` when counting method arguments (`PLR0917`) ([#9563](https://github.com/astral-sh/ruff/pull/9563))\n\n### CLI\n\n- `--show-settings` displays active settings in a far more readable format ([#9464](https://github.com/astral-sh/ruff/pull/9464))\n- Add `--extension` support to the formatter ([#9483](https://github.com/astral-sh/ruff/pull/9483))\n\n### Configuration\n\n- Ignore preview status for fixable and unfixable selectors ([#9538](https://github.com/astral-sh/ruff/pull/9538))\n- \\[`pycodestyle`\\] Use the configured tab size when expanding indents ([#9506](https://github.com/astral-sh/ruff/pull/9506))\n\n### Bug fixes\n\n- Recursively visit deferred AST nodes ([#9541](https://github.com/astral-sh/ruff/pull/9541))\n- Visit deferred lambdas before type definitions ([#9540](https://github.com/astral-sh/ruff/pull/9540))\n- \\[`flake8-simplify`\\] Avoid some more `enumerate-for-loop` false positives (`SIM113`) ([#9515](https://github.com/astral-sh/ruff/pull/9515))\n- \\[`pandas-vet`\\] Limit inplace diagnostics to methods that accept inplace ([#9495](https://github.com/astral-sh/ruff/pull/9495))\n- \\[`pylint`\\] Add the `__prepare__` method to the list of recognized dunder method ([#9529](https://github.com/astral-sh/ruff/pull/9529))\n- \\[`pylint`\\] Ignore unnecessary dunder calls within dunder definitions ([#9496](https://github.com/astral-sh/ruff/pull/9496))\n- \\[`refurb`\\] Avoid bailing when `reimplemented-operator` is called on function (`FURB118`) ([#9556](https://github.com/astral-sh/ruff/pull/9556))\n- \\[`ruff`\\] Avoid treating named expressions as static keys (`RUF011`) ([#9494](https://github.com/astral-sh/ruff/pull/9494))\n\n### Documentation\n\n- Add instructions on using `noqa` with isort rules ([#9555](https://github.com/astral-sh/ruff/pull/9555))\n- Documentation update for URL giving 'page not found' ([#9565](https://github.com/astral-sh/ruff/pull/9565))\n- Fix admonition in dark mode ([#9502](https://github.com/astral-sh/ruff/pull/9502))\n- Update contributing docs to use `cargo bench -p ruff_benchmark` ([#9535](https://github.com/astral-sh/ruff/pull/9535))\n- Update emacs integration section to include `emacs-ruff-format` ([#9403](https://github.com/astral-sh/ruff/pull/9403))\n- \\[`flake8-blind-except`\\] Document exceptions to `blind-except` rule ([#9580](https://github.com/astral-sh/ruff/pull/9580))\n\n## 0.1.13\n\n### Bug fixes\n\n- Include base pyproject when initializing cache settings ([#9480](https://github.com/astral-sh/ruff/pull/9480))\n- \\[`flake8-simplify`\\] Account for possibly-empty f-string values in truthiness logic ([#9484](https://github.com/astral-sh/ruff/pull/9484))\n- \\[`pylint`\\] Add the missing period in `unnecessary-dunder-call` ([#9485](https://github.com/astral-sh/ruff/pull/9485))\n- \\[`pylint`\\] Fix `__aenter__` message in `unnecessary-dunder-call` ([#9492](https://github.com/astral-sh/ruff/pull/9492))\n\n## 0.1.12\n\n### Preview features\n\n- Formatter: Hug multiline-strings in preview style ([#9243](https://github.com/astral-sh/ruff/pull/9243))\n- \\[`flake8-bandit`\\] Add `ssl-with-no-version` (`S504`) ([#9384](https://github.com/astral-sh/ruff/pull/9384))\n- \\[`flake8-bandit`\\] Implement `ssl-insecure-version` (`S502`) ([#9390](https://github.com/astral-sh/ruff/pull/9390))\n- \\[`flake8-bandit`\\] Implement `ssl-with-bad-defaults` (`S503`) ([#9391](https://github.com/astral-sh/ruff/pull/9391))\n- \\[`flake8-bandit`\\] Implement suspicious import rules (`S4XX`) ([#8831](https://github.com/astral-sh/ruff/pull/8831))\n- \\[`flake8-simplify`\\] Implement `zip-dict-keys-and-values` (`SIM911`) ([#9460](https://github.com/astral-sh/ruff/pull/9460))\n- \\[`pyflakes`\\] Add a fix for `redefined-while-unused` (`F811`) ([#9419](https://github.com/astral-sh/ruff/pull/9419))\n- \\[`pylint`\\] Implement `unnecessary-dunder-call` (`C2801`) ([#9166](https://github.com/astral-sh/ruff/pull/9166))\n- \\[`ruff`\\] Add `parenthesize-chained-operators` (`RUF021`) to enforce parentheses in `a or b and c` ([#9440](https://github.com/astral-sh/ruff/pull/9440))\n\n### Rule changes\n\n- \\[`flake8-boolean-trap`\\] Allow Boolean positional arguments in setters ([#9429](https://github.com/astral-sh/ruff/pull/9429))\n- \\[`flake8-builtins`\\] Restrict `builtin-attribute-shadowing` (`A003`) to actual shadowed references ([#9462](https://github.com/astral-sh/ruff/pull/9462))\n- \\[`flake8-pyi`\\] Add fix for `generator-return-from-iter-method` (`PYI058`) ([#9355](https://github.com/astral-sh/ruff/pull/9355))\n- \\[`pyflakes`\\] Don't flag `redefined-while-unused` (`F811`) in `if` branches ([#9418](https://github.com/astral-sh/ruff/pull/9418))\n- \\[`pyupgrade`\\] Add some additional Python 3.12 typing members to `deprecated-import` ([#9445](https://github.com/astral-sh/ruff/pull/9445))\n- \\[`ruff`\\] Add fix for `parenthesize-chained-operators` (`RUF021`) ([#9449](https://github.com/astral-sh/ruff/pull/9449))\n- \\[`ruff`\\] Include subscripts and attributes in static key rule (`RUF011`) ([#9416](https://github.com/astral-sh/ruff/pull/9416))\n- \\[`ruff`\\] Support variable keys in static dictionary key rule (`RUF011`) ([#9411](https://github.com/astral-sh/ruff/pull/9411))\n\n### Formatter\n\n- Generate deterministic IDs when formatting notebooks ([#9359](https://github.com/astral-sh/ruff/pull/9359))\n- Allow `# fmt: skip` with interspersed same-line comments ([#9395](https://github.com/astral-sh/ruff/pull/9395))\n- Parenthesize breaking named expressions in match guards ([#9396](https://github.com/astral-sh/ruff/pull/9396))\n\n### Bug fixes\n\n- Add cell indexes to all diagnostics ([#9387](https://github.com/astral-sh/ruff/pull/9387))\n- Avoid infinite loop in constant vs. `None` comparisons ([#9376](https://github.com/astral-sh/ruff/pull/9376))\n- Handle raises with implicit alternate branches ([#9377](https://github.com/astral-sh/ruff/pull/9377))\n- Ignore trailing quotes for unclosed l-brace errors ([#9388](https://github.com/astral-sh/ruff/pull/9388))\n- Respect multi-segment submodule imports when resolving qualified names ([#9382](https://github.com/astral-sh/ruff/pull/9382))\n- Use `DisplayParseError` for stdin parser errors ([#9409](https://github.com/astral-sh/ruff/pull/9409))\n- Use `comment_ranges` for isort directive extraction ([#9414](https://github.com/astral-sh/ruff/pull/9414))\n- Use transformed source code for diagnostic locations ([#9408](https://github.com/astral-sh/ruff/pull/9408))\n- \\[`flake8-pyi`\\] Exclude `warnings.deprecated` and `typing_extensions.deprecated` arguments ([#9423](https://github.com/astral-sh/ruff/pull/9423))\n- \\[`flake8-pyi`\\] Fix false negative for `unused-private-protocol` (`PYI046`) with unused generic protocols ([#9405](https://github.com/astral-sh/ruff/pull/9405))\n- \\[`pydocstyle`\\] Disambiguate argument descriptors from section headers ([#9427](https://github.com/astral-sh/ruff/pull/9427))\n- \\[`pylint`\\] Homogenize `PLR0914` message to match other `PLR09XX` rules ([#9399](https://github.com/astral-sh/ruff/pull/9399))\n- \\[`ruff`\\] Allow `Hashable = None` in type annotations (`RUF013`) ([#9442](https://github.com/astral-sh/ruff/pull/9442))\n\n### Documentation\n\n- Fix admonition hyperlink colouring ([#9385](https://github.com/astral-sh/ruff/pull/9385))\n- Add missing preview link ([#9386](https://github.com/astral-sh/ruff/pull/9386))\n\n## 0.1.11\n\n### Preview features\n\n- \\[`pylint`\\] Implement `super-without-brackets` (`W0245`) ([#9257](https://github.com/astral-sh/ruff/pull/9257))\n\n### Bug fixes\n\n- Check path string properly in `python -m ruff` invocations ([#9367](https://github.com/astral-sh/ruff/pull/9367))\n\n### Documentation\n\n- Tweak `relative-imports` message ([#9365](https://github.com/astral-sh/ruff/pull/9365))\n- Add fix safety note for `yield-in-for-loop` ([#9364](https://github.com/astral-sh/ruff/pull/9364))\n\n## 0.1.10\n\n### Preview features\n\n- Improve `dummy_implementations` preview style formatting ([#9240](https://github.com/astral-sh/ruff/pull/9240))\n- Normalise Hex and unicode escape sequences in strings ([#9280](https://github.com/astral-sh/ruff/pull/9280))\n- Parenthesize long type annotations in annotated assignments ([#9210](https://github.com/astral-sh/ruff/pull/9210))\n- Parenthesize multi-context managers in `with` statements ([#9222](https://github.com/astral-sh/ruff/pull/9222))\n- \\[`flake8-pyi`\\] Implement `generator-return-from-iter-method` (`PYI058`) ([#9313](https://github.com/astral-sh/ruff/pull/9313))\n- \\[`pylint`\\] Implement `empty-comment` (`PLR2044`) ([#9174](https://github.com/astral-sh/ruff/pull/9174))\n- \\[`refurb`\\] Implement `bit-count` (`FURB161`) ([#9265](https://github.com/astral-sh/ruff/pull/9265))\n- \\[`ruff`\\] Add `never-union` rule to detect redundant `typing.NoReturn` and `typing.Never` ([#9217](https://github.com/astral-sh/ruff/pull/9217))\n\n### CLI\n\n- Add paths to TOML parse errors ([#9358](https://github.com/astral-sh/ruff/pull/9358))\n- Add row and column numbers to formatter parse errors ([#9321](https://github.com/astral-sh/ruff/pull/9321))\n- Improve responsiveness when invoked via Python ([#9315](https://github.com/astral-sh/ruff/pull/9315))\n- Short rule messages should not end with a period ([#9345](https://github.com/astral-sh/ruff/pull/9345))\n\n### Configuration\n\n- Respect runtime-required decorators on functions ([#9317](https://github.com/astral-sh/ruff/pull/9317))\n\n### Bug fixes\n\n- Avoid `asyncio-dangling-task` for nonlocal and global bindings ([#9263](https://github.com/astral-sh/ruff/pull/9263))\n- Escape trailing placeholders in rule documentation ([#9301](https://github.com/astral-sh/ruff/pull/9301))\n- Fix continuation detection following multi-line strings ([#9332](https://github.com/astral-sh/ruff/pull/9332))\n- Fix scoping for generators in named expressions in classes ([#9248](https://github.com/astral-sh/ruff/pull/9248))\n- Port from obsolete wsl crate to is-wsl ([#9356](https://github.com/astral-sh/ruff/pull/9356))\n- Remove special pre-visit for module docstrings ([#9261](https://github.com/astral-sh/ruff/pull/9261))\n- Respect `__str__` definitions from super classes ([#9338](https://github.com/astral-sh/ruff/pull/9338))\n- Respect `unused-noqa` via `per-file-ignores` ([#9300](https://github.com/astral-sh/ruff/pull/9300))\n- Respect attribute chains when resolving builtin call paths ([#9309](https://github.com/astral-sh/ruff/pull/9309))\n- Treat all `typing_extensions` members as typing aliases ([#9335](https://github.com/astral-sh/ruff/pull/9335))\n- Use `Display` for formatter parse errors ([#9316](https://github.com/astral-sh/ruff/pull/9316))\n- Wrap subscripted dicts in parens for f-string conversion ([#9238](https://github.com/astral-sh/ruff/pull/9238))\n- \\[`flake8-annotations`\\] Avoid adding return types to stub methods ([#9277](https://github.com/astral-sh/ruff/pull/9277))\n- \\[`flake8-annotations`\\] Respect mixed `return` and `raise` cases in return-type analysis ([#9310](https://github.com/astral-sh/ruff/pull/9310))\n- \\[`flake8-bandit`\\] Don't report violations when `SafeLoader` is imported from `yaml.loader` (`S506`) ([#9299](https://github.com/astral-sh/ruff/pull/9299))\n- \\[`pylint`\\] Avoid panic when comment is preceded by Unicode ([#9331](https://github.com/astral-sh/ruff/pull/9331))\n- \\[`pylint`\\] Change `PLR0917` error message to match other `PLR09XX` messages ([#9308](https://github.com/astral-sh/ruff/pull/9308))\n- \\[`refurb`\\] Avoid false positives for `math-constant` (`FURB152`) ([#9290](https://github.com/astral-sh/ruff/pull/9290))\n\n### Documentation\n\n- Expand target name for better rule documentation ([#9302](https://github.com/astral-sh/ruff/pull/9302))\n- Fix typos found by codespell ([#9346](https://github.com/astral-sh/ruff/pull/9346))\n- \\[`perflint`\\] Document `PERF102` fix un-safety ([#9351](https://github.com/astral-sh/ruff/pull/9351))\n- \\[`pyupgrade`\\] Document `UP007` fix un-safety ([#9306](https://github.com/astral-sh/ruff/pull/9306))\n\n## 0.1.9\n\n### Breaking changes\n\n- Add site-packages to default exclusions ([#9188](https://github.com/astral-sh/ruff/pull/9188))\n\n### Preview features\n\n- Fix: Avoid parenthesizing subscript targets and values ([#9209](https://github.com/astral-sh/ruff/pull/9209))\n- \\[`pylint`\\] Implement `too-many-locals` (`PLR0914`) ([#9163](https://github.com/astral-sh/ruff/pull/9163))\n- Implement `reimplemented_operator` (FURB118) ([#9171](https://github.com/astral-sh/ruff/pull/9171))\n- Add a rule to detect string members in runtime-evaluated unions ([#9143](https://github.com/astral-sh/ruff/pull/9143))\n- Implement `no_blank_line_before_class_docstring` preview style ([#9154](https://github.com/astral-sh/ruff/pull/9154))\n\n### Rule changes\n\n- `CONSTANT_CASE` variables are improperly flagged for yoda violation (`SIM300`) ([#9164](https://github.com/astral-sh/ruff/pull/9164))\n- \\[`flake8-pyi`\\] Cover ParamSpecs and TypeVarTuples (`PYI018`) ([#9198](https://github.com/astral-sh/ruff/pull/9198))\n- \\[`flake8-bugbear`\\] Add fix for `zip-without-explicit-strict` (`B905`) ([#9176](https://github.com/astral-sh/ruff/pull/9176))\n- Add fix to automatically remove `print` and `pprint` statements (`T201`, `T203`) ([#9208](https://github.com/astral-sh/ruff/pull/9208))\n- Prefer `Never` to `NoReturn` in auto-typing in Python >= 3.11 (`ANN201`) ([#9213](https://github.com/astral-sh/ruff/pull/9213))\n\n### Formatter\n\n- `can_omit_optional_parentheses`: Exit early for unparenthesized expressions ([#9125](https://github.com/astral-sh/ruff/pull/9125))\n- Fix `dynamic` mode with doctests so that it doesn't exceed configured line width ([#9129](https://github.com/astral-sh/ruff/pull/9129))\n- Fix `can_omit_optional_parentheses` for expressions with a right most fstring ([#9124](https://github.com/astral-sh/ruff/pull/9124))\n- Add `target_version` to formatter options ([#9220](https://github.com/astral-sh/ruff/pull/9220))\n\n### CLI\n\n- Update `ruff format --check` to display message for already formatted files ([#9153](https://github.com/astral-sh/ruff/pull/9153))\n\n### Bug fixes\n\n- Reverse order of arguments for `operator.contains` ([#9192](https://github.com/astral-sh/ruff/pull/9192))\n- Iterate over lambdas in deferred type annotations ([#9175](https://github.com/astral-sh/ruff/pull/9175))\n- Fix panic in `D208` with multibyte indent ([#9147](https://github.com/astral-sh/ruff/pull/9147))\n- Add support for `NoReturn` in auto-return-typing ([#9206](https://github.com/astral-sh/ruff/pull/9206))\n- Allow removal of `typing` from `exempt-modules` ([#9214](https://github.com/astral-sh/ruff/pull/9214))\n- Avoid `mutable-class-default` violations for Pydantic subclasses ([#9187](https://github.com/astral-sh/ruff/pull/9187))\n- Fix dropped union expressions for piped non-types in `PYI055` autofix ([#9161](https://github.com/astral-sh/ruff/pull/9161))\n- Enable annotation quoting for multi-line expressions ([#9142](https://github.com/astral-sh/ruff/pull/9142))\n- Deduplicate edits when quoting annotations ([#9140](https://github.com/astral-sh/ruff/pull/9140))\n- Prevent invalid utf8 indexing in cell magic detection ([#9146](https://github.com/astral-sh/ruff/pull/9146))\n- Avoid nested quotations in auto-quoting fix ([#9168](https://github.com/astral-sh/ruff/pull/9168))\n- Add base-class inheritance detection to flake8-django rules ([#9151](https://github.com/astral-sh/ruff/pull/9151))\n- Avoid `asyncio-dangling-task` violations on shadowed bindings ([#9215](https://github.com/astral-sh/ruff/pull/9215))\n\n### Documentation\n\n- Fix blog post URL in changelog ([#9119](https://github.com/astral-sh/ruff/pull/9119))\n- Add error suppression hint for multi-line strings ([#9205](https://github.com/astral-sh/ruff/pull/9205))\n- Fix typo in SemanticModel.parent_expression docstring ([#9167](https://github.com/astral-sh/ruff/pull/9167))\n- Document link between import sorting and formatter ([#9117](https://github.com/astral-sh/ruff/pull/9117))\n\n## 0.1.8\n\nThis release includes opt-in support for formatting Python snippets within\ndocstrings via the `docstring-code-format` setting.\n[Check out the blog post](https://astral.sh/blog/ruff-v0.1.8) for more details!\n\n### Preview features\n\n- Add `\"preserve\"` quote-style to mimic Black's skip-string-normalization ([#8822](https://github.com/astral-sh/ruff/pull/8822))\n- Implement `prefer_splitting_right_hand_side_of_assignments` preview style ([#8943](https://github.com/astral-sh/ruff/pull/8943))\n- \\[`pycodestyle`\\] Add fix for `unexpected-spaces-around-keyword-parameter-equals` ([#9072](https://github.com/astral-sh/ruff/pull/9072))\n- \\[`pycodestyle`\\] Add fix for comment-related whitespace rules ([#9075](https://github.com/astral-sh/ruff/pull/9075))\n- \\[`pycodestyle`\\] Allow `sys.path` modifications between imports ([#9047](https://github.com/astral-sh/ruff/pull/9047))\n- \\[`refurb`\\] Implement `hashlib-digest-hex` (`FURB181`) ([#9077](https://github.com/astral-sh/ruff/pull/9077))\n\n### Rule changes\n\n- Allow `flake8-type-checking` rules to automatically quote runtime-evaluated references ([#6001](https://github.com/astral-sh/ruff/pull/6001))\n- Allow transparent cell magics in Jupyter Notebooks ([#8911](https://github.com/astral-sh/ruff/pull/8911))\n- \\[`flake8-annotations`\\] Avoid `ANN2xx` fixes for abstract methods with empty bodies ([#9034](https://github.com/astral-sh/ruff/pull/9034))\n- \\[`flake8-self`\\] Ignore underscore references in type annotations ([#9036](https://github.com/astral-sh/ruff/pull/9036))\n- \\[`pep8-naming`\\] Allow class names when `apps.get_model` is a non-string ([#9065](https://github.com/astral-sh/ruff/pull/9065))\n- \\[`pycodestyle`\\] Allow `matplotlib.use` calls to intersperse imports ([#9094](https://github.com/astral-sh/ruff/pull/9094))\n- \\[`pyflakes`\\] Support fixing unused assignments in tuples by renaming variables (`F841`) ([#9107](https://github.com/astral-sh/ruff/pull/9107))\n- \\[`pylint`\\] Add fix for `subprocess-run-without-check` (`PLW1510`) ([#6708](https://github.com/astral-sh/ruff/pull/6708))\n\n### Formatter\n\n- Add `docstring-code-format` knob to enable docstring snippet formatting ([#8854](https://github.com/astral-sh/ruff/pull/8854))\n- Use double quotes for all docstrings, including single-quoted docstrings ([#9020](https://github.com/astral-sh/ruff/pull/9020))\n- Implement \"dynamic\" line width mode for docstring code formatting ([#9098](https://github.com/astral-sh/ruff/pull/9098))\n- Support reformatting Markdown code blocks ([#9030](https://github.com/astral-sh/ruff/pull/9030))\n- add support for formatting reStructuredText code snippets ([#9003](https://github.com/astral-sh/ruff/pull/9003))\n- Avoid trailing comma for single-argument with positional separator ([#9076](https://github.com/astral-sh/ruff/pull/9076))\n- Fix handling of trailing target comment ([#9051](https://github.com/astral-sh/ruff/pull/9051))\n\n### CLI\n\n- Hide unsafe fix suggestions when explicitly disabled ([#9095](https://github.com/astral-sh/ruff/pull/9095))\n- Add SARIF support to `--output-format` ([#9078](https://github.com/astral-sh/ruff/pull/9078))\n\n### Bug fixes\n\n- Apply unnecessary index rule prior to enumerate rewrite ([#9012](https://github.com/astral-sh/ruff/pull/9012))\n- \\[`flake8-err-msg`\\] Allow `EM` fixes even if `msg` variable is defined ([#9059](https://github.com/astral-sh/ruff/pull/9059))\n- \\[`flake8-pie`\\] Prevent keyword arguments duplication ([#8450](https://github.com/astral-sh/ruff/pull/8450))\n- \\[`flake8-pie`\\] Respect trailing comma in `unnecessary-dict-kwargs` (`PIE804`) ([#9015](https://github.com/astral-sh/ruff/pull/9015))\n- \\[`flake8-raise`\\] Avoid removing parentheses on ctypes.WinError ([#9027](https://github.com/astral-sh/ruff/pull/9027))\n- \\[`isort`\\] Avoid invalid combination of `force-sort-within-types` and `lines-between-types` ([#9041](https://github.com/astral-sh/ruff/pull/9041))\n- \\[`isort`\\] Ensure that from-style imports are always ordered first in `__future__` ([#9039](https://github.com/astral-sh/ruff/pull/9039))\n- \\[`pycodestyle`\\] Allow tab indentation before keyword ([#9099](https://github.com/astral-sh/ruff/pull/9099))\n- \\[`pylint`\\] Ignore `@overrides` and `@overloads` for `too-many-positional` ([#9000](https://github.com/astral-sh/ruff/pull/9000))\n- \\[`pyupgrade`\\] Enable `printf-string-formatting` fix with comments on right-hand side ([#9037](https://github.com/astral-sh/ruff/pull/9037))\n- \\[`refurb`\\] Make `math-constant` (`FURB152`) rule more targeted ([#9054](https://github.com/astral-sh/ruff/pull/9054))\n- \\[`refurb`\\] Support floating-point base in `redundant-log-base` (`FURB163`) ([#9100](https://github.com/astral-sh/ruff/pull/9100))\n- \\[`ruff`\\] Detect `unused-asyncio-dangling-task` (`RUF006`) on unused assignments ([#9060](https://github.com/astral-sh/ruff/pull/9060))\n\n## 0.1.7\n\n### Preview features\n\n- Implement multiline dictionary and list hugging for preview style ([#8293](https://github.com/astral-sh/ruff/pull/8293))\n- Implement the `fix_power_op_line_length` preview style ([#8947](https://github.com/astral-sh/ruff/pull/8947))\n- Use Python version to determine typing rewrite safety ([#8919](https://github.com/astral-sh/ruff/pull/8919))\n- \\[`flake8-annotations`\\] Enable auto-return-type involving `Optional` and `Union` annotations ([#8885](https://github.com/astral-sh/ruff/pull/8885))\n- \\[`flake8-bandit`\\] Implement `django-raw-sql` (`S611`) ([#8651](https://github.com/astral-sh/ruff/pull/8651))\n- \\[`flake8-bandit`\\] Implement `tarfile-unsafe-members` (`S202`) ([#8829](https://github.com/astral-sh/ruff/pull/8829))\n- \\[`flake8-pyi`\\] Implement fix for `unnecessary-literal-union` (`PYI030`) ([#7934](https://github.com/astral-sh/ruff/pull/7934))\n- \\[`flake8-simplify`\\] Extend `dict-get-with-none-default` (`SIM910`) to non-literals ([#8762](https://github.com/astral-sh/ruff/pull/8762))\n- \\[`pylint`\\] - add `unnecessary-list-index-lookup` (`PLR1736`) + autofix ([#7999](https://github.com/astral-sh/ruff/pull/7999))\n- \\[`pylint`\\] - implement R0202 and R0203 with autofixes ([#8335](https://github.com/astral-sh/ruff/pull/8335))\n- \\[`pylint`\\] Implement `repeated-keyword` (`PLe1132`) ([#8706](https://github.com/astral-sh/ruff/pull/8706))\n- \\[`pylint`\\] Implement `too-many-positional` (`PLR0917`) ([#8995](https://github.com/astral-sh/ruff/pull/8995))\n- \\[`pylint`\\] Implement `unnecessary-dict-index-lookup` (`PLR1733`) ([#8036](https://github.com/astral-sh/ruff/pull/8036))\n- \\[`refurb`\\] Implement `redundant-log-base` (`FURB163`) ([#8842](https://github.com/astral-sh/ruff/pull/8842))\n\n### Rule changes\n\n- \\[`flake8-boolean-trap`\\] Allow booleans in `@override` methods ([#8882](https://github.com/astral-sh/ruff/pull/8882))\n- \\[`flake8-bugbear`\\] Avoid `B015`,`B018` for last expression in a cell ([#8815](https://github.com/astral-sh/ruff/pull/8815))\n- \\[`flake8-pie`\\] Allow ellipses for enum values in stub files ([#8825](https://github.com/astral-sh/ruff/pull/8825))\n- \\[`flake8-pyi`\\] Check PEP 695 type aliases for `snake-case-type-alias` and `t-suffixed-type-alias` ([#8966](https://github.com/astral-sh/ruff/pull/8966))\n- \\[`flake8-pyi`\\] Check for kwarg and vararg `NoReturn` type annotations ([#8948](https://github.com/astral-sh/ruff/pull/8948))\n- \\[`flake8-simplify`\\] Omit select context managers from `SIM117` ([#8801](https://github.com/astral-sh/ruff/pull/8801))\n- \\[`pep8-naming`\\] Allow Django model loads in `non-lowercase-variable-in-function` (`N806`) ([#8917](https://github.com/astral-sh/ruff/pull/8917))\n- \\[`pycodestyle`\\] Avoid `E703` for last expression in a cell ([#8821](https://github.com/astral-sh/ruff/pull/8821))\n- \\[`pycodestyle`\\] Update `E402` to work at cell level for notebooks ([#8872](https://github.com/astral-sh/ruff/pull/8872))\n- \\[`pydocstyle`\\] Avoid `D100` for Jupyter Notebooks ([#8816](https://github.com/astral-sh/ruff/pull/8816))\n- \\[`pylint`\\] Implement fix for `unspecified-encoding` (`PLW1514`) ([#8928](https://github.com/astral-sh/ruff/pull/8928))\n\n### Formatter\n\n- Avoid unstable formatting in ellipsis-only body with trailing comment ([#8984](https://github.com/astral-sh/ruff/pull/8984))\n- Inline trailing comments for type alias similar to assignments ([#8941](https://github.com/astral-sh/ruff/pull/8941))\n- Insert trailing comma when function breaks with single argument ([#8921](https://github.com/astral-sh/ruff/pull/8921))\n\n### CLI\n\n- Update `ruff check` and `ruff format` to default to the current directory ([#8791](https://github.com/astral-sh/ruff/pull/8791))\n- Stop at the first resolved parent configuration ([#8864](https://github.com/astral-sh/ruff/pull/8864))\n\n### Configuration\n\n- \\[`pylint`\\] Default `max-positional-args` to `max-args` ([#8998](https://github.com/astral-sh/ruff/pull/8998))\n- \\[`pylint`\\] Add `allow-dunder-method-names` setting for `bad-dunder-method-name` (`PLW3201`) ([#8812](https://github.com/astral-sh/ruff/pull/8812))\n- \\[`isort`\\] Add support for `from-first` setting ([#8663](https://github.com/astral-sh/ruff/pull/8663))\n- \\[`isort`\\] Add support for `length-sort` settings ([#8841](https://github.com/astral-sh/ruff/pull/8841))\n\n### Bug fixes\n\n- Add support for `@functools.singledispatch` ([#8934](https://github.com/astral-sh/ruff/pull/8934))\n- Avoid off-by-one error in stripping noqa following multi-byte char ([#8979](https://github.com/astral-sh/ruff/pull/8979))\n- Avoid off-by-one error in with-item named expressions ([#8915](https://github.com/astral-sh/ruff/pull/8915))\n- Avoid syntax error via invalid ur string prefix ([#8971](https://github.com/astral-sh/ruff/pull/8971))\n- Avoid underflow in `get_model` matching ([#8965](https://github.com/astral-sh/ruff/pull/8965))\n- Avoid unnecessary index diagnostics when value is modified ([#8970](https://github.com/astral-sh/ruff/pull/8970))\n- Convert over-indentation rule to use number of characters ([#8983](https://github.com/astral-sh/ruff/pull/8983))\n- Detect implicit returns in auto-return-types ([#8952](https://github.com/astral-sh/ruff/pull/8952))\n- Fix start >= end error in over-indentation ([#8982](https://github.com/astral-sh/ruff/pull/8982))\n- Ignore `@overload` and `@override` methods for too-many-arguments checks ([#8954](https://github.com/astral-sh/ruff/pull/8954))\n- Lexer start of line is false only for `Mode::Expression` ([#8880](https://github.com/astral-sh/ruff/pull/8880))\n- Mark `pydantic_settings.BaseSettings` as having default copy semantics ([#8793](https://github.com/astral-sh/ruff/pull/8793))\n- Respect dictionary unpacking in `NamedTuple` assignments ([#8810](https://github.com/astral-sh/ruff/pull/8810))\n- Respect local subclasses in `flake8-type-checking` ([#8768](https://github.com/astral-sh/ruff/pull/8768))\n- Support type alias statements in simple statement positions ([#8916](https://github.com/astral-sh/ruff/pull/8916))\n- \\[`flake8-annotations`\\] Avoid filtering out un-representable types in return annotation ([#8881](https://github.com/astral-sh/ruff/pull/8881))\n- \\[`flake8-pie`\\] Retain extra ellipses in protocols and abstract methods ([#8769](https://github.com/astral-sh/ruff/pull/8769))\n- \\[`flake8-pyi`\\] Respect local enum subclasses in `simple-defaults` (`PYI052`) ([#8767](https://github.com/astral-sh/ruff/pull/8767))\n- \\[`flake8-trio`\\] Use correct range for `TRIO115` fix ([#8933](https://github.com/astral-sh/ruff/pull/8933))\n- \\[`flake8-trio`\\] Use full arguments range for zero-sleep-call ([#8936](https://github.com/astral-sh/ruff/pull/8936))\n- \\[`isort`\\] fix: mark `__main__` as first-party import ([#8805](https://github.com/astral-sh/ruff/pull/8805))\n- \\[`pep8-naming`\\] Avoid `N806` errors for type alias statements ([#8785](https://github.com/astral-sh/ruff/pull/8785))\n- \\[`perflint`\\] Avoid `PERF101` if there's an append in loop body ([#8809](https://github.com/astral-sh/ruff/pull/8809))\n- \\[`pycodestyle`\\] Allow space-before-colon after end-of-slice ([#8838](https://github.com/astral-sh/ruff/pull/8838))\n- \\[`pydocstyle`\\] Avoid non-character breaks in `over-indentation` (`D208`) ([#8866](https://github.com/astral-sh/ruff/pull/8866))\n- \\[`pydocstyle`\\] Ignore underlines when determining docstring logical lines ([#8929](https://github.com/astral-sh/ruff/pull/8929))\n- \\[`pylint`\\] Extend `self-assigning-variable` to multi-target assignments ([#8839](https://github.com/astral-sh/ruff/pull/8839))\n- \\[`tryceratops`\\] Avoid repeated triggers in nested `tryceratops` diagnostics ([#8772](https://github.com/astral-sh/ruff/pull/8772))\n\n### Documentation\n\n- Add advice for fixing RUF008 when mutability is not desired ([#8853](https://github.com/astral-sh/ruff/pull/8853))\n- Added the command to run ruff using pkgx to the installation.md ([#8955](https://github.com/astral-sh/ruff/pull/8955))\n- Document fix safety for flake8-comprehensions and some pyupgrade rules ([#8918](https://github.com/astral-sh/ruff/pull/8918))\n- Fix doc formatting for zero-sleep-call ([#8937](https://github.com/astral-sh/ruff/pull/8937))\n- Remove duplicate imports from os-stat documentation ([#8930](https://github.com/astral-sh/ruff/pull/8930))\n- Replace generated reference to MkDocs ([#8806](https://github.com/astral-sh/ruff/pull/8806))\n- Update Arch Linux package URL in installation.md ([#8802](https://github.com/astral-sh/ruff/pull/8802))\n- \\[`flake8-pyi`\\] Fix error in `t-suffixed-type-alias` (`PYI043`) example ([#8963](https://github.com/astral-sh/ruff/pull/8963))\n- \\[`flake8-pyi`\\] Improve motivation for `custom-type-var-return-type` (`PYI019`) ([#8766](https://github.com/astral-sh/ruff/pull/8766))\n\n## 0.1.6\n\n### Preview features\n\n- \\[`flake8-boolean-trap`\\] Extend `boolean-type-hint-positional-argument` (`FBT001`) to include booleans in unions ([#7501](https://github.com/astral-sh/ruff/pull/7501))\n- \\[`flake8-pie`\\] Extend `reimplemented-list-builtin` (`PIE807`) to `dict` reimplementations ([#8608](https://github.com/astral-sh/ruff/pull/8608))\n- \\[`flake8-pie`\\] Extend `unnecessary-pass` (`PIE790`) to include ellipses (`...`) ([#8641](https://github.com/astral-sh/ruff/pull/8641))\n- \\[`flake8-pie`\\] Implement fix for `unnecessary-spread` (`PIE800`) ([#8668](https://github.com/astral-sh/ruff/pull/8668))\n- \\[`flake8-quotes`\\] Implement `unnecessary-escaped-quote` (`Q004`) ([#8630](https://github.com/astral-sh/ruff/pull/8630))\n- \\[`pycodestyle`\\] Implement fix for `multiple-spaces-after-keyword` (`E271`) and `multiple-spaces-before-keyword` (`E272`) ([#8622](https://github.com/astral-sh/ruff/pull/8622))\n- \\[`pycodestyle`\\] Implement fix for `multiple-spaces-after-operator` (`E222`) and `multiple-spaces-before-operator` (`E221`) ([#8623](https://github.com/astral-sh/ruff/pull/8623))\n- \\[`pyflakes`\\] Extend `is-literal` (`F632`) to include comparisons against mutable initializers ([#8607](https://github.com/astral-sh/ruff/pull/8607))\n- \\[`pylint`\\] Implement `redefined-argument-from-local` (`PLR1704`) ([#8159](https://github.com/astral-sh/ruff/pull/8159))\n- \\[`pylint`\\] Implement fix for `unnecessary-lambda` (`PLW0108`) ([#8621](https://github.com/astral-sh/ruff/pull/8621))\n- \\[`refurb`\\] Implement `if-expr-min-max` (`FURB136`) ([#8664](https://github.com/astral-sh/ruff/pull/8664))\n- \\[`refurb`\\] Implement `math-constant` (`FURB152`) ([#8727](https://github.com/astral-sh/ruff/pull/8727))\n\n### Rule changes\n\n- \\[`flake8-annotations`\\] Add autotyping-like return type inference for annotation rules ([#8643](https://github.com/astral-sh/ruff/pull/8643))\n- \\[`flake8-future-annotations`\\] Implement fix for `future-required-type-annotation` (`FA102`) ([#8711](https://github.com/astral-sh/ruff/pull/8711))\n- \\[`flake8-implicit-namespace-package`\\] Avoid missing namespace violations in scripts with shebangs ([#8710](https://github.com/astral-sh/ruff/pull/8710))\n- \\[`pydocstyle`\\] Update `over-indentation` (`D208`) to preserve indentation offsets when fixing overindented lines ([#8699](https://github.com/astral-sh/ruff/pull/8699))\n- \\[`pyupgrade`\\] Refine `timeout-error-alias` (`UP041`) to remove false positives ([#8587](https://github.com/astral-sh/ruff/pull/8587))\n\n### Formatter\n\n- Fix instability in `await` formatting with fluent style ([#8676](https://github.com/astral-sh/ruff/pull/8676))\n- Compare formatted and unformatted ASTs during formatter tests ([#8624](https://github.com/astral-sh/ruff/pull/8624))\n- Preserve trailing semicolon for Notebooks ([#8590](https://github.com/astral-sh/ruff/pull/8590))\n\n### CLI\n\n- Improve debug printing for resolving origin of config settings ([#8729](https://github.com/astral-sh/ruff/pull/8729))\n- Write unchanged, excluded files to stdout when read via stdin ([#8596](https://github.com/astral-sh/ruff/pull/8596))\n\n### Configuration\n\n- \\[`isort`\\] Support disabling sections with `no-sections = true` ([#8657](https://github.com/astral-sh/ruff/pull/8657))\n- \\[`pep8-naming`\\] Support local and dynamic class- and static-method decorators ([#8592](https://github.com/astral-sh/ruff/pull/8592))\n- \\[`pydocstyle`\\] Allow overriding pydocstyle convention rules ([#8586](https://github.com/astral-sh/ruff/pull/8586))\n\n### Bug fixes\n\n- Avoid syntax error via importing `trio.lowlevel` ([#8730](https://github.com/astral-sh/ruff/pull/8730))\n- Omit unrolled augmented assignments in `PIE794` ([#8634](https://github.com/astral-sh/ruff/pull/8634))\n- Slice source code instead of generating it for `EM` fixes ([#7746](https://github.com/astral-sh/ruff/pull/7746))\n- Allow whitespace around colon in slices for `whitespace-before-punctuation` (`E203`) ([#8654](https://github.com/astral-sh/ruff/pull/8654))\n- Use function range for `no-self-use` ([#8637](https://github.com/astral-sh/ruff/pull/8637))\n- F-strings doesn't contain bytes literal for `PLW0129` ([#8675](https://github.com/astral-sh/ruff/pull/8675))\n- Improve detection of `TYPE_CHECKING` blocks imported from `typing_extensions` or `_typeshed` ([#8429](https://github.com/astral-sh/ruff/pull/8429))\n- Treat display as a builtin in IPython ([#8707](https://github.com/astral-sh/ruff/pull/8707))\n- Avoid `FURB113` autofix if comments are present ([#8494](https://github.com/astral-sh/ruff/pull/8494))\n- Consider the new f-string tokens for `flake8-commas` ([#8582](https://github.com/astral-sh/ruff/pull/8582))\n- Remove erroneous bad-dunder-name reference ([#8742](https://github.com/astral-sh/ruff/pull/8742))\n- Avoid recommending Self usages in metaclasses ([#8639](https://github.com/astral-sh/ruff/pull/8639))\n- Detect runtime-evaluated base classes defined in the current file ([#8572](https://github.com/astral-sh/ruff/pull/8572))\n- Avoid inserting trailing commas within f-strings ([#8574](https://github.com/astral-sh/ruff/pull/8574))\n- Remove incorrect deprecation label for stdout and stderr ([#8743](https://github.com/astral-sh/ruff/pull/8743))\n- Fix unnecessary parentheses in UP007 fix ([#8610](https://github.com/astral-sh/ruff/pull/8610))\n- Remove repeated and erroneous scoped settings headers in docs ([#8670](https://github.com/astral-sh/ruff/pull/8670))\n- Trim trailing empty strings when converting to f-strings ([#8712](https://github.com/astral-sh/ruff/pull/8712))\n- Fix ordering for `force-sort-within-sections` ([#8665](https://github.com/astral-sh/ruff/pull/8665))\n- Run unicode prefix rule over tokens ([#8709](https://github.com/astral-sh/ruff/pull/8709))\n- Update UP032 to unescape curly braces in literal parts of converted strings ([#8697](https://github.com/astral-sh/ruff/pull/8697))\n- List all ipython builtins ([#8719](https://github.com/astral-sh/ruff/pull/8719))\n\n### Documentation\n\n- Document conventions in the FAQ ([#8638](https://github.com/astral-sh/ruff/pull/8638))\n- Redirect from rule codes to rule pages in docs ([#8636](https://github.com/astral-sh/ruff/pull/8636))\n- Fix permalink to convention setting ([#8575](https://github.com/astral-sh/ruff/pull/8575))\n\n## 0.1.5\n\n### Preview features\n\n- \\[`flake8-bandit`\\] Implement `mako-templates` (`S702`) ([#8533](https://github.com/astral-sh/ruff/pull/8533))\n- \\[`flake8-trio`\\] Implement `TRIO105` ([#8490](https://github.com/astral-sh/ruff/pull/8490))\n- \\[`flake8-trio`\\] Implement `TRIO109` ([#8534](https://github.com/astral-sh/ruff/pull/8534))\n- \\[`flake8-trio`\\] Implement `TRIO110` ([#8537](https://github.com/astral-sh/ruff/pull/8537))\n- \\[`flake8-trio`\\] Implement `TRIO115` ([#8486](https://github.com/astral-sh/ruff/pull/8486))\n- \\[`refurb`\\] Implement `type-none-comparison` (`FURB169`) ([#8487](https://github.com/astral-sh/ruff/pull/8487))\n- Flag all comparisons against builtin types in `E721` ([#8491](https://github.com/astral-sh/ruff/pull/8491))\n- Make `SIM118` fix as safe when the expression is a known dictionary ([#8525](https://github.com/astral-sh/ruff/pull/8525))\n\n### Formatter\n\n- Fix multiline lambda expression statement formatting ([#8466](https://github.com/astral-sh/ruff/pull/8466))\n\n### CLI\n\n- Add hidden `--extension` to override inference of source type from file extension ([#8373](https://github.com/astral-sh/ruff/pull/8373))\n\n### Configuration\n\n- Account for selector specificity when merging `extend_unsafe_fixes` and `override extend_safe_fixes` ([#8444](https://github.com/astral-sh/ruff/pull/8444))\n- Add support for disabling cache with `RUFF_NO_CACHE` environment variable ([#8538](https://github.com/astral-sh/ruff/pull/8538))\n\n### Bug fixes\n\n- \\[`E721`\\] Flag comparisons to `memoryview` ([#8485](https://github.com/astral-sh/ruff/pull/8485))\n- Allow collapsed-ellipsis bodies in other statements ([#8499](https://github.com/astral-sh/ruff/pull/8499))\n- Avoid `D301` autofix for `u` prefixed strings ([#8495](https://github.com/astral-sh/ruff/pull/8495))\n- Only flag `flake8-trio` rules when `trio` import is present ([#8550](https://github.com/astral-sh/ruff/pull/8550))\n- Reject more syntactically invalid Python programs ([#8524](https://github.com/astral-sh/ruff/pull/8524))\n- Avoid raising `TRIO115` violations for `trio.sleep(...)` calls with non-number values ([#8532](https://github.com/astral-sh/ruff/pull/8532))\n- Fix `F841` false negative on assignment to multiple variables ([#8489](https://github.com/astral-sh/ruff/pull/8489))\n\n### Documentation\n\n- Fix link to isort `known-first-party` ([#8562](https://github.com/astral-sh/ruff/pull/8562))\n- Add notes on fix safety to a few rules ([#8500](https://github.com/astral-sh/ruff/pull/8500))\n- Add missing toml config tabs ([#8512](https://github.com/astral-sh/ruff/pull/8512))\n- Add instructions for configuration of Emacs ([#8488](https://github.com/astral-sh/ruff/pull/8488))\n- Improve detail link contrast in dark mode ([#8548](https://github.com/astral-sh/ruff/pull/8548))\n- Fix typo in example ([#8506](https://github.com/astral-sh/ruff/pull/8506))\n- Added tabs for configuration files in the documentation ([#8480](https://github.com/astral-sh/ruff/pull/8480))\n- Recommend `project.requires-python` over `target-version` ([#8513](https://github.com/astral-sh/ruff/pull/8513))\n- Add singleton escape hatch to `B008` documentation ([#8501](https://github.com/astral-sh/ruff/pull/8501))\n- Fix tab configuration docs ([#8502](https://github.com/astral-sh/ruff/pull/8502))\n\n## 0.1.4\n\n### Preview features\n\n- \\[`flake8-trio`\\] Implement `timeout-without-await` (`TRIO001`) ([#8439](https://github.com/astral-sh/ruff/pull/8439))\n- \\[`numpy`\\] Implement NumPy 2.0 migration rule (`NPY200`) ([#7702](https://github.com/astral-sh/ruff/pull/7702))\n- \\[`pylint`\\] Implement `bad-open-mode` (`W1501`) ([#8294](https://github.com/astral-sh/ruff/pull/8294))\n- \\[`pylint`\\] Implement `import-outside-toplevel` (`C0415`) rule ([#5180](https://github.com/astral-sh/ruff/pull/5180))\n- \\[`pylint`\\] Implement `useless-with-lock` (`W2101`) ([#8321](https://github.com/astral-sh/ruff/pull/8321))\n- \\[`pyupgrade`\\] Implement `timeout-error-alias` (`UP041`) ([#8476](https://github.com/astral-sh/ruff/pull/8476))\n- \\[`refurb`\\] Implement `isinstance-type-none` (`FURB168`) ([#8308](https://github.com/astral-sh/ruff/pull/8308))\n- Detect confusable Unicode-to-Unicode units in `RUF001`, `RUF002`, and `RUF003` ([#4430](https://github.com/astral-sh/ruff/pull/4430))\n- Add newline after module docstrings in preview style ([#8283](https://github.com/astral-sh/ruff/pull/8283))\n\n### Formatter\n\n- Add a note on line-too-long to the formatter docs ([#8314](https://github.com/astral-sh/ruff/pull/8314))\n- Preserve trailing statement semicolons when using `fmt: skip` ([#8273](https://github.com/astral-sh/ruff/pull/8273))\n- Preserve trailing semicolons when using `fmt: off` ([#8275](https://github.com/astral-sh/ruff/pull/8275))\n- Avoid duplicating linter-formatter compatibility warnings ([#8292](https://github.com/astral-sh/ruff/pull/8292))\n- Avoid inserting a newline after function docstrings ([#8375](https://github.com/astral-sh/ruff/pull/8375))\n- Insert newline between docstring and following own line comment ([#8216](https://github.com/astral-sh/ruff/pull/8216))\n- Split tuples in return positions by comma first ([#8280](https://github.com/astral-sh/ruff/pull/8280))\n- Avoid treating byte strings as docstrings ([#8350](https://github.com/astral-sh/ruff/pull/8350))\n- Add `--line-length` option to `format` command ([#8363](https://github.com/astral-sh/ruff/pull/8363))\n- Avoid parenthesizing unsplittable because of comments ([#8431](https://github.com/astral-sh/ruff/pull/8431))\n\n### CLI\n\n- Add `--output-format` to `ruff rule` and `ruff linter` ([#8203](https://github.com/astral-sh/ruff/pull/8203))\n\n### Bug fixes\n\n- Respect `--force-exclude` in `lint.exclude` and `format.exclude` ([#8393](https://github.com/astral-sh/ruff/pull/8393))\n- Respect `--extend-per-file-ignores` on the CLI ([#8329](https://github.com/astral-sh/ruff/pull/8329))\n- Extend `bad-dunder-method-name` to permit `__index__` ([#8300](https://github.com/astral-sh/ruff/pull/8300))\n- Fix panic with 8 in octal escape ([#8356](https://github.com/astral-sh/ruff/pull/8356))\n- Avoid raising `D300` when both triple quote styles are present ([#8462](https://github.com/astral-sh/ruff/pull/8462))\n- Consider unterminated f-strings in `FStringRanges` ([#8154](https://github.com/astral-sh/ruff/pull/8154))\n- Avoid including literal `shell=True` for truthy, non-`True` diagnostics ([#8359](https://github.com/astral-sh/ruff/pull/8359))\n- Avoid triggering single-element test for starred expressions ([#8433](https://github.com/astral-sh/ruff/pull/8433))\n- Detect and ignore Jupyter automagics ([#8398](https://github.com/astral-sh/ruff/pull/8398))\n- Fix invalid E231 error with f-strings ([#8369](https://github.com/astral-sh/ruff/pull/8369))\n- Avoid triggering `NamedTuple` rewrite with starred annotation ([#8434](https://github.com/astral-sh/ruff/pull/8434))\n- Avoid un-setting bracket flag in logical lines ([#8380](https://github.com/astral-sh/ruff/pull/8380))\n- Place 'r' prefix before 'f' for raw format strings ([#8464](https://github.com/astral-sh/ruff/pull/8464))\n- Remove trailing periods from NumPy 2.0 code actions ([#8475](https://github.com/astral-sh/ruff/pull/8475))\n- Fix bug where `PLE1307` was raised when formatting `%c` with characters ([#8407](https://github.com/astral-sh/ruff/pull/8407))\n- Remove unicode flag from comparable ([#8440](https://github.com/astral-sh/ruff/pull/8440))\n- Improve B015 message ([#8295](https://github.com/astral-sh/ruff/pull/8295))\n- Use `fixedOverflowWidgets` for playground popover ([#8458](https://github.com/astral-sh/ruff/pull/8458))\n- Mark `byte_bounds` as a non-backwards-compatible NumPy 2.0 change ([#8474](https://github.com/astral-sh/ruff/pull/8474))\n\n### Internals\n\n- Add a dedicated cache directory per Ruff version ([#8333](https://github.com/astral-sh/ruff/pull/8333))\n- Allow selective caching for `--fix` and `--diff` ([#8316](https://github.com/astral-sh/ruff/pull/8316))\n- Improve performance of comment parsing ([#8193](https://github.com/astral-sh/ruff/pull/8193))\n- Improve performance of string parsing ([#8227](https://github.com/astral-sh/ruff/pull/8227))\n- Use a dedicated sort key for isort import sorting ([#7963](https://github.com/astral-sh/ruff/pull/7963))\n\n## 0.1.3\n\nThis release includes a variety of improvements to the Ruff formatter, removing several known and\nunintentional deviations from Black.\n\n### Formatter\n\n- Avoid space around pow for `None`, `True` and `False` ([#8189](https://github.com/astral-sh/ruff/pull/8189))\n- Avoid sorting all paths in the format command ([#8181](https://github.com/astral-sh/ruff/pull/8181))\n- Insert necessary blank line between class and leading comments ([#8224](https://github.com/astral-sh/ruff/pull/8224))\n- Avoid introducing new parentheses in annotated assignments ([#8233](https://github.com/astral-sh/ruff/pull/8233))\n- Refine the warnings about incompatible linter options ([#8196](https://github.com/astral-sh/ruff/pull/8196))\n- Add test and basic implementation for formatter preview mode ([#8044](https://github.com/astral-sh/ruff/pull/8044))\n- Refine warning about incompatible `isort` settings ([#8192](https://github.com/astral-sh/ruff/pull/8192))\n- Only omit optional parentheses for starting or ending with parentheses ([#8238](https://github.com/astral-sh/ruff/pull/8238))\n- Use source type to determine parser mode for formatting ([#8205](https://github.com/astral-sh/ruff/pull/8205))\n- Don't warn about magic trailing comma when `isort.force-single-line` is true ([#8244](https://github.com/astral-sh/ruff/pull/8244))\n- Use `SourceKind::diff` for formatter ([#8240](https://github.com/astral-sh/ruff/pull/8240))\n- Fix `fmt:off` with trailing child comment ([#8234](https://github.com/astral-sh/ruff/pull/8234))\n- Formatter parentheses support for `IpyEscapeCommand` ([#8207](https://github.com/astral-sh/ruff/pull/8207))\n\n### Linter\n\n- \\[`pylint`\\] Add buffer methods to `bad-dunder-method-name` (`PLW3201`) exclusions ([#8190](https://github.com/astral-sh/ruff/pull/8190))\n- Match rule prefixes from `external` codes setting in `unused-noqa` ([#8177](https://github.com/astral-sh/ruff/pull/8177))\n- Use `line-length` setting for isort in lieu of `pycodestyle.max-line-length` ([#8235](https://github.com/astral-sh/ruff/pull/8235))\n- Update fix for `unnecessary-paren-on-raise-exception` to unsafe for unknown types ([#8231](https://github.com/astral-sh/ruff/pull/8231))\n- Correct quick fix message for `W605` ([#8255](https://github.com/astral-sh/ruff/pull/8255))\n\n### Documentation\n\n- Fix typo in max-doc-length documentation ([#8201](https://github.com/astral-sh/ruff/pull/8201))\n- Improve documentation around linter-formatter conflicts ([#8257](https://github.com/astral-sh/ruff/pull/8257))\n- Fix link to error suppression documentation in `unused-noqa` ([#8172](https://github.com/astral-sh/ruff/pull/8172))\n- Add `external` option to `unused-noqa` documentation ([#8171](https://github.com/astral-sh/ruff/pull/8171))\n- Add title attribute to icons ([#8060](https://github.com/astral-sh/ruff/pull/8060))\n- Clarify unsafe case in RSE102 ([#8256](https://github.com/astral-sh/ruff/pull/8256))\n- Fix skipping formatting examples ([#8210](https://github.com/astral-sh/ruff/pull/8210))\n- docs: fix name of `magic-trailing-comma` option in README ([#8200](https://github.com/astral-sh/ruff/pull/8200))\n- Add note about scope of rule changing in versioning policy ([#8169](https://github.com/astral-sh/ruff/pull/8169))\n- Document: Fix default lint rules ([#8218](https://github.com/astral-sh/ruff/pull/8218))\n- Fix a wrong setting in configuration.md ([#8186](https://github.com/astral-sh/ruff/pull/8186))\n- Fix misspelled TOML headers in the tutorial ([#8209](https://github.com/astral-sh/ruff/pull/8209))\n\n## 0.1.2\n\nThis release includes the Beta version of the Ruff formatter — an extremely fast, Black-compatible Python formatter.\nTry it today with `ruff format`! [Check out the blog post](https://astral.sh/blog/the-ruff-formatter) and [read the docs](https://docs.astral.sh/ruff/formatter/).\n\n### Preview features\n\n- \\[`pylint`\\] Implement `non-ascii-module-import` (`C2403`) ([#8056](https://github.com/astral-sh/ruff/pull/8056))\n- \\[`pylint`\\] implement `non-ascii-name` (`C2401`) ([#8038](https://github.com/astral-sh/ruff/pull/8038))\n- \\[`pylint`\\] Implement unnecessary-lambda (W0108) ([#7953](https://github.com/astral-sh/ruff/pull/7953))\n- \\[`refurb`\\] Implement `read-whole-file` (`FURB101`) ([#7682](https://github.com/astral-sh/ruff/pull/7682))\n- Add fix for `E223`, `E224`, and `E242` ([#8143](https://github.com/astral-sh/ruff/pull/8143))\n- Add fix for `E225`, `E226`, `E227`, and `E228` ([#8136](https://github.com/astral-sh/ruff/pull/8136))\n- Add fix for `E252` ([#8142](https://github.com/astral-sh/ruff/pull/8142))\n- Add fix for `E261` ([#8114](https://github.com/astral-sh/ruff/pull/8114))\n- Add fix for `E273` and `E274` ([#8144](https://github.com/astral-sh/ruff/pull/8144))\n- Add fix for `E275` ([#8133](https://github.com/astral-sh/ruff/pull/8133))\n- Update `SIM401` to catch ternary operations ([#7415](https://github.com/astral-sh/ruff/pull/7415))\n- Update `E721` to allow `is` and `is` not for direct type comparisons ([#7905](https://github.com/astral-sh/ruff/pull/7905))\n\n### Rule changes\n\n- Add `backports.strenum` to `deprecated-imports` ([#8113](https://github.com/astral-sh/ruff/pull/8113))\n- Update `SIM112` to ignore `https_proxy`, `http_proxy`, and `no_proxy` ([#8140](https://github.com/astral-sh/ruff/pull/8140))\n- Update fix for `literal-membership` (`PLR6201`) to be unsafe ([#8097](https://github.com/astral-sh/ruff/pull/8097))\n- Update fix for `mutable-argument-defaults` (`B006`) to be unsafe ([#8108](https://github.com/astral-sh/ruff/pull/8108))\n\n### Formatter\n\n- Change `line-ending` default to `auto` ([#8057](https://github.com/astral-sh/ruff/pull/8057))\n- Respect parenthesized generators in `has_own_parentheses` ([#8100](https://github.com/astral-sh/ruff/pull/8100))\n- Add caching to formatter ([#8089](https://github.com/astral-sh/ruff/pull/8089))\n- Remove `--line-length` option from `format` command ([#8131](https://github.com/astral-sh/ruff/pull/8131))\n- Add formatter to `line-length` documentation ([#8150](https://github.com/astral-sh/ruff/pull/8150))\n- Warn about incompatible formatter options ([#8088](https://github.com/astral-sh/ruff/pull/8088))\n- Fix range of unparenthesized tuple subject in match statement ([#8101](https://github.com/astral-sh/ruff/pull/8101))\n- Remove experimental formatter warning ([#8148](https://github.com/astral-sh/ruff/pull/8148))\n- Don't move type param opening parenthesis comment ([#8163](https://github.com/astral-sh/ruff/pull/8163))\n- Update versions in format benchmark script ([#8110](https://github.com/astral-sh/ruff/pull/8110))\n- Avoid loading files for cached format results ([#8134](https://github.com/astral-sh/ruff/pull/8134))\n\n### CLI\n\n- Show the `ruff format` command in help menus ([#8167](https://github.com/astral-sh/ruff/pull/8167))\n- Add `ruff version` command with long version display ([#8034](https://github.com/astral-sh/ruff/pull/8034))\n\n### Configuration\n\n- New `pycodestyle.max-line-length` option ([#8039](https://github.com/astral-sh/ruff/pull/8039))\n\n### Bug fixes\n\n- Detect `sys.version_info` slices in `outdated-version-block` ([#8112](https://github.com/astral-sh/ruff/pull/8112))\n- Avoid if-else simplification for `TYPE_CHECKING` blocks ([#8072](https://github.com/astral-sh/ruff/pull/8072))\n- Avoid false-positive print separator diagnostic with starred argument ([#8079](https://github.com/astral-sh/ruff/pull/8079))\n\n### Documentation\n\n- Fix message for `too-many-arguments` lint ([#8092](https://github.com/astral-sh/ruff/pull/8092))\n- Fix `extend-unsafe-fixes` and `extend-safe-fixes` example ([#8139](https://github.com/astral-sh/ruff/pull/8139))\n- Add links to `flake8-import-conventions` options ([#8115](https://github.com/astral-sh/ruff/pull/8115))\n- Rework the documentation to incorporate the Ruff formatter ([#7732](https://github.com/astral-sh/ruff/pull/7732))\n- Fix `Options` JSON schema description ([#8081](https://github.com/astral-sh/ruff/pull/8081))\n- Fix typo (`pytext` -> `pytest`) ([#8117](https://github.com/astral-sh/ruff/pull/8117))\n- Improve `magic-value-comparison` example in docs ([#8111](https://github.com/astral-sh/ruff/pull/8111))\n\n## 0.1.1\n\n### Rule changes\n\n- Add unsafe fix for `escape-sequence-in-docstring` (`D301`) ([#7970](https://github.com/astral-sh/ruff/pull/7970))\n\n### Configuration\n\n- Respect `#(deprecated)` attribute in configuration options ([#8035](https://github.com/astral-sh/ruff/pull/8035))\n- Add `[format|lint].exclude` options ([#8000](https://github.com/astral-sh/ruff/pull/8000))\n- Respect `tab-size` setting in formatter ([#8006](https://github.com/astral-sh/ruff/pull/8006))\n- Add `lint.preview` ([#8002](https://github.com/astral-sh/ruff/pull/8002))\n\n### Preview features\n\n- \\[`pylint`\\] Implement `literal-membership` (`PLR6201`) ([#7973](https://github.com/astral-sh/ruff/pull/7973))\n- \\[`pylint`\\] Implement `too-many-boolean-expressions` (`PLR0916`) ([#7975](https://github.com/astral-sh/ruff/pull/7975))\n- \\[`pylint`\\] Implement `misplaced-bare-raise` (`E0704`) ([#7961](https://github.com/astral-sh/ruff/pull/7961))\n- \\[`pylint`\\] Implement `global-at-module-level` (`W0604`) ([#8058](https://github.com/astral-sh/ruff/pull/8058))\n- \\[`pylint`\\] Implement `unspecified-encoding` (`PLW1514`) ([#7939](https://github.com/astral-sh/ruff/pull/7939))\n- Add fix for `triple-single-quotes` (`D300`) ([#7967](https://github.com/astral-sh/ruff/pull/7967))\n\n### Formatter\n\n- New code style badge for `ruff format` ([#7878](https://github.com/astral-sh/ruff/pull/7878))\n- Fix comments outside expression parentheses ([#7873](https://github.com/astral-sh/ruff/pull/7873))\n- Add `--target-version` to `ruff format` ([#8055](https://github.com/astral-sh/ruff/pull/8055))\n- Skip over parentheses when detecting `in` keyword ([#8054](https://github.com/astral-sh/ruff/pull/8054))\n- Add `--diff` option to `ruff format` ([#7937](https://github.com/astral-sh/ruff/pull/7937))\n- Insert newline after nested function or class statements ([#7946](https://github.com/astral-sh/ruff/pull/7946))\n- Use `pass` over ellipsis in non-function/class contexts ([#8049](https://github.com/astral-sh/ruff/pull/8049))\n\n### Bug fixes\n\n- Lazily evaluate all PEP 695 type alias values ([#8033](https://github.com/astral-sh/ruff/pull/8033))\n- Avoid failed assertion when showing fixes from stdin ([#8029](https://github.com/astral-sh/ruff/pull/8029))\n- Avoid flagging HTTP and HTTPS literals in urllib-open ([#8046](https://github.com/astral-sh/ruff/pull/8046))\n- Avoid flagging `bad-dunder-method-name` for `_` ([#8015](https://github.com/astral-sh/ruff/pull/8015))\n- Remove Python 2-only methods from `URLOpen` audit ([#8047](https://github.com/astral-sh/ruff/pull/8047))\n- Use set bracket replacement for `iteration-over-set` to preserve whitespace and comments ([#8001](https://github.com/astral-sh/ruff/pull/8001))\n\n### Documentation\n\n- Update tutorial to match revised Ruff defaults ([#8066](https://github.com/astral-sh/ruff/pull/8066))\n- Update rule `B005` docs ([#8028](https://github.com/astral-sh/ruff/pull/8028))\n- Update GitHub actions example in docs to use `--output-format` ([#8014](https://github.com/astral-sh/ruff/pull/8014))\n- Document `lint.preview` and `format.preview` ([#8032](https://github.com/astral-sh/ruff/pull/8032))\n- Clarify that new rules should be added to `RuleGroup::Preview`. ([#7989](https://github.com/astral-sh/ruff/pull/7989))\n\n## 0.1.0\n\nThis is the first release which uses the `CHANGELOG` file. See [GitHub Releases](https://github.com/astral-sh/ruff/releases) for prior changelog entries.\n\nRead Ruff's new [versioning policy](https://docs.astral.sh/ruff/versioning/).\n\n### Breaking changes\n\n- Unsafe fixes are no longer displayed or applied without opt-in ([#7769](https://github.com/astral-sh/ruff/pull/7769))\n- Drop formatting specific rules from the default set ([#7900](https://github.com/astral-sh/ruff/pull/7900))\n- The deprecated `format` setting has been removed ([#7984](https://github.com/astral-sh/ruff/pull/7984))\n    - The `format` setting cannot be used to configure the output format, use `output-format` instead\n    - The `RUFF_FORMAT` environment variable is ignored, use `RUFF_OUTPUT_FORMAT` instead\n    - The `--format` option has been removed from `ruff check`, use `--output-format` instead\n\n### Rule changes\n\n- Extend `reimplemented-starmap` (`FURB140`) to catch calls with a single and starred argument ([#7768](https://github.com/astral-sh/ruff/pull/7768))\n- Improve cases covered by `RUF015` ([#7848](https://github.com/astral-sh/ruff/pull/7848))\n- Update `SIM15` to allow `open` followed by `close` ([#7916](https://github.com/astral-sh/ruff/pull/7916))\n- Respect `msgspec.Struct` default-copy semantics in `RUF012` ([#7786](https://github.com/astral-sh/ruff/pull/7786))\n- Add `sqlalchemy` methods to \\`flake8-boolean-trap\\`\\` exclusion list ([#7874](https://github.com/astral-sh/ruff/pull/7874))\n- Add fix for `PLR1714` ([#7910](https://github.com/astral-sh/ruff/pull/7910))\n- Add fix for `PIE804` ([#7884](https://github.com/astral-sh/ruff/pull/7884))\n- Add fix for `PLC0208` ([#7887](https://github.com/astral-sh/ruff/pull/7887))\n- Add fix for `PYI055` ([#7886](https://github.com/astral-sh/ruff/pull/7886))\n- Update `non-pep695-type-alias` to require `--unsafe-fixes` outside of stub files ([#7836](https://github.com/astral-sh/ruff/pull/7836))\n- Improve fix message for `UP018` ([#7913](https://github.com/astral-sh/ruff/pull/7913))\n- Update `PLW3201` to support `Enum` [sunder names](https://docs.python.org/3/library/enum.html#supported-sunder-names) ([#7987](https://github.com/astral-sh/ruff/pull/7987))\n\n### Preview features\n\n- Only show warnings for empty preview selectors when enabling rules ([#7842](https://github.com/astral-sh/ruff/pull/7842))\n- Add `unnecessary-key-check` to simplify `key in dct and dct[key]` to `dct.get(key)` ([#7895](https://github.com/astral-sh/ruff/pull/7895))\n- Add `assignment-in-assert` to prevent walrus expressions in assert statements ([#7856](https://github.com/astral-sh/ruff/pull/7856))\n- \\[`refurb`\\] Add `single-item-membership-test` (`FURB171`) ([#7815](https://github.com/astral-sh/ruff/pull/7815))\n- \\[`pylint`\\] Add `and-or-ternary` (`R1706`) ([#7811](https://github.com/astral-sh/ruff/pull/7811))\n\n*New rules are added in [preview](https://docs.astral.sh/ruff/preview/).*\n\n### Configuration\n\n- Add `unsafe-fixes` setting ([#7769](https://github.com/astral-sh/ruff/pull/7769))\n- Add `extend-safe-fixes` and `extend-unsafe-fixes` for promoting and demoting fixes ([#7841](https://github.com/astral-sh/ruff/pull/7841))\n\n### CLI\n\n- Added `--unsafe-fixes` option for opt-in to display and apply unsafe fixes ([#7769](https://github.com/astral-sh/ruff/pull/7769))\n- Fix use of deprecated `--format` option in warning ([#7837](https://github.com/astral-sh/ruff/pull/7837))\n- Show changed files when running under `--check` ([#7788](https://github.com/astral-sh/ruff/pull/7788))\n- Write summary messages to stderr when fixing via stdin instead of omitting them ([#7838](https://github.com/astral-sh/ruff/pull/7838))\n- Update fix summary message in `check --diff` to include unsafe fix hints ([#7790](https://github.com/astral-sh/ruff/pull/7790))\n- Add notebook `cell` field to JSON output format ([#7664](https://github.com/astral-sh/ruff/pull/7664))\n- Rename applicability levels to `Safe`, `Unsafe`, and `Display` ([#7843](https://github.com/astral-sh/ruff/pull/7843))\n\n### Bug fixes\n\n- Fix bug where f-strings were allowed in match pattern literal ([#7857](https://github.com/astral-sh/ruff/pull/7857))\n- Fix `SIM110` with a yield in the condition ([#7801](https://github.com/astral-sh/ruff/pull/7801))\n- Preserve trailing comments in `C414` fixes ([#7775](https://github.com/astral-sh/ruff/pull/7775))\n- Check sequence type before triggering `unnecessary-enumerate` `len` suggestion ([#7781](https://github.com/astral-sh/ruff/pull/7781))\n- Use correct start location for class/function clause header ([#7802](https://github.com/astral-sh/ruff/pull/7802))\n- Fix incorrect fixes for `SIM101` ([#7798](https://github.com/astral-sh/ruff/pull/7798))\n- Format comment before parameter default correctly ([#7870](https://github.com/astral-sh/ruff/pull/7870))\n- Fix `E251` false positive inside f-strings ([#7894](https://github.com/astral-sh/ruff/pull/7894))\n- Allow bindings to be created and referenced within annotations ([#7885](https://github.com/astral-sh/ruff/pull/7885))\n- Show per-cell diffs when analyzing notebooks over `stdin` ([#7789](https://github.com/astral-sh/ruff/pull/7789))\n- Avoid curly brace escape in f-string format spec ([#7780](https://github.com/astral-sh/ruff/pull/7780))\n- Fix lexing single-quoted f-string with multi-line format spec ([#7787](https://github.com/astral-sh/ruff/pull/7787))\n- Consider nursery rules to be in-preview for `ruff rule` ([#7812](https://github.com/astral-sh/ruff/pull/7812))\n- Report precise location for invalid conversion flag ([#7809](https://github.com/astral-sh/ruff/pull/7809))\n- Visit pattern match guard as a boolean test ([#7911](https://github.com/astral-sh/ruff/pull/7911))\n- Respect `--unfixable` in `ISC` rules ([#7917](https://github.com/astral-sh/ruff/pull/7917))\n- Fix edge case with `PIE804` ([#7922](https://github.com/astral-sh/ruff/pull/7922))\n- Show custom message in `PTH118` for `Path.joinpath` with starred arguments ([#7852](https://github.com/astral-sh/ruff/pull/7852))\n- Fix false negative in `outdated-version-block` when using greater than comparisons ([#7920](https://github.com/astral-sh/ruff/pull/7920))\n- Avoid converting f-strings within Django `gettext` calls ([#7898](https://github.com/astral-sh/ruff/pull/7898))\n- Fix false positive in `PLR6301` ([#7933](https://github.com/astral-sh/ruff/pull/7933))\n- Treat type aliases as typing-only expressions e.g. resolves false positive in `TCH004` ([#7968](https://github.com/astral-sh/ruff/pull/7968))\n- Resolve `cache-dir` relative to project root ([#7962](https://github.com/astral-sh/ruff/pull/7962))\n- Respect subscripted base classes in type-checking rules e.g. resolves false positive in `TCH003` ([#7954](https://github.com/astral-sh/ruff/pull/7954))\n- Fix JSON schema limit for `line-length` ([#7883](https://github.com/astral-sh/ruff/pull/7883))\n- Fix commented-out `coalesce` keyword ([#7876](https://github.com/astral-sh/ruff/pull/7876))\n\n### Documentation\n\n- Document `reimplemented-starmap` performance effects ([#7846](https://github.com/astral-sh/ruff/pull/7846))\n- Default to following the system dark/light mode ([#7888](https://github.com/astral-sh/ruff/pull/7888))\n- Add documentation for fixes ([#7901](https://github.com/astral-sh/ruff/pull/7901))\n- Fix typo in docs of `PLR6301` ([#7831](https://github.com/astral-sh/ruff/pull/7831))\n- Update `UP038` docs to note that it results in slower code ([#7872](https://github.com/astral-sh/ruff/pull/7872))\n- crlf -> cr-lf ([#7766](https://github.com/astral-sh/ruff/pull/7766))\n- Add an example of an unsafe fix ([#7924](https://github.com/astral-sh/ruff/pull/7924))\n- Fix documented examples for `unnecessary-subscript-reversal` ([#7774](https://github.com/astral-sh/ruff/pull/7774))\n- Correct error in tuple example in ruff formatter docs ([#7822](https://github.com/astral-sh/ruff/pull/7822))\n- Add versioning policy to documentation ([#7923](https://github.com/astral-sh/ruff/pull/7923))\n- Fix invalid code in `FURB177` example ([#7832](https://github.com/astral-sh/ruff/pull/7832))\n\n### Formatter\n\n- Less scary `ruff format` message ([#7867](https://github.com/astral-sh/ruff/pull/7867))\n- Remove spaces from import statements ([#7859](https://github.com/astral-sh/ruff/pull/7859))\n- Formatter quoting for f-strings with triple quotes ([#7826](https://github.com/astral-sh/ruff/pull/7826))\n- Update `ruff_python_formatter` generate.py comment ([#7850](https://github.com/astral-sh/ruff/pull/7850))\n- Document one-call chaining deviation ([#7767](https://github.com/astral-sh/ruff/pull/7767))\n- Allow f-string modifications in line-shrinking cases ([#7818](https://github.com/astral-sh/ruff/pull/7818))\n- Add trailing comment deviation to README ([#7827](https://github.com/astral-sh/ruff/pull/7827))\n- Add trailing zero between dot and exponential ([#7956](https://github.com/astral-sh/ruff/pull/7956))\n- Force parentheses for power operations in unary expressions ([#7955](https://github.com/astral-sh/ruff/pull/7955))\n\n### Playground\n\n- Fix playground `Quick Fix` action ([#7824](https://github.com/astral-sh/ruff/pull/7824))\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.5263671875,
          "content": "# Contributor Covenant Code of Conduct\n\n- [Our Pledge](#our-pledge)\n- [Our Standards](#our-standards)\n- [Enforcement Responsibilities](#enforcement-responsibilities)\n- [Scope](#scope)\n- [Enforcement](#enforcement)\n- [Enforcement Guidelines](#enforcement-guidelines)\n    - [1. Correction](#1-correction)\n    - [2. Warning](#2-warning)\n    - [3. Temporary Ban](#3-temporary-ban)\n    - [4. Permanent Ban](#4-permanent-ban)\n- [Attribution](#attribution)\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n- Demonstrating empathy and kindness toward other people\n- Being respectful of differing opinions, viewpoints, and experiences\n- Giving and gracefully accepting constructive feedback\n- Accepting responsibility and apologizing to those affected by our mistakes,\n    and learning from the experience\n- Focusing on what is best not just for us as individuals, but for the\n    overall community\n\nExamples of unacceptable behavior include:\n\n- The use of sexualized language or imagery, and sexual attention or\n    advances of any kind\n- Trolling, insulting or derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or email\n    address, without their explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n    professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\n<charlie.r.marsh@gmail.com>.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior, harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available [here](https://www.contributor-covenant.org/version/2/0/code_of_conduct.html).\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\nFor answers to common questions about this code of conduct, see the [FAQ](https://www.contributor-covenant.org/faq).\nTranslations are available [here](https://www.contributor-covenant.org/translations).\n\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 40.1142578125,
          "content": "# Contributing to Ruff\n\nWelcome! We're happy to have you here. Thank you in advance for your contribution to Ruff.\n\n## The Basics\n\nRuff welcomes contributions in the form of pull requests.\n\nFor small changes (e.g., bug fixes), feel free to submit a PR.\n\nFor larger changes (e.g., new lint rules, new functionality, new configuration options), consider\ncreating an [**issue**](https://github.com/astral-sh/ruff/issues) outlining your proposed change.\nYou can also join us on [Discord](https://discord.com/invite/astral-sh) to discuss your idea with the\ncommunity. We've labeled [beginner-friendly tasks](https://github.com/astral-sh/ruff/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22)\nin the issue tracker, along with [bugs](https://github.com/astral-sh/ruff/issues?q=is%3Aissue+is%3Aopen+label%3Abug)\nand [improvements](https://github.com/astral-sh/ruff/issues?q=is%3Aissue+is%3Aopen+label%3Aaccepted)\nthat are ready for contributions.\n\nIf you have suggestions on how we might improve the contributing documentation, [let us know](https://github.com/astral-sh/ruff/discussions/5693)!\n\n### Prerequisites\n\nRuff is written in Rust. You'll need to install the\n[Rust toolchain](https://www.rust-lang.org/tools/install) for development.\n\nYou'll also need [Insta](https://insta.rs/docs/) to update snapshot tests:\n\n```shell\ncargo install cargo-insta\n```\n\nYou'll need [uv](https://docs.astral.sh/uv/getting-started/installation/) (or `pipx` and `pip`) to\nrun Python utility commands.\n\nYou can optionally install pre-commit hooks to automatically run the validation checks\nwhen making a commit:\n\n```shell\nuv tool install pre-commit\npre-commit install\n```\n\nWe recommend [nextest](https://nexte.st/) to run Ruff's test suite (via `cargo nextest run`),\nthough it's not strictly necessary:\n\n```shell\ncargo install cargo-nextest --locked\n```\n\nThroughout this guide, any usages of `cargo test` can be replaced with `cargo nextest run`,\nif you choose to install `nextest`.\n\n### Development\n\nAfter cloning the repository, run Ruff locally from the repository root with:\n\n```shell\ncargo run -p ruff -- check /path/to/file.py --no-cache\n```\n\nPrior to opening a pull request, ensure that your code has been auto-formatted,\nand that it passes both the lint and test validation checks:\n\n```shell\ncargo clippy --workspace --all-targets --all-features -- -D warnings  # Rust linting\nRUFF_UPDATE_SCHEMA=1 cargo test  # Rust testing and updating ruff.schema.json\nuvx pre-commit run --all-files --show-diff-on-failure  # Rust and Python formatting, Markdown and Python linting, etc.\n```\n\nThese checks will run on GitHub Actions when you open your pull request, but running them locally\nwill save you time and expedite the merge process.\n\nIf you're using VS Code, you can also install the recommended [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer) extension to get these checks while editing.\n\nNote that many code changes also require updating the snapshot tests, which is done interactively\nafter running `cargo test` like so:\n\n```shell\ncargo insta review\n```\n\nIf your pull request relates to a specific lint rule, include the category and rule code in the\ntitle, as in the following examples:\n\n- \\[`flake8-bugbear`\\] Avoid false positive for usage after `continue` (`B031`)\n- \\[`flake8-simplify`\\] Detect implicit `else` cases in `needless-bool` (`SIM103`)\n- \\[`pycodestyle`\\] Implement `redundant-backslash` (`E502`)\n\nYour pull request will be reviewed by a maintainer, which may involve a few rounds of iteration\nprior to merging.\n\n### Project Structure\n\nRuff is structured as a monorepo with a [flat crate structure](https://matklad.github.io/2021/08/22/large-rust-workspaces.html),\nsuch that all crates are contained in a flat `crates` directory.\n\nThe vast majority of the code, including all lint rules, lives in the `ruff_linter` crate (located\nat `crates/ruff_linter`). As a contributor, that's the crate that'll be most relevant to you.\n\nAt the time of writing, the repository includes the following crates:\n\n- `crates/ruff_linter`: library crate containing all lint rules and the core logic for running them.\n    If you're working on a rule, this is the crate for you.\n- `crates/ruff_benchmark`: binary crate for running micro-benchmarks.\n- `crates/ruff_cache`: library crate for caching lint results.\n- `crates/ruff`: binary crate containing Ruff's command-line interface.\n- `crates/ruff_dev`: binary crate containing utilities used in the development of Ruff itself (e.g.,\n    `cargo dev generate-all`), see the [`cargo dev`](#cargo-dev) section below.\n- `crates/ruff_diagnostics`: library crate for the rule-independent abstractions in the lint\n    diagnostics APIs.\n- `crates/ruff_formatter`: library crate for language agnostic code formatting logic based on an\n    intermediate representation. The backend for `ruff_python_formatter`.\n- `crates/ruff_index`: library crate inspired by `rustc_index`.\n- `crates/ruff_macros`: proc macro crate containing macros used by Ruff.\n- `crates/ruff_notebook`: library crate for parsing and manipulating Jupyter notebooks.\n- `crates/ruff_python_ast`: library crate containing Python-specific AST types and utilities.\n- `crates/ruff_python_codegen`: library crate containing utilities for generating Python source code.\n- `crates/ruff_python_formatter`: library crate implementing the Python formatter. Emits an\n    intermediate representation for each node, which `ruff_formatter` prints based on the configured\n    line length.\n- `crates/ruff_python_semantic`: library crate containing Python-specific semantic analysis logic,\n    including Ruff's semantic model. Used to resolve queries like \"What import does this variable\n    refer to?\"\n- `crates/ruff_python_stdlib`: library crate containing Python-specific standard library data, e.g.\n    the names of all built-in exceptions and which standard library types are immutable.\n- `crates/ruff_python_trivia`: library crate containing Python-specific trivia utilities (e.g.,\n    for analyzing indentation, newlines, etc.).\n- `crates/ruff_python_parser`: library crate containing the Python parser.\n- `crates/ruff_wasm`: library crate for exposing Ruff as a WebAssembly module. Powers the\n    [Ruff Playground](https://play.ruff.rs/).\n\n### Example: Adding a new lint rule\n\nAt a high level, the steps involved in adding a new lint rule are as follows:\n\n1. Determine a name for the new rule as per our [rule naming convention](#rule-naming-convention)\n    (e.g., `AssertFalse`, as in, \"allow `assert False`\").\n\n1. Create a file for your rule (e.g., `crates/ruff_linter/src/rules/flake8_bugbear/rules/assert_false.rs`).\n\n1. In that file, define a violation struct (e.g., `pub struct AssertFalse`). You can grep for\n    `#[derive(ViolationMetadata)]` to see examples.\n\n1. In that file, define a function that adds the violation to the diagnostic list as appropriate\n    (e.g., `pub(crate) fn assert_false`) based on whatever inputs are required for the rule (e.g.,\n    an `ast::StmtAssert` node).\n\n1. Define the logic for invoking the diagnostic in `crates/ruff_linter/src/checkers/ast/analyze` (for\n    AST-based rules), `crates/ruff_linter/src/checkers/tokens.rs` (for token-based rules),\n    `crates/ruff_linter/src/checkers/physical_lines.rs` (for text-based rules),\n    `crates/ruff_linter/src/checkers/filesystem.rs` (for filesystem-based rules), etc. For AST-based rules,\n    you'll likely want to modify `analyze/statement.rs` (if your rule is based on analyzing\n    statements, like imports) or `analyze/expression.rs` (if your rule is based on analyzing\n    expressions, like function calls).\n\n1. Map the violation struct to a rule code in `crates/ruff_linter/src/codes.rs` (e.g., `B011`). New rules\n    should be added in `RuleGroup::Preview`.\n\n1. Add proper [testing](#rule-testing-fixtures-and-snapshots) for your rule.\n\n1. Update the generated files (documentation and generated code).\n\nTo trigger the violation, you'll likely want to augment the logic in `crates/ruff_linter/src/checkers/ast.rs`\nto call your new function at the appropriate time and with the appropriate inputs. The `Checker`\ndefined therein is a Python AST visitor, which iterates over the AST, building up a semantic model,\nand calling out to lint rule analyzer functions as it goes.\n\nIf you need to inspect the AST, you can run `cargo dev print-ast` with a Python file. Grep\nfor the `Diagnostic::new` invocations to understand how other, similar rules are implemented.\n\nOnce you're satisfied with your code, add tests for your rule\n(see: [rule testing](#rule-testing-fixtures-and-snapshots)), and regenerate the documentation and\nassociated assets (like our JSON Schema) with `cargo dev generate-all`.\n\nFinally, submit a pull request, and include the category, rule name, and rule code in the title, as\nin:\n\n> \\[`pycodestyle`\\] Implement `redundant-backslash` (`E502`)\n\n#### Rule naming convention\n\nLike Clippy, Ruff's rule names should make grammatical and logical sense when read as \"allow\n${rule}\" or \"allow ${rule} items\", as in the context of suppression comments.\n\nFor example, `AssertFalse` fits this convention: it flags `assert False` statements, and so a\nsuppression comment would be framed as \"allow `assert False`\".\n\nAs such, rule names should...\n\n- Highlight the pattern that is being linted against, rather than the preferred alternative.\n    For example, `AssertFalse` guards against `assert False` statements.\n\n- _Not_ contain instructions on how to fix the violation, which instead belong in the rule\n    documentation and the `fix_title`.\n\n- _Not_ contain a redundant prefix, like `Disallow` or `Banned`, which are already implied by the\n    convention.\n\nWhen re-implementing rules from other linters, we prioritize adhering to this convention over\npreserving the original rule name.\n\n#### Rule testing: fixtures and snapshots\n\nTo test rules, Ruff uses snapshots of Ruff's output for a given file (fixture). Generally, there\nwill be one file per rule (e.g., `E402.py`), and each file will contain all necessary examples of\nboth violations and non-violations. `cargo insta review` will generate a snapshot file containing\nRuff's output for each fixture, which you can then commit alongside your changes.\n\nOnce you've completed the code for the rule itself, you can define tests with the following steps:\n\n1. Add a Python file to `crates/ruff_linter/resources/test/fixtures/[linter]` that contains the code you\n    want to test. The file name should match the rule name (e.g., `E402.py`), and it should include\n    examples of both violations and non-violations.\n\n1. Run Ruff locally against your file and verify the output is as expected. Once you're satisfied\n    with the output (you see the violations you expect, and no others), proceed to the next step.\n    For example, if you're adding a new rule named `E402`, you would run:\n\n    ```shell\n    cargo run -p ruff -- check crates/ruff_linter/resources/test/fixtures/pycodestyle/E402.py --no-cache --preview --select E402\n    ```\n\n    **Note:** Only a subset of rules are enabled by default. When testing a new rule, ensure that\n    you activate it by adding `--select ${rule_code}` to the command.\n\n1. Add the test to the relevant `crates/ruff_linter/src/rules/[linter]/mod.rs` file. If you're contributing\n    a rule to a pre-existing set, you should be able to find a similar example to pattern-match\n    against. If you're adding a new linter, you'll need to create a new `mod.rs` file (see,\n    e.g., `crates/ruff_linter/src/rules/flake8_bugbear/mod.rs`)\n\n1. Run `cargo test`. Your test will fail, but you'll be prompted to follow-up\n    with `cargo insta review`. Run `cargo insta review`, review and accept the generated snapshot,\n    then commit the snapshot file alongside the rest of your changes.\n\n1. Run `cargo test` again to ensure that your test passes.\n\n### Example: Adding a new configuration option\n\nRuff's user-facing settings live in a few different places.\n\nFirst, the command-line options are defined via the `Args` struct in `crates/ruff/src/args.rs`.\n\nSecond, the `pyproject.toml` options are defined in `crates/ruff_workspace/src/options.rs` (via the\n`Options` struct), `crates/ruff_workspace/src/configuration.rs` (via the `Configuration` struct),\nand `crates/ruff_workspace/src/settings.rs` (via the `Settings` struct), which then includes\nthe `LinterSettings` struct as a field.\n\nThese represent, respectively: the schema used to parse the `pyproject.toml` file; an internal,\nintermediate representation; and the final, internal representation used to power Ruff.\n\nTo add a new configuration option, you'll likely want to modify these latter few files (along with\n`args.rs`, if appropriate). If you want to pattern-match against an existing example, grep for\n`dummy_variable_rgx`, which defines a regular expression to match against acceptable unused\nvariables (e.g., `_`).\n\nNote that plugin-specific configuration options are defined in their own modules (e.g.,\n`Settings` in `crates/ruff_linter/src/flake8_unused_arguments/settings.rs` coupled with\n`Flake8UnusedArgumentsOptions` in `crates/ruff_workspace/src/options.rs`).\n\nFinally, regenerate the documentation and generated code with `cargo dev generate-all`.\n\n## MkDocs\n\nTo preview any changes to the documentation locally:\n\n1. Install the [Rust toolchain](https://www.rust-lang.org/tools/install).\n\n1. Generate the MkDocs site with:\n\n    ```shell\n    uv run --no-project --isolated --with-requirements docs/requirements.txt scripts/generate_mkdocs.py\n    ```\n\n1. Run the development server with:\n\n    ```shell\n    # For contributors.\n    uvx --with-requirements docs/requirements.txt -- mkdocs serve -f mkdocs.public.yml\n\n    # For members of the Astral org, which has access to MkDocs Insiders via sponsorship.\n    uvx --with-requirements docs/requirements-insiders.txt -- mkdocs serve -f mkdocs.insiders.yml\n    ```\n\nThe documentation should then be available locally at\n[http://127.0.0.1:8000/ruff/](http://127.0.0.1:8000/ruff/).\n\n## Release Process\n\nAs of now, Ruff has an ad hoc release process: releases are cut with high frequency via GitHub\nActions, which automatically generates the appropriate wheels across architectures and publishes\nthem to [PyPI](https://pypi.org/project/ruff/).\n\nRuff follows the [semver](https://semver.org/) versioning standard. However, as pre-1.0 software,\neven patch releases may contain [non-backwards-compatible changes](https://semver.org/#spec-item-4).\n\n### Creating a new release\n\n1. Install `uv`: `curl -LsSf https://astral.sh/uv/install.sh | sh`\n\n1. Run `./scripts/release.sh`; this command will:\n\n    - Generate a temporary virtual environment with `rooster`\n    - Generate a changelog entry in `CHANGELOG.md`\n    - Update versions in `pyproject.toml` and `Cargo.toml`\n    - Update references to versions in the `README.md` and documentation\n    - Display contributors for the release\n\n1. The changelog should then be editorialized for consistency\n\n    - Often labels will be missing from pull requests they will need to be manually organized into the proper section\n    - Changes should be edited to be user-facing descriptions, avoiding internal details\n\n1. Highlight any breaking changes in `BREAKING_CHANGES.md`\n\n1. Run `cargo check`. This should update the lock file with new versions.\n\n1. Create a pull request with the changelog and version updates\n\n1. Merge the PR\n\n1. Run the [release workflow](https://github.com/astral-sh/ruff/actions/workflows/release.yml) with:\n\n    - The new version number (without starting `v`)\n\n1. The release workflow will do the following:\n\n    1. Build all the assets. If this fails (even though we tested in step 4), we haven't tagged or\n        uploaded anything, you can restart after pushing a fix. If you just need to rerun the build,\n        make sure you're [re-running all the failed\n        jobs](https://docs.github.com/en/actions/managing-workflow-runs/re-running-workflows-and-jobs#re-running-failed-jobs-in-a-workflow) and not just a single failed job.\n    1. Upload to PyPI.\n    1. Create and push the Git tag (as extracted from `pyproject.toml`). We create the Git tag only\n        after building the wheels and uploading to PyPI, since we can't delete or modify the tag ([#4468](https://github.com/astral-sh/ruff/issues/4468)).\n    1. Attach artifacts to draft GitHub release\n    1. Trigger downstream repositories. This can fail non-catastrophically, as we can run any\n        downstream jobs manually if needed.\n\n1. Verify the GitHub release:\n\n    1. The Changelog should match the content of `CHANGELOG.md`\n    1. Append the contributors from the `scripts/release.sh` script\n\n1. If needed, [update the schemastore](https://github.com/astral-sh/ruff/blob/main/scripts/update_schemastore.py).\n\n    1. One can determine if an update is needed when\n        `git diff old-version-tag new-version-tag -- ruff.schema.json` returns a non-empty diff.\n    1. Once run successfully, you should follow the link in the output to create a PR.\n\n1. If needed, update the [`ruff-lsp`](https://github.com/astral-sh/ruff-lsp) and\n    [`ruff-vscode`](https://github.com/astral-sh/ruff-vscode) repositories and follow\n    the release instructions in those repositories. `ruff-lsp` should always be updated\n    before `ruff-vscode`.\n\n    This step is generally not required for a patch release, but should always be done\n    for a minor release.\n\n## Ecosystem CI\n\nGitHub Actions will run your changes against a number of real-world projects from GitHub and\nreport on any linter or formatter differences. You can also run those checks locally via:\n\n```shell\nuvx --from ./python/ruff-ecosystem ruff-ecosystem check ruff \"./target/debug/ruff\"\nuvx --from ./python/ruff-ecosystem ruff-ecosystem format ruff \"./target/debug/ruff\"\n```\n\nSee the [ruff-ecosystem package](https://github.com/astral-sh/ruff/tree/main/python/ruff-ecosystem) for more details.\n\n## Benchmarking and Profiling\n\nWe have several ways of benchmarking and profiling Ruff:\n\n- Our main performance benchmark comparing Ruff with other tools on the CPython codebase\n- Microbenchmarks which run the linter or the formatter on individual files. These run on pull requests.\n- Profiling the linter on either the microbenchmarks or entire projects\n\n> **Note**\n> When running benchmarks, ensure that your CPU is otherwise idle (e.g., close any background\n> applications, like web browsers). You may also want to switch your CPU to a \"performance\"\n> mode, if it exists, especially when benchmarking short-lived processes.\n\n### CPython Benchmark\n\nFirst, clone [CPython](https://github.com/python/cpython). It's a large and diverse Python codebase,\nwhich makes it a good target for benchmarking.\n\n```shell\ngit clone --branch 3.10 https://github.com/python/cpython.git crates/ruff_linter/resources/test/cpython\n```\n\nInstall `hyperfine`:\n\n```shell\ncargo install hyperfine\n```\n\nTo benchmark the release build:\n\n```shell\ncargo build --release && hyperfine --warmup 10 \\\n  \"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ --no-cache -e\" \\\n  \"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ -e\"\n\nBenchmark 1: ./target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache\n  Time (mean ± σ):     293.8 ms ±   3.2 ms    [User: 2384.6 ms, System: 90.3 ms]\n  Range (min … max):   289.9 ms … 301.6 ms    10 runs\n\nBenchmark 2: ./target/release/ruff ./crates/ruff_linter/resources/test/cpython/\n  Time (mean ± σ):      48.0 ms ±   3.1 ms    [User: 65.2 ms, System: 124.7 ms]\n  Range (min … max):    45.0 ms …  66.7 ms    62 runs\n\nSummary\n  './target/release/ruff ./crates/ruff_linter/resources/test/cpython/' ran\n    6.12 ± 0.41 times faster than './target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache'\n```\n\nTo benchmark against the ecosystem's existing tools:\n\n```shell\nhyperfine --ignore-failure --warmup 5 \\\n  \"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ --no-cache\" \\\n  \"pyflakes crates/ruff_linter/resources/test/cpython\" \\\n  \"autoflake --recursive --expand-star-imports --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys resources/test/cpython\" \\\n  \"pycodestyle crates/ruff_linter/resources/test/cpython\" \\\n  \"flake8 crates/ruff_linter/resources/test/cpython\"\n\nBenchmark 1: ./target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache\n  Time (mean ± σ):     294.3 ms ±   3.3 ms    [User: 2467.5 ms, System: 89.6 ms]\n  Range (min … max):   291.1 ms … 302.8 ms    10 runs\n\n  Warning: Ignoring non-zero exit code.\n\nBenchmark 2: pyflakes crates/ruff_linter/resources/test/cpython\n  Time (mean ± σ):     15.786 s ±  0.143 s    [User: 15.560 s, System: 0.214 s]\n  Range (min … max):   15.640 s … 16.157 s    10 runs\n\n  Warning: Ignoring non-zero exit code.\n\nBenchmark 3: autoflake --recursive --expand-star-imports --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys resources/test/cpython\n  Time (mean ± σ):      6.175 s ±  0.169 s    [User: 54.102 s, System: 1.057 s]\n  Range (min … max):    5.950 s …  6.391 s    10 runs\n\nBenchmark 4: pycodestyle crates/ruff_linter/resources/test/cpython\n  Time (mean ± σ):     46.921 s ±  0.508 s    [User: 46.699 s, System: 0.202 s]\n  Range (min … max):   46.171 s … 47.863 s    10 runs\n\n  Warning: Ignoring non-zero exit code.\n\nBenchmark 5: flake8 crates/ruff_linter/resources/test/cpython\n  Time (mean ± σ):     12.260 s ±  0.321 s    [User: 102.934 s, System: 1.230 s]\n  Range (min … max):   11.848 s … 12.933 s    10 runs\n\n  Warning: Ignoring non-zero exit code.\n\nSummary\n  './target/release/ruff ./crates/ruff_linter/resources/test/cpython/ --no-cache' ran\n   20.98 ± 0.62 times faster than 'autoflake --recursive --expand-star-imports --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys resources/test/cpython'\n   41.66 ± 1.18 times faster than 'flake8 crates/ruff_linter/resources/test/cpython'\n   53.64 ± 0.77 times faster than 'pyflakes crates/ruff_linter/resources/test/cpython'\n  159.43 ± 2.48 times faster than 'pycodestyle crates/ruff_linter/resources/test/cpython'\n```\n\nTo benchmark a subset of rules, e.g. `LineTooLong` and `DocLineTooLong`:\n\n```shell\ncargo build --release && hyperfine --warmup 10 \\\n  \"./target/release/ruff check ./crates/ruff_linter/resources/test/cpython/ --no-cache -e --select W505,E501\"\n```\n\nYou can run `uv venv --project ./scripts/benchmarks`, activate the venv and then run `uv sync --project ./scripts/benchmarks` to create a working environment for the\nabove. All reported benchmarks were computed using the versions specified by\n`./scripts/benchmarks/pyproject.toml` on Python 3.11.\n\nTo benchmark Pylint, remove the following files from the CPython repository:\n\n```shell\nrm Lib/test/bad_coding.py \\\n  Lib/test/bad_coding2.py \\\n  Lib/test/bad_getattr.py \\\n  Lib/test/bad_getattr2.py \\\n  Lib/test/bad_getattr3.py \\\n  Lib/test/badcert.pem \\\n  Lib/test/badkey.pem \\\n  Lib/test/badsyntax_3131.py \\\n  Lib/test/badsyntax_future10.py \\\n  Lib/test/badsyntax_future3.py \\\n  Lib/test/badsyntax_future4.py \\\n  Lib/test/badsyntax_future5.py \\\n  Lib/test/badsyntax_future6.py \\\n  Lib/test/badsyntax_future7.py \\\n  Lib/test/badsyntax_future8.py \\\n  Lib/test/badsyntax_future9.py \\\n  Lib/test/badsyntax_pep3120.py \\\n  Lib/test/test_asyncio/test_runners.py \\\n  Lib/test/test_copy.py \\\n  Lib/test/test_inspect.py \\\n  Lib/test/test_typing.py\n```\n\nThen, from `crates/ruff_linter/resources/test/cpython`, run: `time pylint -j 0 -E $(git ls-files '*.py')`. This\nwill execute Pylint with maximum parallelism and only report errors.\n\nTo benchmark Pyupgrade, run the following from `crates/ruff_linter/resources/test/cpython`:\n\n```shell\nhyperfine --ignore-failure --warmup 5 --prepare \"git reset --hard HEAD\" \\\n  \"find . -type f -name \\\"*.py\\\" | xargs -P 0 pyupgrade --py311-plus\"\n\nBenchmark 1: find . -type f -name \"*.py\" | xargs -P 0 pyupgrade --py311-plus\n  Time (mean ± σ):     30.119 s ±  0.195 s    [User: 28.638 s, System: 0.390 s]\n  Range (min … max):   29.813 s … 30.356 s    10 runs\n```\n\n### Microbenchmarks\n\nThe `ruff_benchmark` crate benchmarks the linter and the formatter on individual files.\n\nYou can run the benchmarks with\n\n```shell\ncargo benchmark\n```\n\n`cargo benchmark` is an alias for `cargo bench -p ruff_benchmark --bench linter --bench formatter --`\n\n#### Benchmark-driven Development\n\nRuff uses [Criterion.rs](https://bheisler.github.io/criterion.rs/book/) for benchmarks. You can use\n`--save-baseline=<name>` to store an initial baseline benchmark (e.g. on `main`) and then use\n`--benchmark=<name>` to compare against that benchmark. Criterion will print a message telling you\nif the benchmark improved/regressed compared to that baseline.\n\n```shell\n# Run once on your \"baseline\" code\ncargo bench -p ruff_benchmark -- --save-baseline=main\n\n# Then iterate with\ncargo bench -p ruff_benchmark -- --baseline=main\n```\n\n#### PR Summary\n\nYou can use `--save-baseline` and `critcmp` to get a pretty comparison between two recordings.\nThis is useful to illustrate the improvements of a PR.\n\n```shell\n# On main\ncargo bench -p ruff_benchmark -- --save-baseline=main\n\n# After applying your changes\ncargo bench -p ruff_benchmark -- --save-baseline=pr\n\ncritcmp main pr\n```\n\nYou must install [`critcmp`](https://github.com/BurntSushi/critcmp) for the comparison.\n\n```bash\ncargo install critcmp\n```\n\n#### Tips\n\n- Use `cargo bench -p ruff_benchmark <filter>` to only run specific benchmarks. For example: `cargo bench -p ruff_benchmark lexer`\n    to only run the lexer benchmarks.\n- Use `cargo bench -p ruff_benchmark -- --quiet` for a more cleaned up output (without statistical relevance)\n- Use `cargo bench -p ruff_benchmark -- --quick` to get faster results (more prone to noise)\n\n### Profiling Projects\n\nYou can either use the microbenchmarks from above or a project directory for benchmarking. There\nare a lot of profiling tools out there,\n[The Rust Performance Book](https://nnethercote.github.io/perf-book/profiling.html) lists some\nexamples.\n\n#### Linux\n\nInstall `perf` and build `ruff_benchmark` with the `profiling` profile and then run it with perf\n\n```shell\ncargo bench -p ruff_benchmark --no-run --profile=profiling && perf record --call-graph dwarf -F 9999 cargo bench -p ruff_benchmark --profile=profiling -- --profile-time=1\n```\n\nYou can also use the `ruff_dev` launcher to run `ruff check` multiple times on a repository to\ngather enough samples for a good flamegraph (change the 999, the sample rate, and the 30, the number\nof checks, to your liking)\n\n```shell\ncargo build --bin ruff_dev --profile=profiling\nperf record -g -F 999 target/profiling/ruff_dev repeat --repeat 30 --exit-zero --no-cache path/to/cpython > /dev/null\n```\n\nThen convert the recorded profile\n\n```shell\nperf script -F +pid > /tmp/test.perf\n```\n\nYou can now view the converted file with [firefox profiler](https://profiler.firefox.com/), with a\nmore in-depth guide [here](https://profiler.firefox.com/docs/#/./guide-perf-profiling)\n\nAn alternative is to convert the perf data to `flamegraph.svg` using\n[flamegraph](https://github.com/flamegraph-rs/flamegraph) (`cargo install flamegraph`):\n\n```shell\nflamegraph --perfdata perf.data --no-inline\n```\n\n#### Mac\n\nInstall [`cargo-instruments`](https://crates.io/crates/cargo-instruments):\n\n```shell\ncargo install cargo-instruments\n```\n\nThen run the profiler with\n\n```shell\ncargo instruments -t time --bench linter --profile profiling -p ruff_benchmark -- --profile-time=1\n```\n\n- `-t`: Specifies what to profile. Useful options are `time` to profile the wall time and `alloc`\n    for profiling the allocations.\n- You may want to pass an additional filter to run a single test file\n\nOtherwise, follow the instructions from the linux section.\n\n## `cargo dev`\n\n`cargo dev` is a shortcut for `cargo run --package ruff_dev --bin ruff_dev`. You can run some useful\nutils with it:\n\n- `cargo dev print-ast <file>`: Print the AST of a python file using Ruff's\n    [Python parser](https://github.com/astral-sh/ruff/tree/main/crates/ruff_python_parser).\n    For `if True: pass # comment`, you can see the syntax tree, the byte offsets for start and\n    stop of each node and also how the `:` token, the comment and whitespace are not represented\n    anymore:\n\n```text\n[\n    If(\n        StmtIf {\n            range: 0..13,\n            test: Constant(\n                ExprConstant {\n                    range: 3..7,\n                    value: Bool(\n                        true,\n                    ),\n                    kind: None,\n                },\n            ),\n            body: [\n                Pass(\n                    StmtPass {\n                        range: 9..13,\n                    },\n                ),\n            ],\n            orelse: [],\n        },\n    ),\n]\n```\n\n- `cargo dev print-tokens <file>`: Print the tokens that the AST is built upon. Again for\n    `if True: pass # comment`:\n\n```text\n0 If 2\n3 True 7\n7 Colon 8\n9 Pass 13\n14 Comment(\n    \"# comment\",\n) 23\n23 Newline 24\n```\n\n- `cargo dev print-cst <file>`: Print the CST of a python file using\n    [LibCST](https://github.com/Instagram/LibCST), which is used in addition to the RustPython parser\n    in Ruff. E.g. for `if True: pass # comment` everything including the whitespace is represented:\n\n```text\nModule {\n    body: [\n        Compound(\n            If(\n                If {\n                    test: Name(\n                        Name {\n                            value: \"True\",\n                            lpar: [],\n                            rpar: [],\n                        },\n                    ),\n                    body: SimpleStatementSuite(\n                        SimpleStatementSuite {\n                            body: [\n                                Pass(\n                                    Pass {\n                                        semicolon: None,\n                                    },\n                                ),\n                            ],\n                            leading_whitespace: SimpleWhitespace(\n                                \" \",\n                            ),\n                            trailing_whitespace: TrailingWhitespace {\n                                whitespace: SimpleWhitespace(\n                                    \" \",\n                                ),\n                                comment: Some(\n                                    Comment(\n                                        \"# comment\",\n                                    ),\n                                ),\n                                newline: Newline(\n                                    None,\n                                    Real,\n                                ),\n                            },\n                        },\n                    ),\n                    orelse: None,\n                    leading_lines: [],\n                    whitespace_before_test: SimpleWhitespace(\n                        \" \",\n                    ),\n                    whitespace_after_test: SimpleWhitespace(\n                        \"\",\n                    ),\n                    is_elif: false,\n                },\n            ),\n        ),\n    ],\n    header: [],\n    footer: [],\n    default_indent: \"    \",\n    default_newline: \"\\n\",\n    has_trailing_newline: true,\n    encoding: \"utf-8\",\n}\n```\n\n- `cargo dev generate-all`: Update `ruff.schema.json`, `docs/configuration.md` and `docs/rules`.\n    You can also set `RUFF_UPDATE_SCHEMA=1` to update `ruff.schema.json` during `cargo test`.\n- `cargo dev generate-cli-help`, `cargo dev generate-docs` and `cargo dev generate-json-schema`:\n    Update just `docs/configuration.md`, `docs/rules` and `ruff.schema.json` respectively.\n- `cargo dev generate-options`: Generate a markdown-compatible table of all `pyproject.toml`\n    options. Used for <https://docs.astral.sh/ruff/settings/>.\n- `cargo dev generate-rules-table`: Generate a markdown-compatible table of all rules. Used for <https://docs.astral.sh/ruff/rules/>.\n- `cargo dev round-trip <python file or jupyter notebook>`: Read a Python file or Jupyter Notebook,\n    parse it, serialize the parsed representation and write it back. Used to check how good our\n    representation is so that fixes don't rewrite irrelevant parts of a file.\n- `cargo dev format_dev`: See ruff_python_formatter README.md\n\n## Subsystems\n\n### Compilation Pipeline\n\nIf we view Ruff as a compiler, in which the inputs are paths to Python files and the outputs are\ndiagnostics, then our current compilation pipeline proceeds as follows:\n\n1. **File discovery**: Given paths like `foo/`, locate all Python files in any specified subdirectories, taking into account our hierarchical settings system and any `exclude` options.\n\n1. **Package resolution**: Determine the \"package root\" for every file by traversing over its parent directories and looking for `__init__.py` files.\n\n1. **Cache initialization**: For every \"package root\", initialize an empty cache.\n\n1. **Analysis**: For every file, in parallel:\n\n    1. **Cache read**: If the file is cached (i.e., its modification timestamp hasn't changed since it was last analyzed), short-circuit, and return the cached diagnostics.\n\n    1. **Tokenization**: Run the lexer over the file to generate a token stream.\n\n    1. **Indexing**: Extract metadata from the token stream, such as: comment ranges, `# noqa` locations, `# isort: off` locations, \"doc lines\", etc.\n\n    1. **Token-based rule evaluation**: Run any lint rules that are based on the contents of the token stream (e.g., commented-out code).\n\n    1. **Filesystem-based rule evaluation**: Run any lint rules that are based on the contents of the filesystem (e.g., lack of `__init__.py` file in a package).\n\n    1. **Logical line-based rule evaluation**: Run any lint rules that are based on logical lines (e.g., stylistic rules).\n\n    1. **Parsing**: Run the parser over the token stream to produce an AST. (This consumes the token stream, so anything that relies on the token stream needs to happen before parsing.)\n\n    1. **AST-based rule evaluation**: Run any lint rules that are based on the AST. This includes the vast majority of lint rules. As part of this step, we also build the semantic model for the current file as we traverse over the AST. Some lint rules are evaluated eagerly, as we iterate over the AST, while others are evaluated in a deferred manner (e.g., unused imports, since we can't determine whether an import is unused until we've finished analyzing the entire file), after we've finished the initial traversal.\n\n    1. **Import-based rule evaluation**: Run any lint rules that are based on the module's imports (e.g., import sorting). These could, in theory, be included in the AST-based rule evaluation phase — they're just separated for simplicity.\n\n    1. **Physical line-based rule evaluation**: Run any lint rules that are based on physical lines (e.g., line-length).\n\n    1. **Suppression enforcement**: Remove any violations that are suppressed via `# noqa` directives or `per-file-ignores`.\n\n    1. **Cache write**: Write the generated diagnostics to the package cache using the file as a key.\n\n1. **Reporting**: Print diagnostics in the specified format (text, JSON, etc.), to the specified output channel (stdout, a file, etc.).\n\n### Import Categorization\n\nTo understand Ruff's import categorization system, we first need to define two concepts:\n\n- \"Project root\": The directory containing the `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file,\n    discovered by identifying the \"closest\" such directory for each Python file. (If you're running\n    via `ruff --config /path/to/pyproject.toml`, then the current working directory is used as the\n    \"project root\".)\n- \"Package root\": The top-most directory defining the Python package that includes a given Python\n    file. To find the package root for a given Python file, traverse up its parent directories until\n    you reach a parent directory that doesn't contain an `__init__.py` file (and isn't in a subtree\n    marked as a [namespace package](https://docs.astral.sh/ruff/settings/#namespace-packages)); take the directory\n    just before that, i.e., the first directory in the package.\n\nFor example, given:\n\n```text\nmy_project\n├── pyproject.toml\n└── src\n    └── foo\n        ├── __init__.py\n        └── bar\n            ├── __init__.py\n            └── baz.py\n```\n\nThen when analyzing `baz.py`, the project root would be the top-level directory (`./my_project`),\nand the package root would be `./my_project/src/foo`.\n\n#### Project root\n\nThe project root does not have a significant impact beyond that all relative paths within the loaded\nconfiguration file are resolved relative to the project root.\n\nFor example, to indicate that `bar` above is a namespace package (it isn't, but let's run with it),\nthe `pyproject.toml` would list `namespace-packages = [\"./src/bar\"]`, which would resolve\nto `my_project/src/bar`.\n\nThe same logic applies when providing a configuration file via `--config`. In that case, the\n_current working directory_ is used as the project root, and so all paths in that configuration file\nare resolved relative to the current working directory. (As a general rule, we want to avoid relying\non the current working directory as much as possible, to ensure that Ruff exhibits the same behavior\nregardless of where and how you invoke it — but that's hard to avoid in this case.)\n\nAdditionally, if a `pyproject.toml` file _extends_ another configuration file, Ruff will still use\nthe directory containing that `pyproject.toml` file as the project root. For example, if\n`./my_project/pyproject.toml` contains:\n\n```toml\n[tool.ruff]\nextend = \"/path/to/pyproject.toml\"\n```\n\nThen Ruff will use `./my_project` as the project root, even though the configuration file extends\n`/path/to/pyproject.toml`. As such, if the configuration file at `/path/to/pyproject.toml` contains\nany relative paths, they will be resolved relative to `./my_project`.\n\nIf a project uses nested configuration files, then Ruff would detect multiple project roots, one for\neach configuration file.\n\n#### Package root\n\nThe package root is used to determine a file's \"module path\". Consider, again, `baz.py`. In that\ncase, `./my_project/src/foo` was identified as the package root, so the module path for `baz.py`\nwould resolve to `foo.bar.baz` — as computed by taking the relative path from the package root\n(inclusive of the root itself). The module path can be thought of as \"the path you would use to\nimport the module\" (e.g., `import foo.bar.baz`).\n\nThe package root and module path are used to, e.g., convert relative to absolute imports, and for\nimport categorization, as described below.\n\n#### Import categorization\n\nWhen sorting and formatting import blocks, Ruff categorizes every import into one of five\ncategories:\n\n1. **\"Future\"**: the import is a `__future__` import. That's easy: just look at the name of the\n    imported module!\n1. **\"Standard library\"**: the import comes from the Python standard library (e.g., `import os`).\n    This is easy too: we include a list of all known standard library modules in Ruff itself, so it's\n    a simple lookup.\n1. **\"Local folder\"**: the import is a relative import (e.g., `from .foo import bar`). This is easy\n    too: just check if the import includes a `level` (i.e., a dot-prefix).\n1. **\"First party\"**: the import is part of the current project. (More on this below.)\n1. **\"Third party\"**: everything else.\n\nThe real challenge lies in determining whether an import is first-party — everything else is either\ntrivial, or (as in the case of third-party) merely defined as \"not first-party\".\n\nThere are three ways in which an import can be categorized as \"first-party\":\n\n1. **Explicit settings**: the import is marked as such via the `known-first-party` setting. (This\n    should generally be seen as an escape hatch.)\n1. **Same-package**: the imported module is in the same package as the current file. This gets back\n    to the importance of the \"package root\" and the file's \"module path\". Imagine that we're\n    analyzing `baz.py` above. If `baz.py` contains any imports that appear to come from the `foo`\n    package (e.g., `from foo import bar` or `import foo.bar`), they'll be classified as first-party\n    automatically. This check is as simple as comparing the first segment of the current file's\n    module path to the first segment of the import.\n1. **Source roots**: Ruff supports a [`src`](https://docs.astral.sh/ruff/settings/#src) setting, which\n    sets the directories to scan when identifying first-party imports. The algorithm is\n    straightforward: given an import, like `import foo`, iterate over the directories enumerated in\n    the `src` setting and, for each directory, check for the existence of a subdirectory `foo` or a\n    file `foo.py`.\n\nBy default, `src` is set to the project root, along with `\"src\"` subdirectory in the project root.\nThis ensures that Ruff supports both flat and \"src\" layouts out of the box.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 107.4658203125,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"anes\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4b46cbb362ab8752921c97e041f5e366ee6297bd428a31275b9fcf1e380f7299\"\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7021ce4924a3f25f802b2cccd1af585e39ea1a363a1aa2e72afe54b67a3a7a7\"\n\n[[package]]\nname = \"annotate-snippets\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccaf7e9dfbb6ab22c82e473cd1a8a7bd313c19a5b7e40970f3d89ef5a5c9e81e\"\ndependencies = [\n \"unicode-width 0.1.13\",\n \"yansi-term\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d96bd03f33fe50a863e394ee9718a706f988b9079b20c3784fb726e7678b62fb\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bec1de6f59aedf83baf9ff929c98f2ad654b97c9510f4e70cf6f661d49fd5b1\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c75ac65da39e5fe5ab759307499ddad880d724eed2f6ce5b5e8a26f4f387928c\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e28923312444cdd728e4738b3f9c9cac739500909bb3d3c94b43551b16517648\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1cd54b81ec8d6180e24654d0b371ad22fc3dd083b6ff8ba325b72e00c87660a7\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.95\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34ac096ce696dc2fcabef30516bb13c0a68a11d30131d3df6f04711467681b04\"\n\n[[package]]\nname = \"append-only-vec\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74d9f7083455f1a474276ccd32374958d2cb591024aac45101c7623b10271347\"\n\n[[package]]\nname = \"arc-swap\"\nversion = \"1.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69f7f8c3906b62b754cd5326047894316021dcfe5a194c8ea52bdd94934a3457\"\n\n[[package]]\nname = \"argfile\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a1cc0ba69de57db40674c66f7cf2caee3981ddef084388482c95c0e2133e5e8\"\ndependencies = [\n \"fs-err\",\n \"os_str_bytes\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"assert_fs\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7efdb1fdb47602827a342857666feb372712cbc64b414172bd6b167a02927674\"\ndependencies = [\n \"anstyle\",\n \"doc-comment\",\n \"globwalk\",\n \"predicates\",\n \"predicates-core\",\n \"predicates-tree\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1fdabc7756949593fe60f30ec81974b613357de856987752631dea1e3394c80\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.22.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9475866fec1451be56a3c2400fd081ff546538961565ccb5b7142cbd22bc7a51\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1be3f42a67d6d345ecd59f675f3f012d6974981560836e938c22b424b85ce1be\"\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"boxcar\"\nversion = \"0.2.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f839cdf7e2d3198ac6ca003fd8ebc61715755f41c1cad15ff13df67531e00ed\"\n\n[[package]]\nname = \"bstr\"\nversion = \"1.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"531a9155a481e2ee699d4f98f43c0ca4ff8ee1bfd55c31e9e98fb29d2b176fe0\"\ndependencies = [\n \"memchr\",\n \"regex-automata 0.4.8\",\n \"serde\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"cachedir\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4703f3937077db8fa35bee3c8789343c1aec2585f0146f09d658d4ccc0e8d873\"\ndependencies = [\n \"tempfile\",\n]\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b96ec4966b5813e2c0507c1f86115c8c5abaadc3980879c3424042a02fd1ad3\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cast\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37b2a672a2cb129a2e41c10b1224bb368f9f37a2b16b612598138befd7b37eb5\"\n\n[[package]]\nname = \"castaway\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0abae9be0aaf9ea96a3b1b8b1b55c602ca751eba1b1500220cea4ecbafe7c0d5\"\ndependencies = [\n \"rustversion\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f34d93e62b03caf570cccc334cbc6c2fceca82f39211051345108adcba3eebdc\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"cfg_aliases\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613afe47fcd5fac7ccf1db93babcb082c5994d996f20b8b159f2ad1658eb5724\"\n\n[[package]]\nname = \"chic\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a5b5db619f3556839cb2223ae86ff3f9a09da2c5013be42bc9af08c9589bf70c\"\ndependencies = [\n \"annotate-snippets 0.6.1\",\n]\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e36cc9d416881d2e24f9a963be5fb1cd90966419ac844274161d10488b3e825\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"ciborium\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42e69ffd6f0917f5c029256a24d0161db17cea3997d185db0d35926308770f0e\"\ndependencies = [\n \"ciborium-io\",\n \"ciborium-ll\",\n \"serde\",\n]\n\n[[package]]\nname = \"ciborium-io\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05afea1e0a06c9be33d539b876f1ce3692f4afea2cb41f740e7743225ed1c757\"\n\n[[package]]\nname = \"ciborium-ll\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57663b653d948a338bfb3eeba9bb2fd5fcfaecb9e199e87e1eda4d9e8b240fd9\"\ndependencies = [\n \"ciborium-io\",\n \"half\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8eb5e908ef3a6efbe1ed62520fb7287959888c88485abe072543190ecc66783\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.26\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96b01801b5fc6a0a232407abc821660c9c6d25a1cafc0d4f85f29fb8d9afc121\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim 0.11.1\",\n \"terminal_size\",\n]\n\n[[package]]\nname = \"clap_complete\"\nversion = \"4.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd79504325bf38b10165b02e89b4347300f855f273c4cb30c4a3209e6583275e\"\ndependencies = [\n \"clap\",\n]\n\n[[package]]\nname = \"clap_complete_command\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da8e198c052315686d36371e8a3c5778b7852fc75cc313e4e11eeb7a644a1b62\"\ndependencies = [\n \"clap\",\n \"clap_complete\",\n \"clap_complete_nushell\",\n]\n\n[[package]]\nname = \"clap_complete_nushell\"\nversion = \"4.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1accf1b463dee0d3ab2be72591dccdab8bef314958340447c882c4c72acfe2a3\"\ndependencies = [\n \"clap\",\n \"clap_complete\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54b755194d6389280185988721fffba69495eed5ee9feeee9a599b53db80318c\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46ad14479a25103f283c0f10005961cf086d8dc42205bb44c46ac563475dca6\"\n\n[[package]]\nname = \"clearscreen\"\nversion = \"4.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c41dc435a7b98e4608224bbf65282309f5403719df9113621b30f8b6f74e2f4\"\ndependencies = [\n \"nix\",\n \"terminfo\",\n \"thiserror 2.0.11\",\n \"which\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"codspeed\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"450a0e9df9df1c154156f4344f99d8f6f6e69d0fc4de96ef6e2e68b2ec3bce97\"\ndependencies = [\n \"colored 2.2.0\",\n \"libc\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"codspeed-criterion-compat\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eb1a6cb9c20e177fde58cdef97c1c7c9264eb1424fe45c4fccedc2fb078a569\"\ndependencies = [\n \"codspeed\",\n \"colored 2.2.0\",\n \"criterion\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"117725a109d387c937a1533ce01b450cbde6b88abceea8473c4d7a85853cda3c\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"colored\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fde0e0ec90c9dfb3b4b1a0891a7dcd0e2bffde2f7efed5fe7c9bb00e5bfb915e\"\ndependencies = [\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"compact_str\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b79c4069c6cad78e2e0cdfcbd26275770669fb39fd308a752dc110e83b9af32\"\ndependencies = [\n \"castaway\",\n \"cfg-if\",\n \"itoa\",\n \"rustversion\",\n \"ryu\",\n \"serde\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e1f83fc076bd6dd27517eacdf25fef6c4dfe5f1d7448bafaaf3a26f13b5e4eb\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"unicode-width 0.1.13\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"console_error_panic_hook\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a06aeb73f470f66dcdbf7223caeebb85984942f22f1adb2a088cf9668146bbbc\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"console_log\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be8aed40e4edbf4d3b4431ab260b63fdc40f5780a4766824329ea0f1eefe3c0f\"\ndependencies = [\n \"log\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"countme\"\nversion = \"3.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7704b5fdd17b18ae31c4c1da5a2e0305a2bf17b5249300a9ee9ed7b72114c636\"\ndependencies = [\n \"dashmap 5.5.3\",\n \"once_cell\",\n \"rustc-hash 1.1.0\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"51e852e6dc9a5bed1fae92dd2375037bf2b768725bf3be87811edee3249d09ad\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"criterion\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f2b12d017a929603d80db1831cd3a24082f8137ce19c69e6447f54f5fc8d692f\"\ndependencies = [\n \"anes\",\n \"cast\",\n \"ciborium\",\n \"clap\",\n \"criterion-plot\",\n \"is-terminal\",\n \"itertools 0.10.5\",\n \"num-traits\",\n \"once_cell\",\n \"oorandom\",\n \"regex\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"tinytemplate\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"criterion-plot\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b50826342786a51a89e2da3a28f1c32b06e387201bc2d19791f622c673706b1\"\ndependencies = [\n \"cast\",\n \"itertools 0.10.5\",\n]\n\n[[package]]\nname = \"crossbeam\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1137cd7e7fc0fb5d3c5a8678be38ec56e819125d8d7907411fe24ccb943faca8\"\ndependencies = [\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"crossbeam-epoch\",\n \"crossbeam-queue\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ab3db02a9c5b5121e1e42fbdb1aeb65f5e02624cc58c43f2884c6ccac0b82f95\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-queue\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df0346b5d5e76ac2fe4e327c5fd1118d6be7c51dfb18f9b7922923f287471e35\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345\"\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"typenum\",\n]\n\n[[package]]\nname = \"ctrlc\"\nversion = \"3.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90eeab0aa92f3f9b4e87f258c72b139c207d251f9cbc1080a0086b86a8870dd3\"\ndependencies = [\n \"nix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"54e36fcd13ed84ffdfda6f5be89b31287cbb80c439841fe69e04841435464391\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c2cf1c23a687a1feeb728783b993c4e1ad83d99f351801977dd809b48d0a70f\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim 0.10.0\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.20.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a668eda54683121533a393014d8692171709ff57a7d61f187b6e782719f8933f\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"dashmap\"\nversion = \"5.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"978747c1d849a7d2ee5e8adc0159961c48fb7e5db2f06af6723b80123bb53856\"\ndependencies = [\n \"cfg-if\",\n \"hashbrown 0.14.5\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"dashmap\"\nversion = \"6.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5041cc499144891f3790297212f32a74fb938e5136a14943f338ef9e0ae276cf\"\ndependencies = [\n \"cfg-if\",\n \"crossbeam-utils\",\n \"hashbrown 0.14.5\",\n \"lock_api\",\n \"once_cell\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"diff\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n\n[[package]]\nname = \"difflib\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6184e33543162437515c2e2b48714794e37845ec9851711914eec9d308f6ebe8\"\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer\",\n \"crypto-common\",\n]\n\n[[package]]\nname = \"dir-test\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62c013fe825864f3e4593f36426c1fa7a74f5603f13ca8d1af7a990c1cd94a79\"\ndependencies = [\n \"dir-test-macros\",\n]\n\n[[package]]\nname = \"dir-test-macros\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d42f54d7b4a6bc2400fe5b338e35d1a335787585375322f49c5d5fe7b243da7e\"\ndependencies = [\n \"glob\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"dirs\"\nversion = \"5.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44c45a9d03d6676652bcb5e724c7e988de1acad23a711b5217ab9cbecbec2225\"\ndependencies = [\n \"dirs-sys\",\n]\n\n[[package]]\nname = \"dirs-sys\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"520f05a5cbd335fae5a99ff7a6ab8627577660ee5cfd6a94a6a929b52ff0321c\"\ndependencies = [\n \"libc\",\n \"option-ext\",\n \"redox_users\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"displaydoc\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97369cbbc041bc366949bc74d34658d6cda5621039731c6310521892a3a20ae0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"doc-comment\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fea41bba32d969b513997752735605054bc0dfa92b4c56bf1189f2e174be7a10\"\n\n[[package]]\nname = \"drop_bomb\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bda8e21c04aca2ae33ffc2fd8c23134f3cac46db123ba97bd9d3f3b8a4a85e1\"\n\n[[package]]\nname = \"dunce\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92773504d58c093f6de2459af4af33faa518c13451eb8f2b5698ed3d36e7c813\"\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"either\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"env_filter\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a009aa4810eb158359dda09d0c87378e4bbb89b5a801f016885a4707ba24f7ea\"\ndependencies = [\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"env_home\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7f84e12ccf0a7ddc17a6c41c93326024c42920d7ee630d04950e6926645c0fe\"\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.11.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcaee3d8e3cfc3fd92428d477bc97fc29ec8716d180c0d74c643bb26166660e0\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"env_filter\",\n \"humantime\",\n \"log\",\n]\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a258e46cdc063eb8519c00b9fc845fc47bcfca4130e2f08e88665ceda8474245\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"etcetera\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"136d1b5283a1ab77bd9257427ffd09d8667ced0570b6f938942bc7568ed5b943\"\ndependencies = [\n \"cfg-if\",\n \"home\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8c02a5121d4ea3eb16a80748c74f5549a5665e4c21333c6098f283870fbdea6\"\n\n[[package]]\nname = \"fern\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4316185f709b23713e41e3195f90edef7fb00c3ed4adc79769cf09cc762a3b29\"\ndependencies = [\n \"log\",\n]\n\n[[package]]\nname = \"filetime\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"35c0522e981e68cbfa8c3f978441a5f34b30b96e146b33cd3359176b50fe8586\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"libredox\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46303f565772937ffe1d394a4fac6f411c6013172fadde9dcdb1e147a086940e\"\ndependencies = [\n \"crc32fast\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"fs-err\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88a41f105fe1d5b6b34b2055e3dc59bb79b46b48b2040b9e6c7b4b5de097aa41\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"fsevent-sys\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76ee7a02da4d231650c7cea31349b889be2f45ddb3ef3032d2ec8185f6313fd2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n]\n\n[[package]]\nname = \"getopts\"\nversion = \"0.2.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"14dbbfd5c71d70241ecf9e6f13737f7b5ce823821063188d7e46c41d371eebd5\"\ndependencies = [\n \"unicode-width 0.1.13\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94b22e06ecb0110981051723910cbf0b5f5e09a2062dd7663334ee79a9d1286c\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"libc\",\n \"wasi\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8d1add55171497b4705a648c6b583acafb01d58050a51727785f0b2c8e0a2b2\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15f1ce686646e7f1e19bf7d5533fe443a45dbfb990e00629110797578b42fb19\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"log\",\n \"regex-automata 0.4.8\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"globwalk\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bf760ebf69878d9fd8f110c89703d90ce35095324d1f1edcb595c63945ee757\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"ignore\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"half\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6dd08c532ae367adf81c312a4580bc67f1d0fe8bc9c460520283f4c0ff277888\"\ndependencies = [\n \"cfg-if\",\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\ndependencies = [\n \"ahash\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289\"\n\n[[package]]\nname = \"hashlink\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ba4ff7128dee98c7dc9794b6a411377e1404dba1c97deb8d1a55297bd25d8af\"\ndependencies = [\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"icu_collections\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db2fa452206ebee18c4b5c2274dbf1de17008e874b4dc4f0aea9d01ca79e4526\"\ndependencies = [\n \"displaydoc\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"13acbb8371917fc971be86fc8057c41a64b521c184808a698c02acc242dbf637\"\ndependencies = [\n \"displaydoc\",\n \"litemap\",\n \"tinystr\",\n \"writeable\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01d11ac35de8e40fdeda00d9e1e9d92525f3f9d887cdd7aa81d727596788b54e\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_locid_transform_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_locid_transform_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdc8ff3388f852bede6b579ad4e978ab004f139284d7b28715f773507b946f6e\"\n\n[[package]]\nname = \"icu_normalizer\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"19ce3e0da2ec68599d193c93d088142efd7f9c5d6fc9b803774855747dc6a84f\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_normalizer_data\",\n \"icu_properties\",\n \"icu_provider\",\n \"smallvec\",\n \"utf16_iter\",\n \"utf8_iter\",\n \"write16\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_normalizer_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8cafbf7aa791e9b22bec55a167906f9e1215fd475cd22adfcf660e03e989516\"\n\n[[package]]\nname = \"icu_properties\"\nversion = \"1.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93d6020766cfc6302c15dbbc9c8778c37e62c14427cb7f6e601d849e092aeef5\"\ndependencies = [\n \"displaydoc\",\n \"icu_collections\",\n \"icu_locid_transform\",\n \"icu_properties_data\",\n \"icu_provider\",\n \"tinystr\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_properties_data\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"67a8effbc3dd3e4ba1afa8ad918d5684b8868b3b26500753effea8d2eed19569\"\n\n[[package]]\nname = \"icu_provider\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ed421c8a8ef78d3e2dbc98a973be2f3770cb42b606e3ab18d6237c4dfde68d9\"\ndependencies = [\n \"displaydoc\",\n \"icu_locid\",\n \"icu_provider_macros\",\n \"stable_deref_trait\",\n \"tinystr\",\n \"writeable\",\n \"yoke\",\n \"zerofrom\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"icu_provider_macros\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ec89e9337638ecdc08744df490b221a7399bf8d164eb52a665454e60e075ad6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"686f825264d630750a544639377bae737628043f20d38bbc029e8f29ea968a7e\"\ndependencies = [\n \"idna_adapter\",\n \"smallvec\",\n \"utf8_iter\",\n]\n\n[[package]]\nname = \"idna_adapter\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daca1df1c957320b2cf139ac61e7bd64fed304c5040df000a745aa1de3b4ef71\"\ndependencies = [\n \"icu_normalizer\",\n \"icu_properties\",\n]\n\n[[package]]\nname = \"ignore\"\nversion = \"0.4.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d89fd380afde86567dfba715db065673989d6253f42b88179abd3eae47bda4b\"\ndependencies = [\n \"crossbeam-deque\",\n \"globset\",\n \"log\",\n \"memchr\",\n \"regex-automata 0.4.8\",\n \"same-file\",\n \"walkdir\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"imara-diff\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc9da1a252bd44cd341657203722352efc9bc0c847d06ea6d2dc1cd1135e0a01\"\ndependencies = [\n \"ahash\",\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"imperative\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29a1f6526af721f9aec9ceed7ab8ebfca47f3399d08b80056c2acca3fcb694a9\"\ndependencies = [\n \"phf\",\n \"rust-stemmers\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62f822373a4fe84d4bb149bf54e584a7f4abec90e072ed49cda0edea5b95471f\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.15.2\",\n \"serde\",\n]\n\n[[package]]\nname = \"indicatif\"\nversion = \"0.17.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf675b85ed934d3c67b5c5469701eec7db22689d0a2139d856e0925fa28b281\"\ndependencies = [\n \"console\",\n \"number_prefix\",\n \"portable-atomic\",\n \"unicode-width 0.2.0\",\n \"vt100\",\n \"web-time\",\n]\n\n[[package]]\nname = \"indoc\"\nversion = \"2.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b248f5224d1d606005e02c97f5aa4e88eeb230488bcc03bc9ca4d7991399f2b5\"\n\n[[package]]\nname = \"inotify\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdd168d97690d0b8c412d6b6c10360277f4d7ee495c5d0d5d5fe0854923255cc\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"inotify-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"inotify-sys\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e05c02b5e89bff3b946cedeca278abc628fe811e604f027c45a8aa3cf793d0eb\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"insta\"\nversion = \"1.42.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6513e4067e16e69ed1db5ab56048ed65db32d10ba5fc1217f5393f8f17d8b5a5\"\ndependencies = [\n \"console\",\n \"globset\",\n \"linked-hash-map\",\n \"once_cell\",\n \"pest\",\n \"pest_derive\",\n \"regex\",\n \"ron\",\n \"serde\",\n \"similar\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"insta-cmd\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffeeefa927925cced49ccb01bf3e57c9d4cd132df21e576eb9415baeab2d3de6\"\ndependencies = [\n \"insta\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"instant\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"is-docker\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"928bae27f42bc99b60d9ac7334e3a21d10ad8f1835a4e12ec3ec0464765ed1b3\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"is-macro\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d57a3e447e24c22647738e4607f1df1e0ec6f72e16182c4cd199f647cdfb0e4\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f23ff5ef2b80d608d61efee834934d862cd92461afc0560dedf493e4c033738b\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"is-wsl\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"173609498df190136aa7dea1a91db051746d339e18476eed5ca40521f02d7aa5\"\ndependencies = [\n \"is-docker\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"413ee7dfc52ee1a4949ceeb7dbc8a33f2d6c088194d9f922fb8318faf1f01186\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b192c782037fadd9cfa75548310488aabdbf3d2da73885b31bd0abd03351285\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"jod-thread\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b23360e99b8717f20aaa4598f5a6541efbe30630039fbc7706cf954a87947ae\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a865e038f7f6ed956f788f0d7d60c541fff74c7bd74272c5d4cf15c63743e705\"\ndependencies = [\n \"once_cell\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"kqueue\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7447f1ca1b7b563588a205fe93dea8df60fd981423a768bc1c0ded35ed147d0c\"\ndependencies = [\n \"kqueue-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"kqueue-sys\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed9625ffda8729b85e45cf04090035ac368927b8cebc34898e7c120f52e4838b\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"libc\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.169\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5aba8db14291edd000dfcc4d620c7ebfb122c613afb886ca8803fa4e128a20a\"\n\n[[package]]\nname = \"libcst\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"649801a698a649791541a3125d396d5db065ed7cea53faca3652b0179394922a\"\ndependencies = [\n \"chic\",\n \"libcst_derive\",\n \"memchr\",\n \"paste\",\n \"peg\",\n \"regex\",\n \"thiserror 1.0.67\",\n]\n\n[[package]]\nname = \"libcst_derive\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3bf66548c351bcaed792ef3e2b430cc840fbde504e09da6b29ed114ca60dcd4b\"\ndependencies = [\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"libmimalloc-sys\"\nversion = \"0.1.39\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23aa6811d3bd4deb8a84dde645f943476d13b248d818edcf8ce0b2f37f036b44\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"libredox\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0ff37bd590ca25063e35af745c343cb7a0271906fb7b37e4813e8f79f00268d\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"libc\",\n \"redox_syscall 0.5.3\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0717cef1bc8b636c6e1c1bbdefc09e6322da8a9321966e8928ef80d20f7f770f\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78b3ae25bc7c8c38cec158d1f2757ee79e9b3740fbc7ccf0e59e4b08d793fa89\"\n\n[[package]]\nname = \"litemap\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"643cb0b8d4fcc284004d5fd0d67ccf61dfffadb7f75e1e71bc420f4688a3a704\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c168f8615b12bc01f9c17e2eb0cc07dcae1940121185446edc3744920e8ef45\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"lsp-server\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9462c4dc73e17f971ec1f171d44bfffb72e65a130117233388a0ebc7ec5656f9\"\ndependencies = [\n \"crossbeam-channel\",\n \"log\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"lsp-types\"\nversion = \"0.95.1\"\nsource = \"git+https://github.com/astral-sh/lsp-types.git?rev=3512a9f#3512a9f33eadc5402cfab1b8f7340824c8ca1439\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"serde\",\n \"serde_json\",\n \"serde_repr\",\n \"url\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8263075bb86c5a1b1427b5ae862e8889656f126e9f77c484496e8b47cf5c5558\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2532096657941c2fea9c289d370a250971c689d4f143798ff67113ec042024a5\"\n\n[[package]]\nname = \"matchit\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f926ade0c4e170215ae43342bf13b9310a437609c81f29f86c5df6657582ef9\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"mimalloc\"\nversion = \"0.1.43\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68914350ae34959d83f732418d51e2427a794055d0b9529f48259ac07af65633\"\ndependencies = [\n \"libmimalloc-sys\",\n]\n\n[[package]]\nname = \"minicov\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c71e683cd655513b99affab7d317deb690528255a0d5f717f1024093c12b169\"\ndependencies = [\n \"cc\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mio\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80e04d1dcff3aae0704555fe5fee3bcfaf3d1fdf8a7e521d5b9d2b42acb52cec\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"log\",\n \"wasi\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"natord\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"308d96db8debc727c3fd9744aac51751243420e46edf401010908da7f8d5e57c\"\n\n[[package]]\nname = \"newtype-uuid\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c8781e2ef64806278a55ad223f0bc875772fd40e1fe6e73e8adbf027817229d\"\ndependencies = [\n \"uuid\",\n]\n\n[[package]]\nname = \"nix\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71e2746dc3a24dd78b3cfcb7be93368c6de9963d30f43a6a73998a9cf4b17b46\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"cfg-if\",\n \"cfg_aliases\",\n \"libc\",\n]\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"notify\"\nversion = \"7.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c533b4c39709f9ba5005d8002048266593c1cfaf3c5f0739d5b8ab0c6c504009\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"filetime\",\n \"fsevent-sys\",\n \"inotify\",\n \"kqueue\",\n \"libc\",\n \"log\",\n \"mio\",\n \"notify-types\",\n \"walkdir\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"notify-types\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7393c226621f817964ffb3dc5704f9509e107a8b024b489cc2c1b217378785df\"\ndependencies = [\n \"instant\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.46.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8165726e8236064dbb45459242600304b42a5ea24ee2948e18e023bf7ba84\"\ndependencies = [\n \"overload\",\n \"winapi\",\n]\n\n[[package]]\nname = \"nu-ansi-term\"\nversion = \"0.50.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4a28e057d01f97e61255210fcff094d74ed0466038633e95017f5beb68e4399\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da0df0e5185db44f69b44f26786fe401b6c293d1907744beaa7fa62b2e5a517a\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"number_prefix\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b246a0e5f20af87141b25c173cd1b609bd7779a4617d6ec582abaf90870f3\"\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.20.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1261fe7e33c73b354eab43b1273a57c8f967d0391e80353e51f764ac02cf6775\"\n\n[[package]]\nname = \"oorandom\"\nversion = \"11.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ab1bc2a289d34bd04a330323ac98a1b4bc82c9d9fcb1e66b63caa84da26b575\"\n\n[[package]]\nname = \"option-ext\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"04744f49eae99ab78e0d5c0b603ab218f515ea8cfe5a456d7629ad883a3b6e7d\"\n\n[[package]]\nname = \"ordermap\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f80a48eb68b6a7da9829b8b0429011708f775af80676a91063d023a66a656106\"\ndependencies = [\n \"indexmap\",\n]\n\n[[package]]\nname = \"os_str_bytes\"\nversion = \"7.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ac44c994af577c799b1b4bd80dc214701e349873ad894d6cdf96f4f7526e0b9\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"overload\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b15813163c1d831bf4a13c3610c05c0d03b39feb07f7e09fa234dac9b15aaf39\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bf18183cf54e8d6059647fc3063646a1801cf30896933ec2311622cc4b9a27\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c42a9226546d68acdd9c0a280d17ce19bfe27a46bf68784e4066115788d008e\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall 0.4.1\",\n \"smallvec\",\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"path-absolutize\"\nversion = \"3.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4af381fe79fa195b4909485d99f73a80792331df0625188e707854f0b3383f5\"\ndependencies = [\n \"path-dedot\",\n]\n\n[[package]]\nname = \"path-dedot\"\nversion = \"3.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07ba0ad7e047712414213ff67533e6dd477af0a4e1d14fb52343e53d30ea9397\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"path-slash\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e91099d4268b0e11973f036e885d652fb0b21fedcf69738c627f94db6a44f42\"\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"df94ce210e5bc13cb6651479fa48d14f601d9858cfe0467f43ae157023b938d3\"\n\n[[package]]\nname = \"peg\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"295283b02df346d1ef66052a757869b2876ac29a6bb0ac3f5f7cd44aebe40e8f\"\ndependencies = [\n \"peg-macros\",\n \"peg-runtime\",\n]\n\n[[package]]\nname = \"peg-macros\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bdad6a1d9cf116a059582ce415d5f5566aabcd4008646779dab7fdc2a9a9d426\"\ndependencies = [\n \"peg-runtime\",\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"peg-runtime\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3aeb8f54c078314c2065ee649a7241f46b9d8e418e1a9581ba0546657d7aa3a\"\n\n[[package]]\nname = \"pep440_rs\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31095ca1f396e3de32745f42b20deef7bc09077f918b085307e8eab6ddd8fb9c\"\ndependencies = [\n \"once_cell\",\n \"serde\",\n \"unicode-width 0.2.0\",\n \"unscanny\",\n \"version-ranges\",\n]\n\n[[package]]\nname = \"pep508_rs\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c2feee999fa547bacab06a4881bacc74688858b92fa8ef1e206c748b0a76048\"\ndependencies = [\n \"boxcar\",\n \"indexmap\",\n \"itertools 0.13.0\",\n \"once_cell\",\n \"pep440_rs\",\n \"regex\",\n \"rustc-hash 2.1.0\",\n \"serde\",\n \"smallvec\",\n \"thiserror 1.0.67\",\n \"unicode-width 0.2.0\",\n \"url\",\n \"urlencoding\",\n \"version-ranges\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pest\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd53dff83f26735fdc1ca837098ccf133605d794cdae66acfc2bfac3ec809d95\"\ndependencies = [\n \"memchr\",\n \"thiserror 1.0.67\",\n \"ucd-trie\",\n]\n\n[[package]]\nname = \"pest_derive\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a548d2beca6773b1c244554d36fcf8548a8a58e74156968211567250e48e49a\"\ndependencies = [\n \"pest\",\n \"pest_generator\",\n]\n\n[[package]]\nname = \"pest_generator\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c93a82e8d145725dcbaf44e5ea887c8a869efdcc28706df2d08c69e17077183\"\ndependencies = [\n \"pest\",\n \"pest_meta\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"pest_meta\"\nversion = \"2.7.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a941429fea7e08bedec25e4f6785b6ffaacc6b755da98df5ef3e7dcf4a124c4f\"\ndependencies = [\n \"once_cell\",\n \"pest\",\n \"sha2\",\n]\n\n[[package]]\nname = \"phf\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ade2d8b8f33c7333b51bcf0428d37e217e9f32192ae4772156f65063b8ce03dc\"\ndependencies = [\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_codegen\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8d39688d359e6b34654d328e262234662d16cc0f60ec8dcbe5e718709342a5a\"\ndependencies = [\n \"phf_generator\",\n \"phf_shared\",\n]\n\n[[package]]\nname = \"phf_generator\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48e4cc64c2ad9ebe670cb8fd69dd50ae301650392e81c05f9bfcb2d5bdbc24b0\"\ndependencies = [\n \"phf_shared\",\n \"rand\",\n]\n\n[[package]]\nname = \"phf_shared\"\nversion = \"0.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90fcb95eef784c2ac79119d1dd819e162b5da872ce6f3c3abe1e8ca1c082f72b\"\ndependencies = [\n \"siphasher\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n\n[[package]]\nname = \"portable-atomic\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7170ef9988bc169ba16dd36a7fa041e5c4cbeb6a35b76d4c03daded371eae7c0\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"predicates\"\nversion = \"3.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e9086cc7640c29a356d1a29fd134380bee9d8f79a17410aa76e7ad295f42c97\"\ndependencies = [\n \"anstyle\",\n \"difflib\",\n \"predicates-core\",\n]\n\n[[package]]\nname = \"predicates-core\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8177bee8e75d6846599c6b9ff679ed51e882816914eec639944d7c9aa11931\"\n\n[[package]]\nname = \"predicates-tree\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41b740d195ed3166cd147c8047ec98db0e22ec019eb8eeb76d343b795304fb13\"\ndependencies = [\n \"predicates-core\",\n \"termtree\",\n]\n\n[[package]]\nname = \"pretty_assertions\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ae130e2f271fbc2ac3a40fb1d07180839cdbbe443c7a27e1e3c13c5cac0116d\"\ndependencies = [\n \"diff\",\n \"yansi\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.93\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60946a68e5f9d28b0dc1c21bb8a97ee7d018a8b322fa57838ba31cc878e22d99\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"pyproject-toml\"\nversion = \"0.13.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"643af57c3f36ba90a8b53e972727d8092f7408a9ebfbaf4c3d2c17b07c58d835\"\ndependencies = [\n \"indexmap\",\n \"pep440_rs\",\n \"pep508_rs\",\n \"serde\",\n \"thiserror 1.0.67\",\n \"toml\",\n]\n\n[[package]]\nname = \"quick-junit\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed1a693391a16317257103ad06a88c6529ac640846021da7c435a06fffdacd7\"\ndependencies = [\n \"chrono\",\n \"indexmap\",\n \"newtype-uuid\",\n \"quick-xml\",\n \"strip-ansi-escapes\",\n \"thiserror 2.0.11\",\n \"uuid\",\n]\n\n[[package]]\nname = \"quick-xml\"\nversion = \"0.37.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f22f29bdff3987b4d8632ef95fd6424ec7e4e0a57e2f4fc63e489e75357f6a03\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"quickcheck\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"588f6378e4dd99458b60ec275b4477add41ce4fa9f64dcba6f15adccb19b50d6\"\ndependencies = [\n \"rand\",\n]\n\n[[package]]\nname = \"quickcheck_macros\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b22a693222d716a9587786f37ac3f6b4faedb5b80c23914e7303ff5a1d8016e9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e4dccaaaf89514f546c693ddc140f729f958c247918a13380cccc6078391acc\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"rayon\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b418a60154510ca1a002a752ca9714984e21e4241e804d32555251faf8b78ffa\"\ndependencies = [\n \"either\",\n \"rayon-core\",\n]\n\n[[package]]\nname = \"rayon-core\"\nversion = \"1.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1465873a3dfdaa8ae7cb14b4383657caab0b3e8a0aa9ae8e04b044854c8dfce2\"\ndependencies = [\n \"crossbeam-deque\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"red_knot\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"chrono\",\n \"clap\",\n \"colored 3.0.0\",\n \"countme\",\n \"crossbeam\",\n \"ctrlc\",\n \"filetime\",\n \"rayon\",\n \"red_knot_python_semantic\",\n \"red_knot_server\",\n \"red_knot_workspace\",\n \"ruff_db\",\n \"salsa\",\n \"tempfile\",\n \"tracing\",\n \"tracing-flame\",\n \"tracing-subscriber\",\n \"tracing-tree\",\n]\n\n[[package]]\nname = \"red_knot_python_semantic\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"bitflags 2.7.0\",\n \"camino\",\n \"compact_str\",\n \"countme\",\n \"dir-test\",\n \"drop_bomb\",\n \"hashbrown 0.15.2\",\n \"indexmap\",\n \"insta\",\n \"itertools 0.14.0\",\n \"memchr\",\n \"ordermap\",\n \"quickcheck\",\n \"quickcheck_macros\",\n \"red_knot_test\",\n \"red_knot_vendored\",\n \"ruff_db\",\n \"ruff_index\",\n \"ruff_macros\",\n \"ruff_python_ast\",\n \"ruff_python_literal\",\n \"ruff_python_parser\",\n \"ruff_python_stdlib\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"salsa\",\n \"serde\",\n \"smallvec\",\n \"static_assertions\",\n \"tempfile\",\n \"test-case\",\n \"thiserror 2.0.11\",\n \"tracing\",\n]\n\n[[package]]\nname = \"red_knot_server\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"crossbeam\",\n \"jod-thread\",\n \"libc\",\n \"lsp-server\",\n \"lsp-types\",\n \"red_knot_workspace\",\n \"ruff_db\",\n \"ruff_notebook\",\n \"ruff_python_ast\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"serde\",\n \"serde_json\",\n \"shellexpand\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"red_knot_test\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"camino\",\n \"colored 3.0.0\",\n \"memchr\",\n \"red_knot_python_semantic\",\n \"red_knot_vendored\",\n \"regex\",\n \"ruff_db\",\n \"ruff_index\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"salsa\",\n \"serde\",\n \"smallvec\",\n \"toml\",\n]\n\n[[package]]\nname = \"red_knot_vendored\"\nversion = \"0.0.0\"\ndependencies = [\n \"path-slash\",\n \"ruff_db\",\n \"walkdir\",\n \"zip\",\n]\n\n[[package]]\nname = \"red_knot_wasm\"\nversion = \"0.0.0\"\ndependencies = [\n \"console_error_panic_hook\",\n \"console_log\",\n \"js-sys\",\n \"log\",\n \"red_knot_python_semantic\",\n \"red_knot_workspace\",\n \"ruff_db\",\n \"ruff_notebook\",\n \"wasm-bindgen\",\n \"wasm-bindgen-test\",\n]\n\n[[package]]\nname = \"red_knot_workspace\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"crossbeam\",\n \"glob\",\n \"insta\",\n \"notify\",\n \"pep440_rs\",\n \"rayon\",\n \"red_knot_python_semantic\",\n \"red_knot_vendored\",\n \"ruff_cache\",\n \"ruff_db\",\n \"ruff_python_ast\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"salsa\",\n \"serde\",\n \"thiserror 2.0.11\",\n \"toml\",\n \"tracing\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4722d768eff46b75989dd134e5c353f0d6296e5aaa3132e776cbdb56be7731aa\"\ndependencies = [\n \"bitflags 1.3.2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a908a6e00f1fdd0dfd9c0eb08ce85126f6d8bbda50017e74bc4a4b7d4a926a4\"\ndependencies = [\n \"bitflags 2.7.0\",\n]\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd283d9651eeda4b2a83a43c1c91b266c40fd76ecd39a50a8c630ae69dc72891\"\ndependencies = [\n \"getrandom\",\n \"libredox\",\n \"thiserror 1.0.67\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.8\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"368758f23274712b504848e9d5a6f010445cc8b87a7cdb4d7cbee666c1288da3\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.5\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c\"\n\n[[package]]\nname = \"ring\"\nversion = \"0.17.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c17fa4cb658e3583423e915b9f3acc01cceaee1860e33d59ebae66adc3a2dc0d\"\ndependencies = [\n \"cc\",\n \"cfg-if\",\n \"getrandom\",\n \"libc\",\n \"spin\",\n \"untrusted\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"ron\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88073939a61e5b7680558e6be56b419e208420c2adb92be54921fa6b72283f1a\"\ndependencies = [\n \"base64 0.13.1\",\n \"bitflags 1.3.2\",\n \"serde\",\n]\n\n[[package]]\nname = \"ruff\"\nversion = \"0.9.1\"\ndependencies = [\n \"anyhow\",\n \"argfile\",\n \"assert_fs\",\n \"bincode\",\n \"bitflags 2.7.0\",\n \"cachedir\",\n \"chrono\",\n \"clap\",\n \"clap_complete_command\",\n \"clearscreen\",\n \"colored 3.0.0\",\n \"filetime\",\n \"globwalk\",\n \"ignore\",\n \"indoc\",\n \"insta\",\n \"insta-cmd\",\n \"is-macro\",\n \"itertools 0.14.0\",\n \"log\",\n \"mimalloc\",\n \"notify\",\n \"path-absolutize\",\n \"rayon\",\n \"regex\",\n \"ruff_cache\",\n \"ruff_db\",\n \"ruff_diagnostics\",\n \"ruff_graph\",\n \"ruff_linter\",\n \"ruff_macros\",\n \"ruff_notebook\",\n \"ruff_python_ast\",\n \"ruff_python_formatter\",\n \"ruff_server\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"ruff_workspace\",\n \"rustc-hash 2.1.0\",\n \"serde\",\n \"serde_json\",\n \"shellexpand\",\n \"strum\",\n \"tempfile\",\n \"test-case\",\n \"thiserror 2.0.11\",\n \"tikv-jemallocator\",\n \"toml\",\n \"tracing\",\n \"walkdir\",\n \"wild\",\n]\n\n[[package]]\nname = \"ruff_benchmark\"\nversion = \"0.0.0\"\ndependencies = [\n \"codspeed-criterion-compat\",\n \"criterion\",\n \"mimalloc\",\n \"rayon\",\n \"red_knot_python_semantic\",\n \"red_knot_workspace\",\n \"ruff_db\",\n \"ruff_linter\",\n \"ruff_python_ast\",\n \"ruff_python_formatter\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"rustc-hash 2.1.0\",\n \"serde\",\n \"serde_json\",\n \"tikv-jemallocator\",\n \"ureq\",\n \"url\",\n]\n\n[[package]]\nname = \"ruff_cache\"\nversion = \"0.0.0\"\ndependencies = [\n \"filetime\",\n \"glob\",\n \"globset\",\n \"itertools 0.14.0\",\n \"regex\",\n \"ruff_macros\",\n \"seahash\",\n]\n\n[[package]]\nname = \"ruff_db\"\nversion = \"0.0.0\"\ndependencies = [\n \"camino\",\n \"countme\",\n \"dashmap 6.1.0\",\n \"dunce\",\n \"filetime\",\n \"glob\",\n \"ignore\",\n \"insta\",\n \"matchit\",\n \"path-slash\",\n \"ruff_cache\",\n \"ruff_notebook\",\n \"ruff_python_ast\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"salsa\",\n \"serde\",\n \"tempfile\",\n \"thiserror 2.0.11\",\n \"tracing\",\n \"tracing-subscriber\",\n \"tracing-tree\",\n \"web-time\",\n \"zip\",\n]\n\n[[package]]\nname = \"ruff_dev\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"ignore\",\n \"imara-diff\",\n \"indicatif\",\n \"indoc\",\n \"itertools 0.14.0\",\n \"libcst\",\n \"pretty_assertions\",\n \"rayon\",\n \"regex\",\n \"ruff\",\n \"ruff_diagnostics\",\n \"ruff_formatter\",\n \"ruff_linter\",\n \"ruff_notebook\",\n \"ruff_python_ast\",\n \"ruff_python_codegen\",\n \"ruff_python_formatter\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_workspace\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n \"similar\",\n \"strum\",\n \"tempfile\",\n \"toml\",\n \"tracing\",\n \"tracing-indicatif\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"ruff_diagnostics\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"is-macro\",\n \"log\",\n \"ruff_text_size\",\n \"serde\",\n]\n\n[[package]]\nname = \"ruff_formatter\"\nversion = \"0.0.0\"\ndependencies = [\n \"drop_bomb\",\n \"ruff_cache\",\n \"ruff_macros\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"schemars\",\n \"serde\",\n \"static_assertions\",\n \"tracing\",\n \"unicode-width 0.2.0\",\n]\n\n[[package]]\nname = \"ruff_graph\"\nversion = \"0.1.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"red_knot_python_semantic\",\n \"ruff_cache\",\n \"ruff_db\",\n \"ruff_linter\",\n \"ruff_macros\",\n \"ruff_python_ast\",\n \"ruff_python_parser\",\n \"salsa\",\n \"schemars\",\n \"serde\",\n \"zip\",\n]\n\n[[package]]\nname = \"ruff_index\"\nversion = \"0.0.0\"\ndependencies = [\n \"ruff_macros\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ruff_linter\"\nversion = \"0.9.1\"\ndependencies = [\n \"aho-corasick\",\n \"annotate-snippets 0.9.2\",\n \"anyhow\",\n \"bitflags 2.7.0\",\n \"chrono\",\n \"clap\",\n \"colored 3.0.0\",\n \"fern\",\n \"glob\",\n \"globset\",\n \"imperative\",\n \"insta\",\n \"is-macro\",\n \"is-wsl\",\n \"itertools 0.14.0\",\n \"libcst\",\n \"log\",\n \"memchr\",\n \"natord\",\n \"path-absolutize\",\n \"pathdiff\",\n \"pep440_rs\",\n \"pyproject-toml\",\n \"quick-junit\",\n \"regex\",\n \"ruff_cache\",\n \"ruff_diagnostics\",\n \"ruff_index\",\n \"ruff_macros\",\n \"ruff_notebook\",\n \"ruff_python_ast\",\n \"ruff_python_codegen\",\n \"ruff_python_index\",\n \"ruff_python_literal\",\n \"ruff_python_parser\",\n \"ruff_python_semantic\",\n \"ruff_python_stdlib\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n \"similar\",\n \"smallvec\",\n \"strum\",\n \"strum_macros\",\n \"test-case\",\n \"thiserror 2.0.11\",\n \"toml\",\n \"typed-arena\",\n \"unicode-normalization\",\n \"unicode-width 0.2.0\",\n \"unicode_names2\",\n \"url\",\n]\n\n[[package]]\nname = \"ruff_macros\"\nversion = \"0.0.0\"\ndependencies = [\n \"itertools 0.14.0\",\n \"proc-macro2\",\n \"quote\",\n \"ruff_python_trivia\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"ruff_notebook\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"itertools 0.14.0\",\n \"rand\",\n \"ruff_diagnostics\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"serde\",\n \"serde_json\",\n \"serde_with\",\n \"test-case\",\n \"thiserror 2.0.11\",\n \"uuid\",\n]\n\n[[package]]\nname = \"ruff_python_ast\"\nversion = \"0.0.0\"\ndependencies = [\n \"aho-corasick\",\n \"bitflags 2.7.0\",\n \"compact_str\",\n \"is-macro\",\n \"itertools 0.14.0\",\n \"memchr\",\n \"ruff_cache\",\n \"ruff_macros\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"schemars\",\n \"serde\",\n]\n\n[[package]]\nname = \"ruff_python_ast_integration_tests\"\nversion = \"0.0.0\"\ndependencies = [\n \"insta\",\n \"ruff_python_ast\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_text_size\",\n]\n\n[[package]]\nname = \"ruff_python_codegen\"\nversion = \"0.0.0\"\ndependencies = [\n \"ruff_python_ast\",\n \"ruff_python_literal\",\n \"ruff_python_parser\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n]\n\n[[package]]\nname = \"ruff_python_formatter\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"clap\",\n \"countme\",\n \"insta\",\n \"itertools 0.14.0\",\n \"memchr\",\n \"regex\",\n \"ruff_cache\",\n \"ruff_formatter\",\n \"ruff_macros\",\n \"ruff_python_ast\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"schemars\",\n \"serde\",\n \"serde_json\",\n \"similar\",\n \"smallvec\",\n \"static_assertions\",\n \"thiserror 2.0.11\",\n \"tracing\",\n]\n\n[[package]]\nname = \"ruff_python_index\"\nversion = \"0.0.0\"\ndependencies = [\n \"ruff_python_ast\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n]\n\n[[package]]\nname = \"ruff_python_literal\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"itertools 0.14.0\",\n \"ruff_python_ast\",\n \"unic-ucd-category\",\n]\n\n[[package]]\nname = \"ruff_python_parser\"\nversion = \"0.0.0\"\ndependencies = [\n \"annotate-snippets 0.9.2\",\n \"anyhow\",\n \"bitflags 2.7.0\",\n \"bstr\",\n \"compact_str\",\n \"insta\",\n \"memchr\",\n \"ruff_python_ast\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"static_assertions\",\n \"unicode-ident\",\n \"unicode-normalization\",\n \"unicode_names2\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"ruff_python_resolver\"\nversion = \"0.0.0\"\ndependencies = [\n \"env_logger\",\n \"insta\",\n \"log\",\n \"tempfile\",\n]\n\n[[package]]\nname = \"ruff_python_semantic\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"is-macro\",\n \"ruff_cache\",\n \"ruff_index\",\n \"ruff_macros\",\n \"ruff_python_ast\",\n \"ruff_python_parser\",\n \"ruff_python_stdlib\",\n \"ruff_text_size\",\n \"rustc-hash 2.1.0\",\n \"schemars\",\n \"serde\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"ruff_python_stdlib\"\nversion = \"0.0.0\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"ruff_python_trivia\"\nversion = \"0.0.0\"\ndependencies = [\n \"itertools 0.14.0\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"ruff_python_trivia_integration_tests\"\nversion = \"0.0.0\"\ndependencies = [\n \"insta\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_text_size\",\n]\n\n[[package]]\nname = \"ruff_server\"\nversion = \"0.2.2\"\ndependencies = [\n \"anyhow\",\n \"crossbeam\",\n \"ignore\",\n \"insta\",\n \"jod-thread\",\n \"libc\",\n \"lsp-server\",\n \"lsp-types\",\n \"regex\",\n \"ruff_diagnostics\",\n \"ruff_formatter\",\n \"ruff_linter\",\n \"ruff_notebook\",\n \"ruff_python_ast\",\n \"ruff_python_codegen\",\n \"ruff_python_formatter\",\n \"ruff_python_index\",\n \"ruff_python_parser\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"ruff_workspace\",\n \"rustc-hash 2.1.0\",\n \"serde\",\n \"serde_json\",\n \"shellexpand\",\n \"thiserror 2.0.11\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"ruff_source_file\"\nversion = \"0.0.0\"\ndependencies = [\n \"memchr\",\n \"ruff_text_size\",\n \"serde\",\n]\n\n[[package]]\nname = \"ruff_text_size\"\nversion = \"0.0.0\"\ndependencies = [\n \"schemars\",\n \"serde\",\n \"serde_test\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ruff_wasm\"\nversion = \"0.9.1\"\ndependencies = [\n \"console_error_panic_hook\",\n \"console_log\",\n \"js-sys\",\n \"log\",\n \"ruff_formatter\",\n \"ruff_linter\",\n \"ruff_python_ast\",\n \"ruff_python_codegen\",\n \"ruff_python_formatter\",\n \"ruff_python_index\",\n \"ruff_python_parser\",\n \"ruff_python_trivia\",\n \"ruff_source_file\",\n \"ruff_text_size\",\n \"ruff_workspace\",\n \"serde\",\n \"serde-wasm-bindgen\",\n \"wasm-bindgen\",\n \"wasm-bindgen-test\",\n]\n\n[[package]]\nname = \"ruff_workspace\"\nversion = \"0.0.0\"\ndependencies = [\n \"anyhow\",\n \"colored 3.0.0\",\n \"etcetera\",\n \"glob\",\n \"globset\",\n \"ignore\",\n \"is-macro\",\n \"itertools 0.14.0\",\n \"log\",\n \"matchit\",\n \"path-absolutize\",\n \"path-slash\",\n \"pep440_rs\",\n \"regex\",\n \"ruff_cache\",\n \"ruff_formatter\",\n \"ruff_graph\",\n \"ruff_linter\",\n \"ruff_macros\",\n \"ruff_python_ast\",\n \"ruff_python_formatter\",\n \"ruff_python_semantic\",\n \"ruff_python_stdlib\",\n \"ruff_source_file\",\n \"rustc-hash 2.1.0\",\n \"schemars\",\n \"serde\",\n \"shellexpand\",\n \"strum\",\n \"tempfile\",\n \"toml\",\n]\n\n[[package]]\nname = \"rust-stemmers\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e46a2036019fdb888131db7a4c847a1063a7493f971ed94ea82c67eada63ca54\"\ndependencies = [\n \"serde\",\n \"serde_derive\",\n]\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c7fb8039b3032c191086b10f11f319a6e99e1e82889c5cc6046f515c9db1d497\"\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99e4ea3e1cdc4b559b8e5650f9c8e5998e3e5c1343b4eaf034565f32318d63c0\"\ndependencies = [\n \"bitflags 2.7.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustls\"\nversion = \"0.23.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"934b404430bb06b3fae2cba809eb45a1ab1aecd64491213d7c3301b88393f8d1\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"ring\",\n \"rustls-pki-types\",\n \"rustls-webpki\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"rustls-pki-types\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"16f1201b3c9a7ee8039bcadc17b7e605e2945b27eee7631788c1bd2b0643674b\"\n\n[[package]]\nname = \"rustls-webpki\"\nversion = \"0.102.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"64ca1bc8749bd4cf37b5ce386cc146580777b4e8572c7b97baf22c83f444bee9\"\ndependencies = [\n \"ring\",\n \"rustls-pki-types\",\n \"untrusted\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80af6f9131f277a45a3fba6ce8e2258037bb0477a67e610d3c1fe046ab31de47\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e86697c916019a8588c99b5fac3cead74ec0b4b819707a682fd4d23fa0ce1ba1\"\n\n[[package]]\nname = \"salsa\"\nversion = \"0.18.0\"\nsource = \"git+https://github.com/salsa-rs/salsa.git?rev=88a1d7774d78f048fbd77d40abca9ebd729fd1f0#88a1d7774d78f048fbd77d40abca9ebd729fd1f0\"\ndependencies = [\n \"append-only-vec\",\n \"arc-swap\",\n \"crossbeam\",\n \"dashmap 6.1.0\",\n \"hashlink\",\n \"indexmap\",\n \"parking_lot\",\n \"rayon\",\n \"rustc-hash 2.1.0\",\n \"salsa-macro-rules\",\n \"salsa-macros\",\n \"smallvec\",\n \"tracing\",\n]\n\n[[package]]\nname = \"salsa-macro-rules\"\nversion = \"0.1.0\"\nsource = \"git+https://github.com/salsa-rs/salsa.git?rev=88a1d7774d78f048fbd77d40abca9ebd729fd1f0#88a1d7774d78f048fbd77d40abca9ebd729fd1f0\"\n\n[[package]]\nname = \"salsa-macros\"\nversion = \"0.18.0\"\nsource = \"git+https://github.com/salsa-rs/salsa.git?rev=88a1d7774d78f048fbd77d40abca9ebd729fd1f0#88a1d7774d78f048fbd77d40abca9ebd729fd1f0\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"schemars\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09c024468a378b7e36765cd36702b7a90cc3cba11654f6685c8f233408e89e92\"\ndependencies = [\n \"dyn-clone\",\n \"schemars_derive\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"schemars_derive\"\nversion = \"0.8.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1eee588578aff73f856ab961cd2f79e36bc45d7ded33a7562adba4667aecc0e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"serde_derive_internals\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"scoped-tls\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1cf6437eb19a8f4a6cc0f7dca544973b0b78843adbfeb3683d1a94a0024a294\"\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"seahash\"\nversion = \"4.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1c107b6f4780854c8b126e228ea8869f4d7b71260f962fefb57b996b8959ba6b\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02fc4265df13d6fa1d00ecff087228cc0a2b5f3c0e87e258d8b94a156e984c70\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde-wasm-bindgen\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8302e169f0eddcc139c70f139d19d6467353af16f9fce27e8c30158036a1e16b\"\ndependencies = [\n \"js-sys\",\n \"serde\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.217\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a9bf7cf98d04a2b28aead066b7496853d4779c9cc183c440dbac457641e19a0\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"serde_derive_internals\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"330f01ce65a3a5fe59a60c82f3c9a024b573b8a6e875bd233fe5f934e71d54e3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.135\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b0d7ba2887406110130a978386c4e1befb98c674b4fba677954e4db976630d9\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_repr\"\nversion = \"0.1.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c64451ba24fc7a6a2d60fc75dd9c83c90903b19028d4eff35e88fc1e86564e9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb5b1b31579f3811bf615c144393417496f152e12ac8b7663bf664f4a815306d\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_test\"\nversion = \"1.0.177\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f901ee573cab6b3060453d2d5f0bae4e6d628c23c0a962ff9b5f1d7c8d4f1ed\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_with\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d6b6f7f2fcb69f747921f79f3926bd1e203fce4fef62c268dd3abfb6d86029aa\"\ndependencies = [\n \"serde\",\n \"serde_derive\",\n \"serde_with_macros\",\n]\n\n[[package]]\nname = \"serde_with_macros\"\nversion = \"3.12.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d00caa5193a3c8362ac2b73be6b9e768aa5a4b2f721d8f4b339600c3cb51f8e\"\ndependencies = [\n \"darling\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shellexpand\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da03fa3b94cc19e3ebfc88c4229c49d8f08cdbd1228870a45f0ffdf84988e14b\"\ndependencies = [\n \"dirs\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"similar\"\nversion = \"2.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1de1d4f81173b03af4c0cbed3c898f6bff5b870e4a7f5d6f4057d62a7a4b686e\"\n\n[[package]]\nname = \"siphasher\"\nversion = \"0.3.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38b58827f4464d87d377d175e90bf58eb00fd8716ff0a62f80356b5e61555d0d\"\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strip-ansi-escapes\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55ff8ef943b384c414f54aefa961dd2bd853add74ec75e7ac74cf91dba62bcfa\"\ndependencies = [\n \"vte\",\n]\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.26.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fec0f0aef304996cf250b31b5a10dee7980c85da9d759361292b8bca5a18f06\"\ndependencies = [\n \"strum_macros\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.26.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c6bee85a5a24955dc440386795aa378cd9cf82acd5f764469152d2270e581be\"\ndependencies = [\n \"heck\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.96\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5d0adab1ae378d7f53bdebc67a39f1f151407ef230f0ce2883572f5d8985c80\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.14.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28cce251fcbc87fac86a866eeb0d6c2d536fc16d06f184bb61aeae11aa4cee0c\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"once_cell\",\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4f599bd7ca042cfdf8f4512b277c02ba102247820f9d9d4a9f521f496751a6ef\"\ndependencies = [\n \"rustix\",\n \"windows-sys 0.59.0\",\n]\n\n[[package]]\nname = \"terminfo\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4ea810f0692f9f51b382fff5893887bb4580f5fa246fde546e0b13e7fcee662\"\ndependencies = [\n \"fnv\",\n \"nom\",\n \"phf\",\n \"phf_codegen\",\n]\n\n[[package]]\nname = \"termtree\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3369f5ac52d5eb6ab48c6b4ffdc8efbcad6b89c765749064ba298f2c68a16a76\"\n\n[[package]]\nname = \"test-case\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb2550dd13afcd286853192af8601920d959b14c401fcece38071d53bf0768a8\"\ndependencies = [\n \"test-case-macros\",\n]\n\n[[package]]\nname = \"test-case-core\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adcb7fd841cd518e279be3d5a3eb0636409487998a4aff22f3de87b81e88384f\"\ndependencies = [\n \"cfg-if\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"test-case-macros\"\nversion = \"3.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c89e72a01ed4c579669add59014b9a524d609c0c88c6a585ce37485879f6ffb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n \"test-case-core\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.67\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b3c6efbfc763e64eb85c11c25320f0737cb7364c4b6336db90aa9ebe27a0bbd\"\ndependencies = [\n \"thiserror-impl 1.0.67\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"2.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d452f284b73e6d76dd36758a0c8684b1d5be31f92b89d07fd5822175732206fc\"\ndependencies = [\n \"thiserror-impl 2.0.11\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.67\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b607164372e89797d78b8e23a6d67d5d1038c1c65efd52e1389ef8b77caba2a6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"2.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26afc1baea8a989337eeb52b6e72a039780ce45c3edfcc9c5b9d112feeb173c2\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tikv-jemalloc-sys\"\nversion = \"0.6.0+5.3.0-1-ge13ca993e8ccb9ba9847cc330696e02839f328f7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd3c60906412afa9c2b5b5a48ca6a5abe5736aec9eb48ad05037a677e52e4e2d\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"tikv-jemallocator\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cec5ff18518d81584f477e9bfdf957f5bb0979b0bac3af4ca30b5b3ae2d2865\"\ndependencies = [\n \"libc\",\n \"tikv-jemalloc-sys\",\n]\n\n[[package]]\nname = \"tinystr\"\nversion = \"0.7.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9117f5d4db391c1cf6927e7bea3db74b9a1c1add8f7eda9ffd5364f40f57b82f\"\ndependencies = [\n \"displaydoc\",\n \"zerovec\",\n]\n\n[[package]]\nname = \"tinytemplate\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"be4d6b5f19ff7664e8c98d03e2139cb510db9b0a60b55f8e8709b689d939b6bc\"\ndependencies = [\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1ed1f98e3fdc28d6d910e6737ae6ab1a93bf1985935a1193e68f93eeb68d24e\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dd7358ecb8fc2f8d014bf86f6f638ce72ba252a2c3a2572f2a795f1d23efb41\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"583c44c02ad26b0c3f3066fe629275e50627026c51ac2e595cca4c230ce1ce1d\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.41\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"784e0ac535deb450455cbfa28a6f0df145ea1bb7ae51b821cf5e7927fdcfbdd0\"\ndependencies = [\n \"log\",\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.28\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"395ae124c09f9e6918a2310af6038fba074bcf474ac352496d5910dd59a2226d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.33\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e672c95779cf947c5311f83787af4fa8fffd12fb27e4993211a84bdfd9610f9c\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-flame\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0bae117ee14789185e129aaee5d93750abe67fdc5a9a62650452bfe4e122a3a9\"\ndependencies = [\n \"lazy_static\",\n \"tracing\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"tracing-indicatif\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74ba258e9de86447f75edf6455fded8e5242704c6fccffe7bf8d7fb6daef1180\"\ndependencies = [\n \"indicatif\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee855f1f400bd0e5c02d150ae5de3840039a3f54b025156404e34c23c03f47c3\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e8189decb5ac0fa7bc8b96b7cb9b2701d60d48805aca84a238004d665fcc4008\"\ndependencies = [\n \"matchers\",\n \"nu-ansi-term 0.46.0\",\n \"once_cell\",\n \"regex\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n]\n\n[[package]]\nname = \"tracing-tree\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f459ca79f1b0d5f71c54ddfde6debfc59c8b6eeb46808ae492077f739dc7b49c\"\ndependencies = [\n \"nu-ansi-term 0.50.1\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"typed-arena\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6af6ae20167a9ece4bcb41af5b80f8a1f1df981f6391189ce00fd257af04126a\"\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"ucd-trie\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed646292ffc8188ef8ea4d1e0e0150fb15a5c2e12ad9b8fc191ae7a8a7f3c4b9\"\n\n[[package]]\nname = \"unic-char-property\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8c57a407d9b6fa02b4795eb81c5b6652060a15a7903ea981f3d723e6c0be221\"\ndependencies = [\n \"unic-char-range\",\n]\n\n[[package]]\nname = \"unic-char-range\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0398022d5f700414f6b899e10b8348231abf9173fa93144cbc1a43b9793c1fbc\"\n\n[[package]]\nname = \"unic-common\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"80d7ff825a6a654ee85a63e80f92f054f904f21e7d12da4e22f9834a4aaa35bc\"\n\n[[package]]\nname = \"unic-ucd-category\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b8d4591f5fcfe1bd4453baaf803c40e1b1e69ff8455c47620440b46efef91c0\"\ndependencies = [\n \"matches\",\n \"unic-char-property\",\n \"unic-char-range\",\n \"unic-ucd-version\",\n]\n\n[[package]]\nname = \"unic-ucd-version\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96bd2f2237fe450fcd0a1d2f5f4e91711124f7857ba2e964247776ebeeb7b0c4\"\ndependencies = [\n \"unic-common\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb9e6ca4f869e1180728b7950e35922a7fc6397f7b641499e8f3ef06e50dc83\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5033c97c4262335cded6d6fc3e5c18ab755e1a3dc96376350f3d8e9f009ad956\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0336d538f7abc86d282a4189614dfaa90810dfc2c6f6427eaf88e16311dd225d\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fc81956842c57dac11422a97c3b8195a1ff727f06e85c84ed2e8aa277c9a0fd\"\n\n[[package]]\nname = \"unicode_names2\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1673eca9782c84de5f81b82e4109dcfb3611c8ba0d52930ec4a9478f547b2dd\"\ndependencies = [\n \"phf\",\n \"unicode_names2_generator\",\n]\n\n[[package]]\nname = \"unicode_names2_generator\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b91e5b84611016120197efd7dc93ef76774f4e084cd73c9fb3ea4a86c570c56e\"\ndependencies = [\n \"getopts\",\n \"log\",\n \"phf_codegen\",\n \"rand\",\n]\n\n[[package]]\nname = \"unscanny\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9df2af067a7953e9c3831320f35c1cc0600c30d44d9f7a12b01db1cd88d6b47\"\n\n[[package]]\nname = \"untrusted\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ecb6da28b8a351d773b68d5825ac39017e680750f980f3a1a85cd8dd28a47c1\"\n\n[[package]]\nname = \"ureq\"\nversion = \"2.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02d1a66277ed75f640d608235660df48c8e3c19f3b4edb6a263315626cc3c01d\"\ndependencies = [\n \"base64 0.22.0\",\n \"flate2\",\n \"log\",\n \"once_cell\",\n \"rustls\",\n \"rustls-pki-types\",\n \"url\",\n \"webpki-roots\",\n]\n\n[[package]]\nname = \"url\"\nversion = \"2.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32f8b686cadd1473f4bd0117a5d28d36b1ade384ea9b5069a1c40aefed7fda60\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"urlencoding\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"daf8dba3b7eb870caf1ddeed7bc9d2a049f3cfdfae7cb521b087cc33ae4c49da\"\n\n[[package]]\nname = \"utf16_iter\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8232dd3cdaed5356e0f716d285e4b40b932ac434100fe9b7e0e8e935b9e6246\"\n\n[[package]]\nname = \"utf8_iter\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c140620e7ffbb22c2dee59cafe6084a59b5ffc27a8859a5f0d494b5d52b6be\"\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"uuid\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b913a3b5fe84142e269d63cc62b64319ccaf89b748fc31fe025177f767a756c4\"\ndependencies = [\n \"getrandom\",\n \"rand\",\n \"uuid-macro-internal\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"uuid-macro-internal\"\nversion = \"1.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c91084647266237a48351d05d55dee65bba9e1b597f555fcf54680f820284a1c\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"version-ranges\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8d079415ceb2be83fc355adbadafe401307d5c309c7e6ade6638e6f9f42f42d\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"vt100\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"84cd863bf0db7e392ba3bd04994be3473491b31e66340672af5d11943c6274de\"\ndependencies = [\n \"itoa\",\n \"log\",\n \"unicode-width 0.1.13\",\n \"vte\",\n]\n\n[[package]]\nname = \"vte\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5022b5fbf9407086c180e9557be968742d839e68346af7792b8592489732197\"\ndependencies = [\n \"arrayvec\",\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d15e63b4482863c109d70a7b8706c1e364eb6ea449b201a76c5b89cedcec2d5c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8d36ef12e3aaca16ddd3f67922bc63e48e953f126de60bd33ccc0101ef9998cd\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-futures\"\nversion = \"0.4.47\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9dfaf8f50e5f293737ee323940c7d8b08a66a95a419223d9f41610ca08b0833d\"\ndependencies = [\n \"cfg-if\",\n \"js-sys\",\n \"once_cell\",\n \"wasm-bindgen\",\n \"web-sys\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"705440e08b42d3e4b36de7d66c944be628d579796b8090bfa3471478a2260051\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98c9ae5a76e46f4deecd0f0255cc223cfa18dc9b261213b8aa0c7b36f61b3f1d\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ee99da9c5ba11bd675621338ef6fa52296b76b83305e9b6e5c77d4c286d6d49\"\n\n[[package]]\nname = \"wasm-bindgen-test\"\nversion = \"0.3.47\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d919bb60ebcecb9160afee6c71b43a58a4f0517a2de0054cd050d02cec08201\"\ndependencies = [\n \"js-sys\",\n \"minicov\",\n \"once_cell\",\n \"scoped-tls\",\n \"wasm-bindgen\",\n \"wasm-bindgen-futures\",\n \"wasm-bindgen-test-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-test-macro\"\nversion = \"0.3.47\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"222ebde6ea87fbfa6bdd2e9f1fd8a91d60aee5db68792632176c4e16a74fc7d8\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"web-sys\"\nversion = \"0.3.74\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a98bc3c33f0fe7e59ad7cd041b89034fa82a7c2d4365ca538dda6cdaf513863c\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"web-time\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5a6580f308b1fad9207618087a65c04e7a10bc77e02c8e84e9b00dd4b12fa0bb\"\ndependencies = [\n \"js-sys\",\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"webpki-roots\"\nversion = \"0.26.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3de34ae270483955a94f4b21bdaaeb83d508bb84a01435f393818edb0012009\"\ndependencies = [\n \"rustls-pki-types\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"7.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb4a9e33648339dc1642b0e36e21b3385e6148e289226f657c809dee59df5028\"\ndependencies = [\n \"either\",\n \"env_home\",\n \"rustix\",\n \"winsafe\",\n]\n\n[[package]]\nname = \"wild\"\nversion = \"2.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3131afc8c575281e1e80f36ed6a092aa502c08b18ed7524e86fbbb12bb410e1\"\ndependencies = [\n \"glob\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets 0.52.6\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.6\",\n \"windows_aarch64_msvc 0.52.6\",\n \"windows_i686_gnu 0.52.6\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.6\",\n \"windows_x86_64_gnu 0.52.6\",\n \"windows_x86_64_gnullvm 0.52.6\",\n \"windows_x86_64_msvc 0.52.6\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68a9bda4691f099d435ad181000724da8e5899daa10713c2d432552b9ccd3a6f\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winsafe\"\nversion = \"0.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d135d17ab770252ad95e9a872d365cf3090e3be864a34ab46f48555993efc904\"\n\n[[package]]\nname = \"write16\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1890f4022759daae28ed4fe62859b1236caebfc61ede2f63ed4e695f3f6d936\"\n\n[[package]]\nname = \"writeable\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e9df38ee2d2c3c5948ea468a8406ff0db0b29ae1ffde1bcf20ef305bcc95c51\"\n\n[[package]]\nname = \"yansi\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cfe53a6657fd280eaa890a3bc59152892ffa3e30101319d168b781ed6529b049\"\n\n[[package]]\nname = \"yansi-term\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe5c30ade05e61656247b2e334a031dfd0cc466fadef865bdcdea8d537951bf1\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"yoke\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c5b1314b079b0930c31e3af543d8ee1757b1951ae1e1565ec704403a7240ca5\"\ndependencies = [\n \"serde\",\n \"stable_deref_trait\",\n \"yoke-derive\",\n \"zerofrom\",\n]\n\n[[package]]\nname = \"yoke-derive\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"28cc31741b18cb6f1d5ff12f5b7523e3d6eb0852bbbad19d73905511d9849b95\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"74d4d3961e53fa4c9a25a8637fc2bfaf2595b3d3ae34875568a5cf64787716be\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ce1b18ccd8e73a9321186f97e46f9f04b778851177567b1975109d26a08d2a6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"zerofrom\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91ec111ce797d0e0784a1116d0ddcdbea84322cd79e5d5ad173daeba4f93ab55\"\ndependencies = [\n \"zerofrom-derive\",\n]\n\n[[package]]\nname = \"zerofrom-derive\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ea7b4a3637ea8669cedf0f1fd5c286a17f3de97b8dd5a70a6c167a1730e63a5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"525b4ec142c6b68a2d10f01f7bbf6755599ca3f81ea53b8431b7dd348f5fdb2d\"\n\n[[package]]\nname = \"zerovec\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aa2b893d79df23bfb12d5461018d408ea19dfafe76c2c7ef6d4eba614f8ff079\"\ndependencies = [\n \"yoke\",\n \"zerofrom\",\n \"zerovec-derive\",\n]\n\n[[package]]\nname = \"zerovec-derive\"\nversion = \"0.10.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6eafa6dfb17584ea3e2bd6e76e0cc15ad7af12b09abdd1ca55961bed9b1063c6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.96\",\n]\n\n[[package]]\nname = \"zip\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"760394e246e4c28189f19d488c058bf16f564016aefac5d32bb1f3b51d5e9261\"\ndependencies = [\n \"byteorder\",\n \"crc32fast\",\n \"crossbeam-utils\",\n \"flate2\",\n \"zstd\",\n]\n\n[[package]]\nname = \"zstd\"\nversion = \"0.11.2+zstd.1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"20cc960326ece64f010d2d2107537f26dc589a6573a316bd5b1dba685fa5fde4\"\ndependencies = [\n \"zstd-safe\",\n]\n\n[[package]]\nname = \"zstd-safe\"\nversion = \"5.0.2+zstd.1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d2a5585e04f9eea4b2a3d1eca508c4dee9592a89ef6f450c11719da0726f4db\"\ndependencies = [\n \"libc\",\n \"zstd-sys\",\n]\n\n[[package]]\nname = \"zstd-sys\"\nversion = \"2.0.11+zstd.1.5.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75652c55c0b6f3e6f12eb786fe1bc960396bf05a1eb3bf1f3691c3610ac2e6d4\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 10.8984375,
          "content": "[workspace]\nmembers = [\"crates/*\"]\nresolver = \"2\"\n\n[workspace.package]\nedition = \"2021\"\nrust-version = \"1.80\"\nhomepage = \"https://docs.astral.sh/ruff\"\ndocumentation = \"https://docs.astral.sh/ruff\"\nrepository = \"https://github.com/astral-sh/ruff\"\nauthors = [\"Charlie Marsh <charlie.r.marsh@gmail.com>\"]\nlicense = \"MIT\"\n\n[workspace.dependencies]\nruff = { path = \"crates/ruff\" }\nruff_cache = { path = \"crates/ruff_cache\" }\nruff_db = { path = \"crates/ruff_db\", default-features = false }\nruff_diagnostics = { path = \"crates/ruff_diagnostics\" }\nruff_formatter = { path = \"crates/ruff_formatter\" }\nruff_graph = { path = \"crates/ruff_graph\" }\nruff_index = { path = \"crates/ruff_index\" }\nruff_linter = { path = \"crates/ruff_linter\" }\nruff_macros = { path = \"crates/ruff_macros\" }\nruff_notebook = { path = \"crates/ruff_notebook\" }\nruff_python_ast = { path = \"crates/ruff_python_ast\" }\nruff_python_codegen = { path = \"crates/ruff_python_codegen\" }\nruff_python_formatter = { path = \"crates/ruff_python_formatter\" }\nruff_python_index = { path = \"crates/ruff_python_index\" }\nruff_python_literal = { path = \"crates/ruff_python_literal\" }\nruff_python_parser = { path = \"crates/ruff_python_parser\" }\nruff_python_semantic = { path = \"crates/ruff_python_semantic\" }\nruff_python_stdlib = { path = \"crates/ruff_python_stdlib\" }\nruff_python_trivia = { path = \"crates/ruff_python_trivia\" }\nruff_server = { path = \"crates/ruff_server\" }\nruff_source_file = { path = \"crates/ruff_source_file\" }\nruff_text_size = { path = \"crates/ruff_text_size\" }\nred_knot_vendored = { path = \"crates/red_knot_vendored\" }\nruff_workspace = { path = \"crates/ruff_workspace\" }\n\nred_knot_python_semantic = { path = \"crates/red_knot_python_semantic\" }\nred_knot_server = { path = \"crates/red_knot_server\" }\nred_knot_test = { path = \"crates/red_knot_test\" }\nred_knot_workspace = { path = \"crates/red_knot_workspace\", default-features = false }\n\naho-corasick = { version = \"1.1.3\" }\nannotate-snippets = { version = \"0.9.2\", features = [\"color\"] }\nanyhow = { version = \"1.0.80\" }\nassert_fs = { version = \"1.1.0\" }\nargfile = { version = \"0.2.0\" }\nbincode = { version = \"1.3.3\" }\nbitflags = { version = \"2.5.0\" }\nbstr = { version = \"1.9.1\" }\ncachedir = { version = \"0.3.1\" }\ncamino = { version = \"1.1.7\" }\nchrono = { version = \"0.4.35\", default-features = false, features = [\"clock\"] }\nclap = { version = \"4.5.3\", features = [\"derive\"] }\nclap_complete_command = { version = \"0.6.0\" }\nclearscreen = { version = \"4.0.0\" }\ncodspeed-criterion-compat = { version = \"2.6.0\", default-features = false }\ncolored = { version = \"3.0.0\" }\nconsole_error_panic_hook = { version = \"0.1.7\" }\nconsole_log = { version = \"1.0.0\" }\ncountme = { version = \"3.0.1\" }\ncompact_str = \"0.8.0\"\ncriterion = { version = \"0.5.1\", default-features = false }\ncrossbeam = { version = \"0.8.4\" }\ndashmap = { version = \"6.0.1\" }\ndir-test = { version = \"0.4.0\" }\ndunce = { version = \"1.0.5\" }\ndrop_bomb = { version = \"0.1.5\" }\nenv_logger = { version = \"0.11.0\" }\netcetera = { version = \"0.8.0\" }\nfern = { version = \"0.7.0\" }\nfiletime = { version = \"0.2.23\" }\nglob = { version = \"0.3.1\" }\nglobset = { version = \"0.4.14\" }\nglobwalk = { version = \"0.9.1\" }\nhashbrown = { version = \"0.15.0\", default-features = false, features = [\n    \"raw-entry\",\n    \"inline-more\",\n] }\nignore = { version = \"0.4.22\" }\nimara-diff = { version = \"0.1.5\" }\nimperative = { version = \"1.0.4\" }\nindexmap = { version = \"2.6.0\" }\nindicatif = { version = \"0.17.8\" }\nindoc = { version = \"2.0.4\" }\ninsta = { version = \"1.35.1\" }\ninsta-cmd = { version = \"0.6.0\" }\nis-macro = { version = \"0.3.5\" }\nis-wsl = { version = \"0.4.0\" }\nitertools = { version = \"0.14.0\" }\njs-sys = { version = \"0.3.69\" }\njod-thread = { version = \"0.1.2\" }\nlibc = { version = \"0.2.153\" }\nlibcst = { version = \"1.1.0\", default-features = false }\nlog = { version = \"0.4.17\" }\nlsp-server = { version = \"0.7.6\" }\nlsp-types = { git = \"https://github.com/astral-sh/lsp-types.git\", rev = \"3512a9f\", features = [\n    \"proposed\",\n] }\nmatchit = { version = \"0.8.1\" }\nmemchr = { version = \"2.7.1\" }\nmimalloc = { version = \"0.1.39\" }\nnatord = { version = \"1.0.9\" }\nnotify = { version = \"7.0.0\" }\nordermap = { version = \"0.5.0\" }\npath-absolutize = { version = \"3.1.1\" }\npath-slash = { version = \"0.2.1\" }\npathdiff = { version = \"0.2.1\" }\npep440_rs = { version = \"0.7.1\" }\npretty_assertions = \"1.3.0\"\nproc-macro2 = { version = \"1.0.79\" }\npyproject-toml = { version = \"0.13.4\" }\nquick-junit = { version = \"0.5.0\" }\nquote = { version = \"1.0.23\" }\nrand = { version = \"0.8.5\" }\nrayon = { version = \"1.10.0\" }\nregex = { version = \"1.10.2\" }\nrustc-hash = { version = \"2.0.0\" }\n# When updating salsa, make sure to also update the revision in `fuzz/Cargo.toml`\nsalsa = { git = \"https://github.com/salsa-rs/salsa.git\", rev = \"88a1d7774d78f048fbd77d40abca9ebd729fd1f0\" }\nschemars = { version = \"0.8.16\" }\nseahash = { version = \"4.1.0\" }\nserde = { version = \"1.0.197\", features = [\"derive\"] }\nserde-wasm-bindgen = { version = \"0.6.4\" }\nserde_json = { version = \"1.0.113\" }\nserde_test = { version = \"1.0.152\" }\nserde_with = { version = \"3.6.0\", default-features = false, features = [\n    \"macros\",\n] }\nshellexpand = { version = \"3.0.0\" }\nsimilar = { version = \"2.4.0\", features = [\"inline\"] }\nsmallvec = { version = \"1.13.2\" }\nstatic_assertions = \"1.1.0\"\nstrum = { version = \"0.26.0\", features = [\"strum_macros\"] }\nstrum_macros = { version = \"0.26.0\" }\nsyn = { version = \"2.0.55\" }\ntempfile = { version = \"3.9.0\" }\ntest-case = { version = \"3.3.1\" }\nthiserror = { version = \"2.0.0\" }\ntikv-jemallocator = { version = \"0.6.0\" }\ntoml = { version = \"0.8.11\" }\ntracing = { version = \"0.1.40\" }\ntracing-flame = { version = \"0.2.0\" }\ntracing-indicatif = { version = \"0.3.6\" }\ntracing-subscriber = { version = \"0.3.18\", default-features = false, features = [\n    \"env-filter\",\n    \"fmt\",\n] }\ntracing-tree = { version = \"0.4.0\" }\ntyped-arena = { version = \"2.0.2\" }\nunic-ucd-category = { version = \"0.9\" }\nunicode-ident = { version = \"1.0.12\" }\nunicode-width = { version = \"0.2.0\" }\nunicode_names2 = { version = \"1.2.2\" }\nunicode-normalization = { version = \"0.1.23\" }\nureq = { version = \"2.9.6\" }\nurl = { version = \"2.5.0\" }\nuuid = { version = \"1.6.1\", features = [\n    \"v4\",\n    \"fast-rng\",\n    \"macro-diagnostics\",\n    \"js\",\n] }\nwalkdir = { version = \"2.3.2\" }\nwasm-bindgen = { version = \"0.2.92\" }\nwasm-bindgen-test = { version = \"0.3.42\" }\nwild = { version = \"2\" }\nzip = { version = \"0.6.6\", default-features = false }\n\n[workspace.lints.rust]\nunsafe_code = \"warn\"\nunreachable_pub = \"warn\"\nunexpected_cfgs = { level = \"warn\", check-cfg = [\n    \"cfg(fuzzing)\",\n    \"cfg(codspeed)\",\n] }\n\n[workspace.lints.clippy]\npedantic = { level = \"warn\", priority = -2 }\n# Allowed pedantic lints\nchar_lit_as_u8 = \"allow\"\ncollapsible_else_if = \"allow\"\ncollapsible_if = \"allow\"\nimplicit_hasher = \"allow\"\nmap_unwrap_or = \"allow\"\nmatch_same_arms = \"allow\"\nmissing_errors_doc = \"allow\"\nmissing_panics_doc = \"allow\"\nmodule_name_repetitions = \"allow\"\nmust_use_candidate = \"allow\"\nsimilar_names = \"allow\"\nsingle_match_else = \"allow\"\ntoo_many_lines = \"allow\"\n# Without the hashes we run into a `rustfmt` bug in some snapshot tests, see #13250\nneedless_raw_string_hashes = \"allow\"\n# Disallowed restriction lints\nprint_stdout = \"warn\"\nprint_stderr = \"warn\"\ndbg_macro = \"warn\"\nempty_drop = \"warn\"\nempty_structs_with_brackets = \"warn\"\nexit = \"warn\"\nget_unwrap = \"warn\"\nrc_buffer = \"warn\"\nrc_mutex = \"warn\"\nrest_pat_in_fully_bound_structs = \"warn\"\n# nursery rules\nredundant_clone = \"warn\"\ndebug_assert_with_mut_call = \"warn\"\nunused_peekable = \"warn\"\n\n# Diagnostics are not actionable: Enable once https://github.com/rust-lang/rust-clippy/issues/13774 is resolved.\nlarge_stack_arrays = \"allow\"\n\n[profile.release]\n# Note that we set these explicitly, and these values\n# were chosen based on a trade-off between compile times\n# and runtime performance[1].\n#\n# [1]: https://github.com/astral-sh/ruff/pull/9031\nlto = \"thin\"\ncodegen-units = 16\n\n# Some crates don't change as much but benefit more from\n# more expensive optimization passes, so we selectively\n# decrease codegen-units in some cases.\n[profile.release.package.ruff_python_parser]\ncodegen-units = 1\n[profile.release.package.ruff_python_ast]\ncodegen-units = 1\n\n[profile.dev.package.insta]\nopt-level = 3\n\n[profile.dev.package.similar]\nopt-level = 3\n\n# Reduce complexity of a parser function that would trigger a locals limit in a wasm tool.\n# https://github.com/bytecodealliance/wasm-tools/blob/b5c3d98e40590512a3b12470ef358d5c7b983b15/crates/wasmparser/src/limits.rs#L29\n[profile.dev.package.ruff_python_parser]\nopt-level = 1\n\n# Use the `--profile profiling` flag to show symbols in release mode.\n# e.g. `cargo build --profile profiling`\n[profile.profiling]\ninherits = \"release\"\ndebug = 1\n\n# The profile that 'cargo dist' will build with.\n[profile.dist]\ninherits = \"release\"\n\n# Config for 'dist'\n[workspace.metadata.dist]\n# The preferred dist version to use in CI (Cargo.toml SemVer syntax)\ncargo-dist-version = \"0.25.2-prerelease.3\"\n# CI backends to support\nci = \"github\"\n# The installers to generate for each app\ninstallers = [\"shell\", \"powershell\"]\n# The archive format to use for windows builds (defaults .zip)\nwindows-archive = \".zip\"\n# The archive format to use for non-windows builds (defaults .tar.xz)\nunix-archive = \".tar.gz\"\n# Target platforms to build apps for (Rust target-triple syntax)\ntargets = [\n    \"aarch64-apple-darwin\",\n    \"aarch64-pc-windows-msvc\",\n    \"aarch64-unknown-linux-gnu\",\n    \"aarch64-unknown-linux-musl\",\n    \"arm-unknown-linux-musleabihf\",\n    \"armv7-unknown-linux-gnueabihf\",\n    \"armv7-unknown-linux-musleabihf\",\n    \"i686-pc-windows-msvc\",\n    \"i686-unknown-linux-gnu\",\n    \"i686-unknown-linux-musl\",\n    \"powerpc64-unknown-linux-gnu\",\n    \"powerpc64le-unknown-linux-gnu\",\n    \"s390x-unknown-linux-gnu\",\n    \"x86_64-apple-darwin\",\n    \"x86_64-pc-windows-msvc\",\n    \"x86_64-unknown-linux-gnu\",\n    \"x86_64-unknown-linux-musl\",\n]\n# Whether to auto-include files like READMEs, LICENSEs, and CHANGELOGs (default true)\nauto-includes = false\n# Whether dist should create a Github Release or use an existing draft\ncreate-release = true\n# Which actions to run on pull requests\npr-run-mode = \"skip\"\n# Whether CI should trigger releases with dispatches instead of tag pushes\ndispatch-releases = true\n# Which phase dist should use to create the GitHub release\ngithub-release = \"announce\"\n# Whether CI should include auto-generated code to build local artifacts\nbuild-local-artifacts = false\n# Local artifacts jobs to run in CI\nlocal-artifacts-jobs = [\"./build-binaries\", \"./build-docker\"]\n# Publish jobs to run in CI\npublish-jobs = [\"./publish-pypi\", \"./publish-wasm\"]\n# Post-announce jobs to run in CI\npost-announce-jobs = [\"./notify-dependents\", \"./publish-docs\", \"./publish-playground\"]\n# Custom permissions for GitHub Jobs\ngithub-custom-job-permissions = { \"build-docker\" = { packages = \"write\", contents = \"read\" }, \"publish-wasm\" = { contents = \"read\", id-token = \"write\", packages = \"write\" } }\n# Whether to install an updater program\ninstall-updater = false\n# Path that installers should place binaries in\ninstall-path = [\"$XDG_BIN_HOME/\", \"$XDG_DATA_HOME/../bin\", \"~/.local/bin\"]\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3203125,
          "content": "FROM --platform=$BUILDPLATFORM ubuntu AS build\nENV HOME=\"/root\"\nWORKDIR $HOME\n\nRUN apt update && apt install -y build-essential curl python3-venv\n\n# Setup zig as cross compiling linker\nRUN python3 -m venv $HOME/.venv\nRUN .venv/bin/pip install cargo-zigbuild\nENV PATH=\"$HOME/.venv/bin:$PATH\"\n\n# Install rust\nARG TARGETPLATFORM\nRUN case \"$TARGETPLATFORM\" in \\\n    \"linux/arm64\") echo \"aarch64-unknown-linux-musl\" > rust_target.txt ;; \\\n    \"linux/amd64\") echo \"x86_64-unknown-linux-musl\" > rust_target.txt ;; \\\n    *) exit 1 ;; \\\n    esac\n# Update rustup whenever we bump the rust version\nCOPY rust-toolchain.toml rust-toolchain.toml\nRUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --target $(cat rust_target.txt) --profile minimal --default-toolchain none\nENV PATH=\"$HOME/.cargo/bin:$PATH\"\n# Installs the correct toolchain version from rust-toolchain.toml and then the musl target\nRUN rustup target add $(cat rust_target.txt)\n\n# Build\nCOPY crates crates\nCOPY Cargo.toml Cargo.toml\nCOPY Cargo.lock Cargo.lock\nRUN cargo zigbuild --bin ruff --target $(cat rust_target.txt) --release\nRUN cp target/$(cat rust_target.txt)/release/ruff /ruff\n# TODO: Optimize binary size, with a version that also works when cross compiling\n# RUN strip --strip-all /ruff\n\nFROM scratch\nCOPY --from=build /ruff /ruff\nWORKDIR /io\nENTRYPOINT [\"/ruff\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 68.1533203125,
          "content": "MIT License\n\nCopyright (c) 2022 Charles Marsh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nend of terms and conditions\n\nThe externally maintained libraries from which parts of the Software is derived\nare:\n\n- flake8-comprehensions, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2017 Adam Johnson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-no-pep420, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2020 Adam Johnson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-tidy-imports, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2017 Adam Johnson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-return, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2019 Afonasev Evgeniy\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-2020, licensed as follows:\n  \"\"\"\n    Copyright (c) 2019 Anthony Sottile\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- pyupgrade, licensed as follows:\n  \"\"\"\n    Copyright (c) 2017 Anthony Sottile\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- flake8-blind-except, licensed as follows:\n  \"\"\"\n    The MIT License (MIT)\n\n    Copyright (c) 2014 Elijah Andrews\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n    the Software, and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n    FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n    COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n    IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  \"\"\"\n\n- flake8-gettext, licensed as follows:\n  \"\"\"\n    BSD Zero Clause License\n\n    Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n  \"\"\"\n\n- flake8-implicit-str-concat, licensed as follows:\n  \"\"\"\n    The MIT License (MIT)\n\n    Copyright (c) 2019 Dylan Turner\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- flake8-debugger, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2016 Joseph Kahn\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-pyi, licensed as follows:\n  \"\"\"\n    The MIT License (MIT)\n\n    Copyright (c) 2016 Łukasz Langa\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-print, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2016 Joseph Kahn\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-import-conventions, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2021 João Palmeiro\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-simplify, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2020 Martin Thoma\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-slots, licensed as follows:\n  \"\"\"\n    Copyright (c) 2021 Dominic Davis-Foster\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n    OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\n    OR OTHER DEALINGS IN THE SOFTWARE.\n  \"\"\"\n\n- flake8-todos, licensed as follows:\n  \"\"\"\n    Copyright (c) 2019 EclecticIQ. All rights reserved.\n    Copyright (c) 2020 Gram <gram@orsinium.dev>. All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n       1. Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n       2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n       3. Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived from this\n    software without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  \"\"\"\n\n- flake8-unused-arguments, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2019 Nathan Hoad\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- pygrep-hooks, licensed as follows:\n  \"\"\"\n    Copyright (c) 2018 Anthony Sottile\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- autoflake, licensed as follows:\n  \"\"\"\n    Copyright (C) 2012-2018 Steven Myint\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n    of the Software, and to permit persons to whom the Software is furnished to do\n    so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- autotyping, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2023 Jelle Zijlstra\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- Flake8, licensed as follows:\n  \"\"\"\n    == Flake8 License (MIT) ==\n\n    Copyright (C) 2011-2013 Tarek Ziade <tarek@ziade.org>\n    Copyright (C) 2012-2016 Ian Cordasco <graffatcolmingov@gmail.com>\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n    of the Software, and to permit persons to whom the Software is furnished to do\n    so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-bugbear, licensed as follows:\n  \"\"\"\n    The MIT License (MIT)\n\n    Copyright (c) 2016 Łukasz Langa\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-commas, licensed as follows:\n  \"\"\"\n    The MIT License (MIT)\n\n    Copyright (c) 2017 Thomas Grainger.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n\n\n    Portions of this flake8-commas Software may utilize the following\n    copyrighted material, the use of which is hereby acknowledged.\n\n    Original flake8-commas: https://github.com/trevorcreech/flake8-commas/commit/e8563b71b1d5442e102c8734c11cb5202284293d\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- flynt, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2019-2022 Ilya Kamenshchikov\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- isort, licensed as follows:\n  \"\"\"\n    The MIT License (MIT)\n\n    Copyright (c) 2013 Timothy Edmund Crosley\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- pep8-naming, licensed as follows:\n  \"\"\"\n    Copyright © 2013 Florent Xicluna <florent.xicluna@gmail.com>\n\n    Licensed under the terms of the Expat License\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- pycodestyle, licensed as follows:\n  \"\"\"\n    Copyright © 2006-2009 Johann C. Rocholl <johann@rocholl.net>\n    Copyright © 2009-2014 Florent Xicluna <florent.xicluna@gmail.com>\n    Copyright © 2014-2020 Ian Lee <IanLee1521@gmail.com>\n\n    Licensed under the terms of the Expat License\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation files\n    (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of the Software,\n    and to permit persons to whom the Software is furnished to do so,\n    subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- pydocstyle, licensed as follows:\n  \"\"\"\n    Copyright (c) 2012 GreenSteam, <http://greensteam.dk/>\n\n    Copyright (c) 2014-2020 Amir Rachum, <http://amir.rachum.com/>\n\n    Copyright (c) 2020 Sambhav Kothari, <https://github.com/samj1912>\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of\n    this software and associated documentation files (the \"Software\"), to deal in\n    the Software without restriction, including without limitation the rights to\n    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n    of the Software, and to permit persons to whom the Software is furnished to do\n    so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- Pyflakes, licensed as follows:\n  \"\"\"\n    Copyright 2005-2011 Divmod, Inc.\n    Copyright 2013-2014 Florent Xicluna\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n    \"Software\"), to deal in the Software without restriction, including\n    without limitation the rights to use, copy, modify, merge, publish,\n    distribute, sublicense, and/or sell copies of the Software, and to\n    permit persons to whom the Software is furnished to do so, subject to\n    the following conditions:\n\n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n  \"\"\"\n\n- flake8-use-pathlib, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2021 Rodolphe Pelloux-Prayer\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- RustPython, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2020 RustPython Team\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-annotations, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2019 - Present S. Co1\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-async, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2022 Cooper Lees\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-type-checking, licensed as follows:\n  \"\"\"\n    Copyright (c) 2021, Sondre Lillebø Gundersen\n    All rights reserved.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright notice, this\n      list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\n    * Neither the name of pytest-{{ cookiecutter.plugin_name }} nor the names of its\n      contributors may be used to endorse or promote products derived from\n      this software without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  \"\"\"\n\n- flake8-bandit, licensed as follows:\n  \"\"\"\n    Copyright (c) 2017 Tyler Wince\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- flake8-eradicate, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2018 Nikita Sobolev\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-quotes, licensed as follows:\n  \"\"\"\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n  \"\"\"\n\n- flake8-logging-format, licensed as follows:\n  \"\"\"\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n    1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n    2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n    3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n    4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n    5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n    6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n    7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n    8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n    9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n    END OF TERMS AND CONDITIONS\n\n    APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n    Copyright {yyyy} {name of copyright owner}\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n  \"\"\"\n\n- flake8-raise, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2020 Jon Dufresne\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-self, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2023 Korijn van Golen\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-django, licensed under the GPL license.\n\n- perflint, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2022 Anthony Shaw\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-logging, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2023 Adam Johnson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- flake8-trio, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2022 Zac Hatfield-Dodds\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- Pyright, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Pyright - A static type checker for the Python language\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n  \"\"\"\n\n- rust-analyzer/text-size, licensed under the MIT license:\n  \"\"\"\n    Permission is hereby granted, free of charge, to any\n    person obtaining a copy of this software and associated\n    documentation files (the \"Software\"), to deal in the\n    Software without restriction, including without\n    limitation the rights to use, copy, modify, merge,\n    publish, distribute, sublicense, and/or sell copies of\n    the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following\n    conditions:\n\n    The above copyright notice and this permission notice\n    shall be included in all copies or substantial portions\n    of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\n    ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\n    TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\n    SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\n    IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE.\n  \"\"\"\n\n- rome/tools, licensed under the MIT license:\n  \"\"\"\n    MIT License\n\n    Copyright (c) Rome Tools, Inc. and its affiliates.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n\n- pydoclint, licensed as follows:\n  \"\"\"\n    MIT License\n\n    Copyright (c) 2023 jsh9\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n  \"\"\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.962890625,
          "content": "<!-- Begin section: Overview -->\n\n# Ruff\n\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![image](https://img.shields.io/pypi/v/ruff.svg)](https://pypi.python.org/pypi/ruff)\n[![image](https://img.shields.io/pypi/l/ruff.svg)](https://github.com/astral-sh/ruff/blob/main/LICENSE)\n[![image](https://img.shields.io/pypi/pyversions/ruff.svg)](https://pypi.python.org/pypi/ruff)\n[![Actions status](https://github.com/astral-sh/ruff/workflows/CI/badge.svg)](https://github.com/astral-sh/ruff/actions)\n[![Discord](https://img.shields.io/badge/Discord-%235865F2.svg?logo=discord&logoColor=white)](https://discord.com/invite/astral-sh)\n\n[**Docs**](https://docs.astral.sh/ruff/) | [**Playground**](https://play.ruff.rs/)\n\nAn extremely fast Python linter and code formatter, written in Rust.\n\n<p align=\"center\">\n  <picture align=\"center\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/1309177/232603514-c95e9b0f-6b31-43de-9a80-9e844173fd6a.svg\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg\">\n    <img alt=\"Shows a bar chart with benchmark results.\" src=\"https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg\">\n  </picture>\n</p>\n\n<p align=\"center\">\n  <i>Linting the CPython codebase from scratch.</i>\n</p>\n\n- ⚡️ 10-100x faster than existing linters (like Flake8) and formatters (like Black)\n- 🐍 Installable via `pip`\n- 🛠️ `pyproject.toml` support\n- 🤝 Python 3.13 compatibility\n- ⚖️ Drop-in parity with [Flake8](https://docs.astral.sh/ruff/faq/#how-does-ruffs-linter-compare-to-flake8), isort, and [Black](https://docs.astral.sh/ruff/faq/#how-does-ruffs-formatter-compare-to-black)\n- 📦 Built-in caching, to avoid re-analyzing unchanged files\n- 🔧 Fix support, for automatic error correction (e.g., automatically remove unused imports)\n- 📏 Over [800 built-in rules](https://docs.astral.sh/ruff/rules/), with native re-implementations\n    of popular Flake8 plugins, like flake8-bugbear\n- ⌨️ First-party [editor integrations](https://docs.astral.sh/ruff/integrations/) for\n    [VS Code](https://github.com/astral-sh/ruff-vscode) and [more](https://docs.astral.sh/ruff/editors/setup)\n- 🌎 Monorepo-friendly, with [hierarchical and cascading configuration](https://docs.astral.sh/ruff/configuration/#config-file-discovery)\n\nRuff aims to be orders of magnitude faster than alternative tools while integrating more\nfunctionality behind a single, common interface.\n\nRuff can be used to replace [Flake8](https://pypi.org/project/flake8/) (plus dozens of plugins),\n[Black](https://github.com/psf/black), [isort](https://pypi.org/project/isort/),\n[pydocstyle](https://pypi.org/project/pydocstyle/), [pyupgrade](https://pypi.org/project/pyupgrade/),\n[autoflake](https://pypi.org/project/autoflake/), and more, all while executing tens or hundreds of\ntimes faster than any individual tool.\n\nRuff is extremely actively developed and used in major open-source projects like:\n\n- [Apache Airflow](https://github.com/apache/airflow)\n- [Apache Superset](https://github.com/apache/superset)\n- [FastAPI](https://github.com/tiangolo/fastapi)\n- [Hugging Face](https://github.com/huggingface/transformers)\n- [Pandas](https://github.com/pandas-dev/pandas)\n- [SciPy](https://github.com/scipy/scipy)\n\n...and [many more](#whos-using-ruff).\n\nRuff is backed by [Astral](https://astral.sh). Read the [launch post](https://astral.sh/blog/announcing-astral-the-company-behind-ruff),\nor the original [project announcement](https://notes.crmarsh.com/python-tooling-could-be-much-much-faster).\n\n## Testimonials\n\n[**Sebastián Ramírez**](https://twitter.com/tiangolo/status/1591912354882764802), creator\nof [FastAPI](https://github.com/tiangolo/fastapi):\n\n> Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it's actually\n> running and checking the code.\n\n[**Nick Schrock**](https://twitter.com/schrockn/status/1612615862904827904), founder of [Elementl](https://www.elementl.com/),\nco-creator of [GraphQL](https://graphql.org/):\n\n> Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On\n> our largest module (dagster itself, 250k LOC) pylint takes about 2.5 minutes, parallelized across 4\n> cores on my M1. Running ruff against our _entire_ codebase takes .4 seconds.\n\n[**Bryan Van de Ven**](https://github.com/bokeh/bokeh/pull/12605), co-creator\nof [Bokeh](https://github.com/bokeh/bokeh/), original author\nof [Conda](https://docs.conda.io/en/latest/):\n\n> Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of\n> ~20s. This is an enormous quality of life improvement for local dev. It's fast enough that I added\n> it as an actual commit hook, which is terrific.\n\n[**Timothy Crosley**](https://twitter.com/timothycrosley/status/1606420868514877440),\ncreator of [isort](https://github.com/PyCQA/isort):\n\n> Just switched my first project to Ruff. Only one downside so far: it's so fast I couldn't believe\n> it was working till I intentionally introduced some errors.\n\n[**Tim Abbott**](https://github.com/astral-sh/ruff/issues/465#issuecomment-1317400028), lead\ndeveloper of [Zulip](https://github.com/zulip/zulip):\n\n> This is just ridiculously fast... `ruff` is amazing.\n\n<!-- End section: Overview -->\n\n## Table of Contents\n\nFor more, see the [documentation](https://docs.astral.sh/ruff/).\n\n1. [Getting Started](#getting-started)\n1. [Configuration](#configuration)\n1. [Rules](#rules)\n1. [Contributing](#contributing)\n1. [Support](#support)\n1. [Acknowledgements](#acknowledgements)\n1. [Who's Using Ruff?](#whos-using-ruff)\n1. [License](#license)\n\n## Getting Started<a id=\"getting-started\"></a>\n\nFor more, see the [documentation](https://docs.astral.sh/ruff/).\n\n### Installation\n\nRuff is available as [`ruff`](https://pypi.org/project/ruff/) on PyPI.\n\nInvoke Ruff directly with [`uvx`](https://docs.astral.sh/uv/):\n\n```shell\nuvx ruff check   # Lint all files in the current directory.\nuvx ruff format  # Format all files in the current directory.\n```\n\nOr install Ruff with `uv` (recommended), `pip`, or `pipx`:\n\n```shell\n# With uv.\nuv tool install ruff@latest  # Install Ruff globally.\nuv add --dev ruff            # Or add Ruff to your project.\n\n# With pip.\npip install ruff\n\n# With pipx.\npipx install ruff\n```\n\nStarting with version `0.5.0`, Ruff can be installed with our standalone installers:\n\n```shell\n# On macOS and Linux.\ncurl -LsSf https://astral.sh/ruff/install.sh | sh\n\n# On Windows.\npowershell -c \"irm https://astral.sh/ruff/install.ps1 | iex\"\n\n# For a specific version.\ncurl -LsSf https://astral.sh/ruff/0.9.1/install.sh | sh\npowershell -c \"irm https://astral.sh/ruff/0.9.1/install.ps1 | iex\"\n```\n\nYou can also install Ruff via [Homebrew](https://formulae.brew.sh/formula/ruff), [Conda](https://anaconda.org/conda-forge/ruff),\nand with [a variety of other package managers](https://docs.astral.sh/ruff/installation/).\n\n### Usage\n\nTo run Ruff as a linter, try any of the following:\n\n```shell\nruff check                          # Lint all files in the current directory (and any subdirectories).\nruff check path/to/code/            # Lint all files in `/path/to/code` (and any subdirectories).\nruff check path/to/code/*.py        # Lint all `.py` files in `/path/to/code`.\nruff check path/to/code/to/file.py  # Lint `file.py`.\nruff check @arguments.txt           # Lint using an input file, treating its contents as newline-delimited command-line arguments.\n```\n\nOr, to run Ruff as a formatter:\n\n```shell\nruff format                          # Format all files in the current directory (and any subdirectories).\nruff format path/to/code/            # Format all files in `/path/to/code` (and any subdirectories).\nruff format path/to/code/*.py        # Format all `.py` files in `/path/to/code`.\nruff format path/to/code/to/file.py  # Format `file.py`.\nruff format @arguments.txt           # Format using an input file, treating its contents as newline-delimited command-line arguments.\n```\n\nRuff can also be used as a [pre-commit](https://pre-commit.com/) hook via [`ruff-pre-commit`](https://github.com/astral-sh/ruff-pre-commit):\n\n```yaml\n- repo: https://github.com/astral-sh/ruff-pre-commit\n  # Ruff version.\n  rev: v0.9.1\n  hooks:\n    # Run the linter.\n    - id: ruff\n      args: [ --fix ]\n    # Run the formatter.\n    - id: ruff-format\n```\n\nRuff can also be used as a [VS Code extension](https://github.com/astral-sh/ruff-vscode) or with [various other editors](https://docs.astral.sh/ruff/editors/setup).\n\nRuff can also be used as a [GitHub Action](https://github.com/features/actions) via\n[`ruff-action`](https://github.com/astral-sh/ruff-action):\n\n```yaml\nname: Ruff\non: [ push, pull_request ]\njobs:\n  ruff:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: astral-sh/ruff-action@v3\n```\n\n### Configuration<a id=\"configuration\"></a>\n\nRuff can be configured through a `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file (see:\n[_Configuration_](https://docs.astral.sh/ruff/configuration/), or [_Settings_](https://docs.astral.sh/ruff/settings/)\nfor a complete list of all configuration options).\n\nIf left unspecified, Ruff's default configuration is equivalent to the following `ruff.toml` file:\n\n```toml\n# Exclude a variety of commonly ignored directories.\nexclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".ipynb_checkpoints\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pyenv\",\n    \".pytest_cache\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \".vscode\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"site-packages\",\n    \"venv\",\n]\n\n# Same as Black.\nline-length = 88\nindent-width = 4\n\n# Assume Python 3.9\ntarget-version = \"py39\"\n\n[lint]\n# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.\nselect = [\"E4\", \"E7\", \"E9\", \"F\"]\nignore = []\n\n# Allow fix for all enabled rules (when `--fix`) is provided.\nfixable = [\"ALL\"]\nunfixable = []\n\n# Allow unused variables when underscore-prefixed.\ndummy-variable-rgx = \"^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$\"\n\n[format]\n# Like Black, use double quotes for strings.\nquote-style = \"double\"\n\n# Like Black, indent with spaces, rather than tabs.\nindent-style = \"space\"\n\n# Like Black, respect magic trailing commas.\nskip-magic-trailing-comma = false\n\n# Like Black, automatically detect the appropriate line ending.\nline-ending = \"auto\"\n```\n\nNote that, in a `pyproject.toml`, each section header should be prefixed with `tool.ruff`. For\nexample, `[lint]` should be replaced with `[tool.ruff.lint]`.\n\nSome configuration options can be provided via dedicated command-line arguments, such as those\nrelated to rule enablement and disablement, file discovery, and logging level:\n\n```shell\nruff check --select F401 --select F403 --quiet\n```\n\nThe remaining configuration options can be provided through a catch-all `--config` argument:\n\n```shell\nruff check --config \"lint.per-file-ignores = {'some_file.py' = ['F841']}\"\n```\n\nTo opt in to the latest lint rules, formatter style changes, interface updates, and more, enable\n[preview mode](https://docs.astral.sh/ruff/rules/) by setting `preview = true` in your configuration\nfile or passing `--preview` on the command line. Preview mode enables a collection of unstable\nfeatures that may change prior to stabilization.\n\nSee `ruff help` for more on Ruff's top-level commands, or `ruff help check` and `ruff help format`\nfor more on the linting and formatting commands, respectively.\n\n## Rules<a id=\"rules\"></a>\n\n<!-- Begin section: Rules -->\n\n**Ruff supports over 800 lint rules**, many of which are inspired by popular tools like Flake8,\nisort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule in\nRust as a first-party feature.\n\nBy default, Ruff enables Flake8's `F` rules, along with a subset of the `E` rules, omitting any\nstylistic rules that overlap with the use of a formatter, like `ruff format` or\n[Black](https://github.com/psf/black).\n\nIf you're just getting started with Ruff, **the default rule set is a great place to start**: it\ncatches a wide variety of common errors (like unused imports) with zero configuration.\n\n<!-- End section: Rules -->\n\nBeyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code\nquality tools, including:\n\n- [autoflake](https://pypi.org/project/autoflake/)\n- [eradicate](https://pypi.org/project/eradicate/)\n- [flake8-2020](https://pypi.org/project/flake8-2020/)\n- [flake8-annotations](https://pypi.org/project/flake8-annotations/)\n- [flake8-async](https://pypi.org/project/flake8-async)\n- [flake8-bandit](https://pypi.org/project/flake8-bandit/) ([#1646](https://github.com/astral-sh/ruff/issues/1646))\n- [flake8-blind-except](https://pypi.org/project/flake8-blind-except/)\n- [flake8-boolean-trap](https://pypi.org/project/flake8-boolean-trap/)\n- [flake8-bugbear](https://pypi.org/project/flake8-bugbear/)\n- [flake8-builtins](https://pypi.org/project/flake8-builtins/)\n- [flake8-commas](https://pypi.org/project/flake8-commas/)\n- [flake8-comprehensions](https://pypi.org/project/flake8-comprehensions/)\n- [flake8-copyright](https://pypi.org/project/flake8-copyright/)\n- [flake8-datetimez](https://pypi.org/project/flake8-datetimez/)\n- [flake8-debugger](https://pypi.org/project/flake8-debugger/)\n- [flake8-django](https://pypi.org/project/flake8-django/)\n- [flake8-docstrings](https://pypi.org/project/flake8-docstrings/)\n- [flake8-eradicate](https://pypi.org/project/flake8-eradicate/)\n- [flake8-errmsg](https://pypi.org/project/flake8-errmsg/)\n- [flake8-executable](https://pypi.org/project/flake8-executable/)\n- [flake8-future-annotations](https://pypi.org/project/flake8-future-annotations/)\n- [flake8-gettext](https://pypi.org/project/flake8-gettext/)\n- [flake8-implicit-str-concat](https://pypi.org/project/flake8-implicit-str-concat/)\n- [flake8-import-conventions](https://github.com/joaopalmeiro/flake8-import-conventions)\n- [flake8-logging](https://pypi.org/project/flake8-logging/)\n- [flake8-logging-format](https://pypi.org/project/flake8-logging-format/)\n- [flake8-no-pep420](https://pypi.org/project/flake8-no-pep420)\n- [flake8-pie](https://pypi.org/project/flake8-pie/)\n- [flake8-print](https://pypi.org/project/flake8-print/)\n- [flake8-pyi](https://pypi.org/project/flake8-pyi/)\n- [flake8-pytest-style](https://pypi.org/project/flake8-pytest-style/)\n- [flake8-quotes](https://pypi.org/project/flake8-quotes/)\n- [flake8-raise](https://pypi.org/project/flake8-raise/)\n- [flake8-return](https://pypi.org/project/flake8-return/)\n- [flake8-self](https://pypi.org/project/flake8-self/)\n- [flake8-simplify](https://pypi.org/project/flake8-simplify/)\n- [flake8-slots](https://pypi.org/project/flake8-slots/)\n- [flake8-super](https://pypi.org/project/flake8-super/)\n- [flake8-tidy-imports](https://pypi.org/project/flake8-tidy-imports/)\n- [flake8-todos](https://pypi.org/project/flake8-todos/)\n- [flake8-type-checking](https://pypi.org/project/flake8-type-checking/)\n- [flake8-use-pathlib](https://pypi.org/project/flake8-use-pathlib/)\n- [flynt](https://pypi.org/project/flynt/) ([#2102](https://github.com/astral-sh/ruff/issues/2102))\n- [isort](https://pypi.org/project/isort/)\n- [mccabe](https://pypi.org/project/mccabe/)\n- [pandas-vet](https://pypi.org/project/pandas-vet/)\n- [pep8-naming](https://pypi.org/project/pep8-naming/)\n- [pydocstyle](https://pypi.org/project/pydocstyle/)\n- [pygrep-hooks](https://github.com/pre-commit/pygrep-hooks)\n- [pylint-airflow](https://pypi.org/project/pylint-airflow/)\n- [pyupgrade](https://pypi.org/project/pyupgrade/)\n- [tryceratops](https://pypi.org/project/tryceratops/)\n- [yesqa](https://pypi.org/project/yesqa/)\n\nFor a complete enumeration of the supported rules, see [_Rules_](https://docs.astral.sh/ruff/rules/).\n\n## Contributing<a id=\"contributing\"></a>\n\nContributions are welcome and highly appreciated. To get started, check out the\n[**contributing guidelines**](https://docs.astral.sh/ruff/contributing/).\n\nYou can also join us on [**Discord**](https://discord.com/invite/astral-sh).\n\n## Support<a id=\"support\"></a>\n\nHaving trouble? Check out the existing issues on [**GitHub**](https://github.com/astral-sh/ruff/issues),\nor feel free to [**open a new one**](https://github.com/astral-sh/ruff/issues/new).\n\nYou can also ask for help on [**Discord**](https://discord.com/invite/astral-sh).\n\n## Acknowledgements<a id=\"acknowledgements\"></a>\n\nRuff's linter draws on both the APIs and implementation details of many other\ntools in the Python ecosystem, especially [Flake8](https://github.com/PyCQA/flake8), [Pyflakes](https://github.com/PyCQA/pyflakes),\n[pycodestyle](https://github.com/PyCQA/pycodestyle), [pydocstyle](https://github.com/PyCQA/pydocstyle),\n[pyupgrade](https://github.com/asottile/pyupgrade), and [isort](https://github.com/PyCQA/isort).\n\nIn some cases, Ruff includes a \"direct\" Rust port of the corresponding tool.\nWe're grateful to the maintainers of these tools for their work, and for all\nthe value they've provided to the Python community.\n\nRuff's formatter is built on a fork of Rome's [`rome_formatter`](https://github.com/rome/tools/tree/main/crates/rome_formatter),\nand again draws on both API and implementation details from [Rome](https://github.com/rome/tools),\n[Prettier](https://github.com/prettier/prettier), and [Black](https://github.com/psf/black).\n\nRuff's import resolver is based on the import resolution algorithm from [Pyright](https://github.com/microsoft/pyright).\n\nRuff is also influenced by a number of tools outside the Python ecosystem, like\n[Clippy](https://github.com/rust-lang/rust-clippy) and [ESLint](https://github.com/eslint/eslint).\n\nRuff is the beneficiary of a large number of [contributors](https://github.com/astral-sh/ruff/graphs/contributors).\n\nRuff is released under the MIT license.\n\n## Who's Using Ruff?<a id=\"whos-using-ruff\"></a>\n\nRuff is used by a number of major open-source projects and companies, including:\n\n- [Albumentations](https://github.com/albumentations-team/albumentations)\n- Amazon ([AWS SAM](https://github.com/aws/serverless-application-model))\n- Anthropic ([Python SDK](https://github.com/anthropics/anthropic-sdk-python))\n- [Apache Airflow](https://github.com/apache/airflow)\n- AstraZeneca ([Magnus](https://github.com/AstraZeneca/magnus-core))\n- [Babel](https://github.com/python-babel/babel)\n- Benchling ([Refac](https://github.com/benchling/refac))\n- [Bokeh](https://github.com/bokeh/bokeh)\n- CrowdCent ([NumerBlox](https://github.com/crowdcent/numerblox)) <!-- typos: ignore -->\n- [Cryptography (PyCA)](https://github.com/pyca/cryptography)\n- CERN ([Indico](https://getindico.io/))\n- [DVC](https://github.com/iterative/dvc)\n- [Dagger](https://github.com/dagger/dagger)\n- [Dagster](https://github.com/dagster-io/dagster)\n- Databricks ([MLflow](https://github.com/mlflow/mlflow))\n- [Dify](https://github.com/langgenius/dify)\n- [FastAPI](https://github.com/tiangolo/fastapi)\n- [Godot](https://github.com/godotengine/godot)\n- [Gradio](https://github.com/gradio-app/gradio)\n- [Great Expectations](https://github.com/great-expectations/great_expectations)\n- [HTTPX](https://github.com/encode/httpx)\n- [Hatch](https://github.com/pypa/hatch)\n- [Home Assistant](https://github.com/home-assistant/core)\n- Hugging Face ([Transformers](https://github.com/huggingface/transformers),\n    [Datasets](https://github.com/huggingface/datasets),\n    [Diffusers](https://github.com/huggingface/diffusers))\n- IBM ([Qiskit](https://github.com/Qiskit/qiskit))\n- ING Bank ([popmon](https://github.com/ing-bank/popmon), [probatus](https://github.com/ing-bank/probatus))\n- [Ibis](https://github.com/ibis-project/ibis)\n- [ivy](https://github.com/unifyai/ivy)\n- [Jupyter](https://github.com/jupyter-server/jupyter_server)\n- [Kraken Tech](https://kraken.tech/)\n- [LangChain](https://github.com/hwchase17/langchain)\n- [Litestar](https://litestar.dev/)\n- [LlamaIndex](https://github.com/jerryjliu/llama_index)\n- Matrix ([Synapse](https://github.com/matrix-org/synapse))\n- [MegaLinter](https://github.com/oxsecurity/megalinter)\n- Meltano ([Meltano CLI](https://github.com/meltano/meltano), [Singer SDK](https://github.com/meltano/sdk))\n- Microsoft ([Semantic Kernel](https://github.com/microsoft/semantic-kernel),\n    [ONNX Runtime](https://github.com/microsoft/onnxruntime),\n    [LightGBM](https://github.com/microsoft/LightGBM))\n- Modern Treasury ([Python SDK](https://github.com/Modern-Treasury/modern-treasury-python))\n- Mozilla ([Firefox](https://github.com/mozilla/gecko-dev))\n- [Mypy](https://github.com/python/mypy)\n- [Nautobot](https://github.com/nautobot/nautobot)\n- Netflix ([Dispatch](https://github.com/Netflix/dispatch))\n- [Neon](https://github.com/neondatabase/neon)\n- [Nokia](https://nokia.com/)\n- [NoneBot](https://github.com/nonebot/nonebot2)\n- [NumPyro](https://github.com/pyro-ppl/numpyro)\n- [ONNX](https://github.com/onnx/onnx)\n- [OpenBB](https://github.com/OpenBB-finance/OpenBBTerminal)\n- [Open Wine Components](https://github.com/Open-Wine-Components/umu-launcher)\n- [PDM](https://github.com/pdm-project/pdm)\n- [PaddlePaddle](https://github.com/PaddlePaddle/Paddle)\n- [Pandas](https://github.com/pandas-dev/pandas)\n- [Pillow](https://github.com/python-pillow/Pillow)\n- [Poetry](https://github.com/python-poetry/poetry)\n- [Polars](https://github.com/pola-rs/polars)\n- [PostHog](https://github.com/PostHog/posthog)\n- Prefect ([Python SDK](https://github.com/PrefectHQ/prefect), [Marvin](https://github.com/PrefectHQ/marvin))\n- [PyInstaller](https://github.com/pyinstaller/pyinstaller)\n- [PyMC](https://github.com/pymc-devs/pymc/)\n- [PyMC-Marketing](https://github.com/pymc-labs/pymc-marketing)\n- [pytest](https://github.com/pytest-dev/pytest)\n- [PyTorch](https://github.com/pytorch/pytorch)\n- [Pydantic](https://github.com/pydantic/pydantic)\n- [Pylint](https://github.com/PyCQA/pylint)\n- [PyVista](https://github.com/pyvista/pyvista)\n- [Reflex](https://github.com/reflex-dev/reflex)\n- [River](https://github.com/online-ml/river)\n- [Rippling](https://rippling.com)\n- [Robyn](https://github.com/sansyrox/robyn)\n- [Saleor](https://github.com/saleor/saleor)\n- Scale AI ([Launch SDK](https://github.com/scaleapi/launch-python-client))\n- [SciPy](https://github.com/scipy/scipy)\n- Snowflake ([SnowCLI](https://github.com/Snowflake-Labs/snowcli))\n- [Sphinx](https://github.com/sphinx-doc/sphinx)\n- [Stable Baselines3](https://github.com/DLR-RM/stable-baselines3)\n- [Starlette](https://github.com/encode/starlette)\n- [Streamlit](https://github.com/streamlit/streamlit)\n- [The Algorithms](https://github.com/TheAlgorithms/Python)\n- [Vega-Altair](https://github.com/altair-viz/altair)\n- WordPress ([Openverse](https://github.com/WordPress/openverse))\n- [ZenML](https://github.com/zenml-io/zenml)\n- [Zulip](https://github.com/zulip/zulip)\n- [build (PyPA)](https://github.com/pypa/build)\n- [cibuildwheel (PyPA)](https://github.com/pypa/cibuildwheel)\n- [delta-rs](https://github.com/delta-io/delta-rs)\n- [featuretools](https://github.com/alteryx/featuretools)\n- [meson-python](https://github.com/mesonbuild/meson-python)\n- [nox](https://github.com/wntrblm/nox)\n- [pip](https://github.com/pypa/pip)\n\n### Show Your Support\n\nIf you're using Ruff, consider adding the Ruff badge to your project's `README.md`:\n\n```md\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n```\n\n...or `README.rst`:\n\n```rst\n.. image:: https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json\n    :target: https://github.com/astral-sh/ruff\n    :alt: Ruff\n```\n\n...or, as HTML:\n\n```html\n<a href=\"https://github.com/astral-sh/ruff\"><img src=\"https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json\" alt=\"Ruff\" style=\"max-width:100%;\"></a>\n```\n\n## License<a id=\"license\"></a>\n\nThis repository is licensed under the [MIT License](https://github.com/astral-sh/ruff/blob/main/LICENSE)\n\n<div align=\"center\">\n  <a target=\"_blank\" href=\"https://astral.sh\" style=\"background:none\">\n    <img src=\"https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg\" alt=\"Made by Astral\">\n  </a>\n</div>\n"
        },
        {
          "name": "_typos.toml",
          "type": "blob",
          "size": 0.70703125,
          "content": "[files]\n# https://github.com/crate-ci/typos/issues/868\nextend-exclude = [\n  \"crates/red_knot_vendored/vendor/**/*\",\n  \"**/resources/**/*\",\n  \"**/snapshots/**/*\",\n  \"crates/red_knot_workspace/src/workspace/pyproject/package_name.rs\"\n]\n\n[default.extend-words]\n\"arange\" = \"arange\"  # e.g. `numpy.arange`\nhel = \"hel\"\nwhos = \"whos\"\nspawnve = \"spawnve\"\nned = \"ned\"\npn = \"pn\"  # `import panel as pn` is a thing\npoit = \"poit\"\nBA = \"BA\" # acronym for \"Bad Allowed\", used in testing.\njod = \"jod\" # e.g., `jod-thread`\nNumer = \"Numer\" # Library name 'NumerBlox' in \"Who's Using Ruff?\"\n\n[default]\nextend-ignore-re = [\n  # Line ignore with trailing \"spellchecker:disable-line\"\n  \"(?Rm)^.*#\\\\s*spellchecker:disable-line$\",\n  \"LICENSEs\",\n]\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "clippy.toml",
          "type": "blob",
          "size": 0.4921875,
          "content": "doc-valid-idents = [\n    \"..\",\n    \"CodeQL\",\n    \"FastAPI\",\n    \"IPython\",\n    \"LangChain\",\n    \"LibCST\",\n    \"McCabe\",\n    \"NumPy\",\n    \"SCREAMING_SNAKE_CASE\",\n    \"SQLAlchemy\",\n    \"StackOverflow\",\n    \"PyCharm\",\n    \"SNMPv1\",\n    \"SNMPv2\",\n    \"SNMPv3\",\n    \"PyFlakes\"\n]\n\nignore-interior-mutability = [\n    # Interned is read-only. The wrapped `Rc` never gets updated.\n    \"ruff_formatter::format_element::Interned\",\n    # The expression is read-only.\n    \"ruff_python_ast::hashable::HashableExpr\",\n]\n"
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.insiders.yml",
          "type": "blob",
          "size": 0.060546875,
          "content": "INHERIT: mkdocs.generated.yml\nwatch:\n  - mkdocs.generated.yml\n"
        },
        {
          "name": "mkdocs.public.yml",
          "type": "blob",
          "size": 0.1552734375,
          "content": "INHERIT: mkdocs.generated.yml\n# Omit the `typeset` plugin which is only available in the Insiders version.\nplugins:\n  - search\nwatch:\n  - mkdocs.generated.yml\n"
        },
        {
          "name": "mkdocs.template.yml",
          "type": "blob",
          "size": 2.3037109375,
          "content": "site_name: Ruff\ntheme:\n  name: material\n  logo: assets/bolt.svg\n  favicon: assets/favicon.ico\n  features:\n    - navigation.instant\n    - navigation.instant.prefetch\n    - navigation.tracking\n    - content.code.annotate\n    - toc.integrate\n    - toc.follow\n    - navigation.path\n    - navigation.top\n    - content.code.copy\n    - content.tabs.link\n  palette:\n    # Note: Using the system theme works with the insiders version\n    # https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/#automatic-light-dark-mode\n    - media: \"(prefers-color-scheme)\"\n      toggle:\n        icon: material/brightness-auto\n        name: Switch to light mode\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: astral-light\n      toggle:\n        icon: material/brightness-7\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: astral-dark\n      toggle:\n        icon: material/brightness-4\n        name: Switch to system preference\n  custom_dir: docs/.overrides\nrepo_url: https://github.com/astral-sh/ruff\nrepo_name: ruff\nsite_author: charliermarsh\nsite_url: https://docs.astral.sh/ruff/\nsite_dir: site/ruff\nsite_description: An extremely fast Python linter and code formatter, written in Rust.\nmarkdown_extensions:\n  - admonition\n  - pymdownx.details\n  - toc:\n      anchorlink: true\n      anchorlink_class: \"toclink\"\n  - pymdownx.snippets:\n  - pymdownx.magiclink:\n  - attr_list:\n  - md_in_html:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite:\n  - pymdownx.superfences:\n  - markdown.extensions.attr_list:\n  - pymdownx.keys:\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.tabbed:\n      alternate_style: true\nplugins:\n  - search\nextra_css:\n  - stylesheets/extra.css\nextra_javascript:\n  - js/extra.js\nnot_in_nav: |\n  /rules/*\n  /formatter/*\nextra:\n  analytics:\n    provider: fathom\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/astral-sh/ruff\n    - icon: fontawesome/brands/discord\n      link: https://discord.com/invite/astral-sh\n    - icon: fontawesome/brands/python\n      link: https://pypi.org/project/ruff/\n    - icon: fontawesome/brands/x-twitter\n      link: https://x.com/astral_sh\nvalidation:\n  omitted_files: warn\n  absolute_links: warn\n  unrecognized_links: warn\n  anchors: warn\n"
        },
        {
          "name": "playground",
          "type": "tree",
          "content": null
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 3.13671875,
          "content": "[build-system]\nrequires = [\"maturin>=1.0,<2.0\"]\nbuild-backend = \"maturin\"\n\n[project]\nname = \"ruff\"\nversion = \"0.9.1\"\ndescription = \"An extremely fast Python linter and code formatter, written in Rust.\"\nauthors = [{ name = \"Astral Software Inc.\", email = \"hey@astral.sh\" }]\nreadme = \"README.md\"\nrequires-python = \">=3.7\"\nlicense = { file = \"LICENSE\" }\nkeywords = [\n  \"automation\",\n  \"flake8\",\n  \"pycodestyle\",\n  \"pyflakes\",\n  \"pylint\",\n  \"clippy\",\n]\nclassifiers = [\n  \"Development Status :: 5 - Production/Stable\",\n  \"Environment :: Console\",\n  \"Intended Audience :: Developers\",\n  \"License :: OSI Approved :: MIT License\",\n  \"Operating System :: OS Independent\",\n  \"Programming Language :: Python\",\n  \"Programming Language :: Python :: 3.7\",\n  \"Programming Language :: Python :: 3.8\",\n  \"Programming Language :: Python :: 3.9\",\n  \"Programming Language :: Python :: 3.10\",\n  \"Programming Language :: Python :: 3.11\",\n  \"Programming Language :: Python :: 3.12\",\n  \"Programming Language :: Python :: 3.13\",\n  \"Programming Language :: Python :: 3 :: Only\",\n  \"Programming Language :: Rust\",\n  \"Topic :: Software Development :: Libraries :: Python Modules\",\n  \"Topic :: Software Development :: Quality Assurance\",\n]\n\n[project.urls]\nRepository = \"https://github.com/astral-sh/ruff\"\nDocumentation = \"https://docs.astral.sh/ruff/\"\nChangelog = \"https://github.com/astral-sh/ruff/blob/main/CHANGELOG.md\"\n\n[tool.maturin]\nbindings = \"bin\"\nmanifest-path = \"crates/ruff/Cargo.toml\"\nmodule-name = \"ruff\"\npython-source = \"python\"\nstrip = true\nexclude = [\n  \"crates/ruff_linter/resources/test/fixtures/**/*\",\n  \"crates/ruff_linter/src/rules/*/snapshots/**/*\"\n]\ninclude = [\n  \"rust-toolchain.toml\"\n]\n\n[tool.ruff]\nextend-exclude = [\n  \"crates/red_knot_vendored/vendor/\",\n  \"crates/ruff/resources/\",\n  \"crates/ruff_linter/resources/\",\n  \"crates/ruff_python_formatter/resources/\",\n  \"crates/ruff_python_parser/resources/\"\n]\n\n[tool.ruff.lint]\nignore = [\n  # Conflicts with the formatter\n  \"COM812\", \"ISC001\"\n]\n\n[tool.black]\nforce-exclude = '''\n/(\n  | crates/red_knot_vendored/vendor\n  | crates/ruff_linter/resources\n  | crates/ruff_python_formatter/resources\n  | crates/ruff_python_parser/resources\n)/\n'''\n\n[tool.rooster]\nmajor_labels = []  # Ruff never uses the major version number\nminor_labels = [\"breaking\"]   # Bump the minor version on breaking changes\n\nchangelog_ignore_labels = [\"internal\", \"ci\", \"red-knot\"]\n\nchangelog_sections.breaking = \"Breaking changes\"\nchangelog_sections.preview = \"Preview features\"\nchangelog_sections.rule = \"Rule changes\"\nchangelog_sections.formatter = \"Formatter\"\nchangelog_sections.server = \"Server\"\nchangelog_sections.cli = \"CLI\"\nchangelog_sections.configuration = \"Configuration\"\nchangelog_sections.bug = \"Bug fixes\"\nchangelog_sections.documentation = \"Documentation\"\nchangelog_sections.__unknown__ = \"Other changes\"\n\n# We exclude contributors from the CHANGELOG file\n# Generate separately with `rooster contributors` for the GitHub release page\nchangelog_contributors = false\n\nversion_files = [\n  \"README.md\",\n  \"docs/integrations.md\",\n  \"docs/tutorial.md\",\n  \"crates/ruff/Cargo.toml\",\n  \"crates/ruff_linter/Cargo.toml\",\n  \"crates/ruff_wasm/Cargo.toml\",\n  \"scripts/benchmarks/pyproject.toml\",\n]\n"
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "ruff.schema.json",
          "type": "blob",
          "size": 135.5087890625,
          "content": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Options\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"allowed-confusables\": {\n      \"description\": \"A list of allowed \\\"confusable\\\" Unicode characters to ignore when enforcing `RUF001`, `RUF002`, and `RUF003`.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\",\n        \"maxLength\": 1,\n        \"minLength\": 1\n      }\n    },\n    \"analyze\": {\n      \"description\": \"Options to configure import map generation.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/AnalyzeOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"builtins\": {\n      \"description\": \"A list of builtins to treat as defined references, in addition to the system builtins.\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"cache-dir\": {\n      \"description\": \"A path to the cache directory.\\n\\nBy default, Ruff stores cache results in a `.ruff_cache` directory in the current project root.\\n\\nHowever, Ruff will also respect the `RUFF_CACHE_DIR` environment variable, which takes precedence over that default.\\n\\nThis setting will override even the `RUFF_CACHE_DIR` environment variable, if set.\",\n      \"type\": [\n        \"string\",\n        \"null\"\n      ]\n    },\n    \"dummy-variable-rgx\": {\n      \"description\": \"A regular expression used to identify \\\"dummy\\\" variables, or those which should be ignored when enforcing (e.g.) unused-variable rules. The default expression matches `_`, `__`, and `_var`, but not `_var_`.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"string\",\n        \"null\"\n      ]\n    },\n    \"exclude\": {\n      \"description\": \"A list of file patterns to exclude from formatting and linting.\\n\\nExclusions are based on globs, and can be either:\\n\\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\\n\\nNote that you'll typically want to use [`extend-exclude`](#extend-exclude) to modify the excluded paths.\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"explicit-preview-rules\": {\n      \"description\": \"Whether to require exact codes to select preview rules. When enabled, preview rules will not be selected by prefixes — the full code of each preview rule will be required to enable the rule.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"extend\": {\n      \"description\": \"A path to a local `pyproject.toml` file to merge into this configuration. User home directory and environment variables will be expanded.\\n\\nTo resolve the current `pyproject.toml` file, Ruff will first resolve this base configuration file, then merge in any properties defined in the current configuration file.\",\n      \"type\": [\n        \"string\",\n        \"null\"\n      ]\n    },\n    \"extend-exclude\": {\n      \"description\": \"A list of file patterns to omit from formatting and linting, in addition to those specified by [`exclude`](#exclude).\\n\\nExclusions are based on globs, and can be either:\\n\\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"extend-fixable\": {\n      \"description\": \"A list of rule codes or prefixes to consider fixable, in addition to those specified by [`fixable`](#lint_fixable).\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"extend-ignore\": {\n      \"description\": \"A list of rule codes or prefixes to ignore, in addition to those specified by `ignore`.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"extend-include\": {\n      \"description\": \"A list of file patterns to include when linting, in addition to those specified by [`include`](#include).\\n\\nInclusion are based on globs, and should be single-path patterns, like `*.pyw`, to include any file with the `.pyw` extension.\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"extend-per-file-ignores\": {\n      \"description\": \"A list of mappings from file pattern to rule codes or prefixes to exclude, in addition to any rules excluded by [`per-file-ignores`](#lint_per-file-ignores).\",\n      \"deprecated\": true,\n      \"type\": [\n        \"object\",\n        \"null\"\n      ],\n      \"additionalProperties\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/definitions/RuleSelector\"\n        }\n      }\n    },\n    \"extend-safe-fixes\": {\n      \"description\": \"A list of rule codes or prefixes for which unsafe fixes should be considered safe.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"extend-select\": {\n      \"description\": \"A list of rule codes or prefixes to enable, in addition to those specified by [`select`](#lint_select).\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"extend-unfixable\": {\n      \"description\": \"A list of rule codes or prefixes to consider non-auto-fixable, in addition to those specified by [`unfixable`](#lint_unfixable).\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"extend-unsafe-fixes\": {\n      \"description\": \"A list of rule codes or prefixes for which safe fixes should be considered unsafe.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"external\": {\n      \"description\": \"A list of rule codes or prefixes that are unsupported by Ruff, but should be preserved when (e.g.) validating `# noqa` directives. Useful for retaining `# noqa` directives that cover plugins not yet implemented by Ruff.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"fix\": {\n      \"description\": \"Enable fix behavior by-default when running `ruff` (overridden by the `--fix` and `--no-fix` command-line flags). Only includes automatic fixes unless `--unsafe-fixes` is provided.\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"fix-only\": {\n      \"description\": \"Like [`fix`](#fix), but disables reporting on leftover violation. Implies [`fix`](#fix).\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"fixable\": {\n      \"description\": \"A list of rule codes or prefixes to consider fixable. By default, all rules are considered fixable.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"flake8-annotations\": {\n      \"description\": \"Options for the `flake8-annotations` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8AnnotationsOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-bandit\": {\n      \"description\": \"Options for the `flake8-bandit` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8BanditOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-boolean-trap\": {\n      \"description\": \"Options for the `flake8-boolean-trap` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8BooleanTrapOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-bugbear\": {\n      \"description\": \"Options for the `flake8-bugbear` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8BugbearOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-builtins\": {\n      \"description\": \"Options for the `flake8-builtins` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8BuiltinsOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-comprehensions\": {\n      \"description\": \"Options for the `flake8-comprehensions` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8ComprehensionsOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-copyright\": {\n      \"description\": \"Options for the `flake8-copyright` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8CopyrightOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-errmsg\": {\n      \"description\": \"Options for the `flake8-errmsg` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8ErrMsgOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-gettext\": {\n      \"description\": \"Options for the `flake8-gettext` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8GetTextOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-implicit-str-concat\": {\n      \"description\": \"Options for the `flake8-implicit-str-concat` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8ImplicitStrConcatOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-import-conventions\": {\n      \"description\": \"Options for the `flake8-import-conventions` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8ImportConventionsOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-pytest-style\": {\n      \"description\": \"Options for the `flake8-pytest-style` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8PytestStyleOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-quotes\": {\n      \"description\": \"Options for the `flake8-quotes` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8QuotesOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-self\": {\n      \"description\": \"Options for the `flake8_self` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8SelfOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-tidy-imports\": {\n      \"description\": \"Options for the `flake8-tidy-imports` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8TidyImportsOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-type-checking\": {\n      \"description\": \"Options for the `flake8-type-checking` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8TypeCheckingOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"flake8-unused-arguments\": {\n      \"description\": \"Options for the `flake8-unused-arguments` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Flake8UnusedArgumentsOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"force-exclude\": {\n      \"description\": \"Whether to enforce [`exclude`](#exclude) and [`extend-exclude`](#extend-exclude) patterns, even for paths that are passed to Ruff explicitly. Typically, Ruff will lint any paths passed in directly, even if they would typically be excluded. Setting `force-exclude = true` will cause Ruff to respect these exclusions unequivocally.\\n\\nThis is useful for [`pre-commit`](https://pre-commit.com/), which explicitly passes all changed files to the [`ruff-pre-commit`](https://github.com/astral-sh/ruff-pre-commit) plugin, regardless of whether they're marked as excluded by Ruff's own settings.\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"format\": {\n      \"description\": \"Options to configure code formatting.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/FormatOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"ignore\": {\n      \"description\": \"A list of rule codes or prefixes to ignore. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\\n\\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"ignore-init-module-imports\": {\n      \"description\": \"Avoid automatically removing unused imports in `__init__.py` files. Such imports will still be flagged, but with a dedicated message suggesting that the import is either added to the module's `__all__` symbol, or re-exported with a redundant alias (e.g., `import os as os`).\\n\\nThis option is enabled by default, but you can opt-in to removal of imports via an unsafe fix.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"include\": {\n      \"description\": \"A list of file patterns to include when linting.\\n\\nInclusion are based on globs, and should be single-path patterns, like `*.pyw`, to include any file with the `.pyw` extension. `pyproject.toml` is included here not for configuration but because we lint whether e.g. the `[project]` matches the schema.\\n\\nNotebook files (`.ipynb` extension) are included by default on Ruff 0.6.0+.\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"indent-width\": {\n      \"description\": \"The number of spaces per indentation level (tab).\\n\\nUsed by the formatter and when enforcing long-line violations (like `E501`) to determine the visual width of a tab.\\n\\nThis option changes the number of spaces the formatter inserts when using soft-tabs (`indent-style = space`).\\n\\nPEP 8 recommends using 4 spaces per [indentation level](https://peps.python.org/pep-0008/#indentation).\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/IndentWidth\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"isort\": {\n      \"description\": \"Options for the `isort` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/IsortOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"line-length\": {\n      \"description\": \"The line length to use when enforcing long-lines violations (like `E501`) and at which `isort` and the formatter prefers to wrap lines.\\n\\nThe length is determined by the number of characters per line, except for lines containing East Asian characters or emojis. For these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\\n\\nThe value must be greater than `0` and less than or equal to `320`.\\n\\nNote: While the formatter will attempt to format lines such that they remain within the `line-length`, it isn't a hard upper bound, and formatted lines may exceed the `line-length`.\\n\\nSee [`pycodestyle.max-line-length`](#lint_pycodestyle_max-line-length) to configure different lengths for `E501` and the formatter.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/LineLength\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"lint\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/LintOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"logger-objects\": {\n      \"description\": \"A list of objects that should be treated equivalently to a `logging.Logger` object.\\n\\nThis is useful for ensuring proper diagnostics (e.g., to identify `logging` deprecations and other best-practices) for projects that re-export a `logging.Logger` object from a common module.\\n\\nFor example, if you have a module `logging_setup.py` with the following contents: ```python import logging\\n\\nlogger = logging.getLogger(__name__) ```\\n\\nAdding `\\\"logging_setup.logger\\\"` to `logger-objects` will ensure that `logging_setup.logger` is treated as a `logging.Logger` object when imported from other modules (e.g., `from logging_setup import logger`).\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"mccabe\": {\n      \"description\": \"Options for the `mccabe` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/McCabeOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"namespace-packages\": {\n      \"description\": \"Mark the specified directories as namespace packages. For the purpose of module resolution, Ruff will treat those directories and all their subdirectories as if they contained an `__init__.py` file.\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"output-format\": {\n      \"description\": \"The style in which violation messages should be formatted: `\\\"full\\\"` (default) (shows source), `\\\"concise\\\"`, `\\\"grouped\\\"` (group messages by file), `\\\"json\\\"` (machine-readable), `\\\"junit\\\"` (machine-readable XML), `\\\"github\\\"` (GitHub Actions annotations), `\\\"gitlab\\\"` (GitLab CI code quality report), `\\\"pylint\\\"` (Pylint text format) or `\\\"azure\\\"` (Azure Pipeline logging commands).\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/OutputFormat\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"pep8-naming\": {\n      \"description\": \"Options for the `pep8-naming` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/Pep8NamingOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"per-file-ignores\": {\n      \"description\": \"A list of mappings from file pattern to rule codes or prefixes to exclude, when considering any matching files. An initial '!' negates the file pattern.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"object\",\n        \"null\"\n      ],\n      \"additionalProperties\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/definitions/RuleSelector\"\n        }\n      }\n    },\n    \"preview\": {\n      \"description\": \"Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules, fixes, and formatting.\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"pycodestyle\": {\n      \"description\": \"Options for the `pycodestyle` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/PycodestyleOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"pydocstyle\": {\n      \"description\": \"Options for the `pydocstyle` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/PydocstyleOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"pyflakes\": {\n      \"description\": \"Options for the `pyflakes` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/PyflakesOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"pylint\": {\n      \"description\": \"Options for the `pylint` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/PylintOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"pyupgrade\": {\n      \"description\": \"Options for the `pyupgrade` plugin.\",\n      \"deprecated\": true,\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/PyUpgradeOptions\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"required-version\": {\n      \"description\": \"Enforce a requirement on the version of Ruff, to enforce at runtime. If the version of Ruff does not meet the requirement, Ruff will exit with an error.\\n\\nUseful for unifying results across many environments, e.g., with a `pyproject.toml` file.\\n\\nAccepts a [PEP 440](https://peps.python.org/pep-0440/) specifier, like `==0.3.1` or `>=0.3.1`.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/RequiredVersion\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"respect-gitignore\": {\n      \"description\": \"Whether to automatically exclude files that are ignored by `.ignore`, `.gitignore`, `.git/info/exclude`, and global `gitignore` files. Enabled by default.\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"select\": {\n      \"description\": \"A list of rule codes or prefixes to enable. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\\n\\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"show-fixes\": {\n      \"description\": \"Whether to show an enumeration of all fixed lint violations (overridden by the `--show-fixes` command-line flag).\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    },\n    \"src\": {\n      \"description\": \"The directories to consider when resolving first- vs. third-party imports.\\n\\nWhen omitted, the `src` directory will typically default to including both:\\n\\n1. The directory containing the nearest `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file (the \\\"project root\\\"). 2. The `\\\"src\\\"` subdirectory of the project root.\\n\\nThese defaults ensure that Ruff supports both flat layouts and `src` layouts out-of-the-box. (If a configuration file is explicitly provided (e.g., via the `--config` command-line flag), the current working directory will be considered the project root.)\\n\\nAs an example, consider an alternative project structure, like:\\n\\n```text my_project ├── pyproject.toml └── lib └── my_package ├── __init__.py ├── foo.py └── bar.py ```\\n\\nIn this case, the `./lib` directory should be included in the `src` option (e.g., `src = [\\\"lib\\\"]`), such that when resolving imports, `my_package.foo` is considered first-party.\\n\\nThis field supports globs. For example, if you have a series of Python packages in a `python_modules` directory, `src = [\\\"python_modules/*\\\"]` would expand to incorporate all packages in that directory. User home directory and environment variables will also be expanded.\",\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"target-version\": {\n      \"description\": \"The minimum Python version to target, e.g., when considering automatic code upgrades, like rewriting type annotations. Ruff will not propose changes using features that are not available in the given version.\\n\\nFor example, to represent supporting Python >=3.10 or ==3.10 specify `target-version = \\\"py310\\\"`.\\n\\nIf you're already using a `pyproject.toml` file, we recommend `project.requires-python` instead, as it's based on Python packaging standards, and will be respected by other tools. For example, Ruff treats the following as identical to `target-version = \\\"py38\\\"`:\\n\\n```toml [project] requires-python = \\\">=3.8\\\" ```\\n\\nIf both are specified, `target-version` takes precedence over `requires-python`.\\n\\nNote that a stub file can [sometimes make use of a typing feature](https://typing.readthedocs.io/en/latest/spec/distributing.html#syntax) before it is available at runtime, as long as the stub does not make use of new *syntax*. For example, a type checker will understand `int | str` in a stub as being a `Union` type annotation, even if the type checker is run using Python 3.9, despite the fact that the `|` operator can only be used to create union types at runtime on Python 3.10+. As such, Ruff will often recommend newer features in a stub file than it would for an equivalent runtime file with the same target version.\",\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/PythonVersion\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    },\n    \"task-tags\": {\n      \"description\": \"A list of task tags to recognize (e.g., \\\"TODO\\\", \\\"FIXME\\\", \\\"XXX\\\").\\n\\nComments starting with these tags will be ignored by commented-out code detection (`ERA`), and skipped by line-length rules (`E501`) if [`ignore-overlong-task-comments`](#lint_pycodestyle_ignore-overlong-task-comments) is set to `true`.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"typing-modules\": {\n      \"description\": \"A list of modules whose exports should be treated equivalently to members of the `typing` module.\\n\\nThis is useful for ensuring proper type annotation inference for projects that re-export `typing` and `typing_extensions` members from a compatibility module. If omitted, any members imported from modules apart from `typing` and `typing_extensions` will be treated as ordinary Python objects.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"unfixable\": {\n      \"description\": \"A list of rule codes or prefixes to consider non-fixable.\",\n      \"deprecated\": true,\n      \"type\": [\n        \"array\",\n        \"null\"\n      ],\n      \"items\": {\n        \"$ref\": \"#/definitions/RuleSelector\"\n      }\n    },\n    \"unsafe-fixes\": {\n      \"description\": \"Enable application of unsafe fixes. If excluded, a hint will be displayed when unsafe fixes are available. If set to false, the hint will be hidden.\",\n      \"type\": [\n        \"boolean\",\n        \"null\"\n      ]\n    }\n  },\n  \"additionalProperties\": false,\n  \"definitions\": {\n    \"Alias\": {\n      \"type\": \"string\"\n    },\n    \"AnalyzeOptions\": {\n      \"description\": \"Configures Ruff's `analyze` command.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"detect-string-imports\": {\n          \"description\": \"Whether to detect imports from string literals. When enabled, Ruff will search for string literals that \\\"look like\\\" import paths, and include them in the import map, if they resolve to valid Python modules.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"direction\": {\n          \"description\": \"Whether to generate a map from file to files that it depends on (dependencies) or files that depend on it (dependents).\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Direction\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"exclude\": {\n          \"description\": \"A list of file patterns to exclude from analysis in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\\n\\nExclusions are based on globs, and can be either:\\n\\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"include-dependencies\": {\n          \"description\": \"A map from file path to the list of Python or non-Python file paths or globs that should be considered dependencies of that file, regardless of whether relevant imports are detected.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"preview\": {\n          \"description\": \"Whether to enable preview mode. When preview mode is enabled, Ruff will expose unstable commands.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"ApiBan\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"msg\"\n      ],\n      \"properties\": {\n        \"msg\": {\n          \"description\": \"The message to display when the API is used.\",\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"BannedAliases\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      }\n    },\n    \"ConstantType\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"bytes\",\n        \"complex\",\n        \"float\",\n        \"int\",\n        \"str\"\n      ]\n    },\n    \"Convention\": {\n      \"oneOf\": [\n        {\n          \"description\": \"Use Google-style docstrings.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"google\"\n          ]\n        },\n        {\n          \"description\": \"Use NumPy-style docstrings.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"numpy\"\n          ]\n        },\n        {\n          \"description\": \"Use PEP257-style docstrings.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"pep257\"\n          ]\n        }\n      ]\n    },\n    \"Direction\": {\n      \"oneOf\": [\n        {\n          \"description\": \"Construct a map from module to its dependencies (i.e., the modules that it imports).\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"Dependencies\"\n          ]\n        },\n        {\n          \"description\": \"Construct a map from module to its dependents (i.e., the modules that import it).\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"Dependents\"\n          ]\n        }\n      ]\n    },\n    \"DocstringCodeLineWidth\": {\n      \"anyOf\": [\n        {\n          \"description\": \"Wrap docstring code examples at a fixed line width.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/LineWidth\"\n            }\n          ]\n        },\n        {\n          \"description\": \"Respect the line length limit setting for the surrounding Python code.\",\n          \"allOf\": [\n            {\n              \"$ref\": \"#/definitions/Dynamic\"\n            }\n          ]\n        }\n      ]\n    },\n    \"Dynamic\": {\n      \"type\": \"string\",\n      \"const\": \"dynamic\"\n    },\n    \"Flake8AnnotationsOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"allow-star-arg-any\": {\n          \"description\": \"Whether to suppress `ANN401` for dynamically typed `*args` and `**kwargs` arguments.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"ignore-fully-untyped\": {\n          \"description\": \"Whether to suppress `ANN*` rules for any declaration that hasn't been typed at all. This makes it easier to gradually add types to a codebase.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"mypy-init-return\": {\n          \"description\": \"Whether to allow the omission of a return type hint for `__init__` if at least one argument is annotated.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"suppress-dummy-args\": {\n          \"description\": \"Whether to suppress `ANN000`-level violations for arguments matching the \\\"dummy\\\" variable regex (like `_`).\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"suppress-none-returning\": {\n          \"description\": \"Whether to suppress `ANN200`-level violations for functions that meet either of the following criteria:\\n\\n- Contain no `return` statement. - Explicit `return` statement(s) all return `None` (explicitly or implicitly).\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8BanditOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"check-typed-exception\": {\n          \"description\": \"Whether to disallow `try`-`except`-`pass` (`S110`) for specific exception types. By default, `try`-`except`-`pass` is only disallowed for `Exception` and `BaseException`.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"hardcoded-tmp-directory\": {\n          \"description\": \"A list of directories to consider temporary (see `S108`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"hardcoded-tmp-directory-extend\": {\n          \"description\": \"A list of directories to consider temporary, in addition to those specified by [`hardcoded-tmp-directory`](#lint_flake8-bandit_hardcoded-tmp-directory) (see `S108`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8BooleanTrapOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"extend-allowed-calls\": {\n          \"description\": \"Additional callable functions with which to allow boolean traps.\\n\\nExpects to receive a list of fully-qualified names (e.g., `pydantic.Field`, rather than `Field`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8BugbearOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"extend-immutable-calls\": {\n          \"description\": \"Additional callable functions to consider \\\"immutable\\\" when evaluating, e.g., the `function-call-in-default-argument` rule (`B008`) or `function-call-in-dataclass-defaults` rule (`RUF009`).\\n\\nExpects to receive a list of fully-qualified names (e.g., `fastapi.Query`, rather than `Query`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8BuiltinsOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"builtins-allowed-modules\": {\n          \"description\": \"List of builtin module names to allow.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"builtins-ignorelist\": {\n          \"description\": \"Ignore list of builtins.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8ComprehensionsOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"allow-dict-calls-with-keyword-arguments\": {\n          \"description\": \"Allow `dict` calls that make use of keyword arguments (e.g., `dict(a=1, b=2)`).\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8CopyrightOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"author\": {\n          \"description\": \"Author to enforce within the copyright notice. If provided, the author must be present immediately following the copyright notice.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ]\n        },\n        \"min-file-size\": {\n          \"description\": \"A minimum file size (in bytes) required for a copyright notice to be enforced. By default, all files are validated.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"notice-rgx\": {\n          \"description\": \"The regular expression used to match the copyright notice, compiled with the [`regex`](https://docs.rs/regex/latest/regex/) crate. Defaults to `(?i)Copyright\\\\s+((?:\\\\(C\\\\)|©)\\\\s+)?\\\\d{4}((-|,\\\\s)\\\\d{4})*`, which matches the following:\\n\\n- `Copyright 2023` - `Copyright (C) 2023` - `Copyright 2021-2023` - `Copyright (C) 2021-2023` - `Copyright (C) 2021, 2023`\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8ErrMsgOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"max-string-length\": {\n          \"description\": \"Maximum string length for string literals in exception messages.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8GetTextOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"extend-function-names\": {\n          \"description\": \"Additional function names to consider as internationalization calls, in addition to those included in [`function-names`](#lint_flake8-gettext_function-names).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"function-names\": {\n          \"description\": \"The function names to consider as internationalization calls.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8ImplicitStrConcatOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"allow-multiline\": {\n          \"description\": \"Whether to allow implicit string concatenations for multiline strings. By default, implicit concatenations of multiline strings are allowed (but continuation lines, delimited with a backslash, are prohibited).\\n\\nSetting `allow-multiline = false` will automatically disable the `explicit-string-concatenation` (`ISC003`) rule. Otherwise, both implicit and explicit multiline string concatenations would be seen as violations, making it impossible to write a linter-compliant multiline string.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8ImportConventionsOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"aliases\": {\n          \"description\": \"The conventional aliases for imports. These aliases can be extended by the [`extend-aliases`](#lint_flake8-import-conventions_extend-aliases) option.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/Alias\"\n          }\n        },\n        \"banned-aliases\": {\n          \"description\": \"A mapping from module to its banned import aliases.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/BannedAliases\"\n          }\n        },\n        \"banned-from\": {\n          \"description\": \"A list of modules that should not be imported from using the `from ... import ...` syntax.\\n\\nFor example, given `banned-from = [\\\"pandas\\\"]`, `from pandas import DataFrame` would be disallowed, while `import pandas` would be allowed.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"uniqueItems\": true\n        },\n        \"extend-aliases\": {\n          \"description\": \"A mapping from module to conventional import alias. These aliases will be added to the [`aliases`](#lint_flake8-import-conventions_aliases) mapping.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/Alias\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8PytestStyleOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"fixture-parentheses\": {\n          \"description\": \"Boolean flag specifying whether `@pytest.fixture()` without parameters should have parentheses. If the option is set to `false` (the default), `@pytest.fixture` is valid and `@pytest.fixture()` is invalid. If set to `true`, `@pytest.fixture()` is valid and `@pytest.fixture` is invalid.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"mark-parentheses\": {\n          \"description\": \"Boolean flag specifying whether `@pytest.mark.foo()` without parameters should have parentheses. If the option is set to `false` (the default), `@pytest.mark.foo` is valid and `@pytest.mark.foo()` is invalid. If set to `true`, `@pytest.mark.foo()` is valid and `@pytest.mark.foo` is invalid.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"parametrize-names-type\": {\n          \"description\": \"Expected type for multiple argument names in `@pytest.mark.parametrize`. The following values are supported:\\n\\n- `csv` — a comma-separated list, e.g. `@pytest.mark.parametrize(\\\"name1,name2\\\", ...)` - `tuple` (default) — e.g. `@pytest.mark.parametrize((\\\"name1\\\", \\\"name2\\\"), ...)` - `list` — e.g. `@pytest.mark.parametrize([\\\"name1\\\", \\\"name2\\\"], ...)`\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/ParametrizeNameType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"parametrize-values-row-type\": {\n          \"description\": \"Expected type for each row of values in `@pytest.mark.parametrize` in case of multiple parameters. The following values are supported:\\n\\n- `tuple` (default) — e.g. `@pytest.mark.parametrize((\\\"name1\\\", \\\"name2\\\"), [(1, 2), (3, 4)])` - `list` — e.g. `@pytest.mark.parametrize((\\\"name1\\\", \\\"name2\\\"), [[1, 2], [3, 4]])`\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/ParametrizeValuesRowType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"parametrize-values-type\": {\n          \"description\": \"Expected type for the list of values rows in `@pytest.mark.parametrize`. The following values are supported:\\n\\n- `tuple` — e.g. `@pytest.mark.parametrize(\\\"name\\\", (1, 2, 3))` - `list` (default) — e.g. `@pytest.mark.parametrize(\\\"name\\\", [1, 2, 3])`\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/ParametrizeValuesType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"raises-extend-require-match-for\": {\n          \"description\": \"List of additional exception names that require a match= parameter in a `pytest.raises()` call. This extends the default list of exceptions that require a match= parameter. This option is useful if you want to extend the default list of exceptions that require a match= parameter without having to specify the entire list. Note that this option does not remove any exceptions from the default list.\\n\\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"raises-require-match-for\": {\n          \"description\": \"List of exception names that require a match= parameter in a `pytest.raises()` call.\\n\\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8QuotesOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"avoid-escape\": {\n          \"description\": \"Whether to avoid using single quotes if a string contains single quotes, or vice-versa with double quotes, as per [PEP 8](https://peps.python.org/pep-0008/#string-quotes). This minimizes the need to escape quotation marks within strings.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"docstring-quotes\": {\n          \"description\": \"Quote style to prefer for docstrings (either \\\"single\\\" or \\\"double\\\").\\n\\nWhen using the formatter, only \\\"double\\\" is compatible, as the formatter enforces double quotes for docstrings strings.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Quote\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"inline-quotes\": {\n          \"description\": \"Quote style to prefer for inline strings (either \\\"single\\\" or \\\"double\\\").\\n\\nWhen using the formatter, ensure that [`format.quote-style`](#format_quote-style) is set to the same preferred quote style.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Quote\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"multiline-quotes\": {\n          \"description\": \"Quote style to prefer for multiline strings (either \\\"single\\\" or \\\"double\\\").\\n\\nWhen using the formatter, only \\\"double\\\" is compatible, as the formatter enforces double quotes for multiline strings.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Quote\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8SelfOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"extend-ignore-names\": {\n          \"description\": \"Additional names to ignore when considering `flake8-self` violations, in addition to those included in [`ignore-names`](#lint_flake8-self_ignore-names).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"ignore-names\": {\n          \"description\": \"A list of names to ignore when considering `flake8-self` violations.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8TidyImportsOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ban-relative-imports\": {\n          \"description\": \"Whether to ban all relative imports (`\\\"all\\\"`), or only those imports that extend into the parent module or beyond (`\\\"parents\\\"`).\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Strictness\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"banned-api\": {\n          \"description\": \"Specific modules or module members that may not be imported or accessed. Note that this rule is only meant to flag accidental uses, and can be circumvented via `eval` or `importlib`.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/ApiBan\"\n          }\n        },\n        \"banned-module-level-imports\": {\n          \"description\": \"List of specific modules that may not be imported at module level, and should instead be imported lazily (e.g., within a function definition, or an `if TYPE_CHECKING:` block, or some other nested context).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8TypeCheckingOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"exempt-modules\": {\n          \"description\": \"Exempt certain modules from needing to be moved into type-checking blocks.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"quote-annotations\": {\n          \"description\": \"Whether to add quotes around type annotations, if doing so would allow the corresponding import to be moved into a type-checking block.\\n\\nFor example, in the following, Python requires that `Sequence` be available at runtime, despite the fact that it's only used in a type annotation:\\n\\n```python from collections.abc import Sequence\\n\\ndef func(value: Sequence[int]) -> None: ... ```\\n\\nIn other words, moving `from collections.abc import Sequence` into an `if TYPE_CHECKING:` block above would cause a runtime error, as the type would no longer be available at runtime.\\n\\nBy default, Ruff will respect such runtime semantics and avoid moving the import to prevent such runtime errors.\\n\\nSetting `quote-annotations` to `true` will instruct Ruff to add quotes around the annotation (e.g., `\\\"Sequence[int]\\\"`), which in turn enables Ruff to move the import into an `if TYPE_CHECKING:` block, like so:\\n\\n```python from typing import TYPE_CHECKING\\n\\nif TYPE_CHECKING: from collections.abc import Sequence\\n\\ndef func(value: \\\"Sequence[int]\\\") -> None: ... ```\\n\\nNote that this setting has no effect when `from __future__ import annotations` is present, as `__future__` annotations are always treated equivalently to quoted annotations.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"runtime-evaluated-base-classes\": {\n          \"description\": \"Exempt classes that list any of the enumerated classes as a base class from needing to be moved into type-checking blocks.\\n\\nCommon examples include Pydantic's `pydantic.BaseModel` and SQLAlchemy's `sqlalchemy.orm.DeclarativeBase`, but can also support user-defined classes that inherit from those base classes. For example, if you define a common `DeclarativeBase` subclass that's used throughout your project (e.g., `class Base(DeclarativeBase) ...` in `base.py`), you can add it to this list (`runtime-evaluated-base-classes = [\\\"base.Base\\\"]`) to exempt models from being moved into type-checking blocks.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"runtime-evaluated-decorators\": {\n          \"description\": \"Exempt classes and functions decorated with any of the enumerated decorators from being moved into type-checking blocks.\\n\\nCommon examples include Pydantic's `@pydantic.validate_call` decorator (for functions) and attrs' `@attrs.define` decorator (for classes).\\n\\nThis also supports framework decorators like FastAPI's `fastapi.FastAPI.get` which will work across assignments in the same module.\\n\\nFor example: ```python import fastapi\\n\\napp = FastAPI(\\\"app\\\")\\n\\n@app.get(\\\"/home\\\") def home() -> str: ... ```\\n\\nHere `app.get` will correctly be identified as `fastapi.FastAPI.get`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"strict\": {\n          \"description\": \"Enforce `TC001`, `TC002`, and `TC003` rules even when valid runtime imports are present for the same module.\\n\\nSee flake8-type-checking's [strict](https://github.com/snok/flake8-type-checking#strict) option.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"Flake8UnusedArgumentsOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ignore-variadic-names\": {\n          \"description\": \"Whether to allow unused variadic arguments, like `*args` and `**kwargs`.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"FormatOptions\": {\n      \"description\": \"Configures the way Ruff formats your code.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"docstring-code-format\": {\n          \"description\": \"Whether to format code snippets in docstrings.\\n\\nWhen this is enabled, Python code examples within docstrings are automatically reformatted.\\n\\nFor example, when this is enabled, the following code:\\n\\n```python def f(x): \\\"\\\"\\\" Something about `f`. And an example in doctest format:\\n\\n>>> f(  x  )\\n\\nMarkdown is also supported:\\n\\n```py f(  x  ) ```\\n\\nAs are reStructuredText literal blocks::\\n\\nf(  x  )\\n\\nAnd reStructuredText code blocks:\\n\\n.. code-block:: python\\n\\nf(  x  ) \\\"\\\"\\\" pass ```\\n\\n... will be reformatted (assuming the rest of the options are set to their defaults) as:\\n\\n```python def f(x): \\\"\\\"\\\" Something about `f`. And an example in doctest format:\\n\\n>>> f(x)\\n\\nMarkdown is also supported:\\n\\n```py f(x) ```\\n\\nAs are reStructuredText literal blocks::\\n\\nf(x)\\n\\nAnd reStructuredText code blocks:\\n\\n.. code-block:: python\\n\\nf(x) \\\"\\\"\\\" pass ```\\n\\nIf a code snippet in a docstring contains invalid Python code or if the formatter would otherwise write invalid Python code, then the code example is ignored by the formatter and kept as-is.\\n\\nCurrently, doctest, Markdown, reStructuredText literal blocks, and reStructuredText code blocks are all supported and automatically recognized. In the case of unlabeled fenced code blocks in Markdown and reStructuredText literal blocks, the contents are assumed to be Python and reformatted. As with any other format, if the contents aren't valid Python, then the block is left untouched automatically.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"docstring-code-line-length\": {\n          \"description\": \"Set the line length used when formatting code snippets in docstrings.\\n\\nThis only has an effect when the `docstring-code-format` setting is enabled.\\n\\nThe default value for this setting is `\\\"dynamic\\\"`, which has the effect of ensuring that any reformatted code examples in docstrings adhere to the global line length configuration that is used for the surrounding Python code. The point of this setting is that it takes the indentation of the docstring into account when reformatting code examples.\\n\\nAlternatively, this can be set to a fixed integer, which will result in the same line length limit being applied to all reformatted code examples in docstrings. When set to a fixed integer, the indent of the docstring is not taken into account. That is, this may result in lines in the reformatted code example that exceed the globally configured line length limit.\\n\\nFor example, when this is set to `20` and [`docstring-code-format`](#docstring-code-format) is enabled, then this code:\\n\\n```python def f(x): ''' Something about `f`. And an example:\\n\\n.. code-block:: python\\n\\nfoo, bar, quux = this_is_a_long_line(lion, hippo, lemur, bear) ''' pass ```\\n\\n... will be reformatted (assuming the rest of the options are set to their defaults) as:\\n\\n```python def f(x): \\\"\\\"\\\" Something about `f`. And an example:\\n\\n.. code-block:: python\\n\\n( foo, bar, quux, ) = this_is_a_long_line( lion, hippo, lemur, bear, ) \\\"\\\"\\\" pass ```\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/DocstringCodeLineWidth\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"exclude\": {\n          \"description\": \"A list of file patterns to exclude from formatting in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\\n\\nExclusions are based on globs, and can be either:\\n\\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"indent-style\": {\n          \"description\": \"Whether to use spaces or tabs for indentation.\\n\\n`indent-style = \\\"space\\\"` (default):\\n\\n```python def f(): print(\\\"Hello\\\") #  Spaces indent the `print` statement. ```\\n\\n`indent-style = \\\"tab\\\"`:\\n\\n```python def f(): print(\\\"Hello\\\") #  A tab `\\\\t` indents the `print` statement. ```\\n\\nPEP 8 recommends using spaces for [indentation](https://peps.python.org/pep-0008/#indentation). We care about accessibility; if you do not need tabs for accessibility, we do not recommend you use them.\\n\\nSee [`indent-width`](#indent-width) to configure the number of spaces per indentation and the tab width.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/IndentStyle\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"line-ending\": {\n          \"description\": \"The character Ruff uses at the end of a line.\\n\\n* `auto`: The newline style is detected automatically on a file per file basis. Files with mixed line endings will be converted to the first detected line ending. Defaults to `\\\\n` for files that contain no line endings. * `lf`: Line endings will be converted to `\\\\n`. The default line ending on Unix. * `cr-lf`: Line endings will be converted to `\\\\r\\\\n`. The default line ending on Windows. * `native`: Line endings will be converted to `\\\\n` on Unix and `\\\\r\\\\n` on Windows.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/LineEnding\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"preview\": {\n          \"description\": \"Whether to enable the unstable preview style formatting.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"quote-style\": {\n          \"description\": \"Configures the preferred quote character for strings. The recommended options are\\n\\n* `double` (default): Use double quotes `\\\"` * `single`: Use single quotes `'`\\n\\nIn compliance with [PEP 8](https://peps.python.org/pep-0008/) and [PEP 257](https://peps.python.org/pep-0257/), Ruff prefers double quotes for triple quoted strings and docstrings even when using `quote-style = \\\"single\\\"`.\\n\\nRuff deviates from using the configured quotes if doing so prevents the need for escaping quote characters inside the string:\\n\\n```python a = \\\"a string without any quotes\\\" b = \\\"It's monday morning\\\" ```\\n\\nRuff will change the quotes of the string assigned to `a` to single quotes when using `quote-style = \\\"single\\\"`. However, Ruff uses double quotes for the string assigned to `b` because using single quotes would require escaping the `'`, which leads to the less readable code: `'It\\\\'s monday morning'`.\\n\\nIn addition, Ruff supports the quote style `preserve` for projects that already use a mixture of single and double quotes and can't migrate to the `double` or `single` style. The quote style `preserve` leaves the quotes of all strings unchanged.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/QuoteStyle\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"skip-magic-trailing-comma\": {\n          \"description\": \"Ruff uses existing trailing commas as an indication that short lines should be left separate. If this option is set to `true`, the magic trailing comma is ignored.\\n\\nFor example, Ruff leaves the arguments separate even though collapsing the arguments to a single line doesn't exceed the line length if `skip-magic-trailing-comma = false`:\\n\\n```python # The arguments remain on separate lines because of the trailing comma after `b` def test( a, b, ): pass ```\\n\\nSetting `skip-magic-trailing-comma = true` changes the formatting to:\\n\\n```python # The arguments remain on separate lines because of the trailing comma after `b` def test(a, b): pass ```\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"ImportSection\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/definitions/ImportType\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ]\n    },\n    \"ImportType\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"future\",\n        \"standard-library\",\n        \"third-party\",\n        \"first-party\",\n        \"local-folder\"\n      ]\n    },\n    \"IndentStyle\": {\n      \"oneOf\": [\n        {\n          \"description\": \"Use tabs to indent code.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"tab\"\n          ]\n        },\n        {\n          \"description\": \"Use [`IndentWidth`] spaces to indent code.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"space\"\n          ]\n        }\n      ]\n    },\n    \"IndentWidth\": {\n      \"description\": \"The size of a tab.\",\n      \"type\": \"integer\",\n      \"format\": \"uint8\",\n      \"minimum\": 1.0\n    },\n    \"IsortOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"case-sensitive\": {\n          \"description\": \"Sort imports taking into account case sensitivity.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"classes\": {\n          \"description\": \"An override list of tokens to always recognize as a Class for [`order-by-type`](#lint_isort_order-by-type) regardless of casing.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"combine-as-imports\": {\n          \"description\": \"Combines as imports on the same line. See isort's [`combine-as-imports`](https://pycqa.github.io/isort/docs/configuration/options.html#combine-as-imports) option.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"constants\": {\n          \"description\": \"An override list of tokens to always recognize as a CONSTANT for [`order-by-type`](#lint_isort_order-by-type) regardless of casing.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"default-section\": {\n          \"description\": \"Define a default section for any imports that don't fit into the specified [`section-order`](#lint_isort_section-order).\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/ImportSection\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"detect-same-package\": {\n          \"description\": \"Whether to automatically mark imports from within the same package as first-party. For example, when `detect-same-package = true`, then when analyzing files within the `foo` package, any imports from within the `foo` package will be considered first-party.\\n\\nThis heuristic is often unnecessary when `src` is configured to detect all first-party sources; however, if `src` is _not_ configured, this heuristic can be useful to detect first-party imports from _within_ (but not _across_) first-party packages.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"extra-standard-library\": {\n          \"description\": \"A list of modules to consider standard-library, in addition to those known to Ruff in advance.\\n\\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"force-single-line\": {\n          \"description\": \"Forces all from imports to appear on their own line.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"force-sort-within-sections\": {\n          \"description\": \"Don't sort straight-style imports (like `import sys`) before from-style imports (like `from itertools import groupby`). Instead, sort the imports by module, independent of import style.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"force-to-top\": {\n          \"description\": \"Force specific imports to the top of their appropriate section.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"force-wrap-aliases\": {\n          \"description\": \"Force `import from` statements with multiple members and at least one alias (e.g., `import A as B`) to wrap such that every line contains exactly one member. For example, this formatting would be retained, rather than condensing to a single line:\\n\\n```python from .utils import ( test_directory as test_directory, test_id as test_id ) ```\\n\\nNote that this setting is only effective when combined with `combine-as-imports = true`. When [`combine-as-imports`](#lint_isort_combine-as-imports) isn't enabled, every aliased `import from` will be given its own line, in which case, wrapping is not necessary.\\n\\nWhen using the formatter, ensure that [`format.skip-magic-trailing-comma`](#format_skip-magic-trailing-comma) is set to `false` (default) when enabling `force-wrap-aliases` to avoid that the formatter collapses members if they all fit on a single line.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"forced-separate\": {\n          \"description\": \"A list of modules to separate into auxiliary block(s) of imports, in the order specified.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"from-first\": {\n          \"description\": \"Whether to place `import from` imports before straight imports when sorting.\\n\\nFor example, by default, imports will be sorted such that straight imports appear before `import from` imports, as in: ```python import os import sys from typing import List ```\\n\\nSetting `from-first = true` will instead sort such that `import from` imports appear before straight imports, as in: ```python from typing import List import os import sys ```\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"known-first-party\": {\n          \"description\": \"A list of modules to consider first-party, regardless of whether they can be identified as such via introspection of the local filesystem.\\n\\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"known-local-folder\": {\n          \"description\": \"A list of modules to consider being a local folder. Generally, this is reserved for relative imports (`from . import module`).\\n\\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"known-third-party\": {\n          \"description\": \"A list of modules to consider third-party, regardless of whether they can be identified as such via introspection of the local filesystem.\\n\\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"length-sort\": {\n          \"description\": \"Sort imports by their string length, such that shorter imports appear before longer imports. For example, by default, imports will be sorted alphabetically, as in: ```python import collections import os ```\\n\\nSetting `length-sort = true` will instead sort such that shorter imports appear before longer imports, as in: ```python import os import collections ```\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"length-sort-straight\": {\n          \"description\": \"Sort straight imports by their string length. Similar to [`length-sort`](#lint_isort_length-sort), but applies only to straight imports and doesn't affect `from` imports.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"lines-after-imports\": {\n          \"description\": \"The number of blank lines to place after imports. Use `-1` for automatic determination.\\n\\nRuff uses at most one blank line after imports in typing stub files (files with `.pyi` extension) in accordance to the typing style recommendations ([source](https://typing.readthedocs.io/en/latest/guides/writing_stubs.html#blank-lines)).\\n\\nWhen using the formatter, only the values `-1`, `1`, and `2` are compatible because it enforces at least one empty and at most two empty lines after imports.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"int\"\n        },\n        \"lines-between-types\": {\n          \"description\": \"The number of lines to place between \\\"direct\\\" and `import from` imports.\\n\\nWhen using the formatter, only the values `0` and `1` are compatible because it preserves up to one empty line after imports in nested blocks.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"no-lines-before\": {\n          \"description\": \"A list of sections that should _not_ be delineated from the previous section via empty lines.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/ImportSection\"\n          }\n        },\n        \"no-sections\": {\n          \"description\": \"Put all imports into the same section bucket.\\n\\nFor example, rather than separating standard library and third-party imports, as in: ```python import os import sys\\n\\nimport numpy import pandas ```\\n\\nSetting `no-sections = true` will instead group all imports into a single section: ```python import numpy import os import pandas import sys ```\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"order-by-type\": {\n          \"description\": \"Order imports by type, which is determined by case, in addition to alphabetically.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"relative-imports-order\": {\n          \"description\": \"Whether to place \\\"closer\\\" imports (fewer `.` characters, most local) before \\\"further\\\" imports (more `.` characters, least local), or vice versa.\\n\\nThe default (\\\"furthest-to-closest\\\") is equivalent to isort's [`reverse-relative`](https://pycqa.github.io/isort/docs/configuration/options.html#reverse-relative) default (`reverse-relative = false`); setting this to \\\"closest-to-furthest\\\" is equivalent to isort's `reverse-relative = true`.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/RelativeImportsOrder\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"required-imports\": {\n          \"description\": \"Add the specified import line to all files.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/NameImports\"\n          }\n        },\n        \"section-order\": {\n          \"description\": \"Override in which order the sections should be output. Can be used to move custom sections.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/ImportSection\"\n          }\n        },\n        \"sections\": {\n          \"description\": \"A list of mappings from section names to modules.\\n\\nBy default, imports are categorized according to their type (e.g., `future`, `third-party`, and so on). This setting allows you to group modules into custom sections, to augment or override the built-in sections.\\n\\nFor example, to group all testing utilities, you could create a `testing` section: ```toml testing = [\\\"pytest\\\", \\\"hypothesis\\\"] ```\\n\\nThe values in the list are treated as glob patterns. For example, to match all packages in the LangChain ecosystem (`langchain-core`, `langchain-openai`, etc.): ```toml langchain = [\\\"langchain-*\\\"] ```\\n\\nCustom sections should typically be inserted into the [`section-order`](#lint_isort_section-order) list to ensure that they're displayed as a standalone group and in the intended order, as in: ```toml section-order = [ \\\"future\\\", \\\"standard-library\\\", \\\"third-party\\\", \\\"first-party\\\", \\\"local-folder\\\", \\\"testing\\\" ] ```\\n\\nIf a custom section is omitted from [`section-order`](#lint_isort_section-order), imports in that section will be assigned to the [`default-section`](#lint_isort_default-section) (which defaults to `third-party`).\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"single-line-exclusions\": {\n          \"description\": \"One or more modules to exclude from the single line rule.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"split-on-trailing-comma\": {\n          \"description\": \"If a comma is placed after the last member in a multi-line import, then the imports will never be folded into one line.\\n\\nSee isort's [`split-on-trailing-comma`](https://pycqa.github.io/isort/docs/configuration/options.html#split-on-trailing-comma) option.\\n\\nWhen using the formatter, ensure that [`format.skip-magic-trailing-comma`](#format_skip-magic-trailing-comma) is set to `false` (default) when enabling `split-on-trailing-comma` to avoid that the formatter removes the trailing commas.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"variables\": {\n          \"description\": \"An override list of tokens to always recognize as a var for [`order-by-type`](#lint_isort_order-by-type) regardless of casing.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"LineEnding\": {\n      \"oneOf\": [\n        {\n          \"description\": \"The newline style is detected automatically on a file per file basis. Files with mixed line endings will be converted to the first detected line ending. Defaults to [`LineEnding::Lf`] for a files that contain no line endings.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"auto\"\n          ]\n        },\n        {\n          \"description\": \"Line endings will be converted to `\\\\n` as is common on Unix.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"lf\"\n          ]\n        },\n        {\n          \"description\": \"Line endings will be converted to `\\\\r\\\\n` as is common on Windows.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"cr-lf\"\n          ]\n        },\n        {\n          \"description\": \"Line endings will be converted to `\\\\n` on Unix and `\\\\r\\\\n` on Windows.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"native\"\n          ]\n        }\n      ]\n    },\n    \"LineLength\": {\n      \"description\": \"The length of a line of text that is considered too long.\\n\\nThe allowed range of values is 1..=320\",\n      \"type\": \"integer\",\n      \"format\": \"uint16\",\n      \"maximum\": 320.0,\n      \"minimum\": 1.0\n    },\n    \"LineWidth\": {\n      \"description\": \"The maximum visual width to which the formatter should try to limit a line.\",\n      \"type\": \"integer\",\n      \"format\": \"uint16\",\n      \"minimum\": 1.0\n    },\n    \"LintOptions\": {\n      \"description\": \"Configures how Ruff checks your code.\\n\\nOptions specified in the `lint` section take precedence over the deprecated top-level settings.\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"allowed-confusables\": {\n          \"description\": \"A list of allowed \\\"confusable\\\" Unicode characters to ignore when enforcing `RUF001`, `RUF002`, and `RUF003`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\",\n            \"maxLength\": 1,\n            \"minLength\": 1\n          }\n        },\n        \"dummy-variable-rgx\": {\n          \"description\": \"A regular expression used to identify \\\"dummy\\\" variables, or those which should be ignored when enforcing (e.g.) unused-variable rules. The default expression matches `_`, `__`, and `_var`, but not `_var_`.\",\n          \"type\": [\n            \"string\",\n            \"null\"\n          ]\n        },\n        \"exclude\": {\n          \"description\": \"A list of file patterns to exclude from linting in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\\n\\nExclusions are based on globs, and can be either:\\n\\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\\n\\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"explicit-preview-rules\": {\n          \"description\": \"Whether to require exact codes to select preview rules. When enabled, preview rules will not be selected by prefixes — the full code of each preview rule will be required to enable the rule.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"extend-fixable\": {\n          \"description\": \"A list of rule codes or prefixes to consider fixable, in addition to those specified by [`fixable`](#lint_fixable).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"extend-ignore\": {\n          \"description\": \"A list of rule codes or prefixes to ignore, in addition to those specified by `ignore`.\",\n          \"deprecated\": true,\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"extend-per-file-ignores\": {\n          \"description\": \"A list of mappings from file pattern to rule codes or prefixes to exclude, in addition to any rules excluded by [`per-file-ignores`](#lint_per-file-ignores).\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/definitions/RuleSelector\"\n            }\n          }\n        },\n        \"extend-safe-fixes\": {\n          \"description\": \"A list of rule codes or prefixes for which unsafe fixes should be considered safe.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"extend-select\": {\n          \"description\": \"A list of rule codes or prefixes to enable, in addition to those specified by [`select`](#lint_select).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"extend-unfixable\": {\n          \"description\": \"A list of rule codes or prefixes to consider non-auto-fixable, in addition to those specified by [`unfixable`](#lint_unfixable).\",\n          \"deprecated\": true,\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"extend-unsafe-fixes\": {\n          \"description\": \"A list of rule codes or prefixes for which safe fixes should be considered unsafe.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"external\": {\n          \"description\": \"A list of rule codes or prefixes that are unsupported by Ruff, but should be preserved when (e.g.) validating `# noqa` directives. Useful for retaining `# noqa` directives that cover plugins not yet implemented by Ruff.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"fixable\": {\n          \"description\": \"A list of rule codes or prefixes to consider fixable. By default, all rules are considered fixable.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"flake8-annotations\": {\n          \"description\": \"Options for the `flake8-annotations` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8AnnotationsOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-bandit\": {\n          \"description\": \"Options for the `flake8-bandit` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8BanditOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-boolean-trap\": {\n          \"description\": \"Options for the `flake8-boolean-trap` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8BooleanTrapOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-bugbear\": {\n          \"description\": \"Options for the `flake8-bugbear` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8BugbearOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-builtins\": {\n          \"description\": \"Options for the `flake8-builtins` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8BuiltinsOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-comprehensions\": {\n          \"description\": \"Options for the `flake8-comprehensions` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8ComprehensionsOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-copyright\": {\n          \"description\": \"Options for the `flake8-copyright` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8CopyrightOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-errmsg\": {\n          \"description\": \"Options for the `flake8-errmsg` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8ErrMsgOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-gettext\": {\n          \"description\": \"Options for the `flake8-gettext` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8GetTextOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-implicit-str-concat\": {\n          \"description\": \"Options for the `flake8-implicit-str-concat` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8ImplicitStrConcatOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-import-conventions\": {\n          \"description\": \"Options for the `flake8-import-conventions` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8ImportConventionsOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-pytest-style\": {\n          \"description\": \"Options for the `flake8-pytest-style` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8PytestStyleOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-quotes\": {\n          \"description\": \"Options for the `flake8-quotes` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8QuotesOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-self\": {\n          \"description\": \"Options for the `flake8_self` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8SelfOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-tidy-imports\": {\n          \"description\": \"Options for the `flake8-tidy-imports` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8TidyImportsOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-type-checking\": {\n          \"description\": \"Options for the `flake8-type-checking` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8TypeCheckingOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"flake8-unused-arguments\": {\n          \"description\": \"Options for the `flake8-unused-arguments` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Flake8UnusedArgumentsOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"ignore\": {\n          \"description\": \"A list of rule codes or prefixes to ignore. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\\n\\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"ignore-init-module-imports\": {\n          \"description\": \"Avoid automatically removing unused imports in `__init__.py` files. Such imports will still be flagged, but with a dedicated message suggesting that the import is either added to the module's `__all__` symbol, or re-exported with a redundant alias (e.g., `import os as os`).\\n\\nThis option is enabled by default, but you can opt-in to removal of imports via an unsafe fix.\",\n          \"deprecated\": true,\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"isort\": {\n          \"description\": \"Options for the `isort` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/IsortOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"logger-objects\": {\n          \"description\": \"A list of objects that should be treated equivalently to a `logging.Logger` object.\\n\\nThis is useful for ensuring proper diagnostics (e.g., to identify `logging` deprecations and other best-practices) for projects that re-export a `logging.Logger` object from a common module.\\n\\nFor example, if you have a module `logging_setup.py` with the following contents: ```python import logging\\n\\nlogger = logging.getLogger(__name__) ```\\n\\nAdding `\\\"logging_setup.logger\\\"` to `logger-objects` will ensure that `logging_setup.logger` is treated as a `logging.Logger` object when imported from other modules (e.g., `from logging_setup import logger`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"mccabe\": {\n          \"description\": \"Options for the `mccabe` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/McCabeOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"pep8-naming\": {\n          \"description\": \"Options for the `pep8-naming` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Pep8NamingOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"per-file-ignores\": {\n          \"description\": \"A list of mappings from file pattern to rule codes or prefixes to exclude, when considering any matching files. An initial '!' negates the file pattern.\",\n          \"type\": [\n            \"object\",\n            \"null\"\n          ],\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/definitions/RuleSelector\"\n            }\n          }\n        },\n        \"preview\": {\n          \"description\": \"Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules and fixes.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"pycodestyle\": {\n          \"description\": \"Options for the `pycodestyle` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PycodestyleOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"pydocstyle\": {\n          \"description\": \"Options for the `pydocstyle` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PydocstyleOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"pyflakes\": {\n          \"description\": \"Options for the `pyflakes` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PyflakesOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"pylint\": {\n          \"description\": \"Options for the `pylint` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PylintOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"pyupgrade\": {\n          \"description\": \"Options for the `pyupgrade` plugin.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/PyUpgradeOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"ruff\": {\n          \"description\": \"Options for the `ruff` plugin\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/RuffOptions\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"select\": {\n          \"description\": \"A list of rule codes or prefixes to enable. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\\n\\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        },\n        \"task-tags\": {\n          \"description\": \"A list of task tags to recognize (e.g., \\\"TODO\\\", \\\"FIXME\\\", \\\"XXX\\\").\\n\\nComments starting with these tags will be ignored by commented-out code detection (`ERA`), and skipped by line-length rules (`E501`) if [`ignore-overlong-task-comments`](#lint_pycodestyle_ignore-overlong-task-comments) is set to `true`.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"typing-modules\": {\n          \"description\": \"A list of modules whose exports should be treated equivalently to members of the `typing` module.\\n\\nThis is useful for ensuring proper type annotation inference for projects that re-export `typing` and `typing_extensions` members from a compatibility module. If omitted, any members imported from modules apart from `typing` and `typing_extensions` will be treated as ordinary Python objects.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"unfixable\": {\n          \"description\": \"A list of rule codes or prefixes to consider non-fixable.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/RuleSelector\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"McCabeOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"max-complexity\": {\n          \"description\": \"The maximum McCabe complexity to allow before triggering `C901` errors.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"NameImports\": {\n      \"type\": \"string\"\n    },\n    \"OutputFormat\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"concise\",\n        \"full\",\n        \"json\",\n        \"json-lines\",\n        \"junit\",\n        \"grouped\",\n        \"github\",\n        \"gitlab\",\n        \"pylint\",\n        \"rdjson\",\n        \"azure\",\n        \"sarif\"\n      ]\n    },\n    \"ParametrizeNameType\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"csv\",\n        \"tuple\",\n        \"list\"\n      ]\n    },\n    \"ParametrizeValuesRowType\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"tuple\",\n        \"list\"\n      ]\n    },\n    \"ParametrizeValuesType\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"tuple\",\n        \"list\"\n      ]\n    },\n    \"Pep8NamingOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"classmethod-decorators\": {\n          \"description\": \"A list of decorators that, when applied to a method, indicate that the method should be treated as a class method (in addition to the builtin `@classmethod`).\\n\\nFor example, Ruff will expect that any method decorated by a decorator in this list takes a `cls` argument as its first argument.\\n\\nExpects to receive a list of fully-qualified names (e.g., `pydantic.validator`, rather than `validator`) or alternatively a plain name which is then matched against the last segment in case the decorator itself consists of a dotted name.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"extend-ignore-names\": {\n          \"description\": \"Additional names (or patterns) to ignore when considering `pep8-naming` violations, in addition to those included in [`ignore-names`](#lint_pep8-naming_ignore-names).\\n\\nSupports glob patterns. For example, to ignore all names starting with `test_` or ending with `_test`, you could use `ignore-names = [\\\"test_*\\\", \\\"*_test\\\"]`. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"ignore-names\": {\n          \"description\": \"A list of names (or patterns) to ignore when considering `pep8-naming` violations.\\n\\nSupports glob patterns. For example, to ignore all names starting with `test_` or ending with `_test`, you could use `ignore-names = [\\\"test_*\\\", \\\"*_test\\\"]`. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"staticmethod-decorators\": {\n          \"description\": \"A list of decorators that, when applied to a method, indicate that the method should be treated as a static method (in addition to the builtin `@staticmethod`).\\n\\nFor example, Ruff will expect that any method decorated by a decorator in this list has no `self` or `cls` argument.\\n\\nExpects to receive a list of fully-qualified names (e.g., `belay.Device.teardown`, rather than `teardown`) or alternatively a plain name which is then matched against the last segment in case the decorator itself consists of a dotted name.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PyUpgradeOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"keep-runtime-typing\": {\n          \"description\": \"Whether to avoid [PEP 585](https://peps.python.org/pep-0585/) (`List[int]` -> `list[int]`) and [PEP 604](https://peps.python.org/pep-0604/) (`Union[str, int]` -> `str | int`) rewrites even if a file imports `from __future__ import annotations`.\\n\\nThis setting is only applicable when the target Python version is below 3.9 and 3.10 respectively, and is most commonly used when working with libraries like Pydantic and FastAPI, which rely on the ability to parse type annotations at runtime. The use of `from __future__ import annotations` causes Python to treat the type annotations as strings, which typically allows for the use of language features that appear in later Python versions but are not yet supported by the current version (e.g., `str | int`). However, libraries that rely on runtime type annotations will break if the annotations are incompatible with the current Python version.\\n\\nFor example, while the following is valid Python 3.8 code due to the presence of `from __future__ import annotations`, the use of `str | int` prior to Python 3.10 will cause Pydantic to raise a `TypeError` at runtime:\\n\\n```python from __future__ import annotations\\n\\nimport pydantic\\n\\nclass Foo(pydantic.BaseModel): bar: str | int ```\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PycodestyleOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ignore-overlong-task-comments\": {\n          \"description\": \"Whether line-length violations (`E501`) should be triggered for comments starting with [`task-tags`](#lint_task-tags) (by default: \\\"TODO\\\", \\\"FIXME\\\", and \\\"XXX\\\").\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"max-doc-length\": {\n          \"description\": \"The maximum line length to allow for [`doc-line-too-long`](https://docs.astral.sh/ruff/rules/doc-line-too-long/) violations within documentation (`W505`), including standalone comments. By default, this is set to `null` which disables reporting violations.\\n\\nThe length is determined by the number of characters per line, except for lines containing Asian characters or emojis. For these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\\n\\nSee the [`doc-line-too-long`](https://docs.astral.sh/ruff/rules/doc-line-too-long/) rule for more information.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/LineLength\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"max-line-length\": {\n          \"description\": \"The maximum line length to allow for [`line-too-long`](https://docs.astral.sh/ruff/rules/line-too-long/) violations. By default, this is set to the value of the [`line-length`](#line-length) option.\\n\\nUse this option when you want to detect extra-long lines that the formatter can't automatically split by setting `pycodestyle.line-length` to a value larger than [`line-length`](#line-length).\\n\\n```toml # The formatter wraps lines at a length of 88. line-length = 88\\n\\n[pycodestyle] # E501 reports lines that exceed the length of 100. max-line-length = 100 ```\\n\\nThe length is determined by the number of characters per line, except for lines containing East Asian characters or emojis. For these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\\n\\nSee the [`line-too-long`](https://docs.astral.sh/ruff/rules/line-too-long/) rule for more information.\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/LineLength\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PydocstyleOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"convention\": {\n          \"description\": \"Whether to use Google-style, NumPy-style conventions, or the [PEP 257](https://peps.python.org/pep-0257/) defaults when analyzing docstring sections.\\n\\nEnabling a convention will disable all rules that are not included in the specified convention. As such, the intended workflow is to enable a convention and then selectively enable or disable any additional rules on top of it.\\n\\nFor example, to use Google-style conventions but avoid requiring documentation for every function parameter:\\n\\n```toml [tool.ruff.lint] # Enable all `pydocstyle` rules, limiting to those that adhere to the # Google convention via `convention = \\\"google\\\"`, below. select = [\\\"D\\\"]\\n\\n# On top of the Google convention, disable `D417`, which requires # documentation for every function parameter. ignore = [\\\"D417\\\"]\\n\\n[tool.ruff.lint.pydocstyle] convention = \\\"google\\\" ```\\n\\nTo enable an additional rule that's excluded from the convention, select the desired rule via its fully qualified rule code (e.g., `D400` instead of `D4` or `D40`):\\n\\n```toml [tool.ruff.lint] # Enable D400 on top of the Google convention. extend-select = [\\\"D400\\\"]\\n\\n[tool.ruff.lint.pydocstyle] convention = \\\"google\\\" ```\",\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/definitions/Convention\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"ignore-decorators\": {\n          \"description\": \"Ignore docstrings for functions or methods decorated with the specified fully-qualified decorators.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"ignore-var-parameters\": {\n          \"description\": \"If set to `true`, ignore missing documentation for `*args` and `**kwargs` parameters.\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        },\n        \"property-decorators\": {\n          \"description\": \"A list of decorators that, when applied to a method, indicate that the method should be treated as a property (in addition to the builtin `@property` and standard-library `@functools.cached_property`).\\n\\nFor example, Ruff will expect that any method decorated by a decorator in this list can use a non-imperative summary line.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PyflakesOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"allowed-unused-imports\": {\n          \"description\": \"A list of modules to ignore when considering unused imports.\\n\\nUsed to prevent violations for specific modules that are known to have side effects on import (e.g., `hvplot.pandas`).\\n\\nModules in this list are expected to be fully-qualified names (e.g., `hvplot.pandas`). Any submodule of a given module will also be ignored (e.g., given `hvplot`, `hvplot.pandas` will also be ignored).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"extend-generics\": {\n          \"description\": \"Additional functions or classes to consider generic, such that any subscripts should be treated as type annotation (e.g., `ForeignKey` in `django.db.models.ForeignKey[\\\"User\\\"]`.\\n\\nExpects to receive a list of fully-qualified names (e.g., `django.db.models.ForeignKey`, rather than `ForeignKey`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PylintOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"allow-dunder-method-names\": {\n          \"description\": \"Dunder methods name to allow, in addition to the default set from the Python standard library (see `PLW3201`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"uniqueItems\": true\n        },\n        \"allow-magic-value-types\": {\n          \"description\": \"Constant types to ignore when used as \\\"magic values\\\" (see `PLR2004`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#/definitions/ConstantType\"\n          }\n        },\n        \"max-args\": {\n          \"description\": \"Maximum number of arguments allowed for a function or method definition (see `PLR0913`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-bool-expr\": {\n          \"description\": \"Maximum number of Boolean expressions allowed within a single `if` statement (see `PLR0916`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-branches\": {\n          \"description\": \"Maximum number of branches allowed for a function or method body (see `PLR0912`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-locals\": {\n          \"description\": \"Maximum number of local variables allowed for a function or method body (see `PLR0914`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-nested-blocks\": {\n          \"description\": \"Maximum number of nested blocks allowed within a function or method body (see `PLR1702`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-positional-args\": {\n          \"description\": \"Maximum number of positional arguments allowed for a function or method definition (see `PLR0917`).\\n\\nIf not specified, defaults to the value of `max-args`.\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-public-methods\": {\n          \"description\": \"Maximum number of public methods allowed for a class (see `PLR0904`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-returns\": {\n          \"description\": \"Maximum number of return statements allowed for a function or method body (see `PLR0911`)\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"max-statements\": {\n          \"description\": \"Maximum number of statements allowed for a function or method body (see `PLR0915`).\",\n          \"type\": [\n            \"integer\",\n            \"null\"\n          ],\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"PythonVersion\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"py37\",\n        \"py38\",\n        \"py39\",\n        \"py310\",\n        \"py311\",\n        \"py312\",\n        \"py313\"\n      ]\n    },\n    \"Quote\": {\n      \"oneOf\": [\n        {\n          \"description\": \"Use double quotes.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"double\"\n          ]\n        },\n        {\n          \"description\": \"Use single quotes.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"single\"\n          ]\n        }\n      ]\n    },\n    \"QuoteStyle\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"single\",\n        \"double\",\n        \"preserve\"\n      ]\n    },\n    \"RelativeImportsOrder\": {\n      \"oneOf\": [\n        {\n          \"description\": \"Place \\\"closer\\\" imports (fewer `.` characters, most local) before \\\"further\\\" imports (more `.` characters, least local).\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"closest-to-furthest\"\n          ]\n        },\n        {\n          \"description\": \"Place \\\"further\\\" imports (more `.` characters, least local) imports before \\\"closer\\\" imports (fewer `.` characters, most local).\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"furthest-to-closest\"\n          ]\n        }\n      ]\n    },\n    \"RequiredVersion\": {\n      \"type\": \"string\"\n    },\n    \"RuffOptions\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"allowed-markup-calls\": {\n          \"description\": \"A list of callable names, whose result may be safely passed into [`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\\n\\nExpects to receive a list of fully-qualified names (e.g., `bleach.clean`, rather than `clean`).\\n\\nThis setting helps you avoid false positives in code like:\\n\\n```python from bleach import clean from markupsafe import Markup\\n\\ncleaned_markup = Markup(clean(some_user_input)) ```\\n\\nWhere the use of [`bleach.clean`](https://bleach.readthedocs.io/en/latest/clean.html) usually ensures that there's no XSS vulnerability.\\n\\nAlthough it is not recommended, you may also use this setting to whitelist other kinds of calls, e.g. calls to i18n translation functions, where how safe that is will depend on the implementation and how well the translations are audited.\\n\\nAnother common use-case is to wrap the output of functions that generate markup like [`xml.etree.ElementTree.tostring`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring) or template rendering engines where sanitization of potential user input is either already baked in or has to happen before rendering.\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"extend-markup-names\": {\n          \"description\": \"A list of additional callable names that behave like [`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\\n\\nExpects to receive a list of fully-qualified names (e.g., `webhelpers.html.literal`, rather than `literal`).\",\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"parenthesize-tuple-in-subscript\": {\n          \"description\": \"Whether to prefer accessing items keyed by tuples with parentheses around the tuple (see `RUF031`).\",\n          \"type\": [\n            \"boolean\",\n            \"null\"\n          ]\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"RuleSelector\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"A\",\n        \"A0\",\n        \"A00\",\n        \"A001\",\n        \"A002\",\n        \"A003\",\n        \"A004\",\n        \"A005\",\n        \"A006\",\n        \"AIR\",\n        \"AIR0\",\n        \"AIR00\",\n        \"AIR001\",\n        \"AIR3\",\n        \"AIR30\",\n        \"AIR301\",\n        \"AIR302\",\n        \"AIR303\",\n        \"ALL\",\n        \"ANN\",\n        \"ANN0\",\n        \"ANN00\",\n        \"ANN001\",\n        \"ANN002\",\n        \"ANN003\",\n        \"ANN2\",\n        \"ANN20\",\n        \"ANN201\",\n        \"ANN202\",\n        \"ANN204\",\n        \"ANN205\",\n        \"ANN206\",\n        \"ANN4\",\n        \"ANN40\",\n        \"ANN401\",\n        \"ARG\",\n        \"ARG0\",\n        \"ARG00\",\n        \"ARG001\",\n        \"ARG002\",\n        \"ARG003\",\n        \"ARG004\",\n        \"ARG005\",\n        \"ASYNC\",\n        \"ASYNC1\",\n        \"ASYNC10\",\n        \"ASYNC100\",\n        \"ASYNC105\",\n        \"ASYNC109\",\n        \"ASYNC11\",\n        \"ASYNC110\",\n        \"ASYNC115\",\n        \"ASYNC116\",\n        \"ASYNC2\",\n        \"ASYNC21\",\n        \"ASYNC210\",\n        \"ASYNC22\",\n        \"ASYNC220\",\n        \"ASYNC221\",\n        \"ASYNC222\",\n        \"ASYNC23\",\n        \"ASYNC230\",\n        \"ASYNC25\",\n        \"ASYNC251\",\n        \"B\",\n        \"B0\",\n        \"B00\",\n        \"B002\",\n        \"B003\",\n        \"B004\",\n        \"B005\",\n        \"B006\",\n        \"B007\",\n        \"B008\",\n        \"B009\",\n        \"B01\",\n        \"B010\",\n        \"B011\",\n        \"B012\",\n        \"B013\",\n        \"B014\",\n        \"B015\",\n        \"B016\",\n        \"B017\",\n        \"B018\",\n        \"B019\",\n        \"B02\",\n        \"B020\",\n        \"B021\",\n        \"B022\",\n        \"B023\",\n        \"B024\",\n        \"B025\",\n        \"B026\",\n        \"B027\",\n        \"B028\",\n        \"B029\",\n        \"B03\",\n        \"B030\",\n        \"B031\",\n        \"B032\",\n        \"B033\",\n        \"B034\",\n        \"B035\",\n        \"B039\",\n        \"B9\",\n        \"B90\",\n        \"B901\",\n        \"B903\",\n        \"B904\",\n        \"B905\",\n        \"B909\",\n        \"B91\",\n        \"B911\",\n        \"BLE\",\n        \"BLE0\",\n        \"BLE00\",\n        \"BLE001\",\n        \"C\",\n        \"C4\",\n        \"C40\",\n        \"C400\",\n        \"C401\",\n        \"C402\",\n        \"C403\",\n        \"C404\",\n        \"C405\",\n        \"C406\",\n        \"C408\",\n        \"C409\",\n        \"C41\",\n        \"C410\",\n        \"C411\",\n        \"C413\",\n        \"C414\",\n        \"C415\",\n        \"C416\",\n        \"C417\",\n        \"C418\",\n        \"C419\",\n        \"C42\",\n        \"C420\",\n        \"C9\",\n        \"C90\",\n        \"C901\",\n        \"COM\",\n        \"COM8\",\n        \"COM81\",\n        \"COM812\",\n        \"COM818\",\n        \"COM819\",\n        \"CPY\",\n        \"CPY0\",\n        \"CPY00\",\n        \"CPY001\",\n        \"D\",\n        \"D1\",\n        \"D10\",\n        \"D100\",\n        \"D101\",\n        \"D102\",\n        \"D103\",\n        \"D104\",\n        \"D105\",\n        \"D106\",\n        \"D107\",\n        \"D2\",\n        \"D20\",\n        \"D200\",\n        \"D201\",\n        \"D202\",\n        \"D203\",\n        \"D204\",\n        \"D205\",\n        \"D206\",\n        \"D207\",\n        \"D208\",\n        \"D209\",\n        \"D21\",\n        \"D210\",\n        \"D211\",\n        \"D212\",\n        \"D213\",\n        \"D214\",\n        \"D215\",\n        \"D3\",\n        \"D30\",\n        \"D300\",\n        \"D301\",\n        \"D4\",\n        \"D40\",\n        \"D400\",\n        \"D401\",\n        \"D402\",\n        \"D403\",\n        \"D404\",\n        \"D405\",\n        \"D406\",\n        \"D407\",\n        \"D408\",\n        \"D409\",\n        \"D41\",\n        \"D410\",\n        \"D411\",\n        \"D412\",\n        \"D413\",\n        \"D414\",\n        \"D415\",\n        \"D416\",\n        \"D417\",\n        \"D418\",\n        \"D419\",\n        \"DJ\",\n        \"DJ0\",\n        \"DJ00\",\n        \"DJ001\",\n        \"DJ003\",\n        \"DJ006\",\n        \"DJ007\",\n        \"DJ008\",\n        \"DJ01\",\n        \"DJ012\",\n        \"DJ013\",\n        \"DOC\",\n        \"DOC2\",\n        \"DOC20\",\n        \"DOC201\",\n        \"DOC202\",\n        \"DOC4\",\n        \"DOC40\",\n        \"DOC402\",\n        \"DOC403\",\n        \"DOC5\",\n        \"DOC50\",\n        \"DOC501\",\n        \"DOC502\",\n        \"DTZ\",\n        \"DTZ0\",\n        \"DTZ00\",\n        \"DTZ001\",\n        \"DTZ002\",\n        \"DTZ003\",\n        \"DTZ004\",\n        \"DTZ005\",\n        \"DTZ006\",\n        \"DTZ007\",\n        \"DTZ01\",\n        \"DTZ011\",\n        \"DTZ012\",\n        \"DTZ9\",\n        \"DTZ90\",\n        \"DTZ901\",\n        \"E\",\n        \"E1\",\n        \"E10\",\n        \"E101\",\n        \"E11\",\n        \"E111\",\n        \"E112\",\n        \"E113\",\n        \"E114\",\n        \"E115\",\n        \"E116\",\n        \"E117\",\n        \"E2\",\n        \"E20\",\n        \"E201\",\n        \"E202\",\n        \"E203\",\n        \"E204\",\n        \"E21\",\n        \"E211\",\n        \"E22\",\n        \"E221\",\n        \"E222\",\n        \"E223\",\n        \"E224\",\n        \"E225\",\n        \"E226\",\n        \"E227\",\n        \"E228\",\n        \"E23\",\n        \"E231\",\n        \"E24\",\n        \"E241\",\n        \"E242\",\n        \"E25\",\n        \"E251\",\n        \"E252\",\n        \"E26\",\n        \"E261\",\n        \"E262\",\n        \"E265\",\n        \"E266\",\n        \"E27\",\n        \"E271\",\n        \"E272\",\n        \"E273\",\n        \"E274\",\n        \"E275\",\n        \"E3\",\n        \"E30\",\n        \"E301\",\n        \"E302\",\n        \"E303\",\n        \"E304\",\n        \"E305\",\n        \"E306\",\n        \"E4\",\n        \"E40\",\n        \"E401\",\n        \"E402\",\n        \"E5\",\n        \"E50\",\n        \"E501\",\n        \"E502\",\n        \"E7\",\n        \"E70\",\n        \"E701\",\n        \"E702\",\n        \"E703\",\n        \"E71\",\n        \"E711\",\n        \"E712\",\n        \"E713\",\n        \"E714\",\n        \"E72\",\n        \"E721\",\n        \"E722\",\n        \"E73\",\n        \"E731\",\n        \"E74\",\n        \"E741\",\n        \"E742\",\n        \"E743\",\n        \"E9\",\n        \"E90\",\n        \"E902\",\n        \"EM\",\n        \"EM1\",\n        \"EM10\",\n        \"EM101\",\n        \"EM102\",\n        \"EM103\",\n        \"ERA\",\n        \"ERA0\",\n        \"ERA00\",\n        \"ERA001\",\n        \"EXE\",\n        \"EXE0\",\n        \"EXE00\",\n        \"EXE001\",\n        \"EXE002\",\n        \"EXE003\",\n        \"EXE004\",\n        \"EXE005\",\n        \"F\",\n        \"F4\",\n        \"F40\",\n        \"F401\",\n        \"F402\",\n        \"F403\",\n        \"F404\",\n        \"F405\",\n        \"F406\",\n        \"F407\",\n        \"F5\",\n        \"F50\",\n        \"F501\",\n        \"F502\",\n        \"F503\",\n        \"F504\",\n        \"F505\",\n        \"F506\",\n        \"F507\",\n        \"F508\",\n        \"F509\",\n        \"F52\",\n        \"F521\",\n        \"F522\",\n        \"F523\",\n        \"F524\",\n        \"F525\",\n        \"F54\",\n        \"F541\",\n        \"F6\",\n        \"F60\",\n        \"F601\",\n        \"F602\",\n        \"F62\",\n        \"F621\",\n        \"F622\",\n        \"F63\",\n        \"F631\",\n        \"F632\",\n        \"F633\",\n        \"F634\",\n        \"F7\",\n        \"F70\",\n        \"F701\",\n        \"F702\",\n        \"F704\",\n        \"F706\",\n        \"F707\",\n        \"F72\",\n        \"F722\",\n        \"F8\",\n        \"F81\",\n        \"F811\",\n        \"F82\",\n        \"F821\",\n        \"F822\",\n        \"F823\",\n        \"F84\",\n        \"F841\",\n        \"F842\",\n        \"F9\",\n        \"F90\",\n        \"F901\",\n        \"FA\",\n        \"FA1\",\n        \"FA10\",\n        \"FA100\",\n        \"FA102\",\n        \"FAST\",\n        \"FAST0\",\n        \"FAST00\",\n        \"FAST001\",\n        \"FAST002\",\n        \"FAST003\",\n        \"FBT\",\n        \"FBT0\",\n        \"FBT00\",\n        \"FBT001\",\n        \"FBT002\",\n        \"FBT003\",\n        \"FIX\",\n        \"FIX0\",\n        \"FIX00\",\n        \"FIX001\",\n        \"FIX002\",\n        \"FIX003\",\n        \"FIX004\",\n        \"FLY\",\n        \"FLY0\",\n        \"FLY00\",\n        \"FLY002\",\n        \"FURB\",\n        \"FURB1\",\n        \"FURB10\",\n        \"FURB101\",\n        \"FURB103\",\n        \"FURB105\",\n        \"FURB11\",\n        \"FURB110\",\n        \"FURB113\",\n        \"FURB116\",\n        \"FURB118\",\n        \"FURB12\",\n        \"FURB129\",\n        \"FURB13\",\n        \"FURB131\",\n        \"FURB132\",\n        \"FURB136\",\n        \"FURB14\",\n        \"FURB140\",\n        \"FURB142\",\n        \"FURB145\",\n        \"FURB148\",\n        \"FURB15\",\n        \"FURB152\",\n        \"FURB154\",\n        \"FURB156\",\n        \"FURB157\",\n        \"FURB16\",\n        \"FURB161\",\n        \"FURB163\",\n        \"FURB164\",\n        \"FURB166\",\n        \"FURB167\",\n        \"FURB168\",\n        \"FURB169\",\n        \"FURB17\",\n        \"FURB171\",\n        \"FURB177\",\n        \"FURB18\",\n        \"FURB180\",\n        \"FURB181\",\n        \"FURB187\",\n        \"FURB188\",\n        \"FURB189\",\n        \"FURB19\",\n        \"FURB192\",\n        \"G\",\n        \"G0\",\n        \"G00\",\n        \"G001\",\n        \"G002\",\n        \"G003\",\n        \"G004\",\n        \"G01\",\n        \"G010\",\n        \"G1\",\n        \"G10\",\n        \"G101\",\n        \"G2\",\n        \"G20\",\n        \"G201\",\n        \"G202\",\n        \"I\",\n        \"I0\",\n        \"I00\",\n        \"I001\",\n        \"I002\",\n        \"ICN\",\n        \"ICN0\",\n        \"ICN00\",\n        \"ICN001\",\n        \"ICN002\",\n        \"ICN003\",\n        \"INP\",\n        \"INP0\",\n        \"INP00\",\n        \"INP001\",\n        \"INT\",\n        \"INT0\",\n        \"INT00\",\n        \"INT001\",\n        \"INT002\",\n        \"INT003\",\n        \"ISC\",\n        \"ISC0\",\n        \"ISC00\",\n        \"ISC001\",\n        \"ISC002\",\n        \"ISC003\",\n        \"LOG\",\n        \"LOG0\",\n        \"LOG00\",\n        \"LOG001\",\n        \"LOG002\",\n        \"LOG007\",\n        \"LOG009\",\n        \"LOG01\",\n        \"LOG015\",\n        \"N\",\n        \"N8\",\n        \"N80\",\n        \"N801\",\n        \"N802\",\n        \"N803\",\n        \"N804\",\n        \"N805\",\n        \"N806\",\n        \"N807\",\n        \"N81\",\n        \"N811\",\n        \"N812\",\n        \"N813\",\n        \"N814\",\n        \"N815\",\n        \"N816\",\n        \"N817\",\n        \"N818\",\n        \"N9\",\n        \"N99\",\n        \"N999\",\n        \"NPY\",\n        \"NPY0\",\n        \"NPY00\",\n        \"NPY001\",\n        \"NPY002\",\n        \"NPY003\",\n        \"NPY2\",\n        \"NPY20\",\n        \"NPY201\",\n        \"PD\",\n        \"PD0\",\n        \"PD00\",\n        \"PD002\",\n        \"PD003\",\n        \"PD004\",\n        \"PD007\",\n        \"PD008\",\n        \"PD009\",\n        \"PD01\",\n        \"PD010\",\n        \"PD011\",\n        \"PD012\",\n        \"PD013\",\n        \"PD015\",\n        \"PD1\",\n        \"PD10\",\n        \"PD101\",\n        \"PD9\",\n        \"PD90\",\n        \"PD901\",\n        \"PERF\",\n        \"PERF1\",\n        \"PERF10\",\n        \"PERF101\",\n        \"PERF102\",\n        \"PERF2\",\n        \"PERF20\",\n        \"PERF203\",\n        \"PERF4\",\n        \"PERF40\",\n        \"PERF401\",\n        \"PERF402\",\n        \"PERF403\",\n        \"PGH\",\n        \"PGH0\",\n        \"PGH00\",\n        \"PGH003\",\n        \"PGH004\",\n        \"PGH005\",\n        \"PIE\",\n        \"PIE7\",\n        \"PIE79\",\n        \"PIE790\",\n        \"PIE794\",\n        \"PIE796\",\n        \"PIE8\",\n        \"PIE80\",\n        \"PIE800\",\n        \"PIE804\",\n        \"PIE807\",\n        \"PIE808\",\n        \"PIE81\",\n        \"PIE810\",\n        \"PL\",\n        \"PLC\",\n        \"PLC0\",\n        \"PLC01\",\n        \"PLC010\",\n        \"PLC0105\",\n        \"PLC013\",\n        \"PLC0131\",\n        \"PLC0132\",\n        \"PLC02\",\n        \"PLC020\",\n        \"PLC0205\",\n        \"PLC0206\",\n        \"PLC0208\",\n        \"PLC04\",\n        \"PLC041\",\n        \"PLC0414\",\n        \"PLC0415\",\n        \"PLC1\",\n        \"PLC18\",\n        \"PLC180\",\n        \"PLC1802\",\n        \"PLC19\",\n        \"PLC190\",\n        \"PLC1901\",\n        \"PLC2\",\n        \"PLC24\",\n        \"PLC240\",\n        \"PLC2401\",\n        \"PLC2403\",\n        \"PLC27\",\n        \"PLC270\",\n        \"PLC2701\",\n        \"PLC28\",\n        \"PLC280\",\n        \"PLC2801\",\n        \"PLC3\",\n        \"PLC30\",\n        \"PLC300\",\n        \"PLC3002\",\n        \"PLE\",\n        \"PLE0\",\n        \"PLE01\",\n        \"PLE010\",\n        \"PLE0100\",\n        \"PLE0101\",\n        \"PLE011\",\n        \"PLE0115\",\n        \"PLE0116\",\n        \"PLE0117\",\n        \"PLE0118\",\n        \"PLE02\",\n        \"PLE023\",\n        \"PLE0237\",\n        \"PLE024\",\n        \"PLE0241\",\n        \"PLE03\",\n        \"PLE030\",\n        \"PLE0302\",\n        \"PLE0303\",\n        \"PLE0304\",\n        \"PLE0305\",\n        \"PLE0307\",\n        \"PLE0308\",\n        \"PLE0309\",\n        \"PLE06\",\n        \"PLE060\",\n        \"PLE0604\",\n        \"PLE0605\",\n        \"PLE064\",\n        \"PLE0643\",\n        \"PLE07\",\n        \"PLE070\",\n        \"PLE0704\",\n        \"PLE1\",\n        \"PLE11\",\n        \"PLE113\",\n        \"PLE1132\",\n        \"PLE114\",\n        \"PLE1141\",\n        \"PLE1142\",\n        \"PLE12\",\n        \"PLE120\",\n        \"PLE1205\",\n        \"PLE1206\",\n        \"PLE13\",\n        \"PLE130\",\n        \"PLE1300\",\n        \"PLE1307\",\n        \"PLE131\",\n        \"PLE1310\",\n        \"PLE15\",\n        \"PLE150\",\n        \"PLE1507\",\n        \"PLE151\",\n        \"PLE1519\",\n        \"PLE152\",\n        \"PLE1520\",\n        \"PLE17\",\n        \"PLE170\",\n        \"PLE1700\",\n        \"PLE2\",\n        \"PLE25\",\n        \"PLE250\",\n        \"PLE2502\",\n        \"PLE251\",\n        \"PLE2510\",\n        \"PLE2512\",\n        \"PLE2513\",\n        \"PLE2514\",\n        \"PLE2515\",\n        \"PLE4\",\n        \"PLE47\",\n        \"PLE470\",\n        \"PLE4703\",\n        \"PLR\",\n        \"PLR0\",\n        \"PLR01\",\n        \"PLR012\",\n        \"PLR0124\",\n        \"PLR013\",\n        \"PLR0133\",\n        \"PLR02\",\n        \"PLR020\",\n        \"PLR0202\",\n        \"PLR0203\",\n        \"PLR0206\",\n        \"PLR04\",\n        \"PLR040\",\n        \"PLR0402\",\n        \"PLR09\",\n        \"PLR090\",\n        \"PLR0904\",\n        \"PLR091\",\n        \"PLR0911\",\n        \"PLR0912\",\n        \"PLR0913\",\n        \"PLR0914\",\n        \"PLR0915\",\n        \"PLR0916\",\n        \"PLR0917\",\n        \"PLR1\",\n        \"PLR17\",\n        \"PLR170\",\n        \"PLR1702\",\n        \"PLR1704\",\n        \"PLR171\",\n        \"PLR1711\",\n        \"PLR1714\",\n        \"PLR1716\",\n        \"PLR172\",\n        \"PLR1722\",\n        \"PLR173\",\n        \"PLR1730\",\n        \"PLR1733\",\n        \"PLR1736\",\n        \"PLR2\",\n        \"PLR20\",\n        \"PLR200\",\n        \"PLR2004\",\n        \"PLR204\",\n        \"PLR2044\",\n        \"PLR5\",\n        \"PLR55\",\n        \"PLR550\",\n        \"PLR5501\",\n        \"PLR6\",\n        \"PLR61\",\n        \"PLR610\",\n        \"PLR6104\",\n        \"PLR62\",\n        \"PLR620\",\n        \"PLR6201\",\n        \"PLR63\",\n        \"PLR630\",\n        \"PLR6301\",\n        \"PLW\",\n        \"PLW0\",\n        \"PLW01\",\n        \"PLW010\",\n        \"PLW0101\",\n        \"PLW0108\",\n        \"PLW012\",\n        \"PLW0120\",\n        \"PLW0127\",\n        \"PLW0128\",\n        \"PLW0129\",\n        \"PLW013\",\n        \"PLW0131\",\n        \"PLW0133\",\n        \"PLW017\",\n        \"PLW0177\",\n        \"PLW02\",\n        \"PLW021\",\n        \"PLW0211\",\n        \"PLW024\",\n        \"PLW0245\",\n        \"PLW04\",\n        \"PLW040\",\n        \"PLW0406\",\n        \"PLW06\",\n        \"PLW060\",\n        \"PLW0602\",\n        \"PLW0603\",\n        \"PLW0604\",\n        \"PLW064\",\n        \"PLW0642\",\n        \"PLW07\",\n        \"PLW071\",\n        \"PLW0711\",\n        \"PLW1\",\n        \"PLW15\",\n        \"PLW150\",\n        \"PLW1501\",\n        \"PLW1507\",\n        \"PLW1508\",\n        \"PLW1509\",\n        \"PLW151\",\n        \"PLW1510\",\n        \"PLW1514\",\n        \"PLW16\",\n        \"PLW164\",\n        \"PLW1641\",\n        \"PLW2\",\n        \"PLW21\",\n        \"PLW210\",\n        \"PLW2101\",\n        \"PLW29\",\n        \"PLW290\",\n        \"PLW2901\",\n        \"PLW3\",\n        \"PLW32\",\n        \"PLW320\",\n        \"PLW3201\",\n        \"PLW33\",\n        \"PLW330\",\n        \"PLW3301\",\n        \"PT\",\n        \"PT0\",\n        \"PT00\",\n        \"PT001\",\n        \"PT002\",\n        \"PT003\",\n        \"PT006\",\n        \"PT007\",\n        \"PT008\",\n        \"PT009\",\n        \"PT01\",\n        \"PT010\",\n        \"PT011\",\n        \"PT012\",\n        \"PT013\",\n        \"PT014\",\n        \"PT015\",\n        \"PT016\",\n        \"PT017\",\n        \"PT018\",\n        \"PT019\",\n        \"PT02\",\n        \"PT020\",\n        \"PT021\",\n        \"PT022\",\n        \"PT023\",\n        \"PT024\",\n        \"PT025\",\n        \"PT026\",\n        \"PT027\",\n        \"PTH\",\n        \"PTH1\",\n        \"PTH10\",\n        \"PTH100\",\n        \"PTH101\",\n        \"PTH102\",\n        \"PTH103\",\n        \"PTH104\",\n        \"PTH105\",\n        \"PTH106\",\n        \"PTH107\",\n        \"PTH108\",\n        \"PTH109\",\n        \"PTH11\",\n        \"PTH110\",\n        \"PTH111\",\n        \"PTH112\",\n        \"PTH113\",\n        \"PTH114\",\n        \"PTH115\",\n        \"PTH116\",\n        \"PTH117\",\n        \"PTH118\",\n        \"PTH119\",\n        \"PTH12\",\n        \"PTH120\",\n        \"PTH121\",\n        \"PTH122\",\n        \"PTH123\",\n        \"PTH124\",\n        \"PTH2\",\n        \"PTH20\",\n        \"PTH201\",\n        \"PTH202\",\n        \"PTH203\",\n        \"PTH204\",\n        \"PTH205\",\n        \"PTH206\",\n        \"PTH207\",\n        \"PTH208\",\n        \"PTH21\",\n        \"PTH210\",\n        \"PYI\",\n        \"PYI0\",\n        \"PYI00\",\n        \"PYI001\",\n        \"PYI002\",\n        \"PYI003\",\n        \"PYI004\",\n        \"PYI005\",\n        \"PYI006\",\n        \"PYI007\",\n        \"PYI008\",\n        \"PYI009\",\n        \"PYI01\",\n        \"PYI010\",\n        \"PYI011\",\n        \"PYI012\",\n        \"PYI013\",\n        \"PYI014\",\n        \"PYI015\",\n        \"PYI016\",\n        \"PYI017\",\n        \"PYI018\",\n        \"PYI019\",\n        \"PYI02\",\n        \"PYI020\",\n        \"PYI021\",\n        \"PYI024\",\n        \"PYI025\",\n        \"PYI026\",\n        \"PYI029\",\n        \"PYI03\",\n        \"PYI030\",\n        \"PYI032\",\n        \"PYI033\",\n        \"PYI034\",\n        \"PYI035\",\n        \"PYI036\",\n        \"PYI04\",\n        \"PYI041\",\n        \"PYI042\",\n        \"PYI043\",\n        \"PYI044\",\n        \"PYI045\",\n        \"PYI046\",\n        \"PYI047\",\n        \"PYI048\",\n        \"PYI049\",\n        \"PYI05\",\n        \"PYI050\",\n        \"PYI051\",\n        \"PYI052\",\n        \"PYI053\",\n        \"PYI054\",\n        \"PYI055\",\n        \"PYI056\",\n        \"PYI057\",\n        \"PYI058\",\n        \"PYI059\",\n        \"PYI06\",\n        \"PYI061\",\n        \"PYI062\",\n        \"PYI063\",\n        \"PYI064\",\n        \"PYI066\",\n        \"Q\",\n        \"Q0\",\n        \"Q00\",\n        \"Q000\",\n        \"Q001\",\n        \"Q002\",\n        \"Q003\",\n        \"Q004\",\n        \"RET\",\n        \"RET5\",\n        \"RET50\",\n        \"RET501\",\n        \"RET502\",\n        \"RET503\",\n        \"RET504\",\n        \"RET505\",\n        \"RET506\",\n        \"RET507\",\n        \"RET508\",\n        \"RSE\",\n        \"RSE1\",\n        \"RSE10\",\n        \"RSE102\",\n        \"RUF\",\n        \"RUF0\",\n        \"RUF00\",\n        \"RUF001\",\n        \"RUF002\",\n        \"RUF003\",\n        \"RUF005\",\n        \"RUF006\",\n        \"RUF007\",\n        \"RUF008\",\n        \"RUF009\",\n        \"RUF01\",\n        \"RUF010\",\n        \"RUF012\",\n        \"RUF013\",\n        \"RUF015\",\n        \"RUF016\",\n        \"RUF017\",\n        \"RUF018\",\n        \"RUF019\",\n        \"RUF02\",\n        \"RUF020\",\n        \"RUF021\",\n        \"RUF022\",\n        \"RUF023\",\n        \"RUF024\",\n        \"RUF026\",\n        \"RUF027\",\n        \"RUF028\",\n        \"RUF029\",\n        \"RUF03\",\n        \"RUF030\",\n        \"RUF031\",\n        \"RUF032\",\n        \"RUF033\",\n        \"RUF034\",\n        \"RUF035\",\n        \"RUF036\",\n        \"RUF037\",\n        \"RUF038\",\n        \"RUF039\",\n        \"RUF04\",\n        \"RUF040\",\n        \"RUF041\",\n        \"RUF043\",\n        \"RUF046\",\n        \"RUF048\",\n        \"RUF049\",\n        \"RUF05\",\n        \"RUF051\",\n        \"RUF052\",\n        \"RUF055\",\n        \"RUF056\",\n        \"RUF057\",\n        \"RUF1\",\n        \"RUF10\",\n        \"RUF100\",\n        \"RUF101\",\n        \"RUF2\",\n        \"RUF20\",\n        \"RUF200\",\n        \"S\",\n        \"S1\",\n        \"S10\",\n        \"S101\",\n        \"S102\",\n        \"S103\",\n        \"S104\",\n        \"S105\",\n        \"S106\",\n        \"S107\",\n        \"S108\",\n        \"S11\",\n        \"S110\",\n        \"S112\",\n        \"S113\",\n        \"S2\",\n        \"S20\",\n        \"S201\",\n        \"S202\",\n        \"S3\",\n        \"S30\",\n        \"S301\",\n        \"S302\",\n        \"S303\",\n        \"S304\",\n        \"S305\",\n        \"S306\",\n        \"S307\",\n        \"S308\",\n        \"S31\",\n        \"S310\",\n        \"S311\",\n        \"S312\",\n        \"S313\",\n        \"S314\",\n        \"S315\",\n        \"S316\",\n        \"S317\",\n        \"S318\",\n        \"S319\",\n        \"S32\",\n        \"S320\",\n        \"S321\",\n        \"S323\",\n        \"S324\",\n        \"S4\",\n        \"S40\",\n        \"S401\",\n        \"S402\",\n        \"S403\",\n        \"S404\",\n        \"S405\",\n        \"S406\",\n        \"S407\",\n        \"S408\",\n        \"S409\",\n        \"S41\",\n        \"S411\",\n        \"S412\",\n        \"S413\",\n        \"S415\",\n        \"S5\",\n        \"S50\",\n        \"S501\",\n        \"S502\",\n        \"S503\",\n        \"S504\",\n        \"S505\",\n        \"S506\",\n        \"S507\",\n        \"S508\",\n        \"S509\",\n        \"S6\",\n        \"S60\",\n        \"S601\",\n        \"S602\",\n        \"S603\",\n        \"S604\",\n        \"S605\",\n        \"S606\",\n        \"S607\",\n        \"S608\",\n        \"S609\",\n        \"S61\",\n        \"S610\",\n        \"S611\",\n        \"S612\",\n        \"S7\",\n        \"S70\",\n        \"S701\",\n        \"S702\",\n        \"SIM\",\n        \"SIM1\",\n        \"SIM10\",\n        \"SIM101\",\n        \"SIM102\",\n        \"SIM103\",\n        \"SIM105\",\n        \"SIM107\",\n        \"SIM108\",\n        \"SIM109\",\n        \"SIM11\",\n        \"SIM110\",\n        \"SIM112\",\n        \"SIM113\",\n        \"SIM114\",\n        \"SIM115\",\n        \"SIM116\",\n        \"SIM117\",\n        \"SIM118\",\n        \"SIM2\",\n        \"SIM20\",\n        \"SIM201\",\n        \"SIM202\",\n        \"SIM208\",\n        \"SIM21\",\n        \"SIM210\",\n        \"SIM211\",\n        \"SIM212\",\n        \"SIM22\",\n        \"SIM220\",\n        \"SIM221\",\n        \"SIM222\",\n        \"SIM223\",\n        \"SIM3\",\n        \"SIM30\",\n        \"SIM300\",\n        \"SIM4\",\n        \"SIM40\",\n        \"SIM401\",\n        \"SIM9\",\n        \"SIM90\",\n        \"SIM905\",\n        \"SIM91\",\n        \"SIM910\",\n        \"SIM911\",\n        \"SLF\",\n        \"SLF0\",\n        \"SLF00\",\n        \"SLF001\",\n        \"SLOT\",\n        \"SLOT0\",\n        \"SLOT00\",\n        \"SLOT000\",\n        \"SLOT001\",\n        \"SLOT002\",\n        \"T\",\n        \"T1\",\n        \"T10\",\n        \"T100\",\n        \"T2\",\n        \"T20\",\n        \"T201\",\n        \"T203\",\n        \"TC\",\n        \"TC0\",\n        \"TC00\",\n        \"TC001\",\n        \"TC002\",\n        \"TC003\",\n        \"TC004\",\n        \"TC005\",\n        \"TC006\",\n        \"TC007\",\n        \"TC008\",\n        \"TC01\",\n        \"TC010\",\n        \"TD\",\n        \"TD0\",\n        \"TD00\",\n        \"TD001\",\n        \"TD002\",\n        \"TD003\",\n        \"TD004\",\n        \"TD005\",\n        \"TD006\",\n        \"TD007\",\n        \"TID\",\n        \"TID2\",\n        \"TID25\",\n        \"TID251\",\n        \"TID252\",\n        \"TID253\",\n        \"TRY\",\n        \"TRY0\",\n        \"TRY00\",\n        \"TRY002\",\n        \"TRY003\",\n        \"TRY004\",\n        \"TRY2\",\n        \"TRY20\",\n        \"TRY201\",\n        \"TRY203\",\n        \"TRY3\",\n        \"TRY30\",\n        \"TRY300\",\n        \"TRY301\",\n        \"TRY4\",\n        \"TRY40\",\n        \"TRY400\",\n        \"TRY401\",\n        \"UP\",\n        \"UP0\",\n        \"UP00\",\n        \"UP001\",\n        \"UP003\",\n        \"UP004\",\n        \"UP005\",\n        \"UP006\",\n        \"UP007\",\n        \"UP008\",\n        \"UP009\",\n        \"UP01\",\n        \"UP010\",\n        \"UP011\",\n        \"UP012\",\n        \"UP013\",\n        \"UP014\",\n        \"UP015\",\n        \"UP017\",\n        \"UP018\",\n        \"UP019\",\n        \"UP02\",\n        \"UP020\",\n        \"UP021\",\n        \"UP022\",\n        \"UP023\",\n        \"UP024\",\n        \"UP025\",\n        \"UP026\",\n        \"UP028\",\n        \"UP029\",\n        \"UP03\",\n        \"UP030\",\n        \"UP031\",\n        \"UP032\",\n        \"UP033\",\n        \"UP034\",\n        \"UP035\",\n        \"UP036\",\n        \"UP037\",\n        \"UP038\",\n        \"UP039\",\n        \"UP04\",\n        \"UP040\",\n        \"UP041\",\n        \"UP042\",\n        \"UP043\",\n        \"UP044\",\n        \"UP045\",\n        \"W\",\n        \"W1\",\n        \"W19\",\n        \"W191\",\n        \"W2\",\n        \"W29\",\n        \"W291\",\n        \"W292\",\n        \"W293\",\n        \"W3\",\n        \"W39\",\n        \"W391\",\n        \"W5\",\n        \"W50\",\n        \"W505\",\n        \"W6\",\n        \"W60\",\n        \"W605\",\n        \"YTT\",\n        \"YTT1\",\n        \"YTT10\",\n        \"YTT101\",\n        \"YTT102\",\n        \"YTT103\",\n        \"YTT2\",\n        \"YTT20\",\n        \"YTT201\",\n        \"YTT202\",\n        \"YTT203\",\n        \"YTT204\",\n        \"YTT3\",\n        \"YTT30\",\n        \"YTT301\",\n        \"YTT302\",\n        \"YTT303\"\n      ]\n    },\n    \"Strictness\": {\n      \"oneOf\": [\n        {\n          \"description\": \"Ban imports that extend into the parent module or beyond.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"parents\"\n          ]\n        },\n        {\n          \"description\": \"Ban all relative imports.\",\n          \"type\": \"string\",\n          \"enum\": [\n            \"all\"\n          ]\n        }\n      ]\n    }\n  }\n}"
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0283203125,
          "content": "[toolchain]\nchannel = \"1.84\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}