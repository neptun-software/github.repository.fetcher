{
  "metadata": {
    "timestamp": 1736709480154,
    "page": 22,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjI4",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tokio-rs/tokio",
      "stars": 27631,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.91796875,
          "content": "only_if: $CIRRUS_TAG == '' && ($CIRRUS_PR != '' || $CIRRUS_BRANCH == 'master' || $CIRRUS_BRANCH =~ 'tokio-.*')\nauto_cancellation: $CIRRUS_BRANCH != 'master' && $CIRRUS_BRANCH !=~ 'tokio-.*'\nfreebsd_instance:\n  image_family: freebsd-14-1\nenv:\n  RUST_STABLE: stable\n  RUST_NIGHTLY: nightly-2024-05-05\n  RUSTFLAGS: -D warnings\n\n# Test FreeBSD in a full VM on cirrus-ci.com.  Test the i686 target too, in the\n# same VM.  The binary will be built in 32-bit mode, but will execute on a\n# 64-bit kernel and in a 64-bit environment.  Our tests don't execute any of\n# the system's binaries, so the environment shouldn't matter.\ntask:\n  name: FreeBSD 64-bit\n  setup_script:\n    - pkg install -y bash\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --profile minimal --default-toolchain $RUST_STABLE\n    - . $HOME/.cargo/env\n    - |\n      echo \"~~~~ rustc --version ~~~~\"\n      rustc --version\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo test --all --all-features\n\ntask:\n  name: FreeBSD docs\n  env:\n    RUSTFLAGS: --cfg docsrs --cfg tokio_unstable\n    RUSTDOCFLAGS: --cfg docsrs --cfg tokio_unstable -Dwarnings\n  setup_script:\n    - pkg install -y bash\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --profile minimal --default-toolchain $RUST_NIGHTLY\n    - . $HOME/.cargo/env\n    - |\n      echo \"~~~~ rustc --version ~~~~\"\n      rustc --version\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo doc --lib --no-deps --all-features --document-private-items\n\ntask:\n  name: FreeBSD 32-bit\n  setup_script:\n    - pkg install -y bash\n    - curl https://sh.rustup.rs -sSf --output rustup.sh\n    - sh rustup.sh -y --profile minimal --default-toolchain $RUST_STABLE\n    - . $HOME/.cargo/env\n    - rustup target add i686-unknown-freebsd\n    - |\n      echo \"~~~~ rustc --version ~~~~\"\n      rustc --version\n  test_script:\n    - . $HOME/.cargo/env\n    - cargo test --all --all-features --target i686-unknown-freebsd\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05078125,
          "content": "target\nCargo.lock\n\n.cargo/config.toml\n.cargo/config\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3525390625,
          "content": "# Code of Conduct\n\nThe Tokio project adheres to the [Rust Code of Conduct](https://www.rust-lang.org/policies/code-of-conduct). This describes the minimum behavior expected from all contributors.\n\n## Enforcement\n\nInstances of violations of the Code of Conduct can be reported by contacting the project team at [moderation@tokio.rs](mailto:moderation@tokio.rs).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 29.0400390625,
          "content": "# Contributing to Tokio\n\n:balloon: Thanks for your help improving the project! We are so happy to have\nyou!\n\nThere are opportunities to contribute to Tokio at any level. It doesn't matter if\nyou are just getting started with Rust or are the most weathered expert, we can\nuse your help.\n\n**No contribution is too small and all contributions are valued.**\n\nThis guide will help you get started. **Do not let this guide intimidate you**.\nIt should be considered a map to help you navigate the process.\n\nThe [dev channel][dev] is available for any concerns not covered in this guide, please join\nus!\n\n[dev]: https://discord.gg/tokio\n\n## Conduct\n\nThe Tokio project adheres to the [Rust Code of Conduct][coc]. This describes\nthe _minimum_ behavior expected from all contributors. Instances of violations of the\nCode of Conduct can be reported by contacting the project team at\n[moderation@tokio.rs](mailto:moderation@tokio.rs).\n\n[coc]: https://github.com/rust-lang/rust/blob/master/CODE_OF_CONDUCT.md\n\n## Contributing in Issues\n\nFor any issue, there are fundamentally three ways an individual can contribute:\n\n1. By opening the issue for discussion: For instance, if you believe that you\n   have discovered a bug in Tokio, creating a new issue in [the tokio-rs/tokio\n   issue tracker][issue] is the way to report it.\n\n2. By helping to triage the issue: This can be done by providing\n   supporting details (a test case that demonstrates a bug), providing\n   suggestions on how to address the issue, or ensuring that the issue is tagged\n   correctly.\n\n3. By helping to resolve the issue: Typically this is done either in the form of\n   demonstrating that the issue reported is not a problem after all, or more\n   often, by opening a Pull Request that changes some bit of something in\n   Tokio in a concrete and reviewable manner.\n\n[issue]: https://github.com/tokio-rs/tokio/issues\n\n**Anybody can participate in any stage of contribution**. We urge you to\nparticipate in the discussion around bugs and participate in reviewing PRs.\n\n### Asking for General Help\n\nIf you have reviewed existing documentation and still have questions or are\nhaving problems, you can [open a discussion] asking for help.\n\nIn exchange for receiving help, we ask that you contribute back a documentation\nPR that helps others avoid the problems that you encountered.\n\n[open a discussion]: https://github.com/tokio-rs/tokio/discussions/new\n\n### Submitting a Bug Report\n\nWhen opening a new issue in the Tokio issue tracker, you will be presented\nwith a basic template that should be filled in. If you believe that you have\nuncovered a bug, please fill out this form, following the template to the best\nof your ability. Do not worry if you cannot answer every detail, just fill in\nwhat you can.\n\nThe two most important pieces of information we need in order to properly\nevaluate the report is a description of the behavior you are seeing and a simple\ntest case we can use to recreate the problem on our own. If we cannot recreate\nthe issue, it becomes impossible for us to fix.\n\nIn order to rule out the possibility of bugs introduced by userland code, test\ncases should be limited, as much as possible, to using only Tokio APIs.\n\nSee [How to create a Minimal, Complete, and Verifiable example][mcve].\n\n[mcve]: https://stackoverflow.com/help/mcve\n\n### Triaging a Bug Report\n\nOnce an issue has been opened, it is not uncommon for there to be discussion\naround it. Some contributors may have differing opinions about the issue,\nincluding whether the behavior being seen is a bug or a feature. This discussion\nis part of the process and should be kept focused, helpful, and professional.\n\nShort, clipped responses—that provide neither additional context nor supporting\ndetail—are not helpful or professional. To many, such responses are simply\nannoying and unfriendly.\n\nContributors are encouraged to help one another make forward progress as much as\npossible, empowering one another to solve issues collaboratively. If you choose\nto comment on an issue that you feel either is not a problem that needs to be\nfixed, or if you encounter information in an issue that you feel is incorrect,\nexplain why you feel that way with additional supporting context, and be willing\nto be convinced that you may be wrong. By doing so, we can often reach the\ncorrect outcome much faster.\n\n### Resolving a Bug Report\n\nIn the majority of cases, issues are resolved by opening a Pull Request. The\nprocess for opening and reviewing a Pull Request is similar to that of opening\nand triaging issues, but carries with it a necessary review and approval\nworkflow that ensures that the proposed changes meet the minimal quality and\nfunctional guidelines of the Tokio project.\n\n## Pull Requests\n\nPull Requests are the way concrete changes are made to the code, documentation,\nand dependencies in the Tokio repository.\n\nEven tiny pull requests (e.g., one character pull request fixing a typo in API\ndocumentation) are greatly appreciated. Before making a large change, it is\nusually a good idea to first open an issue describing the change to solicit\nfeedback and guidance. This will increase the likelihood of the PR getting\nmerged.\n\n### Cargo Commands\n\nDue to the extensive use of features in Tokio, you will often need to add extra\narguments to many common cargo commands. This section lists some commonly needed\ncommands.\n\nSome commands just need the `--all-features` argument:\n\n```\ncargo build --all-features\ncargo check --all-features\ncargo test --all-features\n```\n\nIdeally, you should use the same version of clippy as the one used in CI\n(defined by `env.rust_clippy` in [ci.yml][ci.yml]), because newer versions\nmight have new lints:\n\n[ci.yml]: .github/workflows/ci.yml\n\n<!--\nWhen updating this, also update:\n- .github/workflows/ci.yml\n- README.md\n- tokio/README.md\n- tokio/Cargo.toml\n- tokio-util/Cargo.toml\n- tokio-test/Cargo.toml\n- tokio-stream/Cargo.toml\n-->\n\n```\ncargo +1.77 clippy --all --tests --all-features\n```\n\nWhen building documentation, a simple `cargo doc` is not sufficient. To produce\ndocumentation equivalent to what will be produced in docs.rs's builds of Tokio's\ndocs, please use:\n\n```\nRUSTDOCFLAGS=\"--cfg docsrs --cfg tokio_unstable\" RUSTFLAGS=\"--cfg docsrs --cfg tokio_unstable\" cargo +nightly doc --all-features [--open]\n```\n\nThis turns on indicators to display the Cargo features required for\nconditionally compiled APIs in Tokio, and it enables documentation of unstable\nTokio features. Notice that it is necessary to pass cfg flags to both RustDoc\n*and* rustc.\n\nThere is a more concise way to build docs.rs-equivalent docs by using [`cargo\ndocs-rs`], which reads the above documentation flags out of Tokio's Cargo.toml\nas docs.rs itself does.\n\n[`cargo docs-rs`]: https://github.com/dtolnay/cargo-docs-rs\n\n```\ncargo install --locked cargo-docs-rs\ncargo +nightly docs-rs [--open]\n```\n\nThe `cargo fmt` command does not work on the Tokio codebase. You can use the\ncommand below instead:\n\n```\n# Mac or Linux\nrustfmt --check --edition 2021 $(git ls-files '*.rs')\n\n# Powershell\nGet-ChildItem . -Filter \"*.rs\" -Recurse | foreach { rustfmt --check --edition 2021 $_.FullName }\n```\nThe `--check` argument prints the things that need to be fixed. If you remove\nit, `rustfmt` will update your files locally instead.\n\nYou can run loom tests with\n```\ncd tokio # tokio crate in workspace\nLOOM_MAX_PREEMPTIONS=1 LOOM_MAX_BRANCHES=10000 RUSTFLAGS=\"--cfg loom -C debug_assertions\" \\\n    cargo test --lib --release --features full -- --test-threads=1 --nocapture\n```\nAdditionally, you can also add `--cfg tokio_unstable` to the `RUSTFLAGS` environment variable to\nrun loom tests that test unstable features.\n\nYou can run miri tests with\n```\nMIRIFLAGS=\"-Zmiri-disable-isolation -Zmiri-strict-provenance -Zmiri-retag-fields\" \\\n    cargo +nightly miri test --features full --lib --tests\n```\n\n### Performing spellcheck on tokio codebase\n\nYou can perform spell-check on tokio codebase. For details of how to use the spellcheck tool, feel free to visit\nhttps://github.com/drahnr/cargo-spellcheck\n```\n# First install the spell-check plugin\ncargo install --locked cargo-spellcheck\n\n# Then run the cargo spell check command\ncargo spellcheck check\n```\n\nif the command rejects a word, you should backtick the rejected word if it's code related. If not, the\nrejected word should be put into `spellcheck.dic` file.\n\nNote that when you add a word into the file, you should also update the first line which tells the spellcheck tool\nthe total number of words included in the file\n\n### Tests\n\nIf the change being proposed alters code (as opposed to only documentation for\nexample), it is either adding new functionality to Tokio or it is fixing\nexisting, broken functionality. In both of these cases, the pull request should\ninclude one or more tests to ensure that Tokio does not regress in the future.\nThere are two ways to write tests: [integration tests][integration-tests]\nand [documentation tests][documentation-tests].\n(Tokio avoids [unit tests][unit-tests] as much as possible).\n\nTokio uses [conditional compilation attributes][conditional-compilation]\nthroughout the codebase, to modify rustc's behavior. Code marked with such\nattributes can be enabled using RUSTFLAGS and RUSTDOCFLAGS environment\nvariables. One of the most prevalent flags passed in these variables is\nthe `--cfg` option. To run tests in a particular file, check first what\noptions #![cfg] declaration defines for that file.\n\nFor instance, to run a test marked with the 'tokio_unstable' cfg option,\nyou must pass this flag to the compiler when running the test.\n```\n$ RUSTFLAGS=\"--cfg tokio_unstable\" cargo test -p tokio --all-features --test rt_metrics\n```\n\n#### Integration tests\n\nIntegration tests go in the same crate as the code they are testing. Each sub\ncrate should have a `dev-dependency` on `tokio` itself. This makes all Tokio\nutilities available to use in tests, no matter the crate being tested.\n\nThe best strategy for writing a new integration test is to look at existing\nintegration tests in the crate and follow the style.\n\n#### Fuzz tests\n\nSome of our crates include a set of fuzz tests, this will be marked by a\ndirectory `fuzz`. It is a good idea to run fuzz tests after each change.\nTo get started with fuzz testing you'll need to install\n[cargo-fuzz](https://github.com/rust-fuzz/cargo-fuzz).\n\n`cargo install --locked cargo-fuzz`\n\nTo list the available fuzzing harnesses you can run;\n\n```bash\n$ cd tokio\n$ cargo fuzz list\nfuzz_linked_list\n```\n\nRunning a fuzz test is as simple as;\n\n`cargo fuzz run fuzz_linked_list`\n\n**NOTE**: Keep in mind that by default when running a fuzz test the fuzz\nharness will run forever and will only exit if you `ctrl-c` or it finds\na bug.\n\n#### Documentation tests\n\nIdeally, every API has at least one [documentation test] that demonstrates how to\nuse the API. Documentation tests are run with `cargo test --doc`. This ensures\nthat the example is correct and provides additional test coverage.\n\nThe trick to documentation tests is striking a balance between being succinct\nfor a reader to understand and actually testing the API.\n\nSame as with integration tests, when writing a documentation test, the full\n`tokio` crate is available. This is especially useful for getting access to the\nruntime to run the example.\n\nThe documentation tests will be visible from both the crate specific\ndocumentation **and** the `tokio` facade documentation via the re-export. The\nexample should be written from the point of view of a user that is using the\n`tokio` crate. As such, the example should use the API via the facade and not by\ndirectly referencing the crate.\n\nThe type level example for `tokio_timer::Timeout` provides a good example of a\ndocumentation test:\n\n```\n/// // import the `timeout` function, usually this is done\n/// // with `use tokio::prelude::*`\n/// use tokio::prelude::FutureExt;\n/// use futures::Stream;\n/// use futures::sync::mpsc;\n/// use std::time::Duration;\n///\n/// # fn main() {\n/// let (tx, rx) = mpsc::unbounded();\n/// # tx.unbounded_send(()).unwrap();\n/// # drop(tx);\n///\n/// let process = rx.for_each(|item| {\n///     // do something with `item`\n/// # drop(item);\n/// # Ok(())\n/// });\n///\n/// # tokio::runtime::current_thread::block_on_all(\n/// // Wrap the future with a `Timeout` set to expire in 10 milliseconds.\n/// process.timeout(Duration::from_millis(10))\n/// # ).unwrap();\n/// # }\n```\n\nGiven that this is a *type* level documentation test and the primary way users\nof `tokio` will create an instance of `Timeout` is by using\n`FutureExt::timeout`, this is how the documentation test is structured.\n\nLines that start with `/// #` are removed when the documentation is generated.\nThey are only there to get the test to run. The `block_on_all` function is the\neasiest way to execute a future from a test.\n\nIf this were a documentation test for the `Timeout::new` function, then the\nexample would explicitly use `Timeout::new`. For example:\n\n```\n/// use tokio::timer::Timeout;\n/// use futures::Future;\n/// use futures::sync::oneshot;\n/// use std::time::Duration;\n///\n/// # fn main() {\n/// let (tx, rx) = oneshot::channel();\n/// # tx.send(()).unwrap();\n///\n/// # tokio::runtime::current_thread::block_on_all(\n/// // Wrap the future with a `Timeout` set to expire in 10 milliseconds.\n/// Timeout::new(rx, Duration::from_millis(10))\n/// # ).unwrap();\n/// # }\n```\n\n### Benchmarks\n\nYou can run benchmarks locally for the changes you've made to the tokio codebase.\nTokio currently uses [Criterion](https://github.com/bheisler/criterion.rs) as its benchmarking tool. To run a benchmark\nagainst the changes you have made, for example, you can run;\n\n```bash\ncd benches\n\n# Run all benchmarks.\ncargo bench\n\n# Run all tests in the `benches/fs.rs` file\ncargo bench --bench fs\n\n# Run the `async_read_buf` benchmark in `benches/fs.rs` specifically.\ncargo bench async_read_buf\n\n# After running benches, you can check the statistics under `tokio/target/criterion/`\n```\n\nYou can also refer to Criterion docs for additional options and details.\n\n### Commits\n\nIt is a recommended best practice to keep your changes as logically grouped as\npossible within individual commits. There is no limit to the number of commits\nany single Pull Request may have, and many contributors find it easier to review\nchanges that are split across multiple commits.\n\nThat said, if you have a number of commits that are \"checkpoints\" and don't\nrepresent a single logical change, please squash those together.\n\nNote that multiple commits often get squashed when they are landed (see the\nnotes about [commit squashing](#commit-squashing)).\n\n#### Commit message guidelines\n\nA good commit message should describe what changed and why.\n\n1. The first line should:\n\n  * contain a short description of the change (preferably 50 characters or less,\n    and no more than 72 characters)\n  * be entirely in lowercase with the exception of proper nouns, acronyms, and\n    the words that refer to code, like function/variable names\n  * start with an imperative verb\n  * not have a period at the end\n  * be prefixed with the name of the module being changed; usually this is the\n    same as the M-* label on the PR\n\n  Examples:\n\n  * time: introduce `Timeout` and deprecate `Deadline`\n  * codec: export `Encoder`, `Decoder`, `Framed*`\n  * ci: fix the FreeBSD ci configuration\n\n2. Keep the second line blank.\n3. Wrap all other lines at 72 columns (except for long URLs).\n4. If your patch fixes an open issue, you can add a reference to it at the end\n   of the log. Use the `Fixes: #` prefix and the issue number. For other\n   references use `Refs: #`. `Refs` may include multiple issues, separated by a\n   comma.\n\n   Examples:\n\n   - `Fixes: #1337`\n   - `Refs: #1234`\n\nSample complete commit message:\n\n```txt\nmodule: explain the commit in one line\n\nBody of commit message is a few lines of text, explaining things\nin more detail, possibly giving some background about the issue\nbeing fixed, etc.\n\nThe body of the commit message can be several paragraphs, and\nplease do proper word-wrap and keep columns shorter than about\n72 characters or so. That way, `git log` will show things\nnicely even when it is indented.\n\nFixes: #1337\nRefs: #453, #154\n```\n\n### Opening the Pull Request\n\nFrom within GitHub, opening a new Pull Request will present you with a\n[template] that should be filled out. Please try to do your best at filling out\nthe details, but feel free to skip parts if you're not sure what to put.\n\n[template]: .github/PULL_REQUEST_TEMPLATE.md\n\n### Discuss and update\n\nYou will probably get feedback or requests for changes to your Pull Request.\nThis is a big part of the submission process so don't be discouraged! Some\ncontributors may sign off on the Pull Request right away, others may have\nmore detailed comments or feedback. This is a necessary part of the process\nin order to evaluate whether the changes are correct and necessary.\n\n**Any community member can review a PR and you might get conflicting feedback**.\nKeep an eye out for comments from code owners to provide guidance on conflicting\nfeedback.\n\n**Once the PR is open, do not rebase the commits**. See [Commit Squashing](#commit-squashing) for\nmore details.\n\n### Commit Squashing\n\nIn most cases, **do not squash commits that you add to your Pull Request during\nthe review process**. When the commits in your Pull Request land, they may be\nsquashed into one commit per logical change. Metadata will be added to the\ncommit message (including links to the Pull Request, links to relevant issues,\nand the names of the reviewers). The commit history of your Pull Request,\nhowever, will stay intact on the Pull Request page.\n\n## Reviewing Pull Requests\n\n**Any Tokio community member is welcome to review any pull request**.\n\nAll Tokio contributors who choose to review and provide feedback on Pull\nRequests have a responsibility to both the project and the individual making the\ncontribution. Reviews and feedback must be helpful, insightful, and geared\ntowards improving the contribution as opposed to simply blocking it. If there\nare reasons why you feel the PR should not land, explain what those are. Do not\nexpect to be able to block a Pull Request from advancing simply because you say\n\"No\" without giving an explanation. Be open to having your mind changed. Be open\nto working with the contributor to make the Pull Request better.\n\nReviews that are dismissive or disrespectful of the contributor or any other\nreviewers are strictly counter to the Code of Conduct.\n\nWhen reviewing a Pull Request, the primary goals are for the codebase to improve\nand for the person submitting the request to succeed. **Even if a Pull Request\ndoes not land, the submitters should come away from the experience feeling like\ntheir effort was not wasted or unappreciated**. Every Pull Request from a new\ncontributor is an opportunity to grow the community.\n\n### Review a bit at a time.\n\nDo not overwhelm new contributors.\n\nIt is tempting to micro-optimize and make everything about relative performance,\nperfect grammar, or exact style matches. Do not succumb to that temptation.\n\nFocus first on the most significant aspects of the change:\n\n1. Does this change make sense for Tokio?\n2. Does this change make Tokio better, even if only incrementally?\n3. Are there clear bugs or larger scale issues that need attending to?\n4. Is the commit message readable and correct? If it contains a breaking change\n   is it clear enough?\n\nNote that only **incremental** improvement is needed to land a PR. This means\nthat the PR does not need to be perfect, only better than the status quo. Follow\nup PRs may be opened to continue iterating.\n\nWhen changes are necessary, *request* them, do not *demand* them, and **do not\nassume that the submitter already knows how to add a test or run a benchmark**.\n\nSpecific performance optimization techniques, coding styles and conventions\nchange over time. The first impression you give to a new contributor never does.\n\nNits (requests for small changes that are not essential) are fine, but try to\navoid stalling the Pull Request. Most nits can typically be fixed by the Tokio\nCollaborator landing the Pull Request but they can also be an opportunity for\nthe contributor to learn a bit more about the project.\n\nIt is always good to clearly indicate nits when you comment: e.g.\n`Nit: change foo() to bar(). But this is not blocking.`\n\nIf your comments were addressed but were not folded automatically after new\ncommits or if they proved to be mistaken, please, [hide them][hiding-a-comment]\nwith the appropriate reason to keep the conversation flow concise and relevant.\n\n### Be aware of the person behind the code\n\nBe aware that *how* you communicate requests and reviews in your feedback can\nhave a significant impact on the success of the Pull Request. Yes, we may land\na particular change that makes Tokio better, but the individual might just not\nwant to have anything to do with Tokio ever again. The goal is not just having\ngood code.\n\n### Abandoned or Stalled Pull Requests\n\nIf a Pull Request appears to be abandoned or stalled, it is polite to first\ncheck with the contributor to see if they intend to continue the work before\nchecking if they would mind if you took it over (especially if it just has nits\nleft). When doing so, it is courteous to give the original contributor credit\nfor the work they started (either by preserving their name and email address in\nthe commit log, or by using an `Author: ` meta-data tag in the commit.\n\n_Adapted from the [Node.js contributing guide][node]_.\n\n[node]: https://github.com/nodejs/node/blob/master/CONTRIBUTING.md\n[hiding-a-comment]: https://help.github.com/articles/managing-disruptive-comments/#hiding-a-comment\n[documentation test]: https://doc.rust-lang.org/rustdoc/documentation-tests.html\n\n## Keeping track of issues and PRs\n\nThe Tokio GitHub repository has a lot of issues and PRs to keep track of. This\nsection explains the meaning of various labels, as well as our [GitHub\nproject][project]. The section is primarily targeted at maintainers.  Most\ncontributors aren't able to set these labels.\n\n### Area\n\nThe area label describes the crates relevant to this issue or PR.\n\n - **A-tokio** This issue concerns the main Tokio crate.\n - **A-tokio-util** This issue concerns the `tokio-util` crate.\n - **A-tokio-tls** This issue concerns the `tokio-tls` crate. Only used for\n   older issues, as the crate has been moved to another repository.\n - **A-tokio-test** The issue concerns the `tokio-test` crate.\n - **A-tokio-macros** This issue concerns the `tokio-macros` crate. Should only\n   be used for the procedural macros, and not `join!` or `select!`.\n - **A-ci** This issue concerns our GitHub Actions setup.\n\n### Category\n\n - **C-bug** This is a bug-report. Bug-fix PRs use `C-enhancement` instead.\n - **C-enhancement** This is a PR that adds a new features.\n - **C-maintenance** This is an issue or PR about stuff such as documentation,\n   GitHub Actions or code quality.\n - **C-feature-request** This is a feature request. Implementations of feature\n   requests use `C-enhancement` instead.\n - **C-feature-accepted** If you submit a PR for this feature request, we wont\n   close it with the reason \"we don't want this\". Issues with this label should\n   also have the `C-feature-request` label.\n - **C-musing** Stuff like tracking issues or roadmaps. \"musings about a better\n   world\"\n - **C-proposal** A proposal of some kind, and a request for comments.\n - **C-question** A user question. Large overlap with GitHub discussions.\n - **C-request** A non-feature request, e.g. \"please add deprecation notices to\n   `-alpha.*` versions of crates\"\n\n### Calls for participation\n\n - **E-help-wanted** Stuff where we want help. Often seen together with `C-bug`\n   or `C-feature-accepted`.\n - **E-easy** This is easy, ranging from quick documentation fixes to stuff you\n   can do after reading the tutorial on our website.\n - **E-medium** This is not `E-easy` or `E-hard`.\n - **E-hard** This either involves very tricky code, is something we don't know\n   how to solve, or is difficult for some other reason.\n - **E-needs-mvce** This bug is missing a minimal complete and verifiable\n   example.\n\nThe \"E-\" prefix is the same as used in the Rust compiler repository. Some\nissues are missing a difficulty rating, but feel free to ask on our Discord\nserver if you want to know how difficult an issue likely is.\n\n### Module\n\nThe module label provides a more fine grained categorization than **Area**.\n\n - **M-blocking** Things relevant to `spawn_blocking`, `block_in_place`.\n - **M-codec** The `tokio_util::codec` module.\n - **M-compat** The `tokio_util::compat` module.\n - **M-coop** Things relevant to coop.\n - **M-fs** The `tokio::fs` module.\n - **M-io** The `tokio::io` module.\n - **M-macros** Issues about any kind of macro.\n - **M-net** The `tokio::net` module.\n - **M-process** The `tokio::process` module.\n - **M-runtime** The `tokio::runtime` module.\n - **M-signal** The `tokio::signal` module.\n - **M-sync** The `tokio::sync` module.\n - **M-task** The `tokio::task` module.\n - **M-time** The `tokio::time` module.\n - **M-tracing** Tracing support in Tokio.\n\n### Topic\n\nSome extra information.\n\n - **T-docs** This is about documentation.\n - **T-performance** This is about performance.\n - **T-v0.1.x** This is about old Tokio.\n\nAny label not listed here is not in active use.\n\n[project]: https://github.com/orgs/tokio-rs/projects/1\n\n## LTS guarantees\n\nTokio ≥1.0.0 comes with LTS guarantees:\n\n * A minimum of 5 years of maintenance.\n * A minimum of 3 years before a hypothetical 2.0 release.\n\nThe goal of these guarantees is to provide stability to the ecosystem.\n\n## Minimum Supported Rust Version (MSRV)\n\n * All Tokio ≥1.0.0 releases will support at least a 6-month old Rust\n   compiler release.\n * The MSRV will only be increased on 1.x releases.\n\n## Versioning Policy\n\nWith Tokio ≥1.0.0:\n\n * Patch (1.\\_.x) releases _should only_ contain bug fixes or documentation\n   changes. Besides this, these releases should not substantially change\n   runtime behavior.\n * Minor (1.x) releases may contain new functionality, MSRV increases (see\n   above), minor dependency updates, deprecations, and larger internal\n   implementation changes.\n\nThis is as defined by [Semantic Versioning 2.0](https://semver.org/).\n\n## Releasing\n\nSince the Tokio project consists of a number of crates, many of which depend on\neach other, releasing new versions to crates.io can involve some complexities.\nWhen releasing a new version of a crate, follow these steps:\n\n1. **Ensure that the release crate has no path dependencies.** When the HEAD\n   version of a Tokio crate requires unreleased changes in another Tokio crate,\n   the crates.io dependency on the second crate will be replaced with a path\n   dependency. Crates with path dependencies cannot be published, so before\n   publishing the dependent crate, any path dependencies must also be published.\n   This should be done through a form of depth-first tree traversal:\n\n   1. Starting with the first path dependency in the crate to be released,\n      inspect the `Cargo.toml` for the dependency. If the dependency has any\n      path dependencies of its own, repeat this step with the first such\n      dependency.\n   2. Begin the release process for the path dependency.\n   3. Once the path dependency has been published to crates.io, update the\n      dependent crate to depend on the crates.io version.\n   4. When all path dependencies have been published, the dependent crate may\n      be published.\n\n   To verify that a crate is ready to publish, run:\n\n   ```bash\n   bin/publish --dry-run <CRATE NAME> <CRATE VERSION>\n   ```\n\n2. **Update Cargo metadata.** After releasing any path dependencies, update the\n   `version` field in `Cargo.toml` to the new version, and the `documentation`\n   field to the docs.rs URL of the new version.\n3. **Update other documentation links.** Update the \"Documentation\" link in the\n   crate's `README.md` to point to the docs.rs URL of the new version.\n4. **Update the changelog for the crate.** Each crate in the Tokio repository\n   has its own `CHANGELOG.md` in that crate's subdirectory. Any changes to that\n   crate since the last release should be added to the changelog. Change\n   descriptions may be taken from the Git history, but should be edited to\n   ensure a consistent format, based on [Keep A Changelog][keep-a-changelog].\n   Other entries in that crate's changelog may also be used for reference.\n5. **Perform a final audit for breaking changes.** Compare the HEAD version of\n   crate with the Git tag for the most recent release version. If there are any\n   breaking API changes, determine if those changes can be made without breaking\n   existing APIs. If so, resolve those issues. Otherwise, if it is necessary to\n   make a breaking release, update the version numbers to reflect this.\n6. **Open a pull request with your changes.** Once that pull request has been\n   approved by a maintainer and the pull request has been merged, continue to\n   the next step.\n7. **Release the crate.** Run the following command:\n\n   ```bash\n   bin/publish <NAME OF CRATE> <VERSION>\n   ```\n\n   Your editor and prompt you to edit a message for the tag. Copy the changelog\n   entry for that release version into your editor and close the window.\n\n[keep-a-changelog]: https://github.com/olivierlacan/keep-a-changelog/blob/master/CHANGELOG.md\n[unit-tests]: https://doc.rust-lang.org/rust-by-example/testing/unit_testing.html\n[integration-tests]: https://doc.rust-lang.org/rust-by-example/testing/integration_testing.html\n[documentation-tests]: https://doc.rust-lang.org/rust-by-example/testing/doc_testing.html\n[conditional-compilation]: https://doc.rust-lang.org/reference/conditional-compilation.html\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.271484375,
          "content": "[workspace]\nresolver = \"2\"\nmembers = [\n  \"tokio\",\n  \"tokio-macros\",\n  \"tokio-test\",\n  \"tokio-stream\",\n  \"tokio-util\",\n\n  # Internal\n  \"benches\",\n  \"examples\",\n  \"stress-test\",\n  \"tests-build\",\n  \"tests-integration\",\n]\n\n[workspace.metadata.spellcheck]\nconfig = \"spellcheck.toml\"\n"
        },
        {
          "name": "Cross.toml",
          "type": "blob",
          "size": 0.0673828125,
          "content": "[build.env]\npassthrough = [\n    \"RUSTFLAGS\",\n    \"RUST_BACKTRACE\",\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) Tokio Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.9326171875,
          "content": "# Tokio\n\nA runtime for writing reliable, asynchronous, and slim applications with\nthe Rust programming language. It is:\n\n* **Fast**: Tokio's zero-cost abstractions give you bare-metal\n  performance.\n\n* **Reliable**: Tokio leverages Rust's ownership, type system, and\n  concurrency model to reduce bugs and ensure thread safety.\n\n* **Scalable**: Tokio has a minimal footprint, and handles backpressure\n  and cancellation naturally.\n\n[![Crates.io][crates-badge]][crates-url]\n[![MIT licensed][mit-badge]][mit-url]\n[![Build Status][actions-badge]][actions-url]\n[![Discord chat][discord-badge]][discord-url]\n\n[crates-badge]: https://img.shields.io/crates/v/tokio.svg\n[crates-url]: https://crates.io/crates/tokio\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: https://github.com/tokio-rs/tokio/blob/master/LICENSE\n[actions-badge]: https://github.com/tokio-rs/tokio/workflows/CI/badge.svg\n[actions-url]: https://github.com/tokio-rs/tokio/actions?query=workflow%3ACI+branch%3Amaster\n[discord-badge]: https://img.shields.io/discord/500028886025895936.svg?logo=discord&style=flat-square\n[discord-url]: https://discord.gg/tokio\n\n[Website](https://tokio.rs) |\n[Guides](https://tokio.rs/tokio/tutorial) |\n[API Docs](https://docs.rs/tokio/latest/tokio) |\n[Chat](https://discord.gg/tokio)\n\n## Overview\n\nTokio is an event-driven, non-blocking I/O platform for writing\nasynchronous applications with the Rust programming language. At a high\nlevel, it provides a few major components:\n\n* A multithreaded, work-stealing based task [scheduler].\n* A reactor backed by the operating system's event queue (epoll, kqueue,\n  IOCP, etc...).\n* Asynchronous [TCP and UDP][net] sockets.\n\nThese components provide the runtime components necessary for building\nan asynchronous application.\n\n[net]: https://docs.rs/tokio/latest/tokio/net/index.html\n[scheduler]: https://docs.rs/tokio/latest/tokio/runtime/index.html\n\n## Example\n\nA basic TCP echo server with Tokio.\n\nMake sure you activated the full features of the tokio crate on Cargo.toml:\n\n```toml\n[dependencies]\ntokio = { version = \"1.43.0\", features = [\"full\"] }\n```\nThen, on your main.rs:\n\n```rust,no_run\nuse tokio::net::TcpListener;\nuse tokio::io::{AsyncReadExt, AsyncWriteExt};\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let listener = TcpListener::bind(\"127.0.0.1:8080\").await?;\n\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n\n        tokio::spawn(async move {\n            let mut buf = [0; 1024];\n\n            // In a loop, read data from the socket and write the data back.\n            loop {\n                let n = match socket.read(&mut buf).await {\n                    // socket closed\n                    Ok(0) => return,\n                    Ok(n) => n,\n                    Err(e) => {\n                        eprintln!(\"failed to read from socket; err = {:?}\", e);\n                        return;\n                    }\n                };\n\n                // Write the data back\n                if let Err(e) = socket.write_all(&buf[0..n]).await {\n                    eprintln!(\"failed to write to socket; err = {:?}\", e);\n                    return;\n                }\n            }\n        });\n    }\n}\n```\n\nMore examples can be found [here][examples]. For a larger \"real world\" example, see the\n[mini-redis] repository.\n\n[examples]: https://github.com/tokio-rs/tokio/tree/master/examples\n[mini-redis]: https://github.com/tokio-rs/mini-redis/\n\nTo see a list of the available features flags that can be enabled, check our\n[docs][feature-flag-docs].\n\n## Getting Help\n\nFirst, see if the answer to your question can be found in the [Guides] or the\n[API documentation]. If the answer is not there, there is an active community in\nthe [Tokio Discord server][chat]. We would be happy to try to answer your\nquestion. You can also ask your question on [the discussions page][discussions].\n\n[Guides]: https://tokio.rs/tokio/tutorial\n[API documentation]: https://docs.rs/tokio/latest/tokio\n[chat]: https://discord.gg/tokio\n[discussions]: https://github.com/tokio-rs/tokio/discussions\n[feature-flag-docs]: https://docs.rs/tokio/#feature-flags\n\n## Contributing\n\n:balloon: Thanks for your help improving the project! We are so happy to have\nyou! We have a [contributing guide][guide] to help you get involved in the Tokio\nproject.\n\n[guide]: https://github.com/tokio-rs/tokio/blob/master/CONTRIBUTING.md\n\n## Related Projects\n\nIn addition to the crates in this repository, the Tokio project also maintains\nseveral other libraries, including:\n\n* [`axum`]: A web application framework that focuses on ergonomics and modularity.\n\n* [`hyper`]: A fast and correct HTTP/1.1 and HTTP/2 implementation for Rust.\n\n* [`tonic`]: A gRPC over HTTP/2 implementation focused on high performance, interoperability, and flexibility.\n\n* [`warp`]: A super-easy, composable, web server framework for warp speeds.\n\n* [`tower`]: A library of modular and reusable components for building robust networking clients and servers.\n\n* [`tracing`] (formerly `tokio-trace`): A framework for application-level tracing and async-aware diagnostics.\n\n* [`mio`]: A low-level, cross-platform abstraction over OS I/O APIs that powers `tokio`.\n\n* [`bytes`]: Utilities for working with bytes, including efficient byte buffers.\n\n* [`loom`]: A testing tool for concurrent Rust code.\n\n[`axum`]: https://github.com/tokio-rs/axum\n[`warp`]: https://github.com/seanmonstar/warp\n[`hyper`]: https://github.com/hyperium/hyper\n[`tonic`]: https://github.com/hyperium/tonic\n[`tower`]: https://github.com/tower-rs/tower\n[`loom`]: https://github.com/tokio-rs/loom\n[`tracing`]: https://github.com/tokio-rs/tracing\n[`mio`]: https://github.com/tokio-rs/mio\n[`bytes`]: https://github.com/tokio-rs/bytes\n\n## Changelog\n\nThe Tokio repository contains multiple crates. Each crate has its own changelog.\n\n * `tokio` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio/CHANGELOG.md)\n * `tokio-util` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-util/CHANGELOG.md)\n * `tokio-stream` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-stream/CHANGELOG.md)\n * `tokio-macros` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-macros/CHANGELOG.md)\n * `tokio-test` - [view changelog](https://github.com/tokio-rs/tokio/blob/master/tokio-test/CHANGELOG.md)\n\n## Supported Rust Versions\n\n<!--\nWhen updating this, also update:\n- .github/workflows/ci.yml\n- CONTRIBUTING.md\n- README.md\n- tokio/README.md\n- tokio/Cargo.toml\n- tokio-util/Cargo.toml\n- tokio-test/Cargo.toml\n- tokio-stream/Cargo.toml\n-->\n\nTokio will keep a rolling MSRV (minimum supported rust version) policy of **at\nleast** 6 months. When increasing the MSRV, the new Rust version must have been\nreleased at least six months ago. The current MSRV is 1.70.\n\nNote that the MSRV is not increased automatically, and only as part of a minor\nrelease. The MSRV history for past minor releases can be found below:\n\n * 1.39 to now  - Rust 1.70\n * 1.30 to 1.38 - Rust 1.63\n * 1.27 to 1.29 - Rust 1.56\n * 1.17 to 1.26 - Rust 1.49\n * 1.15 to 1.16 - Rust 1.46\n * 1.0 to 1.14 - Rust 1.45\n\nNote that although we try to avoid the situation where a dependency transitively\nincreases the MSRV of Tokio, we do not guarantee that this does not happen.\nHowever, every minor release will have some set of versions of dependencies that\nworks with the MSRV of that minor release.\n\n## Release schedule\n\nTokio doesn't follow a fixed release schedule, but we typically make one to two\nnew minor releases each month. We make patch releases for bugfixes as necessary.\n\n## Bug patching policy\n\nFor the purposes of making patch releases with bugfixes, we have designated\ncertain minor releases as LTS (long term support) releases. Whenever a bug\nwarrants a patch release with a fix for the bug, it will be backported and\nreleased as a new patch release for each LTS minor version. Our current LTS\nreleases are:\n\n * `1.36.x` - LTS release until March 2025. (MSRV 1.63)\n * `1.38.x` - LTS release until July 2025. (MSRV 1.63)\n\nEach LTS release will continue to receive backported fixes for at least a year.\nIf you wish to use a fixed minor release in your project, we recommend that you\nuse an LTS release.\n\nTo use a fixed minor version, you can specify the version with a tilde. For\nexample, to specify that you wish to use the newest `1.32.x` patch release, you\ncan use the following dependency specification:\n```text\ntokio = { version = \"~1.32\", features = [...] }\n```\n\n### Previous LTS releases\n\n * `1.8.x` - LTS release until February 2022.\n * `1.14.x` - LTS release until June 2022.\n * `1.18.x` - LTS release until June 2023.\n * `1.20.x` - LTS release until September 2023.\n * `1.25.x` - LTS release until March 2024.\n * `1.32.x` - LTS release until September 2024.\n\n## License\n\nThis project is licensed under the [MIT license].\n\n[MIT license]: https://github.com/tokio-rs/tokio/blob/master/LICENSE\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in Tokio by you, shall be licensed as MIT, without any additional\nterms or conditions.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.4560546875,
          "content": "## Report a security issue\n\nThe Tokio project team welcomes security reports and is committed to providing prompt attention to security issues. Security issues should be reported privately via [security@tokio.rs](mailto:security@tokio.rs). Security issues should not be reported via the public GitHub Issue tracker.\n\n## Vulnerability coordination\n\nRemediation of security vulnerabilities is prioritized by the project team. The project team coordinates remediation with third-party project stakeholders via [GitHub Security Advisories](https://help.github.com/en/github/managing-security-vulnerabilities/about-github-security-advisories). Third-party stakeholders may include the reporter of the issue, affected direct or indirect users of Tokio, and maintainers of upstream dependencies if applicable.\n\nDownstream project maintainers and Tokio users can request participation in coordination of applicable security issues by sending your contact email address, GitHub username(s) and any other salient information to [security@tokio.rs](mailto:security@tokio.rs). Participation in security issue coordination processes is at the discretion of the Tokio team.\n\n## Security advisories\n\nThe project team is committed to transparency in the security issue disclosure process. The Tokio team announces security issues via [project GitHub Release notes](https://github.com/tokio-rs/tokio/releases) and the [RustSec advisory database](https://github.com/RustSec/advisory-db) (i.e. `cargo-audit`).\n"
        },
        {
          "name": "benches",
          "type": "tree",
          "content": null
        },
        {
          "name": "deny.toml",
          "type": "blob",
          "size": 0.3408203125,
          "content": "# https://embarkstudios.github.io/cargo-deny/cli/init.html\n\n[graph]\nall-features = true\n\n[licenses]\nallow = [\n    \"MIT\",\n    \"Apache-2.0\",\n]\nexceptions = [\n    { allow = [\"Unicode-3.0\", \"Unicode-DFS-2016\"], crate = \"unicode-ident\" },\n]\n\n[bans]\nmultiple-versions = \"allow\"\nwildcards = \"deny\"\n\n[sources]\nunknown-registry = \"deny\"\nunknown-git = \"deny\"\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.365234375,
          "content": "[build]\n  command = \"\"\"\n    rustup install nightly --profile minimal && cargo doc --no-deps --all-features\n    \"\"\"\n  publish = \"target/doc\"\n\n[build.environment]\n  RUSTDOCFLAGS=\"\"\"\n    --cfg docsrs \\\n    --cfg tokio_unstable \\\n    --cfg tokio_taskdump \\\n    \"\"\"\n  RUSTFLAGS=\"--cfg tokio_unstable --cfg tokio_taskdump --cfg docsrs\"\n\n[[redirects]]\n  from = \"/\"\n  to = \"/tokio\"\n"
        },
        {
          "name": "spellcheck.dic",
          "type": "blob",
          "size": 2.2685546875,
          "content": "299\n&\n+\n<\n=\n>\n\\\n~\n—\n0o777\n0s\n0xA\n0xD\n100ms\n100ns\n10ms\n10μs\n~12\n120s\n12.5%\n±1m\n±1ms\n1ms\n1s\n25%\n250ms\n2x\n~4\n443\n450ms\n50ms\n8MB\nABI\naccessors\nadaptor\nadaptors\nAdaptors\nAIO\nambient\namongst\napi\nAPIs\nasync\natomics\nawaitable\nbackend\nbackpressure\nbacktrace\nbacktraces\nbacktracing\nbinded\nbitfield\nbitfields\nBlockingly\nboolean\nbroadcasted\ncancelled\ncancelling\nCancelling\nCLI\ncloneable\ncodebase\ncodec\ncodecs\ncombinator\ncombinators\nconfig\nConfig\nconnectionless\ncoroutines\ncpu\ncpus\nCustomizable\ndatagram\nDatagram\ndatagrams\ndeallocate\ndeallocated\nDeallocates\ndebuginfo\ndecrementing\ndemangled\ndequeued\ndereferenced\nderegister\nderegistered\nderegistering\nderegisters\nDeregisters\nderegistration\ndescriptor's\ndestructor\ndestructors\ndestructure\nDestructures\nDev\ndns\nDNS\nDoS\ndwOpenMode\nendian\nenqueue\nenqueued\nEntryInner\nenum\neof\nErlang's\nerrored\nEWMA\nexpirations\nfcntl\nfd\nfd's\nFIFOs\nfilename\nfilesystem\nfilesystems\nfn\nfns\nFreeBSD\nfrontend\nfs\nfunctionalities\ngetters\nGID\ngoroutines\nGrowable\ngzip\nH2\nhashmaps\nHashMaps\nhashsets\nHdrHistogram\nie\nIllumos\nimpl\nimplementers\nimplementor\nimplementors\nincrementing\ninlining\ninteroperate\ninvariants\nInvariants\nio\nIOCP\niOS\nIOs\nio_uring\nIP\nIPv4\nIPv6\niteratively\nKotlin's\nlatencies\nLauck\nlibc\nlifecycle\nlifo\nlookups\nmacOS\nMacOS\nMarsaglia's\nmetadata\nmio\nMio\nmio's\nmiri\nmisconfigured\nmock's\nmpmc\nmpsc\nmulti\nMulti\nmulticast\nMultithreaded\nmut\nmutex\nMutex\nNagle\nnonblocking\nnondecreasing\nnoop\nntasks\nok\noneshot\nORed\nos\noverweighing\nparker\nparsers\npeekable\nPGID\nPID\nplaintext\npoller\nPOSIX\nproxied\nqos\nRAII\nreallocations\nrecv's\nrefactors\nrefcount\nrefcounting\nrepo\nrepr\nrepresentable\nreqwest\nreregistering\nresize\nresized\nRMW\nruntime\nruntime's\nruntimes\nrwlock\nrx\nscalability\nscheduler's\nsemver\nsetpgid\nsharded\nsignalled\nsignalling\nSmallCrush\nSolaris\nspawner\nSplitter\nspmc\nspsc\nsrc\nstabilised\nstartup\nstateful\nstderr\nstdin\nstdout\nstealable\nstealer\nstealers\nstruct\nstructs\nsubfield\nsuboptimal\nsubprocess\nsuperset\nsymlink\nsymlinks\nsys\nsyscall\nsyscalls\ntcp\nTCP\nTestU01\nthreadpool\ntimestamp\ntimestamps\nTLS\nTOCTOU\nTODO\ntokio\nTokio\ntokio's\nTokio's\ntuple\nTuple\ntx\nudp\nUDP\nUID\nunhandled\nunix\nunlink\nunpark\nUnpark\nunparked\nunparking\nunparks\nUnparks\nunreceived\nunsafety\nunsets\nUnsets\nunsynchronized\nuntrusted\nusecases\nValgrind\nVarghese\nvec\nversa\nversioned\nversioning\nvtable\nwaker\nwakers\nWakers\nwakeup\nwakeups\nworkstealing\n"
        },
        {
          "name": "spellcheck.toml",
          "type": "blob",
          "size": 0.2119140625,
          "content": "dev_comments = false\nskip_readme = false\n\n[Hunspell]\nlang = \"en_US\"\nsearch_dirs = [\".\"]\nextra_dictionaries = [\"spellcheck.dic\"]\nskip_os_lookups = true\nuse_builtin = true\n\n[Hunspell.quirks]\nallow_concatenation = true\n\n"
        },
        {
          "name": "stress-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "target-specs",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests-build",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests-integration",
          "type": "tree",
          "content": null
        },
        {
          "name": "tokio-macros",
          "type": "tree",
          "content": null
        },
        {
          "name": "tokio-stream",
          "type": "tree",
          "content": null
        },
        {
          "name": "tokio-test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tokio-util",
          "type": "tree",
          "content": null
        },
        {
          "name": "tokio",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}