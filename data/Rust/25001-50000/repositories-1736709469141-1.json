{
  "metadata": {
    "timestamp": 1736709469141,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "BurntSushi/ripgrep",
      "stars": 49705,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cargo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.259765625,
          "content": ".*.swp\ntags\ntarget\n/grep/Cargo.lock\n/globset/Cargo.lock\n/ignore/Cargo.lock\n/termcolor/Cargo.lock\n/wincolor/Cargo.lock\n/deployment\n/.idea\n\n# Snapcraft files\nstage\nprime\nparts\n*.snap\n*.pyc\nripgrep*_source.tar.bz2\n\n# Cargo timings\ncargo-timing-*.html\ncargo-timing.html\n"
        },
        {
          "name": ".ignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "!/.github/\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 80.6376953125,
          "content": "TBD\n===\nUnreleased changes. Release notes have not yet been written.\n\n\n14.1.1 (2024-09-08)\n===================\nThis is a minor release with a bug fix for a matching bug. In particular, a bug\nwas found that could cause ripgrep to ignore lines that should match. That is,\nfalse negatives. It is difficult to characterize the specific set of regexes\nin which this occurs as it requires multiple different optimization strategies\nto collide and produce an incorrect result. But as one reported example, in\nripgrep, the regex `(?i:e.x|ex)` does not match `e-x` when it should. (This\nbug is a result of an inner literal optimization performed in the `grep-regex`\ncrate and not in the `regex` crate.)\n\nBug fixes:\n\n* [BUG #2884](https://github.com/BurntSushi/ripgrep/issues/2884):\n  Fix bug where ripgrep could miss some matches that it should report.\n\nMiscellaneous:\n\n* [MISC #2748](https://github.com/BurntSushi/ripgrep/issues/2748):\n  Remove ripgrep's `simd-accel` feature because it was frequently broken.\n\n\n14.1.0 (2024-01-06)\n===================\nThis is a minor release with a few small new features and bug fixes. This\nrelease contains a bug fix for unbounded memory growth while walking a\ndirectory tree. This release also includes improvements to the completions for\nthe `fish` shell, and release binaries for several additional ARM targets.\n\nBug fixes:\n\n* [BUG #2664](https://github.com/BurntSushi/ripgrep/issues/2690):\n  Fix unbounded memory growth in the `ignore` crate.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Lean and Meson.\n* [FEATURE #2684](https://github.com/BurntSushi/ripgrep/issues/2684):\n  Improve completions for the `fish` shell.\n* [FEATURE #2702](https://github.com/BurntSushi/ripgrep/pull/2702):\n  Add release binaries for `armv7-unknown-linux-gnueabihf`,\n  `armv7-unknown-linux-musleabihf` and `armv7-unknown-linux-musleabi`.\n\n\n14.0.3 (2023-11-28)\n===================\nThis is a patch release with a bug fix for the `--sortr` flag.\n\nBug fixes:\n\n* [BUG #2664](https://github.com/BurntSushi/ripgrep/issues/2664):\n  Fix `--sortr=path`. I left a `todo!()` in the source. Oof.\n\n\n14.0.2 (2023-11-27)\n===================\nThis is a patch release with a few small bug fixes.\n\nBug fixes:\n\n* [BUG #2654](https://github.com/BurntSushi/ripgrep/issues/2654):\n  Fix `deb` release sha256 sum file.\n* [BUG #2658](https://github.com/BurntSushi/ripgrep/issues/2658):\n  Fix partial regression in the behavior of `--null-data --line-regexp`.\n* [BUG #2659](https://github.com/BurntSushi/ripgrep/issues/2659):\n  Fix Fish shell completions.\n* [BUG #2662](https://github.com/BurntSushi/ripgrep/issues/2662):\n  Fix typo in documentation for `-i/--ignore-case`.\n\n\n14.0.1 (2023-11-26)\n===================\nThis a patch release meant to fix `cargo install ripgrep` on Windows.\n\nBug fixes:\n\n* [BUG #2653](https://github.com/BurntSushi/ripgrep/issues/2653):\n  Include `pkg/windows/Manifest.xml` in crate package.\n\n\n14.0.0 (2023-11-26)\n===================\nripgrep 14 is a new major version release of ripgrep that has some new\nfeatures, performance improvements and a lot of bug fixes.\n\nThe headlining feature in this release is hyperlink support. In this release,\nthey are an opt-in feature but may change to an opt-out feature in the future.\nTo enable them, try passing `--hyperlink-format default`. If you use [VS Code],\nthen try passing `--hyperlink-format vscode`. Please [report your experience\nwith hyperlinks][report-hyperlinks], positive or negative.\n\n[VS Code]: https://code.visualstudio.com/\n[report-hyperlinks]: https://github.com/BurntSushi/ripgrep/discussions/2611\n\nAnother headlining development in this release is that it contains a rewrite\nof its regex engine. You generally shouldn't notice any changes, except for\nsome searches may get faster. You can read more about the [regex engine rewrite\non my blog][regex-internals]. Please [report your performance improvements or\nregressions that you notice][report-perf].\n\n[report-perf]: https://github.com/BurntSushi/ripgrep/discussions/2652\n\nFinally, ripgrep switched the library it uses for argument parsing. Users\nshould not notice a difference in most cases (error messages have changed\nsomewhat), but flag overrides should generally be more consistent. For example,\nthings like `--no-ignore --ignore-vcs` work as one would expect (disables all\nfiltering related to ignore rules except for rules found in version control\nsystems such as `git`).\n\n[regex-internals]: https://blog.burntsushi.net/regex-internals/\n\n**BREAKING CHANGES**:\n\n* `rg -C1 -A2` used to be equivalent to `rg -A2`, but now it is equivalent to\n  `rg -B1 -A2`. That is, `-A` and `-B` no longer completely override `-C`.\n  Instead, they only partially override `-C`.\n\nBuild process changes:\n\n* ripgrep's shell completions and man page are now created by running ripgrep\nwith a new `--generate` flag. For example, `rg --generate man` will write a\nman page in `roff` format on stdout. The release archives have not changed.\n* The optional build dependency on `asciidoc` or `asciidoctor` has been\ndropped. Previously, it was used to produce ripgrep's man page. ripgrep now\nowns this process itself by writing `roff` directly.\n\nPerformance improvements:\n\n* [PERF #1746](https://github.com/BurntSushi/ripgrep/issues/1746):\n  Make some cases with inner literals faster.\n* [PERF #1760](https://github.com/BurntSushi/ripgrep/issues/1760):\n  Make most searches with `\\b` look-arounds (among others) much faster.\n* [PERF #2591](https://github.com/BurntSushi/ripgrep/pull/2591):\n  Parallel directory traversal now uses work stealing for faster searches.\n* [PERF #2642](https://github.com/BurntSushi/ripgrep/pull/2642):\n  Parallel directory traversal has some contention reduced.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Ada, DITA, Elixir, Fuchsia, Gentoo,\n  Gradle, GraphQL, Markdown, Prolog, Raku, TypeScript, USD, V\n* [FEATURE #665](https://github.com/BurntSushi/ripgrep/issues/665):\n  Add a new `--hyperlink-format` flag that turns file paths into hyperlinks.\n* [FEATURE #1709](https://github.com/BurntSushi/ripgrep/issues/1709):\n  Improve documentation of ripgrep's behavior when stdout is a tty.\n* [FEATURE #1737](https://github.com/BurntSushi/ripgrep/issues/1737):\n  Provide binaries for Apple silicon.\n* [FEATURE #1790](https://github.com/BurntSushi/ripgrep/issues/1790):\n  Add new `--stop-on-nonmatch` flag.\n* [FEATURE #1814](https://github.com/BurntSushi/ripgrep/issues/1814):\n  Flags are now categorized in `-h/--help` output and ripgrep's man page.\n* [FEATURE #1838](https://github.com/BurntSushi/ripgrep/issues/1838):\n  An error is shown when searching for NUL bytes with binary detection enabled.\n* [FEATURE #2195](https://github.com/BurntSushi/ripgrep/issues/2195):\n  When `extra-verbose` mode is enabled in zsh, show extra file type info.\n* [FEATURE #2298](https://github.com/BurntSushi/ripgrep/issues/2298):\n  Add instructions for installing ripgrep using `cargo binstall`.\n* [FEATURE #2409](https://github.com/BurntSushi/ripgrep/pull/2409):\n  Added installation instructions for `winget`.\n* [FEATURE #2425](https://github.com/BurntSushi/ripgrep/pull/2425):\n  Shell completions (and man page) can be created via `rg --generate`.\n* [FEATURE #2524](https://github.com/BurntSushi/ripgrep/issues/2524):\n  The `--debug` flag now indicates whether stdin or `./` is being searched.\n* [FEATURE #2643](https://github.com/BurntSushi/ripgrep/issues/2643):\n  Make `-d` a short flag for `--max-depth`.\n* [FEATURE #2645](https://github.com/BurntSushi/ripgrep/issues/2645):\n  The `--version` output will now also contain PCRE2 availability information.\n\nBug fixes:\n\n* [BUG #884](https://github.com/BurntSushi/ripgrep/issues/884):\n  Don't error when `-v/--invert-match` is used multiple times.\n* [BUG #1275](https://github.com/BurntSushi/ripgrep/issues/1275):\n  Fix bug with `\\b` assertion in the regex engine.\n* [BUG #1376](https://github.com/BurntSushi/ripgrep/issues/1376):\n  Using `--no-ignore --ignore-vcs` now works as one would expect.\n* [BUG #1622](https://github.com/BurntSushi/ripgrep/issues/1622):\n  Add note about error messages to `-z/--search-zip` documentation.\n* [BUG #1648](https://github.com/BurntSushi/ripgrep/issues/1648):\n  Fix bug where sometimes short flags with values, e.g., `-M 900`, would fail.\n* [BUG #1701](https://github.com/BurntSushi/ripgrep/issues/1701):\n  Fix bug where some flags could not be repeated.\n* [BUG #1757](https://github.com/BurntSushi/ripgrep/issues/1757):\n  Fix bug when searching a sub-directory didn't have ignores applied correctly.\n* [BUG #1891](https://github.com/BurntSushi/ripgrep/issues/1891):\n  Fix bug when using `-w` with a regex that can match the empty string.\n* [BUG #1911](https://github.com/BurntSushi/ripgrep/issues/1911):\n  Disable mmap searching in all non-64-bit environments.\n* [BUG #1966](https://github.com/BurntSushi/ripgrep/issues/1966):\n  Fix bug where ripgrep can panic when printing to stderr.\n* [BUG #2046](https://github.com/BurntSushi/ripgrep/issues/2046):\n  Clarify that `--pre` can accept any kind of path in the documentation.\n* [BUG #2108](https://github.com/BurntSushi/ripgrep/issues/2108):\n  Improve docs for `-r/--replace` syntax.\n* [BUG #2198](https://github.com/BurntSushi/ripgrep/issues/2198):\n  Fix bug where `--no-ignore-dot` would not ignore `.rgignore`.\n* [BUG #2201](https://github.com/BurntSushi/ripgrep/issues/2201):\n  Improve docs for `-r/--replace` flag.\n* [BUG #2288](https://github.com/BurntSushi/ripgrep/issues/2288):\n  `-A` and `-B` now only each partially override `-C`.\n* [BUG #2236](https://github.com/BurntSushi/ripgrep/issues/2236):\n  Fix gitignore parsing bug where a trailing `\\/` resulted in an error.\n* [BUG #2243](https://github.com/BurntSushi/ripgrep/issues/2243):\n  Fix `--sort` flag for values other than `path`.\n* [BUG #2246](https://github.com/BurntSushi/ripgrep/issues/2246):\n  Add note in `--debug` logs when binary files are ignored.\n* [BUG #2337](https://github.com/BurntSushi/ripgrep/issues/2337):\n  Improve docs to mention that `--stats` is always implied by `--json`.\n* [BUG #2381](https://github.com/BurntSushi/ripgrep/issues/2381):\n  Make `-p/--pretty` override flags like `--no-line-number`.\n* [BUG #2392](https://github.com/BurntSushi/ripgrep/issues/2392):\n  Improve global git config parsing of the `excludesFile` field.\n* [BUG #2418](https://github.com/BurntSushi/ripgrep/pull/2418):\n  Clarify sorting semantics of `--sort=path`.\n* [BUG #2458](https://github.com/BurntSushi/ripgrep/pull/2458):\n  Make `--trim` run before `-M/--max-columns` takes effect.\n* [BUG #2479](https://github.com/BurntSushi/ripgrep/issues/2479):\n  Add documentation about `.ignore`/`.rgignore` files in parent directories.\n* [BUG #2480](https://github.com/BurntSushi/ripgrep/issues/2480):\n  Fix bug when using inline regex flags with `-e/--regexp`.\n* [BUG #2505](https://github.com/BurntSushi/ripgrep/issues/2505):\n  Improve docs for `--vimgrep` by mentioning footguns and some work-arounds.\n* [BUG #2519](https://github.com/BurntSushi/ripgrep/issues/2519):\n  Fix incorrect default value in documentation for `--field-match-separator`.\n* [BUG #2523](https://github.com/BurntSushi/ripgrep/issues/2523):\n  Make executable searching take `.com` into account on Windows.\n* [BUG #2574](https://github.com/BurntSushi/ripgrep/issues/2574):\n  Fix bug in `-w/--word-regexp` that would result in incorrect match offsets.\n* [BUG #2623](https://github.com/BurntSushi/ripgrep/issues/2623):\n  Fix a number of bugs with the `-w/--word-regexp` flag.\n* [BUG #2636](https://github.com/BurntSushi/ripgrep/pull/2636):\n  Strip release binaries for macOS.\n\n\n13.0.0 (2021-06-12)\n===================\nripgrep 13 is a new major version release of ripgrep that primarily contains\nbug fixes, some performance improvements and a few minor breaking changes.\nThere is also a fix for a security vulnerability on Windows\n([CVE-2021-3013](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3013)).\n\nSome highlights:\n\nA new short flag, `-.`, has been added. It is an alias for the `--hidden` flag,\nwhich instructs ripgrep to search hidden files and directories.\n\nripgrep is now using a new\n[vectorized implementation of `memmem`](https://github.com/BurntSushi/memchr/pull/82),\nwhich accelerates many common searches. If you notice any performance\nregressions (or major improvements), I'd love to hear about them through an\nissue report!\n\nAlso, for Windows users targeting MSVC, Cargo will now build fully static\nexecutables of ripgrep. The release binaries for ripgrep 13 have been compiled\nusing this configuration.\n\n**BREAKING CHANGES**:\n\n**Binary detection output has changed slightly.**\n\nIn this release, a small tweak has been made to the output format when a binary\nfile is detected. Previously, it looked like this:\n\n```\nBinary file FOO matches (found \"\\0\" byte around offset XXX)\n```\n\nNow it looks like this:\n\n```\nFOO: binary file matches (found \"\\0\" byte around offset XXX)\n```\n\n**vimgrep output in multi-line now only prints the first line for each match.**\n\nSee [issue 1866](https://github.com/BurntSushi/ripgrep/issues/1866) for more\ndiscussion on this. Previously, every line in a match was duplicated, even\nwhen it spanned multiple lines. There are no changes to vimgrep output when\nmulti-line mode is disabled.\n\n**In multi-line mode, --count is now equivalent to --count-matches.**\n\nThis appears to match how `pcre2grep` implements `--count`. Previously, ripgrep\nwould produce outright incorrect counts. Another alternative would be to simply\ncount the number of lines---even if it's more than the number of matches---but\nthat seems highly unintuitive.\n\n**FULL LIST OF FIXES AND IMPROVEMENTS:**\n\nSecurity fixes:\n\n* [CVE-2021-3013](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3013):\n  Fixes a security hole on Windows where running ripgrep with either the\n  `-z/--search-zip` or `--pre` flags can result in running arbitrary\n  executables from the current directory.\n* [VULN #1773](https://github.com/BurntSushi/ripgrep/issues/1773):\n  This is the public facing issue tracking CVE-2021-3013. ripgrep's README\n  now contains a section describing how to report a vulnerability.\n\nPerformance improvements:\n\n* [PERF #1657](https://github.com/BurntSushi/ripgrep/discussions/1657):\n  Check if a file should be ignored first before issuing stat calls.\n* [PERF memchr#82](https://github.com/BurntSushi/memchr/pull/82):\n  ripgrep now uses a new vectorized implementation of `memmem`.\n\nFeature enhancements:\n\n* Added or improved file type filtering for ASP, Bazel, dvc, FlatBuffers,\n  Futhark, minified files, Mint, pofiles (from GNU gettext) Racket, Red, Ruby,\n  VCL, Yang.\n* [FEATURE #1404](https://github.com/BurntSushi/ripgrep/pull/1404):\n  ripgrep now prints a warning if nothing is searched.\n* [FEATURE #1613](https://github.com/BurntSushi/ripgrep/pull/1613):\n  Cargo will now produce static executables on Windows when using MSVC.\n* [FEATURE #1680](https://github.com/BurntSushi/ripgrep/pull/1680):\n  Add `-.` as a short flag alias for `--hidden`.\n* [FEATURE #1842](https://github.com/BurntSushi/ripgrep/issues/1842):\n  Add `--field-{context,match}-separator` for customizing field delimiters.\n* [FEATURE #1856](https://github.com/BurntSushi/ripgrep/pull/1856):\n  The README now links to a\n  [Spanish translation](https://github.com/UltiRequiem/traducciones/tree/master/ripgrep).\n\nBug fixes:\n\n* [BUG #1277](https://github.com/BurntSushi/ripgrep/issues/1277):\n  Document cygwin path translation behavior in the FAQ.\n* [BUG #1739](https://github.com/BurntSushi/ripgrep/issues/1739):\n  Fix bug where replacements were buggy if the regex matched a line terminator.\n* [BUG #1311](https://github.com/BurntSushi/ripgrep/issues/1311):\n  Fix multi-line bug where a search & replace for `\\n` didn't work as expected.\n* [BUG #1401](https://github.com/BurntSushi/ripgrep/issues/1401):\n  Fix buggy interaction between PCRE2 look-around and `-o/--only-matching`.\n* [BUG #1412](https://github.com/BurntSushi/ripgrep/issues/1412):\n  Fix multi-line bug with searches using look-around past matching lines.\n* [BUG #1577](https://github.com/BurntSushi/ripgrep/issues/1577):\n  Fish shell completions will continue to be auto-generated.\n* [BUG #1642](https://github.com/BurntSushi/ripgrep/issues/1642):\n  Fixes a bug where using `-m` and `-A` printed more matches than the limit.\n* [BUG #1703](https://github.com/BurntSushi/ripgrep/issues/1703):\n  Clarify the function of `-u/--unrestricted`.\n* [BUG #1708](https://github.com/BurntSushi/ripgrep/issues/1708):\n  Clarify how `-S/--smart-case` works.\n* [BUG #1730](https://github.com/BurntSushi/ripgrep/issues/1730):\n  Clarify that CLI invocation must always be valid, regardless of config file.\n* [BUG #1741](https://github.com/BurntSushi/ripgrep/issues/1741):\n  Fix stdin detection when using PowerShell in UNIX environments.\n* [BUG #1756](https://github.com/BurntSushi/ripgrep/pull/1756):\n  Fix bug where `foo/**` would match `foo`, but it shouldn't.\n* [BUG #1765](https://github.com/BurntSushi/ripgrep/issues/1765):\n  Fix panic when `--crlf` is used in some cases.\n* [BUG #1638](https://github.com/BurntSushi/ripgrep/issues/1638):\n  Correctly sniff UTF-8 and do transcoding, like we do for UTF-16.\n* [BUG #1816](https://github.com/BurntSushi/ripgrep/issues/1816):\n  Add documentation for glob alternate syntax, e.g., `{a,b,..}`.\n* [BUG #1847](https://github.com/BurntSushi/ripgrep/issues/1847):\n  Clarify how the `--hidden` flag works.\n* [BUG #1866](https://github.com/BurntSushi/ripgrep/issues/1866#issuecomment-841635553):\n  Fix bug when computing column numbers in `--vimgrep` mode.\n* [BUG #1868](https://github.com/BurntSushi/ripgrep/issues/1868):\n  Fix bug where `--passthru` and `-A/-B/-C` did not override each other.\n* [BUG #1869](https://github.com/BurntSushi/ripgrep/pull/1869):\n  Clarify docs for `--files-with-matches` and `--files-without-match`.\n* [BUG #1878](https://github.com/BurntSushi/ripgrep/issues/1878):\n  Fix bug where `\\A` could produce unanchored matches in multiline search.\n* [BUG 94e4b8e3](https://github.com/BurntSushi/ripgrep/commit/94e4b8e3):\n  Fix column numbers with `--vimgrep` is used with `-U/--multiline`.\n\n\n12.1.1 (2020-05-29)\n===================\nripgrep 12.1.1 is a patch release that fixes a couple small bugs. In\nparticular, the ripgrep 12.1.0 release did not tag new releases for all of its\nin-tree dependencies. As a result, ripgrep built dependencies from crates.io\nwould produce a different build than compiling ripgrep from source on the\n`12.1.0` tag. Namely, some crates like `grep-cli` had unreleased changes.\n\nBug fixes:\n\n* [BUG #1581](https://github.com/BurntSushi/ripgrep/issues/1581):\n  Corrects some egregious markup output in `--help`.\n* [BUG #1591](https://github.com/BurntSushi/ripgrep/issues/1591):\n  Mention the special `$0` capture group in docs for the `-r/--replace` flag.\n* [BUG #1602](https://github.com/BurntSushi/ripgrep/issues/1602):\n  Fix failing test resulting from out-of-sync dependencies.\n\n\n12.1.0 (2020-05-09)\n===================\nripgrep 12.1.0 is a small minor version release that mostly includes bug fixes\nand documentation improvements. This release also contains some important\nnotices for downstream packagers.\n\n**Notices for downstream ripgrep package maintainers:**\n\n* Fish shell completions will be removed in the ripgrep 13 release.\n  See [#1577](https://github.com/BurntSushi/ripgrep/issues/1577)\n  for more details.\n* ripgrep has switched from `a2x` to `asciidoctor` to generate the man page.\n  If `asciidoctor` is not present, then ripgrep will currently fall back to\n  `a2x`. Support for `a2x` will be dropped in the ripgrep 13 release.\n  See [#1544](https://github.com/BurntSushi/ripgrep/issues/1544)\n  for more details.\n\nFeature enhancements:\n\n* [FEATURE #1547](https://github.com/BurntSushi/ripgrep/pull/1547):\n  Support decompressing `.Z` files via `uncompress`.\n\nBug fixes:\n\n* [BUG #1252](https://github.com/BurntSushi/ripgrep/issues/1252):\n  Add a section on the `--pre` flag to the GUIDE.\n* [BUG #1339](https://github.com/BurntSushi/ripgrep/issues/1339):\n  Improve error message when a pattern with invalid UTF-8 is provided.\n* [BUG #1524](https://github.com/BurntSushi/ripgrep/issues/1524):\n  Note how to escape a `$` when using `--replace`.\n* [BUG #1537](https://github.com/BurntSushi/ripgrep/issues/1537):\n  Fix match bug caused by inner literal optimization.\n* [BUG #1544](https://github.com/BurntSushi/ripgrep/issues/1544):\n  ripgrep now uses `asciidoctor` instead of `a2x` to generate its man page.\n* [BUG #1550](https://github.com/BurntSushi/ripgrep/issues/1550):\n  Substantially reduce peak memory usage when searching wide directories.\n* [BUG #1571](https://github.com/BurntSushi/ripgrep/issues/1571):\n  Add note about configuration files in `--type-{add,clear}` docs.\n* [BUG #1573](https://github.com/BurntSushi/ripgrep/issues/1573):\n  Fix incorrect `--count-matches` output when using look-around.\n\n\n12.0.1 (2020-03-29)\n===================\nripgrep 12.0.1 is a small patch release that includes a minor bug fix relating\nto superfluous error messages when searching git repositories with sub-modules.\nThis was a regression introduced in the 12.0.0 release.\n\nBug fixes:\n\n* [BUG #1520](https://github.com/BurntSushi/ripgrep/issues/1520):\n  Don't emit spurious error messages in git repositories with submodules.\n\n\n12.0.0 (2020-03-15)\n===================\nripgrep 12 is a new major version release of ripgrep that contains many bug\nfixes, several important performance improvements and a few minor new features.\n\nIn a near future release, I am hoping to add an\n[indexing feature](https://github.com/BurntSushi/ripgrep/issues/1497)\nto ripgrep, which will dramatically speed up searching by building an index.\nFeedback would very much be appreciated, especially on the user experience\nwhich will be difficult to get right.\n\nThis release has no known breaking changes.\n\nDeprecations:\n\n* The `--no-pcre2-unicode` flag is deprecated. Instead, use the `--no-unicode`\n  flag, which applies to both the default regex engine and PCRE2. For now,\n  `--no-pcre2-unicode` and `--pcre2-unicode` are aliases to `--no-unicode`\n  and `--unicode`, respectively. The `--[no-]pcre2-unicode` flags may be\n  removed in a future release.\n* The `--auto-hybrid-regex` flag is deprecated. Instead, use the new `--engine`\n  flag with the `auto` value.\n\nPerformance improvements:\n\n* [PERF #1087](https://github.com/BurntSushi/ripgrep/pull/1087):\n  ripgrep is smarter when detected literals are whitespace.\n* [PERF #1381](https://github.com/BurntSushi/ripgrep/pull/1381):\n  Directory traversal is sped up with speculative ignore-file existence checks.\n* [PERF cd8ec38a](https://github.com/BurntSushi/ripgrep/commit/cd8ec38a):\n  Improve inner literal detection to cover more cases more effectively.\n  e.g., ` +Sherlock Holmes +` now has ` Sherlock Holmes ` extracted instead\n  of ` `.\n* [PERF 6a0e0147](https://github.com/BurntSushi/ripgrep/commit/6a0e0147):\n  Improve literal detection when the `-w/--word-regexp` flag is used.\n* [PERF ad97e9c9](https://github.com/BurntSushi/ripgrep/commit/ad97e9c9):\n  Improve overall performance of the `-w/--word-regexp` flag.\n\nFeature enhancements:\n\n* Added or improved file type filtering for erb, diff, Gradle, HAML, Org,\n  Postscript, Skim, Slim, Slime, RPM Spec files, Typoscript, xml.\n* [FEATURE #1370](https://github.com/BurntSushi/ripgrep/pull/1370):\n  Add `--include-zero` flag that shows files searched without matches.\n* [FEATURE #1390](https://github.com/BurntSushi/ripgrep/pull/1390):\n  Add `--no-context-separator` flag that always hides context separators.\n* [FEATURE #1414](https://github.com/BurntSushi/ripgrep/pull/1414):\n  Add `--no-require-git` flag to allow ripgrep to respect gitignores anywhere.\n* [FEATURE #1420](https://github.com/BurntSushi/ripgrep/pull/1420):\n  Add `--no-ignore-exclude` to disregard rules in `.git/info/exclude` files.\n* [FEATURE #1466](https://github.com/BurntSushi/ripgrep/pull/1466):\n  Add `--no-ignore-files` flag to disable all `--ignore-file` flags.\n* [FEATURE #1488](https://github.com/BurntSushi/ripgrep/pull/1488):\n  Add '--engine' flag for easier switching between regex engines.\n* [FEATURE 75cbe88f](https://github.com/BurntSushi/ripgrep/commit/75cbe88f):\n  Add `--no-unicode` flag. This works on all supported regex engines.\n\nBug fixes:\n\n* [BUG #1291](https://github.com/BurntSushi/ripgrep/issues/1291):\n  ripgrep now works in non-existent directories.\n* [BUG #1319](https://github.com/BurntSushi/ripgrep/issues/1319):\n  Fix match bug due to errant literal detection.\n* [**BUG #1335**](https://github.com/BurntSushi/ripgrep/issues/1335):\n  Fixes a performance bug when searching plain text files with very long lines.\n  This was a serious performance regression in some cases.\n* [BUG #1344](https://github.com/BurntSushi/ripgrep/issues/1344):\n  Document usage of `--type all`.\n* [BUG #1389](https://github.com/BurntSushi/ripgrep/issues/1389):\n  Fixes a bug where ripgrep would panic when searching a symlinked directory.\n* [BUG #1439](https://github.com/BurntSushi/ripgrep/issues/1439):\n  Improve documentation for ripgrep's automatic stdin detection.\n* [BUG #1441](https://github.com/BurntSushi/ripgrep/issues/1441):\n  Remove CPU features from man page.\n* [BUG #1442](https://github.com/BurntSushi/ripgrep/issues/1442),\n  [BUG #1478](https://github.com/BurntSushi/ripgrep/issues/1478):\n  Improve documentation of the `-g/--glob` flag.\n* [BUG #1445](https://github.com/BurntSushi/ripgrep/issues/1445):\n  ripgrep now respects ignore rules from .git/info/exclude in worktrees.\n* [BUG #1485](https://github.com/BurntSushi/ripgrep/issues/1485):\n  Fish shell completions from the release Debian package are now installed to\n  `/usr/share/fish/vendor_completions.d/rg.fish`.\n\n\n11.0.2 (2019-08-01)\n===================\nripgrep 11.0.2 is a new patch release that fixes a few bugs, including a\nperformance regression and a matching bug when using the `-F/--fixed-strings`\nflag.\n\nFeature enhancements:\n\n* [FEATURE #1293](https://github.com/BurntSushi/ripgrep/issues/1293):\n  Added `--glob-case-insensitive` flag that makes `--glob` behave as `--iglob`.\n\nBug fixes:\n\n* [BUG #1246](https://github.com/BurntSushi/ripgrep/issues/1246):\n  Add translations to README, starting with an unofficial Chinese translation.\n* [BUG #1259](https://github.com/BurntSushi/ripgrep/issues/1259):\n  Fix bug where the last byte of a `-f file` was stripped if it wasn't a `\\n`.\n* [BUG #1261](https://github.com/BurntSushi/ripgrep/issues/1261):\n  Document that no error is reported when searching for `\\n` with `-P/--pcre2`.\n* [BUG #1284](https://github.com/BurntSushi/ripgrep/issues/1284):\n  Mention `.ignore` and `.rgignore` more prominently in the README.\n* [BUG #1292](https://github.com/BurntSushi/ripgrep/issues/1292):\n  Fix bug where `--with-filename` was sometimes enabled incorrectly.\n* [BUG #1268](https://github.com/BurntSushi/ripgrep/issues/1268):\n  Fix major performance regression in GitHub `x86_64-linux` binary release.\n* [BUG #1302](https://github.com/BurntSushi/ripgrep/issues/1302):\n  Show better error messages when a non-existent preprocessor command is given.\n* [BUG #1334](https://github.com/BurntSushi/ripgrep/issues/1334):\n  Fix match regression with `-F` flag when patterns contain meta characters.\n\n\n11.0.1 (2019-04-16)\n===================\nripgrep 11.0.1 is a new patch release that fixes a search regression introduced\nin the previous 11.0.0 release. In particular, ripgrep can enter an infinite\nloop for some search patterns when searching invalid UTF-8.\n\nBug fixes:\n\n* [BUG #1247](https://github.com/BurntSushi/ripgrep/issues/1247):\n  Fix search bug that can cause ripgrep to enter an infinite loop.\n\n\n11.0.0 (2019-04-15)\n===================\nripgrep 11 is a new major version release of ripgrep that contains many bug\nfixes, some performance improvements and a few feature enhancements. Notably,\nripgrep's user experience for binary file filtering has been improved. See the\n[guide's new section on binary data](GUIDE.md#binary-data) for more details.\n\nThis release also marks a change in ripgrep's versioning. Where as the previous\nversion was `0.10.0`, this version is `11.0.0`. Moving forward, ripgrep's\nmajor version will be increased a few times per year. ripgrep will continue to\nbe conservative with respect to backwards compatibility, but may occasionally\nintroduce breaking changes, which will always be documented in this CHANGELOG.\nSee [issue 1172](https://github.com/BurntSushi/ripgrep/issues/1172) for a bit\nmore detail on why this versioning change was made.\n\nThis release increases the **minimum supported Rust version** from 1.28.0 to\n1.34.0.\n\n**BREAKING CHANGES**:\n\n* ripgrep has tweaked its exit status codes to be more like GNU grep's. Namely,\n  if a non-fatal error occurs during a search, then ripgrep will now always\n  emit a `2` exit status code, regardless of whether a match is found or not.\n  Previously, ripgrep would only emit a `2` exit status code for a catastrophic\n  error (e.g., regex syntax error). One exception to this is if ripgrep is run\n  with `-q/--quiet`. In that case, if an error occurs and a match is found,\n  then ripgrep will exit with a `0` exit status code.\n* Supplying the `-u/--unrestricted` flag three times is now equivalent to\n  supplying `--no-ignore --hidden --binary`. Previously, `-uuu` was equivalent\n  to `--no-ignore --hidden --text`. The difference is that `--binary` disables\n  binary file filtering without potentially dumping binary data into your\n  terminal. That is, `rg -uuu foo` should now be equivalent to `grep -r foo`.\n* The `avx-accel` feature of ripgrep has been removed since it is no longer\n  necessary. All uses of AVX in ripgrep are now enabled automatically via\n  runtime CPU feature detection. The `simd-accel` feature does remain available\n  (only for enabling SIMD for transcoding), however, it does increase\n  compilation times substantially at the moment.\n\nPerformance improvements:\n\n* [PERF #497](https://github.com/BurntSushi/ripgrep/issues/497),\n  [PERF #838](https://github.com/BurntSushi/ripgrep/issues/838):\n  Make `rg -F -f dictionary-of-literals` much faster.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Apache Thrift, ASP, Bazel, Brotli,\n  BuildStream, bzip2, C, C++, Cython, gzip, Java, Make, Postscript, QML, Tex,\n  XML, xz, zig and zstd.\n* [FEATURE #855](https://github.com/BurntSushi/ripgrep/issues/855):\n  Add `--binary` flag for disabling binary file filtering.\n* [FEATURE #1078](https://github.com/BurntSushi/ripgrep/pull/1078):\n  Add `--max-columns-preview` flag for showing a preview of long lines.\n* [FEATURE #1099](https://github.com/BurntSushi/ripgrep/pull/1099):\n  Add support for Brotli and Zstd to the `-z/--search-zip` flag.\n* [FEATURE #1138](https://github.com/BurntSushi/ripgrep/pull/1138):\n  Add `--no-ignore-dot` flag for ignoring `.ignore` files.\n* [FEATURE #1155](https://github.com/BurntSushi/ripgrep/pull/1155):\n  Add `--auto-hybrid-regex` flag for automatically falling back to PCRE2.\n* [FEATURE #1159](https://github.com/BurntSushi/ripgrep/pull/1159):\n  ripgrep's exit status logic should now match GNU grep. See updated man page.\n* [FEATURE #1164](https://github.com/BurntSushi/ripgrep/pull/1164):\n  Add `--ignore-file-case-insensitive` for case insensitive ignore globs.\n* [FEATURE #1185](https://github.com/BurntSushi/ripgrep/pull/1185):\n  Add `-I` flag as a short option for the `--no-filename` flag.\n* [FEATURE #1207](https://github.com/BurntSushi/ripgrep/pull/1207):\n  Add `none` value to `-E/--encoding` to forcefully disable all transcoding.\n* [FEATURE da9d7204](https://github.com/BurntSushi/ripgrep/commit/da9d7204):\n  Add `--pcre2-version` for querying showing PCRE2 version information.\n\nBug fixes:\n\n* [BUG #306](https://github.com/BurntSushi/ripgrep/issues/306),\n  [BUG #855](https://github.com/BurntSushi/ripgrep/issues/855):\n  Improve the user experience for ripgrep's binary file filtering.\n* [BUG #373](https://github.com/BurntSushi/ripgrep/issues/373),\n  [BUG #1098](https://github.com/BurntSushi/ripgrep/issues/1098):\n  `**` is now accepted as valid syntax anywhere in a glob.\n* [BUG #916](https://github.com/BurntSushi/ripgrep/issues/916):\n  ripgrep no longer hangs when searching `/proc` with a zombie process present.\n* [BUG #1052](https://github.com/BurntSushi/ripgrep/issues/1052):\n  Fix bug where ripgrep could panic when transcoding UTF-16 files.\n* [BUG #1055](https://github.com/BurntSushi/ripgrep/issues/1055):\n  Suggest `-U/--multiline` when a pattern contains a `\\n`.\n* [BUG #1063](https://github.com/BurntSushi/ripgrep/issues/1063):\n  Always strip a BOM if it's present, even for UTF-8.\n* [BUG #1064](https://github.com/BurntSushi/ripgrep/issues/1064):\n  Fix inner literal detection that could lead to incorrect matches.\n* [BUG #1079](https://github.com/BurntSushi/ripgrep/issues/1079):\n  Fixes a bug where the order of globs could result in missing a match.\n* [BUG #1089](https://github.com/BurntSushi/ripgrep/issues/1089):\n  Fix another bug where ripgrep could panic when transcoding UTF-16 files.\n* [BUG #1091](https://github.com/BurntSushi/ripgrep/issues/1091):\n  Add note about inverted flags to the man page.\n* [BUG #1093](https://github.com/BurntSushi/ripgrep/pull/1093):\n  Fix handling of literal slashes in gitignore patterns.\n* [BUG #1095](https://github.com/BurntSushi/ripgrep/issues/1095):\n  Fix corner cases involving the `--crlf` flag.\n* [BUG #1101](https://github.com/BurntSushi/ripgrep/issues/1101):\n  Fix AsciiDoc escaping for man page output.\n* [BUG #1103](https://github.com/BurntSushi/ripgrep/issues/1103):\n  Clarify what `--encoding auto` does.\n* [BUG #1106](https://github.com/BurntSushi/ripgrep/issues/1106):\n  `--files-with-matches` and `--files-without-match` work with one file.\n* [BUG #1121](https://github.com/BurntSushi/ripgrep/issues/1121):\n  Fix bug that was triggering Windows antimalware when using the `--files`\n  flag.\n* [BUG #1125](https://github.com/BurntSushi/ripgrep/issues/1125),\n  [BUG #1159](https://github.com/BurntSushi/ripgrep/issues/1159):\n  ripgrep shouldn't panic for `rg -h | rg` and should emit correct exit status.\n* [BUG #1144](https://github.com/BurntSushi/ripgrep/issues/1144):\n  Fixes a bug where line numbers could be wrong on big-endian machines.\n* [BUG #1154](https://github.com/BurntSushi/ripgrep/issues/1154):\n  Windows files with \"hidden\" attribute are now treated as hidden.\n* [BUG #1173](https://github.com/BurntSushi/ripgrep/issues/1173):\n  Fix handling of `**` patterns in gitignore files.\n* [BUG #1174](https://github.com/BurntSushi/ripgrep/issues/1174):\n  Fix handling of repeated `**` patterns in gitignore files.\n* [BUG #1176](https://github.com/BurntSushi/ripgrep/issues/1176):\n  Fix bug where `-F`/`-x` weren't applied to patterns given via `-f`.\n* [BUG #1189](https://github.com/BurntSushi/ripgrep/issues/1189):\n  Document cases where ripgrep may use a lot of memory.\n* [BUG #1203](https://github.com/BurntSushi/ripgrep/issues/1203):\n  Fix a matching bug related to the suffix literal optimization.\n* [BUG 8f14cb18](https://github.com/BurntSushi/ripgrep/commit/8f14cb18):\n  Increase the default stack size for PCRE2's JIT.\n\n\n0.10.0 (2018-09-07)\n===================\nThis is a new minor version release of ripgrep that contains some major new\nfeatures, a huge number of bug fixes, and is the first release based on\nlibripgrep. The entirety of ripgrep's core search and printing code has been\nrewritten and generalized so that anyone can make use of it.\n\nMajor new features include PCRE2 support, multi-line search and a JSON output\nformat.\n\n**BREAKING CHANGES**:\n\n* The minimum version required to compile Rust has now changed to track the\n  latest stable version of Rust. Patch releases will continue to compile with\n  the same version of Rust as the previous patch release, but new minor\n  versions will use the current stable version of the Rust compile as its\n  minimum supported version.\n* The match semantics of `-w/--word-regexp` have changed slightly. They used\n  to be `\\b(?:<your pattern>)\\b`, but now it's\n  `(?:^|\\W)(?:<your pattern>)(?:$|\\W)`. This matches the behavior of GNU grep\n  and is believed to be closer to the intended semantics of the flag. See\n  [#389](https://github.com/BurntSushi/ripgrep/issues/389) for more details.\n\nFeature enhancements:\n\n* [FEATURE #162](https://github.com/BurntSushi/ripgrep/issues/162):\n  libripgrep is now a thing. The primary crate is\n  [`grep`](https://docs.rs/grep).\n* [FEATURE #176](https://github.com/BurntSushi/ripgrep/issues/176):\n  Add `-U/--multiline` flag that permits matching over multiple lines.\n* [FEATURE #188](https://github.com/BurntSushi/ripgrep/issues/188):\n  Add `-P/--pcre2` flag that gives support for look-around and backreferences.\n* [FEATURE #244](https://github.com/BurntSushi/ripgrep/issues/244):\n  Add `--json` flag that prints results in a JSON Lines format.\n* [FEATURE #321](https://github.com/BurntSushi/ripgrep/issues/321):\n  Add `--one-file-system` flag to skip directories on different file systems.\n* [FEATURE #404](https://github.com/BurntSushi/ripgrep/issues/404):\n  Add `--sort` and `--sortr` flag for more sorting. Deprecate `--sort-files`.\n* [FEATURE #416](https://github.com/BurntSushi/ripgrep/issues/416):\n  Add `--crlf` flag to permit `$` to work with carriage returns on Windows.\n* [FEATURE #917](https://github.com/BurntSushi/ripgrep/issues/917):\n  The `--trim` flag strips prefix whitespace from all lines printed.\n* [FEATURE #993](https://github.com/BurntSushi/ripgrep/issues/993):\n  Add `--null-data` flag, which makes ripgrep use NUL as a line terminator.\n* [FEATURE #997](https://github.com/BurntSushi/ripgrep/issues/997):\n  The `--passthru` flag now works with the `--replace` flag.\n* [FEATURE #1038-1](https://github.com/BurntSushi/ripgrep/issues/1038):\n  Add `--line-buffered` and `--block-buffered` for forcing a buffer strategy.\n* [FEATURE #1038-2](https://github.com/BurntSushi/ripgrep/issues/1038):\n  Add `--pre-glob` for filtering files through the `--pre` flag.\n\nBug fixes:\n\n* [BUG #2](https://github.com/BurntSushi/ripgrep/issues/2):\n  Searching with non-zero context can now use memory maps if appropriate.\n* [BUG #200](https://github.com/BurntSushi/ripgrep/issues/200):\n  ripgrep will now stop correctly when its output pipe is closed.\n* [BUG #389](https://github.com/BurntSushi/ripgrep/issues/389):\n  The `-w/--word-regexp` flag now works more intuitively.\n* [BUG #643](https://github.com/BurntSushi/ripgrep/issues/643):\n  Detection of readable stdin has improved on Windows.\n* [BUG #441](https://github.com/BurntSushi/ripgrep/issues/441),\n  [BUG #690](https://github.com/BurntSushi/ripgrep/issues/690),\n  [BUG #980](https://github.com/BurntSushi/ripgrep/issues/980):\n  Matching empty lines now works correctly in several corner cases.\n* [BUG #764](https://github.com/BurntSushi/ripgrep/issues/764):\n  Color escape sequences now coalesce, which reduces output size.\n* [BUG #842](https://github.com/BurntSushi/ripgrep/issues/842):\n  Add man page to binary Debian package.\n* [BUG #922](https://github.com/BurntSushi/ripgrep/issues/922):\n  ripgrep is now more robust with respect to memory maps failing.\n* [BUG #937](https://github.com/BurntSushi/ripgrep/issues/937):\n  Color escape sequences are no longer emitted for empty matches.\n* [BUG #940](https://github.com/BurntSushi/ripgrep/issues/940):\n  Context from the `--passthru` flag should not impact process exit status.\n* [BUG #984](https://github.com/BurntSushi/ripgrep/issues/984):\n  Fixes bug in `ignore` crate where first path was always treated as a symlink.\n* [BUG #990](https://github.com/BurntSushi/ripgrep/issues/990):\n  Read stderr asynchronously when running a process.\n* [BUG #1013](https://github.com/BurntSushi/ripgrep/issues/1013):\n  Add compile time and runtime CPU features to `--version` output.\n* [BUG #1028](https://github.com/BurntSushi/ripgrep/pull/1028):\n  Don't complete bare pattern after `-f` in zsh.\n\n\n0.9.0 (2018-08-03)\n==================\nThis is a new minor version release of ripgrep that contains some minor new\nfeatures and a panoply of bug fixes.\n\nReleases provided on Github for `x86_64` will now work on all target CPUs, and\nwill also automatically take advantage of features found on modern CPUs (such\nas AVX2) for additional optimizations.\n\nThis release increases the **minimum supported Rust version** from 1.20.0 to\n1.23.0.\n\nIt is anticipated that the next release of ripgrep (0.10.0) will provide\nmulti-line search support and a JSON output format.\n\n**BREAKING CHANGES**:\n\n* When `--count` and `--only-matching` are provided simultaneously, the\n  behavior of ripgrep is as if the `--count-matches` flag was given. That is,\n  the total number of matches is reported, where there may be multiple matches\n  per line. Previously, the behavior of ripgrep was to report the total number\n  of matching lines. (Note that this behavior diverges from the behavior of\n  GNU grep.)\n* Octal syntax is no longer supported. ripgrep previously accepted expressions\n  like `\\1` as syntax for matching `U+0001`, but ripgrep will now report an\n  error instead.\n* The `--line-number-width` flag has been removed. Its functionality was not\n  carefully considered with all ripgrep output formats.\n  See [#795](https://github.com/BurntSushi/ripgrep/issues/795) for more\n  details.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Android, Bazel, Fuchsia, Haskell,\n  Java and Puppet.\n* [FEATURE #411](https://github.com/BurntSushi/ripgrep/issues/411):\n  Add a `--stats` flag, which emits aggregate statistics after search results.\n* [FEATURE #646](https://github.com/BurntSushi/ripgrep/issues/646):\n  Add a `--no-ignore-messages` flag, which suppresses parse errors from reading\n  `.ignore` and `.gitignore` files.\n* [FEATURE #702](https://github.com/BurntSushi/ripgrep/issues/702):\n  Support `\\u{..}` Unicode escape sequences.\n* [FEATURE #812](https://github.com/BurntSushi/ripgrep/issues/812):\n  Add `-b/--byte-offset` flag that shows the byte offset of each matching line.\n* [FEATURE #814](https://github.com/BurntSushi/ripgrep/issues/814):\n  Add `--count-matches` flag, which is like `--count`, but for each match.\n* [FEATURE #880](https://github.com/BurntSushi/ripgrep/issues/880):\n  Add a `--no-column` flag, which disables column numbers in the output.\n* [FEATURE #898](https://github.com/BurntSushi/ripgrep/issues/898):\n  Add support for `lz4` when using the `-z/--search-zip` flag.\n* [FEATURE #924](https://github.com/BurntSushi/ripgrep/issues/924):\n  `termcolor` has moved to its own repository:\n  https://github.com/BurntSushi/termcolor\n* [FEATURE #934](https://github.com/BurntSushi/ripgrep/issues/934):\n  Add a new flag, `--no-ignore-global`, that permits disabling global\n  gitignores.\n* [FEATURE #967](https://github.com/BurntSushi/ripgrep/issues/967):\n  Rename `--maxdepth` to `--max-depth` for consistency. Keep `--maxdepth` for\n  backwards compatibility.\n* [FEATURE #978](https://github.com/BurntSushi/ripgrep/issues/978):\n  Add a `--pre` option to filter inputs with an arbitrary program.\n* [FEATURE fca9709d](https://github.com/BurntSushi/ripgrep/commit/fca9709d):\n  Improve zsh completion.\n\nBug fixes:\n\n* [BUG #135](https://github.com/BurntSushi/ripgrep/issues/135):\n  Release portable binaries that conditionally use SSSE3, AVX2, etc., at\n  runtime.\n* [BUG #268](https://github.com/BurntSushi/ripgrep/issues/268):\n  Print descriptive error message when trying to use look-around or\n  backreferences.\n* [BUG #395](https://github.com/BurntSushi/ripgrep/issues/395):\n  Show comprehensible error messages for regexes like `\\s*{`.\n* [BUG #526](https://github.com/BurntSushi/ripgrep/issues/526):\n  Support backslash escapes in globs.\n* [BUG #795](https://github.com/BurntSushi/ripgrep/issues/795):\n  Fix problems with `--line-number-width` by removing it.\n* [BUG #832](https://github.com/BurntSushi/ripgrep/issues/832):\n  Clarify usage instructions for `-f/--file` flag.\n* [BUG #835](https://github.com/BurntSushi/ripgrep/issues/835):\n  Fix small performance regression while crawling very large directory trees.\n* [BUG #851](https://github.com/BurntSushi/ripgrep/issues/851):\n  Fix `-S/--smart-case` detection once and for all.\n* [BUG #852](https://github.com/BurntSushi/ripgrep/issues/852):\n  Be robust with respect to `ENOMEM` errors returned by `mmap`.\n* [BUG #853](https://github.com/BurntSushi/ripgrep/issues/853):\n  Upgrade `grep` crate to `regex-syntax 0.6.0`.\n* [BUG #893](https://github.com/BurntSushi/ripgrep/issues/893):\n  Improve support for git submodules.\n* [BUG #900](https://github.com/BurntSushi/ripgrep/issues/900):\n  When no patterns are given, ripgrep should never match anything.\n* [BUG #907](https://github.com/BurntSushi/ripgrep/issues/907):\n  ripgrep will now stop traversing after the first file when `--quiet --files`\n  is used.\n* [BUG #918](https://github.com/BurntSushi/ripgrep/issues/918):\n  Don't skip tar archives when `-z/--search-zip` is used.\n* [BUG #934](https://github.com/BurntSushi/ripgrep/issues/934):\n  Don't respect gitignore files when searching outside git repositories.\n* [BUG #948](https://github.com/BurntSushi/ripgrep/issues/948):\n  Use exit code 2 to indicate error, and use exit code 1 to indicate no\n  matches.\n* [BUG #951](https://github.com/BurntSushi/ripgrep/issues/951):\n  Add stdin example to ripgrep usage documentation.\n* [BUG #955](https://github.com/BurntSushi/ripgrep/issues/955):\n  Use buffered writing when not printing to a tty, which fixes a performance\n  regression.\n* [BUG #957](https://github.com/BurntSushi/ripgrep/issues/957):\n  Improve the error message shown for `--path separator /` in some Windows\n  shells.\n* [BUG #964](https://github.com/BurntSushi/ripgrep/issues/964):\n  Add a `--no-fixed-strings` flag to disable `-F/--fixed-strings`.\n* [BUG #988](https://github.com/BurntSushi/ripgrep/issues/988):\n  Fix a bug in the `ignore` crate that prevented the use of explicit ignore\n  files after disabling all other ignore rules.\n* [BUG #995](https://github.com/BurntSushi/ripgrep/issues/995):\n  Respect `$XDG_CONFIG_DIR/git/config` for detecting `core.excludesFile`.\n\n\n0.8.1 (2018-02-20)\n==================\nThis is a patch release of ripgrep that primarily fixes regressions introduced\nin 0.8.0 (#820 and #824) in directory traversal on Windows. These regressions\ndo not impact non-Windows users.\n\nFeature enhancements:\n\n* Added or improved file type filtering for csv and VHDL.\n* [FEATURE #798](https://github.com/BurntSushi/ripgrep/issues/798):\n  Add `underline` support to `termcolor` and ripgrep. See documentation on the\n  `--colors` flag for details.\n\nBug fixes:\n\n* [BUG #684](https://github.com/BurntSushi/ripgrep/issues/684):\n  Improve documentation for the `--ignore-file` flag.\n* [BUG #789](https://github.com/BurntSushi/ripgrep/issues/789):\n  Don't show `(rev )` if the revision wasn't available during the build.\n* [BUG #791](https://github.com/BurntSushi/ripgrep/issues/791):\n  Add man page to ARM release.\n* [BUG #797](https://github.com/BurntSushi/ripgrep/issues/797):\n  Improve documentation for \"intense\" setting in `termcolor`.\n* [BUG #800](https://github.com/BurntSushi/ripgrep/issues/800):\n  Fix a bug in the `ignore` crate for custom ignore files. This had no impact\n  on ripgrep.\n* [BUG #807](https://github.com/BurntSushi/ripgrep/issues/807):\n  Fix a bug where `rg --hidden .` behaved differently from `rg --hidden ./`.\n* [BUG #815](https://github.com/BurntSushi/ripgrep/issues/815):\n  Clarify a common failure mode in user guide.\n* [BUG #820](https://github.com/BurntSushi/ripgrep/issues/820):\n  Fixes a bug on Windows where symlinks were followed even if not requested.\n* [BUG #824](https://github.com/BurntSushi/ripgrep/issues/824):\n  Fix a performance regression in directory traversal on Windows.\n\n\n0.8.0 (2018-02-11)\n==================\nThis is a new minor version release of ripgrep that satisfies several popular\nfeature requests (config files, search compressed files, true colors), fixes\nmany bugs and improves the quality of life for ripgrep maintainers. This\nrelease also includes greatly improved documentation in the form of a\n[User Guide](GUIDE.md) and a [FAQ](FAQ.md).\n\nThis release increases the **minimum supported Rust version** from 1.17 to\n1.20.\n\n**BREAKING CHANGES**:\n\nNote that these are all very minor and unlikely to impact most users.\n\n* In order to support configuration files, flag overrides needed to be\n  rethought. In some cases, this changed ripgrep's behavior. For example,\n  in ripgrep 0.7.1, `rg foo -s -i` will perform a case sensitive search\n  since the `-s/--case-sensitive` flag was defined to always take precedence\n  over the `-i/--ignore-case` flag, regardless of position. In ripgrep 0.8.0\n  however, the override rule for all flags has changed to \"the most recent\n  flag wins among competing flags.\" That is, `rg foo -s -i` now performs a\n  case insensitive search.\n* The `-M/--max-columns` flag was tweaked so that specifying a value of `0`\n  now makes ripgrep behave as if the flag was absent. This makes it possible\n  to set a default value in a configuration file and then override it. The\n  previous ripgrep behavior was to suppress all matching non-empty lines.\n* In all globs, `[^...]` is now equivalent to `[!...]` (indicating class\n  negation). Previously, `^` had no special significance in a character class.\n* For **downstream packagers**, the directory hierarchy in ripgrep's archive\n  releases has changed. The root directory now only contains the executable,\n  README and license. There is now a new directory called `doc` which contains\n  the man page (previously in the root), a user guide (new), a FAQ (new) and\n  the CHANGELOG (previously not included in release). The `complete`\n  directory remains the same.\n\nFeature enhancements:\n\n* Added or improved file type filtering for\n  Apache Avro, C++, GN, Google Closure Templates, Jupyter notebooks, man pages,\n  Protocol Buffers, Smarty and Web IDL.\n* [FEATURE #196](https://github.com/BurntSushi/ripgrep/issues/196):\n  Support a configuration file. See\n  [the new user guide](GUIDE.md#configuration-file)\n  for details.\n* [FEATURE #261](https://github.com/BurntSushi/ripgrep/issues/261):\n  Add extended or \"true\" color support. Works in Windows 10!\n  [See the FAQ for details.](FAQ.md#colors)\n* [FEATURE #539](https://github.com/BurntSushi/ripgrep/issues/539):\n  Search gzip, bzip2, lzma or xz files when given `-z/--search-zip` flag.\n* [FEATURE #544](https://github.com/BurntSushi/ripgrep/issues/544):\n  Add support for line number alignment via a new `--line-number-width` flag.\n* [FEATURE #654](https://github.com/BurntSushi/ripgrep/pull/654):\n  Support linuxbrew in ripgrep's Brew tap.\n* [FEATURE #673](https://github.com/BurntSushi/ripgrep/issues/673):\n  Bring back `.rgignore` files. (A higher precedent, application specific\n  version of `.ignore`.)\n* [FEATURE #676](https://github.com/BurntSushi/ripgrep/issues/676):\n  Provide ARM binaries. **WARNING:** This will be provided on a best effort\n  basis.\n* [FEATURE #709](https://github.com/BurntSushi/ripgrep/issues/709):\n  Suggest `-F/--fixed-strings` flag on a regex syntax error.\n* [FEATURE #740](https://github.com/BurntSushi/ripgrep/issues/740):\n  Add a `--passthru` flag that causes ripgrep to print every line it reads.\n* [FEATURE #785](https://github.com/BurntSushi/ripgrep/pull/785):\n  Overhaul documentation. Cleaned up README, added user guide and FAQ.\n* [FEATURE 7f5c07](https://github.com/BurntSushi/ripgrep/commit/7f5c07434be92103b5bf7e216b9c7494aed2d8cb):\n  Add hidden flags for convenient overrides (e.g., `--no-text`).\n\nBug fixes:\n\n* [BUG #553](https://github.com/BurntSushi/ripgrep/issues/553):\n  Permit flags to be repeated.\n* [BUG #633](https://github.com/BurntSushi/ripgrep/issues/633):\n  Fix a bug where ripgrep would panic on Windows while following symlinks.\n* [BUG #649](https://github.com/BurntSushi/ripgrep/issues/649):\n  Fix handling of `!**/` in `.gitignore`.\n* [BUG #663](https://github.com/BurntSushi/ripgrep/issues/663):\n  **BREAKING CHANGE:** Support `[^...]` glob syntax (as identical to `[!...]`).\n* [BUG #693](https://github.com/BurntSushi/ripgrep/issues/693):\n  Don't display context separators when not printing matches.\n* [BUG #705](https://github.com/BurntSushi/ripgrep/issues/705):\n  Fix a bug that prevented ripgrep from searching OneDrive directories.\n* [BUG #717](https://github.com/BurntSushi/ripgrep/issues/717):\n  Improve `--smart-case` uppercase character detection.\n* [BUG #725](https://github.com/BurntSushi/ripgrep/issues/725):\n  Clarify that globs do not override explicitly given paths to search.\n* [BUG #742](https://github.com/BurntSushi/ripgrep/pull/742):\n  Write ANSI reset code as `\\x1B[0m` instead of `\\x1B[m`.\n* [BUG #747](https://github.com/BurntSushi/ripgrep/issues/747):\n  Remove `yarn.lock` from YAML file type.\n* [BUG #760](https://github.com/BurntSushi/ripgrep/issues/760):\n  ripgrep can now search `/sys/devices/system/cpu/vulnerabilities/*` files.\n* [BUG #761](https://github.com/BurntSushi/ripgrep/issues/761):\n  Fix handling of gitignore patterns that contain a `/`.\n* [BUG #776](https://github.com/BurntSushi/ripgrep/pull/776):\n  **BREAKING CHANGE:** `--max-columns=0` now disables the limit.\n* [BUG #779](https://github.com/BurntSushi/ripgrep/issues/779):\n  Clarify documentation for `--files-without-match`.\n* [BUG #780](https://github.com/BurntSushi/ripgrep/issues/780),\n  [BUG #781](https://github.com/BurntSushi/ripgrep/issues/781):\n  Fix bug where ripgrep missed some matching lines.\n\nMaintenance fixes:\n\n* [MAINT #772](https://github.com/BurntSushi/ripgrep/pull/772):\n  Drop `env_logger` in favor of simpler logger to avoid many new dependencies.\n* [MAINT #772](https://github.com/BurntSushi/ripgrep/pull/772):\n  Add git revision hash to ripgrep's version string.\n* [MAINT #772](https://github.com/BurntSushi/ripgrep/pull/772):\n  (Seemingly) improve compile times.\n* [MAINT #776](https://github.com/BurntSushi/ripgrep/pull/776):\n  Automatically generate man page during build.\n* [MAINT #786](https://github.com/BurntSushi/ripgrep/pull/786):\n  Remove use of `unsafe` in `globset`. :tada:\n* [MAINT e9d448](https://github.com/BurntSushi/ripgrep/commit/e9d448e93bb4e1fb3b0c1afc29adb5af6ed5283d):\n  Add an issue template (has already drastically improved bug reports).\n* [MAINT ae2d03](https://github.com/BurntSushi/ripgrep/commit/ae2d036dd4ba2a46acac9c2d77c32e7c667eb850):\n  Remove the `compile` script.\n\nFriends of ripgrep:\n\nI'd like to extend my gratitude to\n[@balajisivaraman](https://github.com/balajisivaraman)\nfor their recent hard work in a number of areas, and in particular, for\nimplementing the \"search compressed files\" feature. Their work in sketching out\na specification for that and other work has been exemplary.\n\nThanks\n[@balajisivaraman](https://github.com/balajisivaraman)!\n\n\n0.7.1 (2017-10-22)\n==================\nThis is a patch release of ripgrep that includes a fix to very bad regression\nintroduced in ripgrep 0.7.0.\n\nBug fixes:\n\n* [BUG #648](https://github.com/BurntSushi/ripgrep/issues/648):\n  Fix a bug where it was very easy to exceed standard file descriptor limits.\n\n\n0.7.0 (2017-10-20)\n==================\nThis is a new minor version release of ripgrep that includes mostly bug fixes.\n\nripgrep continues to require Rust 1.17, and there are no known breaking changes\nintroduced in this release.\n\nFeature enhancements:\n\n* Added or improved file type filtering for config & license files, Elm,\n  Purescript, Standard ML, sh, systemd, Terraform\n* [FEATURE #593](https://github.com/BurntSushi/ripgrep/pull/593):\n  Using both `-o/--only-matching` and `-r/--replace` does the right thing.\n\nBug fixes:\n\n* [BUG #200](https://github.com/BurntSushi/ripgrep/issues/200):\n  ripgrep will stop when its pipe is closed.\n* [BUG #402](https://github.com/BurntSushi/ripgrep/issues/402):\n  Fix context printing bug when the `-m/--max-count` flag is used.\n* [BUG #521](https://github.com/BurntSushi/ripgrep/issues/521):\n  Fix interaction between `-r/--replace` and terminal colors.\n* [BUG #559](https://github.com/BurntSushi/ripgrep/issues/559):\n  Ignore test that tried reading a non-UTF-8 file path on macOS.\n* [BUG #599](https://github.com/BurntSushi/ripgrep/issues/599):\n  Fix color escapes on empty matches.\n* [BUG #600](https://github.com/BurntSushi/ripgrep/issues/600):\n  Avoid expensive (on Windows) file handle check when using --files.\n* [BUG #618](https://github.com/BurntSushi/ripgrep/issues/618):\n  Clarify installation instructions for Ubuntu users.\n* [BUG #633](https://github.com/BurntSushi/ripgrep/issues/633):\n  Faster symlink loop checking on Windows.\n\n\n0.6.0 (2017-08-23)\n==================\nThis is a new minor version release of ripgrep that includes many bug fixes\nand a few new features such as `--iglob` and `-x/--line-regexp`.\n\nNote that this release increases the minimum supported Rust version from 1.12\nto 1.17.\n\nFeature enhancements:\n\n* Added or improved file type filtering for BitBake, C++, Cabal, cshtml, Julia,\n  Make, msbuild, QMake, Yocto\n* [FEATURE #163](https://github.com/BurntSushi/ripgrep/issues/163):\n  Add an `--iglob` flag that is like `-g/--glob`, but matches globs\n  case insensitively.\n* [FEATURE #520](https://github.com/BurntSushi/ripgrep/pull/518):\n  Add `-x/--line-regexp` flag, which requires a match to span an entire line.\n* [FEATURE #551](https://github.com/BurntSushi/ripgrep/pull/551),\n  [FEATURE #554](https://github.com/BurntSushi/ripgrep/pull/554):\n  `ignore`: add new `matched_path_or_any_parents` method.\n\nBug fixes:\n\n* [BUG #342](https://github.com/BurntSushi/ripgrep/issues/342):\n  Fix invisible text in some PowerShell environments by changing the\n  default color scheme on Windows.\n* [BUG #413](https://github.com/BurntSushi/ripgrep/issues/413):\n  Release binaries on Unix are now `strip`'d by default. This decreases\n  binary size by an order of magnitude.\n* [BUG #483](https://github.com/BurntSushi/ripgrep/issues/483):\n  When `--quiet` is passed, `--files` should be quiet.\n* [BUG #488](https://github.com/BurntSushi/ripgrep/pull/488):\n  When `--vimgrep` is passed, `--with-filename` should be enabled\n  automatically.\n* [BUG #493](https://github.com/BurntSushi/ripgrep/issues/493):\n  Fix another bug in the implementation of the `-o/--only-matching`\n  flag.\n* [BUG #499](https://github.com/BurntSushi/ripgrep/pull/499):\n  Permit certain flags to override others.\n* [BUG #523](https://github.com/BurntSushi/ripgrep/pull/523):\n  `wincolor`: Re-fetch Windows console on all calls.\n* [BUG #523](https://github.com/BurntSushi/ripgrep/issues/524):\n  `--version` now shows enabled compile-time features.\n* [BUG #532](https://github.com/BurntSushi/ripgrep/issues/532),\n  [BUG #536](https://github.com/BurntSushi/ripgrep/pull/536),\n  [BUG #538](https://github.com/BurntSushi/ripgrep/pull/538),\n  [BUG #540](https://github.com/BurntSushi/ripgrep/pull/540),\n  [BUG #560](https://github.com/BurntSushi/ripgrep/pull/560),\n  [BUG #565](https://github.com/BurntSushi/ripgrep/pull/565):\n  Improve zsh completion.\n* [BUG #578](https://github.com/BurntSushi/ripgrep/pull/578):\n  Enable SIMD for `encoding_rs` when appropriate.\n* [BUG #580](https://github.com/BurntSushi/ripgrep/issues/580):\n  Fix `-w/--word-regexp` in the presence of capturing groups.\n* [BUG #581](https://github.com/BurntSushi/ripgrep/issues/581):\n  Document that ripgrep may terminate unexpectedly when searching via\n  memory maps (which can happen using default settings).\n\nFriends of ripgrep:\n\nI'd like to give a big Thank You to @okdana for their recent hard work on\nripgrep. This includes new features like `--line-regexp`, heroic effort on\nzsh auto-completion and thinking through some thorny argv issues with me.\n\nI'd also like to thank @ericbn for their work on improving ripgrep's argv\nparsing by allowing some flags to override others.\n\nThanks @okdana and @ericbn!\n\n\n0.5.2 (2017-05-11)\n==================\nFeature enhancements:\n\n* Added or improved file type filtering for Nix.\n* [FEATURE #362](https://github.com/BurntSushi/ripgrep/issues/362):\n  Add `--regex-size-limit` and `--dfa-size-limit` flags.\n* [FEATURE #444](https://github.com/BurntSushi/ripgrep/issues/444):\n  Improve error messages for invalid globs.\n\nBug fixes:\n\n* [BUG #442](https://github.com/BurntSushi/ripgrep/issues/442):\n  Fix line wrapping in `--help` output.\n* [BUG #451](https://github.com/BurntSushi/ripgrep/issues/451):\n  Fix bug with duplicate output when using `-o/--only-matching` flag.\n\n\n0.5.1 (2017-04-09)\n==================\nFeature enhancements:\n\n* Added or improved file type filtering for vim.\n* [FEATURE #34](https://github.com/BurntSushi/ripgrep/issues/34):\n  Add a `-o/--only-matching` flag.\n* [FEATURE #377](https://github.com/BurntSushi/ripgrep/issues/377):\n  Column numbers can now be customized with a color. (The default is\n  no color.)\n* [FEATURE #419](https://github.com/BurntSushi/ripgrep/issues/419):\n  Added `-0` short flag option for `--null`.\n\nBug fixes:\n\n* [BUG #381](https://github.com/BurntSushi/ripgrep/issues/381):\n  Include license text in all subcrates.\n* [BUG #418](https://github.com/BurntSushi/ripgrep/issues/418),\n  [BUG #426](https://github.com/BurntSushi/ripgrep/issues/426),\n  [BUG #439](https://github.com/BurntSushi/ripgrep/issues/439):\n  Fix a few bugs with `-h/--help` output.\n\n\n0.5.0 (2017-03-12)\n==================\nThis is a new minor version release of ripgrep that includes one minor breaking\nchange, bug fixes and several new features including support for text encodings\nother than UTF-8.\n\nA notable accomplishment with respect to Rust is that ripgrep proper now only\ncontains a single `unsafe` use (for accessing the contents of a memory map).\n\nThe **breaking change** is:\n\n* [FEATURE #380](https://github.com/BurntSushi/ripgrep/issues/380):\n  Line numbers are now hidden by default when ripgrep is printing to a tty\n  **and** the only thing searched is stdin.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Ceylon, CSS, Elixir, HTML, log,\n  SASS, SVG, Twig\n* [FEATURE #1](https://github.com/BurntSushi/ripgrep/issues/1):\n  Add support for additional text encodings, including automatic detection for\n  UTF-16 via BOM sniffing. Explicit text encoding support with the\n  `-E/--encoding` flag was also added for latin-1, GBK, EUC-JP\n  and Shift_JIS, among others. The full list can be found here:\n  https://encoding.spec.whatwg.org/#concept-encoding-get\n* [FEATURE #129](https://github.com/BurntSushi/ripgrep/issues/129):\n  Add a new `-M/--max-columns` flag that omits lines longer than the given\n  number of bytes. (Disabled by default!)\n* [FEATURE #369](https://github.com/BurntSushi/ripgrep/issues/369):\n  A new flag, `--max-filesize`, was added for limiting searches to files with\n  a maximum file size.\n\nBug fixes:\n\n* [BUG #52](https://github.com/BurntSushi/ripgrep/issues/52),\n  [BUG #311](https://github.com/BurntSushi/ripgrep/issues/311):\n  Tweak how binary files are detected and handled. (We are slightly less\n  conservative and will no longer use memory without bound.)\n* [BUG #326](https://github.com/BurntSushi/ripgrep/issues/326):\n  When --files flag is given, we should never attempt to parse positional\n  arguments as regexes.\n* [BUG #327](https://github.com/BurntSushi/ripgrep/issues/327):\n  Permit the --heading flag to override the --no-heading flag.\n* [BUG #340](https://github.com/BurntSushi/ripgrep/pull/340):\n  Clarify that the `-u/--unrestricted` flags are aliases.\n* [BUG #343](https://github.com/BurntSushi/ripgrep/pull/343):\n  Global git ignore config should use `$HOME/.config/git/ignore` and not\n  `$HOME/git/ignore`.\n* [BUG #345](https://github.com/BurntSushi/ripgrep/pull/345):\n  Clarify docs for `-g/--glob` flag.\n* [BUG #381](https://github.com/BurntSushi/ripgrep/issues/381):\n  Add license files to each sub-crate.\n* [BUG #383](https://github.com/BurntSushi/ripgrep/issues/383):\n  Use latest version of clap (for argv parsing).\n* [BUG #392](https://github.com/BurntSushi/ripgrep/issues/391):\n  Fix translation of set globs (e.g., `{foo,bar,quux}`) to regexes.\n* [BUG #401](https://github.com/BurntSushi/ripgrep/pull/401):\n  Add PowerShell completion file to Windows release.\n* [BUG #405](https://github.com/BurntSushi/ripgrep/issues/405):\n  Fix bug when excluding absolute paths with the `-g/--glob` flag.\n\n\n0.4.0\n=====\nThis is a new minor version release of ripgrep that includes a couple very\nminor breaking changes, a few new features and lots of bug fixes.\n\nThis version of ripgrep upgrades its `regex` dependency from `0.1` to `0.2`,\nwhich includes a few minor syntax changes:\n\n* POSIX character classes now require double bracketing. Previously, the regex\n  `[:upper:]` would parse as the `upper` POSIX character class. Now it parses\n  as the character class containing the characters `:upper:`. The fix to this\n  change is to use `[[:upper:]]` instead. Note that variants like\n  `[[:upper:][:blank:]]` continue to work.\n* The character `[` must always be escaped inside a character class.\n* The characters `&`, `-` and `~` must be escaped if any one of them are\n  repeated consecutively. For example, `[&]`, `[\\&]`, `[\\&\\&]`, `[&-&]` are all\n  equivalent while `[&&]` is illegal. (The motivation for this and the prior\n  change is to provide a backwards compatible path for adding character class\n  set notation.)\n\nFeature enhancements:\n\n* Added or improved file type filtering for Crystal, Kotlin, Perl, PowerShell,\n  Ruby, Swig\n* [FEATURE #83](https://github.com/BurntSushi/ripgrep/issues/83):\n  Type definitions can now include other type definitions.\n* [FEATURE #243](https://github.com/BurntSushi/ripgrep/issues/243):\n  **BREAKING CHANGE**: The `--column` flag now implies `--line-number`.\n* [FEATURE #263](https://github.com/BurntSushi/ripgrep/issues/263):\n  Add a new `--sort-files` flag.\n* [FEATURE #275](https://github.com/BurntSushi/ripgrep/issues/275):\n  Add a new `--path-separator` flag. Useful in cygwin.\n\nBug fixes:\n\n* [BUG #182](https://github.com/BurntSushi/ripgrep/issues/182):\n  Redux: use more portable ANSI color escape sequences when possible.\n* [BUG #258](https://github.com/BurntSushi/ripgrep/issues/258):\n  Fix bug that caused ripgrep's parallel iterator to spin and burn CPU.\n* [BUG #262](https://github.com/BurntSushi/ripgrep/issues/262):\n  Document how to install shell completion files.\n* [BUG #266](https://github.com/BurntSushi/ripgrep/issues/266),\n  [BUG #293](https://github.com/BurntSushi/ripgrep/issues/293):\n  Fix handling of bold styling and change the default colors.\n* [BUG #268](https://github.com/BurntSushi/ripgrep/issues/268):\n  Make lack of backreference support more explicit.\n* [BUG #271](https://github.com/BurntSushi/ripgrep/issues/271):\n  Remove `~` dependency on clap.\n* [BUG #277](https://github.com/BurntSushi/ripgrep/issues/277):\n  Fix cosmetic issue in `globset` crate docs.\n* [BUG #279](https://github.com/BurntSushi/ripgrep/issues/279):\n  ripgrep did not terminate when `-q/--quiet` was given.\n* [BUG #281](https://github.com/BurntSushi/ripgrep/issues/281):\n  **BREAKING CHANGE**: Completely remove `^C` handling from ripgrep.\n* [BUG #284](https://github.com/BurntSushi/ripgrep/issues/284):\n  Make docs for `-g/--glob` clearer.\n* [BUG #286](https://github.com/BurntSushi/ripgrep/pull/286):\n  When stdout is redirected to a file, don't search that file.\n* [BUG #287](https://github.com/BurntSushi/ripgrep/pull/287):\n  Fix ZSH completions.\n* [BUG #295](https://github.com/BurntSushi/ripgrep/pull/295):\n  Remove superfluous `memmap` dependency in `grep` crate.\n* [BUG #308](https://github.com/BurntSushi/ripgrep/pull/308):\n  Improve docs for `-r/--replace`.\n* [BUG #313](https://github.com/BurntSushi/ripgrep/pull/313):\n  Update bytecount dep to latest version.\n* [BUG #318](https://github.com/BurntSushi/ripgrep/pull/318):\n  Fix invalid UTF-8 output bug in Windows consoles.\n\n\n0.3.2\n=====\nFeature enhancements:\n\n* Added or improved file type filtering for Less, Sass, stylus, Zsh\n\nBug fixes:\n\n* [BUG #229](https://github.com/BurntSushi/ripgrep/issues/229):\n  Make smart case slightly less conservative.\n* [BUG #247](https://github.com/BurntSushi/ripgrep/issues/247):\n  Clarify use of --heading/--no-heading.\n* [BUG #251](https://github.com/BurntSushi/ripgrep/issues/251),\n  [BUG #264](https://github.com/BurntSushi/ripgrep/issues/264),\n  [BUG #267](https://github.com/BurntSushi/ripgrep/issues/267):\n  Fix matching bug caused by literal optimizations.\n* [BUG #256](https://github.com/BurntSushi/ripgrep/issues/256):\n  Fix bug that caused `rg foo` and `rg foo/` to have different behavior\n  when `foo` was a symlink.\n* [BUG #270](https://github.com/BurntSushi/ripgrep/issues/270):\n  Fix bug where patterns starting with a `-` couldn't be used with the\n  `-e/--regexp` flag. (This resolves a regression that was introduced in\n  ripgrep 0.3.0.)\n\n\n0.3.1\n=====\nBug fixes:\n\n* [BUG #242](https://github.com/BurntSushi/ripgrep/issues/242):\n  ripgrep didn't respect `--colors foo:none` correctly. Now it does.\n\n\n0.3.0\n=====\nThis is a new minor version release of ripgrep that includes two breaking\nchanges with lots of bug fixes and some new features and performance\nimprovements. Notably, if you had a problem with colors or piping on Windows\nbefore, then that should now be fixed in this release.\n\n**BREAKING CHANGES**:\n\n* ripgrep now requires Rust 1.11 to compile. Previously, it could build on\n  Rust 1.9. The cause of this was the move from\n  [Docopt to Clap](https://github.com/BurntSushi/ripgrep/pull/233)\n  for argument parsing.\n* The `-e/--regexp` flag can no longer accept a pattern starting with a `-`.\n  There are two work-arounds: `rg -- -foo` and `rg [-]foo` or `rg -e [-]foo`\n  will all search for the same `-foo` pattern. The cause of this was the move\n  from [Docopt to Clap](https://github.com/BurntSushi/ripgrep/pull/233)\n  for argument parsing.\n  [This may get fixed in the\n  future.](https://github.com/kbknapp/clap-rs/issues/742).\n\nPerformance improvements:\n\n* [PERF #33](https://github.com/BurntSushi/ripgrep/issues/33):\n  ripgrep now performs similar to GNU grep on small corpora.\n* [PERF #136](https://github.com/BurntSushi/ripgrep/issues/136):\n  ripgrep no longer slows down because of argument parsing when given a large\n  argument list.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Elixir.\n* [FEATURE #7](https://github.com/BurntSushi/ripgrep/issues/7):\n  Add a `-f/--file` flag that causes ripgrep to read patterns from a file.\n* [FEATURE #51](https://github.com/BurntSushi/ripgrep/issues/51):\n  Add a `--colors` flag that enables one to customize the colors used in\n  ripgrep's output.\n* [FEATURE #138](https://github.com/BurntSushi/ripgrep/issues/138):\n  Add a `--files-without-match` flag that shows only file paths that contain\n  zero matches.\n* [FEATURE #230](https://github.com/BurntSushi/ripgrep/issues/230):\n  Add completion files to the release (Bash, Fish and PowerShell).\n\nBug fixes:\n\n* [BUG #37](https://github.com/BurntSushi/ripgrep/issues/37):\n  Use correct ANSI escape sequences when `TERM=screen.linux`.\n* [BUG #94](https://github.com/BurntSushi/ripgrep/issues/94):\n  ripgrep now detects stdin on Windows automatically.\n* [BUG #117](https://github.com/BurntSushi/ripgrep/issues/117):\n  Colors should now work correctly and automatically inside mintty.\n* [BUG #182](https://github.com/BurntSushi/ripgrep/issues/182):\n  Colors should now work within Emacs. In particular, `--color=always` will\n  emit colors regardless of the current environment.\n* [BUG #189](https://github.com/BurntSushi/ripgrep/issues/189):\n  Show less content when running `rg -h`. The full help content can be\n  accessed with `rg --help`.\n* [BUG #210](https://github.com/BurntSushi/ripgrep/issues/210):\n  Support non-UTF-8 file names on Unix platforms.\n* [BUG #231](https://github.com/BurntSushi/ripgrep/issues/231):\n  Switch from block buffering to line buffering.\n* [BUG #241](https://github.com/BurntSushi/ripgrep/issues/241):\n  Some error messages weren't suppressed when `--no-messages` was used.\n\n\n0.2.9\n=====\nBug fixes:\n\n* [BUG #226](https://github.com/BurntSushi/ripgrep/issues/226):\n  File paths explicitly given on the command line weren't searched in parallel.\n  (This was a regression in `0.2.7`.)\n* [BUG #228](https://github.com/BurntSushi/ripgrep/issues/228):\n  If a directory was given to `--ignore-file`, ripgrep's memory usage would\n  grow without bound.\n\n\n0.2.8\n=====\nBug fixes:\n\n* Fixed a bug with the SIMD/AVX features for using bytecount in commit\n  `4ca15a`.\n\n\n0.2.7\n=====\nPerformance improvements:\n\n* [PERF #223](https://github.com/BurntSushi/ripgrep/pull/223):\n  Added a parallel recursive directory iterator. This results in major\n  performance improvements on large repositories.\n* [PERF #11](https://github.com/BurntSushi/ripgrep/pull/11):\n  ripgrep now uses the `bytecount` library for counting new lines. In some\n  cases, ripgrep runs twice as fast. Use\n  `RUSTFLAGS=\"-C target-cpu=native\" cargo build --release --features 'simd-accel avx-accel'`\n  to get the fastest possible binary.\n\nFeature enhancements:\n\n* Added or improved file type filtering for Agda, Tex, Taskpaper, Markdown,\n  asciidoc, textile, rdoc, org, creole, wiki, pod, C#, PDF, C, C++.\n* [FEATURE #149](https://github.com/BurntSushi/ripgrep/issues/149):\n  Add a new `--no-messages` flag that suppresses error messages.\n  Note that `rg foo 2> /dev/null` also works.\n* [FEATURE #159](https://github.com/BurntSushi/ripgrep/issues/159):\n  Add a new `-m/--max-count` flag that limits the total number of matches\n  printed for each file searched.\n\nBug fixes:\n\n* [BUG #199](https://github.com/BurntSushi/ripgrep/issues/199):\n  Fixed a bug where `-S/--smart-case` wasn't being applied correctly to\n  literal optimizations.\n* [BUG #203](https://github.com/BurntSushi/ripgrep/issues/203):\n  Mention the full name, ripgrep, in more places. It now appears in\n  the output of `--help` and `--version`. The repository URL is now also\n  in the output of `--help` and the man page.\n* [BUG #215](https://github.com/BurntSushi/ripgrep/issues/215):\n  Include small note about how to search for a pattern that starts with a `-`.\n\n\n0.2.6\n=====\nFeature enhancements:\n\n* Added or improved file type filtering for Fish.\n\nBug fixes:\n\n* [BUG #206](https://github.com/BurntSushi/ripgrep/issues/206):\n  Fixed a regression with `-g/--glob` flag in `0.2.5`.\n\n\n0.2.5\n=====\nFeature enhancements:\n\n* Added or improved file type filtering for Groovy, Handlebars, Tcl, zsh and\n  Python.\n* [FEATURE #9](https://github.com/BurntSushi/ripgrep/issues/9):\n  Support global gitignore config and `.git/info/exclude` files.\n* [FEATURE #45](https://github.com/BurntSushi/ripgrep/issues/45):\n  Add --ignore-file flag for specifying additional ignore files.\n* [FEATURE #202](https://github.com/BurntSushi/ripgrep/pull/202):\n  Introduce a new\n  [`ignore`](https://github.com/BurntSushi/ripgrep/tree/master/ignore)\n  crate that encapsulates all of ripgrep's gitignore matching logic.\n\nBug fixes:\n\n* [BUG #44](https://github.com/BurntSushi/ripgrep/issues/44):\n  ripgrep runs slowly when given lots of positional arguments that are\n  directories.\n* [BUG #119](https://github.com/BurntSushi/ripgrep/issues/119):\n  ripgrep didn't reset terminal colors if it was interrupted by `^C`.\n  Fixed in [PR #187](https://github.com/BurntSushi/ripgrep/pull/187).\n* [BUG #184](https://github.com/BurntSushi/ripgrep/issues/184):\n  Fixed a bug related to interpreting gitignore files in parent directories.\n\n\n0.2.4\n=====\nSKIPPED.\n\n\n0.2.3\n=====\nBug fixes:\n\n* [BUG #164](https://github.com/BurntSushi/ripgrep/issues/164):\n  Fixes a segfault on macos builds.\n* [BUG #167](https://github.com/BurntSushi/ripgrep/issues/167):\n  Clarify documentation for --threads.\n\n\n0.2.2\n=====\nPackaging updates:\n\n* `ripgrep` is now in homebrew-core. `brew install ripgrep` will do the trick\n  on a Mac.\n* `ripgrep` is now in the Archlinux community repository.\n  `pacman -S ripgrep` will do the trick on Archlinux.\n* Support has been discontinued for i686-darwin.\n* Glob matching has been moved out into its own crate:\n  [`globset`](https://crates.io/crates/globset).\n\nFeature enhancements:\n\n* Added or improved file type filtering for CMake, config, Jinja, Markdown,\n  Spark.\n* [FEATURE #109](https://github.com/BurntSushi/ripgrep/issues/109):\n  Add a --max-depth flag for directory traversal.\n* [FEATURE #124](https://github.com/BurntSushi/ripgrep/issues/124):\n  Add -s/--case-sensitive flag. Overrides --smart-case.\n* [FEATURE #139](https://github.com/BurntSushi/ripgrep/pull/139):\n  The `ripgrep` repo is now a Homebrew tap. This is useful for installing\n  SIMD accelerated binaries, which aren't available in homebrew-core.\n\nBug fixes:\n\n* [BUG #87](https://github.com/BurntSushi/ripgrep/issues/87),\n  [BUG #127](https://github.com/BurntSushi/ripgrep/issues/127),\n  [BUG #131](https://github.com/BurntSushi/ripgrep/issues/131):\n  Various issues related to glob matching.\n* [BUG #116](https://github.com/BurntSushi/ripgrep/issues/116):\n  --quiet should stop search after first match.\n* [BUG #121](https://github.com/BurntSushi/ripgrep/pull/121):\n  --color always should show colors, even when --vimgrep is used.\n* [BUG #122](https://github.com/BurntSushi/ripgrep/pull/122):\n  Colorize file path at beginning of line.\n* [BUG #134](https://github.com/BurntSushi/ripgrep/issues/134):\n  Processing a large ignore file (thousands of globs) was very slow.\n* [BUG #137](https://github.com/BurntSushi/ripgrep/issues/137):\n  Always follow symlinks when given as an explicit argument.\n* [BUG #147](https://github.com/BurntSushi/ripgrep/issues/147):\n  Clarify documentation for --replace.\n\n\n0.2.1\n=====\nFeature enhancements:\n\n* Added or improved file type filtering for Clojure and SystemVerilog.\n* [FEATURE #89](https://github.com/BurntSushi/ripgrep/issues/89):\n  Add a --null flag that outputs a NUL byte after every file path.\n\nBug fixes:\n\n* [BUG #98](https://github.com/BurntSushi/ripgrep/issues/98):\n  Fix a bug in single threaded mode when if opening a file failed, ripgrep\n  quit instead of continuing the search.\n* [BUG #99](https://github.com/BurntSushi/ripgrep/issues/99):\n  Fix another bug in single threaded mode where empty lines were being printed\n  by mistake.\n* [BUG #105](https://github.com/BurntSushi/ripgrep/issues/105):\n  Fix an off-by-one error with --column.\n* [BUG #106](https://github.com/BurntSushi/ripgrep/issues/106):\n  Fix a bug where a whitespace only line in a gitignore file caused ripgrep\n  to panic (i.e., crash).\n\n\n0.2.0\n=====\nFeature enhancements:\n\n* Added or improved file type filtering for VB, R, F#, Swift, Nim, JavaScript,\n  TypeScript\n* [FEATURE #20](https://github.com/BurntSushi/ripgrep/issues/20):\n  Adds a --no-filename flag.\n* [FEATURE #26](https://github.com/BurntSushi/ripgrep/issues/26):\n  Adds --files-with-matches flag. Like --count, but only prints file paths\n  and doesn't need to count every match.\n* [FEATURE #40](https://github.com/BurntSushi/ripgrep/issues/40):\n  Switch from using `.rgignore` to `.ignore`. Note that `.rgignore` is\n  still supported, but deprecated.\n* [FEATURE #68](https://github.com/BurntSushi/ripgrep/issues/68):\n  Add --no-ignore-vcs flag that ignores .gitignore but not .ignore.\n* [FEATURE #70](https://github.com/BurntSushi/ripgrep/issues/70):\n  Add -S/--smart-case flag (but is disabled by default).\n* [FEATURE #80](https://github.com/BurntSushi/ripgrep/issues/80):\n  Add support for `{foo,bar}` globs.\n\nMany many bug fixes. Thanks every for reporting these and helping make\n`ripgrep` better! (Note that I haven't captured every tracking issue here,\nsome were closed as duplicates.)\n\n* [BUG #8](https://github.com/BurntSushi/ripgrep/issues/8):\n  Don't use an intermediate buffer when --threads=1. (Permits constant memory\n  usage.)\n* [BUG #15](https://github.com/BurntSushi/ripgrep/issues/15):\n  Improves the documentation for --type-add.\n* [BUG #16](https://github.com/BurntSushi/ripgrep/issues/16),\n  [BUG #49](https://github.com/BurntSushi/ripgrep/issues/49),\n  [BUG #50](https://github.com/BurntSushi/ripgrep/issues/50),\n  [BUG #65](https://github.com/BurntSushi/ripgrep/issues/65):\n  Some gitignore globs were being treated as anchored when they weren't.\n* [BUG #18](https://github.com/BurntSushi/ripgrep/issues/18):\n  --vimgrep reported incorrect column number.\n* [BUG #19](https://github.com/BurntSushi/ripgrep/issues/19):\n  ripgrep was hanging waiting on stdin in some Windows terminals. Note that\n  this introduced a new bug:\n  [#94](https://github.com/BurntSushi/ripgrep/issues/94).\n* [BUG #21](https://github.com/BurntSushi/ripgrep/issues/21):\n  Removes leading `./` when printing file paths.\n* [BUG #22](https://github.com/BurntSushi/ripgrep/issues/22):\n  Running `rg --help | echo` caused `rg` to panic.\n* [BUG #24](https://github.com/BurntSushi/ripgrep/issues/22):\n  Clarify the central purpose of rg in its usage message.\n* [BUG #25](https://github.com/BurntSushi/ripgrep/issues/25):\n  Anchored gitignore globs weren't applied in subdirectories correctly.\n* [BUG #30](https://github.com/BurntSushi/ripgrep/issues/30):\n  Globs like `foo/**` should match contents of `foo`, but not `foo` itself.\n* [BUG #35](https://github.com/BurntSushi/ripgrep/issues/35),\n  [BUG #81](https://github.com/BurntSushi/ripgrep/issues/81):\n  When automatically detecting stdin, only read if it's a file or a fifo.\n  i.e., ignore stdin in `rg foo < /dev/null`.\n* [BUG #36](https://github.com/BurntSushi/ripgrep/issues/36):\n  Don't automatically pick memory maps on MacOS. Ever.\n* [BUG #38](https://github.com/BurntSushi/ripgrep/issues/38):\n  Trailing whitespace in gitignore wasn't being ignored.\n* [BUG #43](https://github.com/BurntSushi/ripgrep/issues/43):\n  --glob didn't work with directories.\n* [BUG #46](https://github.com/BurntSushi/ripgrep/issues/46):\n  Use one fewer worker thread than what is provided on CLI.\n* [BUG #47](https://github.com/BurntSushi/ripgrep/issues/47):\n  --help/--version now work even if other options are set.\n* [BUG #55](https://github.com/BurntSushi/ripgrep/issues/55):\n  ripgrep was refusing to search /proc/cpuinfo. Fixed by disabling memory\n  maps for files with zero size.\n* [BUG #64](https://github.com/BurntSushi/ripgrep/issues/64):\n  The first path given with --files set was ignored.\n* [BUG #67](https://github.com/BurntSushi/ripgrep/issues/67):\n  Sometimes whitelist globs like `!/dir` weren't interpreted as anchored.\n* [BUG #77](https://github.com/BurntSushi/ripgrep/issues/77):\n  When -q/--quiet flag was passed, ripgrep kept searching even after a match\n  was found.\n* [BUG #90](https://github.com/BurntSushi/ripgrep/issues/90):\n  Permit whitelisting hidden files.\n* [BUG #93](https://github.com/BurntSushi/ripgrep/issues/93):\n  ripgrep was extracting an erroneous inner literal from a repeated pattern.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.123046875,
          "content": "This project is dual-licensed under the Unlicense and MIT licenses.\n\nYou may use this code under the terms of either license.\n"
        },
        {
          "name": "Cargo.lock",
          "type": "blob",
          "size": 12.8115234375,
          "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.87\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10f00e1f6e58a40e807377c75c6a7f97bf9044fab57816f2414e6f5f4499d7b8\"\n\n[[package]]\nname = \"bstr\"\nversion = \"1.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40723b8fb387abc38f4f4a37c09073622e41dd12327033091ef8950659e6dc0c\"\ndependencies = [\n \"memchr\",\n \"regex-automata\",\n \"serde\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b62ac837cdb5cb22e10a256099b4fc502b1dfe560cb282963a974d7abd80e476\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"shlex\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"crossbeam-channel\"\nversion = \"0.5.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33480d6946193aa8033910124896ca395333cae7e2d1113d1fef6c3272217df2\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-deque\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"613f8cc01fe9cf1a3eb3d7f488fd2fa8388403e97039e2f73692932e291a770d\"\ndependencies = [\n \"crossbeam-epoch\",\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-epoch\"\nversion = \"0.9.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b82ac4a3c2ca9c3460964f020e1402edd5753411d7737aa39c3714ad1b5420e\"\ndependencies = [\n \"crossbeam-utils\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22ec99545bb0ed0ea7bb9b8e1e9122ea386ff8a48c0922e43f36d45ab09e0e80\"\n\n[[package]]\nname = \"encoding_rs\"\nversion = \"0.8.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b45de904aa0b010bce2ab45264d0631681847fa7b6f2eaa7dab7619943bc4f59\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"encoding_rs_io\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1cc3c5651fb62ab8aa3103998dade57efdd028544bd300516baa31840c252a83\"\ndependencies = [\n \"encoding_rs\",\n]\n\n[[package]]\nname = \"glob\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2fabcfbdc87f4758337ca535fb41a6d701b65693ce38287d856d1674551ec9b\"\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.15\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"glob\",\n \"log\",\n \"regex-automata\",\n \"regex-syntax\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"grep\"\nversion = \"0.3.2\"\ndependencies = [\n \"grep-cli\",\n \"grep-matcher\",\n \"grep-pcre2\",\n \"grep-printer\",\n \"grep-regex\",\n \"grep-searcher\",\n \"termcolor\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"grep-cli\"\nversion = \"0.1.11\"\ndependencies = [\n \"bstr\",\n \"globset\",\n \"libc\",\n \"log\",\n \"termcolor\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"grep-matcher\"\nversion = \"0.1.7\"\ndependencies = [\n \"memchr\",\n \"regex\",\n]\n\n[[package]]\nname = \"grep-pcre2\"\nversion = \"0.1.8\"\ndependencies = [\n \"grep-matcher\",\n \"log\",\n \"pcre2\",\n]\n\n[[package]]\nname = \"grep-printer\"\nversion = \"0.2.2\"\ndependencies = [\n \"bstr\",\n \"grep-matcher\",\n \"grep-regex\",\n \"grep-searcher\",\n \"log\",\n \"serde\",\n \"serde_json\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"grep-regex\"\nversion = \"0.1.13\"\ndependencies = [\n \"bstr\",\n \"grep-matcher\",\n \"log\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"grep-searcher\"\nversion = \"0.1.14\"\ndependencies = [\n \"bstr\",\n \"encoding_rs\",\n \"encoding_rs_io\",\n \"grep-matcher\",\n \"grep-regex\",\n \"log\",\n \"memchr\",\n \"memmap2\",\n \"regex\",\n]\n\n[[package]]\nname = \"ignore\"\nversion = \"0.4.23\"\ndependencies = [\n \"bstr\",\n \"crossbeam-channel\",\n \"crossbeam-deque\",\n \"globset\",\n \"log\",\n \"memchr\",\n \"regex-automata\",\n \"same-file\",\n \"walkdir\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jemalloc-sys\"\nversion = \"0.5.4+5.3.0-patched\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac6c1946e1cea1788cbfde01c993b52a10e2da07f4bac608228d1bed20bfebf2\"\ndependencies = [\n \"cc\",\n \"libc\",\n]\n\n[[package]]\nname = \"jemallocator\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a0de374a9f8e63150e6f5e8a60cc14c668226d7a347d8aee1a45766e3c4dd3bc\"\ndependencies = [\n \"jemalloc-sys\",\n \"libc\",\n]\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d1dbcbbeb6a7fec7e059840aa538bd62aaccf972c7346c4d9d2059312853d0\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"lexopt\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baff4b617f7df3d896f97fe922b64817f6cd9a756bb81d40f8883f2f66dcb401\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.158\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8adc4bb1803a324070e64a98ae98f38934d91957a99cfb3a43dcbc01bc56439\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3\"\n\n[[package]]\nname = \"memmap2\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe751422e4a8caa417e13c3ea66452215d7d63e19e604f4980461212f3ae1322\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"pcre2\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3be55c43ac18044541d58d897e8f4c55157218428953ebd39d86df3ba0286b2b\"\ndependencies = [\n \"libc\",\n \"log\",\n \"pcre2-sys\",\n]\n\n[[package]]\nname = \"pcre2-sys\"\nversion = \"0.2.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"550f5d18fb1b90c20b87e161852c10cde77858c3900c5059b5ad2a1449f11d8a\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231b230927b5e4ad203db57bbcbee2802f6bce620b1e4a9024a07d94e2907ec\"\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.86\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5e719e8df665df0d1c8fbfd238015744736151d4445ec0836b8e628aae103b77\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.37\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5b9d34b8991d19d98081b46eacdd8eb58c6f2b201139f7c5f643cc155a633af\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4219d74c6b67a3654a9fbebc4b419e22126d13d2f3c4a07ee0cb61ff79a79619\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38caf58cc5ef2fed281f89292ef23f6365465ed9a41b7a7754eb4e26496c92df\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a66a03ae7c801facd77a29370b4faec201768915ac14a721ba36f20bc9c209b\"\n\n[[package]]\nname = \"ripgrep\"\nversion = \"14.1.1\"\ndependencies = [\n \"anyhow\",\n \"bstr\",\n \"grep\",\n \"ignore\",\n \"jemallocator\",\n \"lexopt\",\n \"log\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"termcolor\",\n \"textwrap\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8e3592472072e6e22e0a54d5904d9febf8508f65fb8552499a1abc7d1078c3a\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.210\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"243902eda00fad750862fc144cea25caca5e20d615af0a81bee94ca738f1df1f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.128\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ff5456707a1de34e7e37f2a6fd3d3f808c318259cbd01ab6377795054b483d8\"\ndependencies = [\n \"itoa\",\n \"memchr\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shlex\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fda2ff0d084019ba4d7c6f371c95d8fd75ce3524c3cb8fb653a3023f6323e64\"\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.77\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9f35bcdf61fd8e7be6caf75f429fdca8beb3ed76584befb503b1569faee373ed\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.16.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23d434d3f8967a09480fb04132ebe0a3e088c173e6d0ee7897abbdf4eab0f8b9\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf221c93e13a30d793f7645a0e7762c55d169dbb0a49671918a2319d289b10bb\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.59.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e38bc4d79ed67fd075bcc251a1c39b32a1776bbe92e5bef1f0bf1f8c531853b\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9b724f72796e036ab90c1021d4780d4d3d648aca59e491e6b98e725b84e99973\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"32a4622180e7a0ec044bb555404c800bc9fd9ec262ec147edd5989ccd0c02cd3\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"09ec2a7bb152e2252b53fa7803150007879548bc709c039df7627cabbd05d469\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e9b5ad5ab802e97eb8e295ac6720e509ee4c243f69d781394014ebfe8bbfa0b\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0eee52d38c090b3caa76c563b86c3a4bd71ef1a819287c19d586d7334ae8ed66\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"240948bc05c5e7c6dabba28bf89d89ffce3e303022809e73deaefe4f6ec56c66\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"147a5c80aabfbf0c7d901cb5895d1de30ef2907eb21fbbab29ca94c5b08b1a78\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24d5b23dc417412679681396f2b49f3de8c1473deb516bd34410872eff51ed0d\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec\"\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 3.28515625,
          "content": "[package]\nname = \"ripgrep\"\nversion = \"14.1.1\"  #:version\nauthors = [\"Andrew Gallant <jamslam@gmail.com>\"]\ndescription = \"\"\"\nripgrep is a line-oriented search tool that recursively searches the current\ndirectory for a regex pattern while respecting gitignore rules. ripgrep has\nfirst class support on Windows, macOS and Linux.\n\"\"\"\ndocumentation = \"https://github.com/BurntSushi/ripgrep\"\nhomepage = \"https://github.com/BurntSushi/ripgrep\"\nrepository = \"https://github.com/BurntSushi/ripgrep\"\nkeywords = [\"regex\", \"grep\", \"egrep\", \"search\", \"pattern\"]\ncategories = [\"command-line-utilities\", \"text-processing\"]\nlicense = \"Unlicense OR MIT\"\nexclude = [\n  \"HomebrewFormula\",\n  \"/.github/\",\n  \"/ci/\",\n  \"/pkg/brew\",\n  \"/benchsuite/\",\n  \"/scripts/\",\n]\nbuild = \"build.rs\"\nautotests = false\nedition = \"2021\"\nrust-version = \"1.72\"\n\n[[bin]]\nbench = false\npath = \"crates/core/main.rs\"\nname = \"rg\"\n\n[[test]]\nname = \"integration\"\npath = \"tests/tests.rs\"\n\n[workspace]\nmembers = [\n  \"crates/globset\",\n  \"crates/grep\",\n  \"crates/cli\",\n  \"crates/matcher\",\n  \"crates/pcre2\",\n  \"crates/printer\",\n  \"crates/regex\",\n  \"crates/searcher\",\n  \"crates/ignore\",\n]\n\n[dependencies]\nanyhow = \"1.0.75\"\nbstr = \"1.7.0\"\ngrep = { version = \"0.3.2\", path = \"crates/grep\" }\nignore = { version = \"0.4.23\", path = \"crates/ignore\" }\nlexopt = \"0.3.0\"\nlog = \"0.4.5\"\nserde_json = \"1.0.23\"\ntermcolor = \"1.1.0\"\ntextwrap = { version = \"0.16.0\", default-features = false }\n\n[target.'cfg(all(target_env = \"musl\", target_pointer_width = \"64\"))'.dependencies.jemallocator]\nversion = \"0.5.0\"\n\n[dev-dependencies]\nserde = \"1.0.77\"\nserde_derive = \"1.0.77\"\nwalkdir = \"2\"\n\n[features]\npcre2 = [\"grep/pcre2\"]\n\n[profile.release]\ndebug = 1\n\n[profile.release-lto]\ninherits = \"release\"\nopt-level = 3\ndebug = \"none\"\nstrip = \"symbols\"\ndebug-assertions = false\noverflow-checks = false\nlto = \"fat\"\npanic = \"abort\"\nincremental = false\ncodegen-units = 1\n\n# This is the main way to strip binaries in the deb package created by\n# 'cargo deb'. For other release binaries, we (currently) call 'strip'\n# explicitly in the release process.\n[profile.deb]\ninherits = \"release\"\ndebug = false\n\n[package.metadata.deb]\nfeatures = [\"pcre2\"]\nsection = \"utils\"\nassets = [\n  [\"target/release/rg\", \"usr/bin/\", \"755\"],\n  [\"COPYING\", \"usr/share/doc/ripgrep/\", \"644\"],\n  [\"LICENSE-MIT\", \"usr/share/doc/ripgrep/\", \"644\"],\n  [\"UNLICENSE\", \"usr/share/doc/ripgrep/\", \"644\"],\n  [\"CHANGELOG.md\", \"usr/share/doc/ripgrep/CHANGELOG\", \"644\"],\n  [\"README.md\", \"usr/share/doc/ripgrep/README\", \"644\"],\n  [\"FAQ.md\", \"usr/share/doc/ripgrep/FAQ\", \"644\"],\n  # The man page is automatically generated by ripgrep's build process, so\n  # this file isn't actually committed. Instead, to create a dpkg, either\n  # create a deployment/deb directory and copy the man page to it, or use the\n  # 'ci/build-deb' script.\n  [\"deployment/deb/rg.1\", \"usr/share/man/man1/rg.1\", \"644\"],\n  # Similarly for shell completions.\n  [\"deployment/deb/rg.bash\", \"usr/share/bash-completion/completions/rg\", \"644\"],\n  [\"deployment/deb/rg.fish\", \"usr/share/fish/vendor_completions.d/rg.fish\", \"644\"],\n  [\"deployment/deb/_rg\", \"usr/share/zsh/vendor-completions/\", \"644\"],\n]\nextended-description = \"\"\"\\\nripgrep (rg) recursively searches your current directory for a regex pattern.\nBy default, ripgrep will respect your .gitignore and automatically skip hidden\nfiles/directories and binary files.\n\"\"\"\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 41.2373046875,
          "content": "## FAQ\n\n* [Does ripgrep support configuration files?](#config)\n* [What's changed in ripgrep recently?](#changelog)\n* [When is the next release?](#release)\n* [Does ripgrep have a man page?](#manpage)\n* [Does ripgrep have support for shell auto-completion?](#complete)\n* [How can I get results in a consistent order?](#order)\n* [How do I search files that aren't UTF-8?](#encoding)\n* [How do I search compressed files?](#compressed)\n* [How do I search over multiple lines?](#multiline)\n* [How do I use lookaround and/or backreferences?](#fancy)\n* [How do I configure ripgrep's colors?](#colors)\n* [How do I enable true colors on Windows?](#truecolors-windows)\n* [How do I stop ripgrep from messing up colors when I kill it?](#stop-ripgrep)\n* [Why does using a leading `/` on Windows fail?](#because-cygwin)\n* [How do I get around the regex size limit?](#size-limit)\n* [How do I make the `-f/--file` flag faster?](#dfa-size)\n* [How do I make the output look like The Silver Searcher's output?](#silver-searcher-output)\n* [Why does ripgrep get slower when I enabled PCRE2 regexes?](#pcre2-slow)\n* [When I run `rg`, why does it execute some other command?](#rg-other-cmd)\n* [How do I create an alias for ripgrep on Windows?](#rg-alias-windows)\n* [How do I create a PowerShell profile?](#powershell-profile)\n* [How do I pipe non-ASCII content to ripgrep on Windows?](#pipe-non-ascii-windows)\n* [How can I search and replace with ripgrep?](#search-and-replace)\n* [How is ripgrep licensed?](#license)\n* [Can ripgrep replace grep?](#posix4ever)\n* [What does the \"rip\" in ripgrep mean?](#intentcountsforsomething)\n* [How can I donate to ripgrep or its maintainers?](#donations)\n\n\n<h3 name=\"config\">\nDoes ripgrep support configuration files?\n</h3>\n\nYes. See the\n[guide's section on configuration files](GUIDE.md#configuration-file).\n\n\n<h3 name=\"changelog\">\nWhat's changed in ripgrep recently?\n</h3>\n\nPlease consult ripgrep's [CHANGELOG](CHANGELOG.md).\n\n\n<h3 name=\"release\">\nWhen is the next release?\n</h3>\n\nripgrep is a project whose contributors are volunteers. A release schedule\nadds undue stress to said volunteers. Therefore, releases are made on a best\neffort basis and no dates **will ever be given**.\n\nAn exception to this _can be_ high impact bugs. If a ripgrep release contains\na significant regression, then there will generally be a strong push to get a\npatch release out with a fix. However, no promises are made.\n\n\n<h3 name=\"manpage\">\nDoes ripgrep have a man page?\n</h3>\n\nYes. If you installed ripgrep through a package manager on a Unix system, then\nit would have ideally been installed for you in the proper location. In which\ncase, `man rg` should just work.\n\nOtherwise, you can ask ripgrep to generate the man page:\n\n```\n$ mkdir -p man/man1\n$ rg --generate man > man/man1/rg.1\n$ MANPATH=\"$PWD/man\" man rg\n```\n\nOr, if your version of `man` supports the `-l/--local-file` flag, then this\nwill suffice:\n\n```\n$ rg --generate man | man -l -\n```\n\nNote that the man page's documentation for options is equivalent to the output\nshown in `rg --help`. To see more condensed documentation (one line per flag),\nrun `rg -h`.\n\nThe man page is also included in all\n[ripgrep binary releases](https://github.com/BurntSushi/ripgrep/releases).\n\n\n<h3 name=\"complete\">\nDoes ripgrep have support for shell auto-completion?\n</h3>\n\nYes! If you installed ripgrep through a package manager on a Unix system, then\nthe shell completion files included in the release archive should have been\ninstalled for you automatically. If not, you can generate completions using\nripgrep's command line interface.\n\nFor **bash**:\n\n```\n$ dir=\"$XDG_CONFIG_HOME/bash_completion\"\n$ mkdir -p \"$dir\"\n$ rg --generate complete-bash > \"$dir/rg.bash\"\n```\n\nFor **fish**:\n\n```\n$ dir=\"$XDG_CONFIG_HOME/fish/completions\"\n$ mkdir -p \"$dir\"\n$ rg --generate complete-fish > \"$dir/rg.fish\"\n```\n\nFor **zsh**, the recommended approach is:\n\n```zsh\n$ dir=\"$HOME/.zsh-complete\"\n$ mkdir -p \"$dir\"\n$ rg --generate complete-zsh > \"$dir/_rg\"\n```\n\nAnd then add `$HOME/.zsh-complete` to your `fpath` in, e.g., your\n`$HOME/.zshrc` file:\n\n```zsh\nfpath=($HOME/.zsh-complete $fpath)\n```\n\nOr if you'd prefer to load and generate completions at the same time, you can\nadd the following to your `$HOME/.zshrc` file:\n\n```zsh\n$ source <(rg --generate complete-zsh)\n```\n\nNote though that while this approach is easier to setup, is generally slower\nthan the previous method, and will add more time to loading your shell prompt.\n\nFor **PowerShell**, create the completions:\n\n```\n$ rg --generate complete-powershell > _rg.ps1\n```\n\nAnd then add `. _rg.ps1` to your PowerShell\n[profile](https://technet.microsoft.com/en-us/library/bb613488(v=vs.85).aspx)\n(note the leading period). If the `_rg.ps1` file is not on your `PATH`, do\n`. /path/to/_rg.ps1` instead.\n\n\n<h3 name=\"order\">\nHow can I get results in a consistent order?\n</h3>\n\nBy default, ripgrep uses parallelism to execute its search because this makes\nthe search much faster on most modern systems. This in turn means that ripgrep\nhas a non-deterministic aspect to it, since the interleaving of threads during\nthe execution of the program is itself non-deterministic. This has the effect\nof printing results in a somewhat arbitrary order, and this order can change\nfrom run to run of ripgrep.\n\nThe only way to make the order of results consistent is to ask ripgrep to\nsort the output. Currently, this will disable all parallelism. (On smaller\nrepositories, you might not notice much of a performance difference!) You\ncan achieve this with the `--sort path` flag.\n\nThere is more discussion on this topic here:\nhttps://github.com/BurntSushi/ripgrep/issues/152\n\n\n<h3 name=\"encoding\">\nHow do I search files that aren't UTF-8?\n</h3>\n\nSee the [guide's section on file encoding](GUIDE.md#file-encoding).\n\n\n<h3 name=\"compressed\">\nHow do I search compressed files?\n</h3>\n\nripgrep's `-z/--search-zip` flag will cause it to search compressed files\nautomatically. Currently, this supports gzip, bzip2, xz, lzma, lz4, Brotli and\nZstd. Each of these requires the corresponding `gzip`, `bzip2`, `xz`,\n`lz4`, `brotli` and `zstd` binaries to be installed on your system. (That is,\nripgrep does decompression by shelling out to another process.)\n\nripgrep currently does not search archive formats, so `*.tar.gz` files, for\nexample, are skipped.\n\n\n<h3 name=\"multiline\">\nHow do I search over multiple lines?\n</h3>\n\nThe `-U/--multiline` flag enables ripgrep to report results that span over\nmultiple lines.\n\n\n<h3 name=\"fancy\">\nHow do I use lookaround and/or backreferences?\n</h3>\n\nripgrep's default regex engine does not support lookaround or backreferences.\nThis is primarily because the default regex engine is implemented using finite\nstate machines in order to guarantee a linear worst case time complexity on all\ninputs. Backreferences are not possible to implement in this paradigm, and\nlookaround appears difficult to do efficiently.\n\nHowever, ripgrep optionally supports using PCRE2 as the regex engine instead of\nthe default one based on finite state machines. You can enable PCRE2 with the\n`-P/--pcre2` flag. For example, in the root of the ripgrep repo, you can easily\nfind all palindromes:\n\n```\n$ rg -P '(\\w{10})\\1'\ntests/misc.rs\n483:    cmd.arg(\"--max-filesize\").arg(\"44444444444444444444\");\nglobset/src/glob.rs\n1206:    matches!(match7, \"a*a*a*a*a*a*a*a*a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n```\n\nIf your version of ripgrep doesn't support PCRE2, then you'll get an error\nmessage when you try to use the `-P/--pcre2` flag:\n\n```\n$ rg -P '(\\w{10})\\1'\nPCRE2 is not available in this build of ripgrep\n```\n\nMost of the releases distributed by the ripgrep project here on GitHub will\ncome bundled with PCRE2 enabled. If you installed ripgrep through a different\nmeans (like your system's package manager), then please reach out to the\nmaintainer of that package to see whether it's possible to enable the PCRE2\nfeature.\n\n\n<h3 name=\"colors\">\nHow do I configure ripgrep's colors?\n</h3>\n\nripgrep has two flags related to colors:\n\n* `--color` controls *when* to use colors.\n* `--colors` controls *which* colors to use.\n\nThe `--color` flag accepts one of the following possible values: `never`,\n`auto`, `always` or `ansi`. The `auto` value is the default and will cause\nripgrep to only enable colors when it is printing to a terminal. But if you\npipe ripgrep to a file or some other process, then it will suppress colors.\n\nThe `--colors` flag is a bit more complicated. The general format is:\n\n```\n--colors '{type}:{attribute}:{value}'\n```\n\n* `{type}` should be one of `path`, `line`, `column` or `match`. Each of these\n  correspond to the four different types of things that ripgrep will add color\n  to in its output. Select the type whose color you want to change.\n* `{attribute}` should be one of `fg`, `bg` or `style`, corresponding to\n  foreground color, background color, or miscellaneous styling (such as whether\n  to bold the output or not).\n* `{value}` is determined by the value of `{attribute}`. If\n  `{attribute}` is `style`, then `{value}` should be one of `nobold`,\n  `bold`, `nointense`, `intense`, `nounderline` or `underline`. If\n  `{attribute}` is `fg` or `bg`, then `{value}` should be a color.\n\nA color is specified by either one of eight of English names, a single 256-bit\nnumber or an RGB triple (with over 16 million possible values, or \"true\ncolor\").\n\nThe color names are `red`, `blue`, `green`, `cyan`, `magenta`, `yellow`,\n`white` or `black`.\n\nA single 256-bit number is a value in the range 0-255 (inclusive). It can\neither be in decimal format (e.g., `62`) or hexadecimal format (e.g., `0x3E`).\n\nAn RGB triple corresponds to three numbers (decimal or hexadecimal) separated\nby commas.\n\nAs a special case, `--colors '{type}:none'` will clear all colors and styles\nassociated with `{type}`, which lets you start with a clean slate (instead of\nbuilding on top of ripgrep's default color settings).\n\nHere's an example that makes highlights the matches with a nice blue background\nwith bolded white text:\n\n```\n$ rg somepattern \\\n    --colors 'match:none' \\\n    --colors 'match:bg:0x33,0x66,0xFF' \\\n    --colors 'match:fg:white' \\\n    --colors 'match:style:bold'\n```\n\nColors are an ideal candidate to set in your\n[configuration file](GUIDE.md#configuration-file). See the\n[question on emulating The Silver Searcher's output style](#silver-searcher-output)\nfor an example specific to colors.\n\n\n<h3 name=\"truecolors-windows\">\nHow do I enable true colors on Windows?\n</h3>\n\nFirst, see the previous question's\n[answer on configuring colors](#colors).\n\nSecondly, coloring on Windows is a bit complicated. If you're using a terminal\nlike Cygwin, then it's likely true color support already works out of the box.\nHowever, if you are using a normal Windows console (`cmd` or `PowerShell`) and\na version of Windows prior to 10, then there is no known way to get true\ncolor support. If you are on Windows 10 and using a Windows console, then\ntrue colors should work out of the box with one caveat: you might need to\nclear ripgrep's default color settings first. That is, instead of this:\n\n```\n$ rg somepattern --colors 'match:fg:0x33,0x66,0xFF'\n```\n\nyou should do this\n\n```\n$ rg somepattern --colors 'match:none' --colors 'match:fg:0x33,0x66,0xFF'\n```\n\nThis is because ripgrep might set the default style for `match` to `bold`, and\nit seems like Windows 10's VT100 support doesn't permit bold and true color\nANSI escapes to be used simultaneously. The work-around above will clear\nripgrep's default styling, allowing you to craft it exactly as desired.\n\n\n<h3 name=\"stop-ripgrep\">\nHow do I stop ripgrep from messing up colors when I kill it?\n</h3>\n\nType in `color` in cmd.exe (Command Prompt) and `echo -ne \"\\033[0m\"` on\nUnix-like systems to restore your original foreground color.\n\nIn PowerShell, you can add the following code to your profile which will\nrestore the original foreground color when `Reset-ForegroundColor` is called.\nIncluding the `Set-Alias` line will allow you to call it with simply `color`.\n\n```powershell\n$OrigFgColor = $Host.UI.RawUI.ForegroundColor\nfunction Reset-ForegroundColor {\n\t$Host.UI.RawUI.ForegroundColor = $OrigFgColor\n}\nSet-Alias -Name color -Value Reset-ForegroundColor\n```\n\nPR [#187](https://github.com/BurntSushi/ripgrep/pull/187) fixed this, and it\nwas later deprecated in\n[#281](https://github.com/BurntSushi/ripgrep/issues/281). A full explanation is\navailable\n[here](https://github.com/BurntSushi/ripgrep/issues/281#issuecomment-269093893).\n\n\n<h3 name=\"because-cygwin\">\nWhy does using a leading `/` on Windows fail?\n</h3>\n\nIf you're using cygwin on Windows and try to search for a pattern beginning\nwith a `/`, then it's possible that cygwin is mangling that pattern without\nyour knowledge. For example, if you tried running `rg /foo` in a cygwin shell\non Windows, then cygwin might mistakenly perform path translation on `/foo`,\nwhich would result in `rg C:/msys64/foo` being searched instead.\n\nYou can fix this in one of three ways:\n\n1. Stop using cygwin.\n2. Escape the leading slash with an additional slash. e.g., `rg //foo`.\n3. Temporarily disable path translation by setting `MSYS_NO_PATHCONV=1`. e.g.,\n   `MSYS_NO_PATHCONV=1 rg /foo`.\n\nFor more details, see https://github.com/BurntSushi/ripgrep/issues/1277\n\n\n<h3 name=\"size-limit\">\nHow do I get around the regex size limit?\n</h3>\n\nIf you've given ripgrep a particularly large pattern (or a large number of\nsmaller patterns), then it is possible that it will fail to compile because it\nhit a pre-set limit. For example:\n\n```\n$ rg '\\pL{1000}'\nCompiled regex exceeds size limit of 10485760 bytes.\n```\n\n(Note: `\\pL{1000}` may look small, but `\\pL` is the character class containing\nall Unicode letters, which is quite large. *And* it's repeated 1000 times.)\n\nIn this case, you can work around by simply increasing the limit:\n\n```\n$ rg '\\pL{1000}' --regex-size-limit 1G\n```\n\nIncreasing the limit to 1GB does not necessarily mean that ripgrep will use\nthat much memory. The limit just says that it's allowed to (approximately) use\nthat much memory for constructing the regular expression.\n\n\n<h3 name=\"dfa-size\">\nHow do I make the <code>-f/--file</code> flag faster?\n</h3>\n\nThe `-f/--file` permits one to give a file to ripgrep which contains a pattern\non each line. ripgrep will then report any line that matches any of the\npatterns.\n\nIf this pattern file gets too big, then it is possible ripgrep will slow down\ndramatically. *Typically* this is because an internal cache is too small, and\nwill cause ripgrep to spill over to a slower but more robust regular expression\nengine. If this is indeed the problem, then it is possible to increase this\ncache and regain speed. The cache can be controlled via the `--dfa-size-limit`\nflag. For example, using `--dfa-size-limit 1G` will set the cache size to 1GB.\n(Note that this doesn't mean ripgrep will use 1GB of memory automatically, but\nit will allow the regex engine to if it needs to.)\n\n\n<h3 name=\"silver-searcher-output\">\nHow do I make the output look like The Silver Searcher's output?\n</h3>\n\nUse the `--colors` flag, like so:\n\n```\nrg --colors line:fg:yellow      \\\n   --colors line:style:bold     \\\n   --colors path:fg:green       \\\n   --colors path:style:bold     \\\n   --colors match:fg:black      \\\n   --colors match:bg:yellow     \\\n   --colors match:style:nobold  \\\n   foo\n```\n\nAlternatively, add your color configuration to your ripgrep config file (which\nis activated by setting the `RIPGREP_CONFIG_PATH` environment variable to point\nto your config file). For example:\n\n```\n$ cat $HOME/.config/ripgrep/rc\n--colors=line:fg:yellow\n--colors=line:style:bold\n--colors=path:fg:green\n--colors=path:style:bold\n--colors=match:fg:black\n--colors=match:bg:yellow\n--colors=match:style:nobold\n$ RIPGREP_CONFIG_PATH=$HOME/.config/ripgrep/rc rg foo\n```\n\n\n<h3 name=\"pcre2-slow\">\nWhy does ripgrep get slower when I enable PCRE2 regexes?\n</h3>\n\nWhen you use the `--pcre2` (`-P` for short) flag, ripgrep will use the PCRE2\nregex engine instead of the default. Both regex engines are quite fast,\nbut PCRE2 provides a number of additional features such as look-around and\nbackreferences that many enjoy using. This is largely because PCRE2 uses\na backtracking implementation where as the default regex engine uses a finite\nautomaton based implementation. The former provides the ability to add lots of\nbells and whistles over the latter, but the latter executes with worst case\nlinear time complexity.\n\nWith that out of the way, if you've used `-P` with ripgrep, you may have\nnoticed that it can be slower. The reasons for why this is are quite complex,\nand they are complex because the optimizations that ripgrep uses to implement\nfast search are complex.\n\nThe task ripgrep has before it is somewhat simple; all it needs to do is search\na file for occurrences of some pattern and then print the lines containing\nthose occurrences. The problem lies in what is considered a valid match and how\nexactly we read the bytes from a file.\n\nIn terms of what is considered a valid match, remember that ripgrep will only\nreport matches spanning a single line by default. The problem here is that\nsome patterns can match across multiple lines, and ripgrep needs to prevent\nthat from happening. For example, `foo\\sbar` will match `foo\\nbar`. The most\nobvious way to achieve this is to read the data from a file, and then apply\nthe pattern search to that data for each line. The problem with this approach\nis that it can be quite slow; it would be much faster to let the pattern\nsearch across as much data as possible. It's faster because it gets rid of the\noverhead of finding the boundaries of every line, and also because it gets rid\nof the overhead of starting and stopping the pattern search for every single\nline. (This is operating under the general assumption that matching lines are\nmuch rarer than non-matching lines.)\n\nIt turns out that we can use the faster approach by applying a very simple\nrestriction to the pattern: *statically prevent* the pattern from matching\nthrough a `\\n` character. Namely, when given a pattern like `foo\\sbar`,\nripgrep will remove `\\n` from the `\\s` character class automatically. In some\ncases, a simple removal is not so easy. For example, ripgrep will return an\nerror when your pattern includes a `\\n` literal:\n\n```\n$ rg '\\n'\nthe literal '\"\\n\"' is not allowed in a regex\n```\n\nSo what does this have to do with PCRE2? Well, ripgrep's default regex engine\nexposes APIs for doing syntactic analysis on the pattern in a way that makes\nit quite easy to strip `\\n` from the pattern (or otherwise detect it and report\nan error if stripping isn't possible). PCRE2 seemingly does not provide a\nsimilar API, so ripgrep does not do any stripping when PCRE2 is enabled. This\nforces ripgrep to use the \"slow\" search strategy of searching each line\nindividually.\n\nOK, so if enabling PCRE2 slows down the default method of searching because it\nforces matches to be limited to a single line, then why is PCRE2 also sometimes\nslower when performing multiline searches? Well, that's because there are\n*multiple* reasons why using PCRE2 in ripgrep can be slower than the default\nregex engine. This time, blame PCRE2's Unicode support, which ripgrep enables\nby default. In particular, PCRE2 cannot simultaneously enable Unicode support\nand search arbitrary data. That is, when PCRE2's Unicode support is enabled,\nthe data **must** be valid UTF-8 (to do otherwise is to invoke undefined\nbehavior). This is in contrast to ripgrep's default regex engine, which can\nenable Unicode support and still search arbitrary data. ripgrep's default\nregex engine simply won't match invalid UTF-8 for a pattern that can otherwise\nonly match valid UTF-8. Why doesn't PCRE2 do the same? This author isn't\nfamiliar with its internals, so we can't comment on it here.\n\nThe bottom line here is that we can't enable PCRE2's Unicode support without\nsimultaneously incurring a performance penalty for ensuring that we are\nsearching valid UTF-8. In particular, ripgrep will transcode the contents\nof each file to UTF-8 while replacing invalid UTF-8 data with the Unicode\nreplacement codepoint. ripgrep then disables PCRE2's own internal UTF-8\nchecking, since we've guaranteed the data we hand it will be valid UTF-8. The\nreason why ripgrep takes this approach is because if we do hand PCRE2 invalid\nUTF-8, then it will report a match error if it comes across an invalid UTF-8\nsequence. This is not good news for ripgrep, since it will stop it from\nsearching the rest of the file, and will also print potentially undesirable\nerror messages to users.\n\nAll right, the above is a lot of information to swallow if you aren't already\nfamiliar with ripgrep internals. Let's make this concrete with some examples.\nFirst, let's get some data big enough to magnify the performance differences:\n\n```\n$ curl -O 'https://burntsushi.net/stuff/subtitles2016-sample.gz'\n$ gzip -d subtitles2016-sample\n$ md5sum subtitles2016-sample\ne3cb796a20bbc602fbfd6bb43bda45f5   subtitles2016-sample\n```\n\nTo search this data, we will use the pattern `^\\w{42}$`, which contains exactly\none hit in the file and has no literals. Having no literals is important,\nbecause it ensures that the regex engine won't use literal optimizations to\nspeed up the search. In other words, it lets us reason coherently about the\nactual task that the regex engine is performing.\n\nLet's now walk through a few examples in light of the information above. First,\nlet's consider the default search using ripgrep's default regex engine and\nthen the same search with PCRE2:\n\n```\n$ time rg '^\\w{42}$' subtitles2016-sample\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m1.783s\nuser    0m1.731s\nsys     0m0.051s\n\n$ time rg -P '^\\w{42}$' subtitles2016-sample\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m2.458s\nuser    0m2.419s\nsys     0m0.038s\n```\n\nIn this particular example, both pattern searches are using a Unicode aware\n`\\w` character class and both are counting lines in order to report line\nnumbers. The key difference here is that the first search will not search\nline by line, but the second one will. We can observe which strategy ripgrep\nuses by passing the `--trace` flag:\n\n```\n$ rg '^\\w{42}$' subtitles2016-sample --trace\n[... snip ...]\nTRACE|grep_searcher::searcher|grep-searcher/src/searcher/mod.rs:622: Some(\"subtitles2016-sample\"): searching via memory map\nTRACE|grep_searcher::searcher|grep-searcher/src/searcher/mod.rs:712: slice reader: searching via slice-by-line strategy\nTRACE|grep_searcher::searcher::core|grep-searcher/src/searcher/core.rs:61: searcher core: will use fast line searcher\n[... snip ...]\n\n$ rg -P '^\\w{42}$' subtitles2016-sample --trace\n[... snip ...]\nTRACE|grep_searcher::searcher|grep-searcher/src/searcher/mod.rs:622: Some(\"subtitles2016-sample\"): searching via memory map\nTRACE|grep_searcher::searcher|grep-searcher/src/searcher/mod.rs:705: slice reader: needs transcoding, using generic reader\nTRACE|grep_searcher::searcher|grep-searcher/src/searcher/mod.rs:685: generic reader: searching via roll buffer strategy\nTRACE|grep_searcher::searcher::core|grep-searcher/src/searcher/core.rs:63: searcher core: will use slow line searcher\n[... snip ...]\n```\n\nThe first says it is using the \"fast line searcher\" where as the latter says\nit is using the \"slow line searcher.\" The latter also shows that we are\ndecoding the contents of the file, which also impacts performance.\n\nInterestingly, in this case, the pattern does not match a `\\n` and the file\nwe're searching is valid UTF-8, so neither the slow line-by-line search\nstrategy nor the decoding are necessary. We could fix the former issue with\nbetter PCRE2 introspection APIs. We can actually fix the latter issue with\nripgrep's `--no-encoding` flag, which prevents the automatic UTF-8 decoding,\nbut will enable PCRE2's own UTF-8 validity checking. Unfortunately, it's slower\nin my build of ripgrep:\n\n```\n$ time rg -P '^\\w{42}$' subtitles2016-sample --no-encoding\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m3.074s\nuser    0m3.021s\nsys     0m0.051s\n```\n\n(Tip: use the `--trace` flag to verify that no decoding in ripgrep is\nhappening.)\n\nA possible reason why PCRE2's UTF-8 checking is slower is because it might\nnot be better than the highly optimized UTF-8 checking routines found in the\n[`encoding_rs`](https://github.com/hsivonen/encoding_rs) library, which is what\nripgrep uses for UTF-8 decoding. Moreover, my build of ripgrep enables\n`encoding_rs`'s SIMD optimizations, which may be in play here.\n\nAlso, note that using the `--no-encoding` flag can cause PCRE2 to report\ninvalid UTF-8 errors, which causes ripgrep to stop searching the file:\n\n```\n$ cat invalid-utf8\nfoobar\n\n$ xxd invalid-utf8\n00000000: 666f 6fff 6261 720a                      foo.bar.\n\n$ rg foo invalid-utf8\n1:foobar\n\n$ rg -P foo invalid-utf8\n1:foo�bar\n\n$ rg -P foo invalid-utf8 --no-encoding\ninvalid-utf8: PCRE2: error matching: UTF-8 error: illegal byte (0xfe or 0xff)\n```\n\nAll right, so at this point, you might think that we could remove the penalty\nfor line-by-line searching by enabling multiline search. After all, our\nparticular pattern can't match across multiple lines anyway, so we'll still get\nthe results we want. Let's try it:\n\n```\n$ time rg -U '^\\w{42}$' subtitles2016-sample\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m1.803s\nuser    0m1.748s\nsys     0m0.054s\n\n$ time rg -P -U '^\\w{42}$' subtitles2016-sample\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m2.962s\nuser    0m2.246s\nsys     0m0.713s\n```\n\nSearch times remain the same with the default regex engine, but the PCRE2\nsearch gets _slower_. What happened? The secrets can be revealed with the\n`--trace` flag once again. In the former case, ripgrep actually detects that\nthe pattern can't match across multiple lines, and so will fall back to the\n\"fast line search\" strategy as with our search without `-U`.\n\nHowever, for PCRE2, things are much worse. Namely, since Unicode mode is still\nenabled, ripgrep is still going to decode UTF-8 to ensure that it hands only\nvalid UTF-8 to PCRE2. Unfortunately, one key downside of multiline search is\nthat ripgrep cannot do it incrementally. Since matches can be arbitrarily long,\nripgrep actually needs the entire file in memory at once. Normally, we can use\na memory map for this, but because we need to UTF-8 decode the file before\nsearching it, ripgrep winds up reading the entire contents of the file on to\nthe heap before executing a search. Owch.\n\nOK, so Unicode is killing us here. The file we're searching is _mostly_ ASCII,\nso maybe we're OK with missing some data. (Try `rg '[\\w--\\p{ascii}]'` to see\nnon-ASCII word characters that an ASCII-only `\\w` character class would miss.)\nWe can disable Unicode in both searches, but this is done differently depending\non the regex engine we use:\n\n```\n$ time rg '(?-u)^\\w{42}$' subtitles2016-sample\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m1.714s\nuser    0m1.669s\nsys     0m0.044s\n\n$ time rg -P '^\\w{42}$' subtitles2016-sample --no-pcre2-unicode\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m1.997s\nuser    0m1.958s\nsys     0m0.037s\n```\n\nFor the most part, ripgrep's default regex engine performs about the same.\nPCRE2 does improve a little bit, and is now almost as fast as the default\nregex engine. If you look at the output of `--trace`, you'll see that ripgrep\nwill no longer perform UTF-8 decoding, but it does still use the slow\nline-by-line searcher.\n\nAt this point, we can combine all of our insights above: let's try to get off\nof the slow line-by-line searcher by enabling multiline mode, and let's stop\nUTF-8 decoding by disabling Unicode support:\n\n```\n$ time rg -U '(?-u)^\\w{42}$' subtitles2016-sample\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m1.714s\nuser    0m1.655s\nsys     0m0.058s\n\n$ time rg -P -U '^\\w{42}$' subtitles2016-sample --no-pcre2-unicode\n21225780:EverymajordevelopmentinthehistoryofAmerica\n\nreal    0m1.121s\nuser    0m1.071s\nsys     0m0.048s\n```\n\nAh, there's PCRE2's JIT shining! ripgrep's default regex engine once again\nremains about the same, but PCRE2 no longer needs to search line-by-line and it\nno longer needs to do any kind of UTF-8 checks. This allows the file to get\nmemory mapped and passed right through PCRE2's JIT at impressive speeds. (As\na brief and interesting historical note, the configuration of \"memory map +\nmultiline + no-Unicode\" is exactly the configuration used by The Silver\nSearcher. This analysis perhaps sheds some reasoning as to why that\nconfiguration is useful!)\n\nIn summary, if you want PCRE2 to go as fast as possible and you don't care\nabout Unicode and you don't care about matches possibly spanning across\nmultiple lines, then enable multiline mode with `-U` and disable PCRE2's\nUnicode support with the `--no-pcre2-unicode` flag.\n\nCaveat emptor: This author is not a PCRE2 expert, so there may be APIs that can\nimprove performance that the author missed. Similarly, there may be alternative\ndesigns for a searching tool that are more amenable to how PCRE2 works.\n\n\n<h3 name=\"rg-other-cmd\">\nWhen I run <code>rg</code>, why does it execute some other command?\n</h3>\n\nIt's likely that you have a shell alias or even another tool called `rg` which\nis interfering with ripgrep. Run `which rg` to see what it is.\n\n(Notably, the Rails plug-in for\n[Oh My Zsh](https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#rails) sets\nup an `rg` alias for `rails generate`.)\n\nProblems like this can be resolved in one of several ways:\n\n* If you're using the OMZ Rails plug-in, disable it by editing the `plugins`\n  array in your zsh configuration.\n* Temporarily bypass an existing `rg` alias by calling ripgrep as\n  `command rg`, `\\rg`, or `'rg'`.\n* Temporarily bypass an existing alias or another tool named `rg` by calling\n  ripgrep by its full path (e.g., `/usr/bin/rg` or `/usr/local/bin/rg`).\n* Permanently disable an existing `rg` alias by adding `unalias rg` to the\n  bottom of your shell configuration file (e.g., `.bash_profile` or `.zshrc`).\n* Give ripgrep its own alias that doesn't conflict with other tools/aliases by\n  adding a line like the following to the bottom of your shell configuration\n  file: `alias ripgrep='command rg'`.\n\n\n<h3 name=\"rg-alias-windows\">\nHow do I create an alias for ripgrep on Windows?\n</h3>\n\nOften you can find a need to make alias for commands you use a lot that set\ncertain flags. But PowerShell function aliases do not behave like your typical\nlinux shell alias. You always need to propagate arguments and `stdin` input.\nBut it cannot be done simply as\n`function grep() { $input | rg.exe --hidden $args }`\n\nUse below example as reference to how setup alias in PowerShell.\n\n```powershell\nfunction grep {\n    $count = @($input).Count\n    $input.Reset()\n\n    if ($count) {\n        $input | rg.exe --hidden $args\n    }\n    else {\n        rg.exe --hidden $args\n    }\n}\n```\n\nPowerShell special variables:\n\n* input - is powershell `stdin` object that allows you to access its content.\n* args - is array of arguments passed to this function.\n\nThis alias checks whether there is `stdin` input and propagates only if there\nis some lines. Otherwise empty `$input` will make powershell to trigger `rg` to\nsearch empty `stdin`.\n\n\n<h3 name=\"powershell-profile\">\nHow do I create a PowerShell profile?\n</h3>\n\nTo customize powershell on start-up, there is a special PowerShell script that\nhas to be created. In order to find its location, type `$profile`.\nSee\n[Microsoft's documentation](https://technet.microsoft.com/en-us/library/bb613488(v=vs.85).aspx)\nfor more details.\n\nAny PowerShell code in this file gets evaluated at the start of console. This\nway you can have own aliases to be created at start.\n\n\n<h3 name=\"pipe-non-ascii-windows\">\nHow do I pipe non-ASCII content to ripgrep on Windows?\n</h3>\n\nWhen piping input into native executables in PowerShell, the encoding of the\ninput is controlled by the `$OutputEncoding` variable. By default, this is set\nto US-ASCII, and any characters in the pipeline that don't have encodings in\nUS-ASCII are converted to `?` (question mark) characters.\n\nTo change this setting, set `$OutputEncoding` to a different encoding, as\nrepresented by a .NET encoding object. Some common examples are below. The\nvalue of this variable is reset when PowerShell restarts, so to make this\nchange take effect every time PowerShell is started add a line setting the\nvariable into your PowerShell profile.\n\nExample `$OutputEncoding` settings:\n\n* UTF-8 without BOM: `$OutputEncoding = [System.Text.UTF8Encoding]::new()`\n* The console's output encoding:\n  `$OutputEncoding = [System.Console]::OutputEncoding`\n\nIf you continue to have encoding problems, you can also force the encoding\nthat the console will use for printing to UTF-8 with\n`[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8`. This\nwill also reset when PowerShell is restarted, so you can add that line\nto your profile as well if you want to make the setting permanent.\n\n<h3 name=\"search-and-replace\">\nHow can I search and replace with ripgrep?\n</h3>\n\nUsing ripgrep alone, you can't. ripgrep is a search tool that will never\ntouch your files. However, the output of ripgrep can be piped to other tools\nthat do modify files on disk. See\n[this issue](https://github.com/BurntSushi/ripgrep/issues/74) for more\ninformation.\n\nsed is one such tool that can modify files on disk. sed can take a filename\nand a substitution command to search and replace in the specified file.\nFiles containing matching patterns can be provided to sed using\n\n```\nrg foo --files-with-matches\n```\n\nThe output of this command is a list of filenames that contain a match for\nthe `foo` pattern.\n\nThis list can be piped into `xargs`, which will split the filenames from\nstandard input into arguments for the command following xargs. You can use this\ncombination to pipe a list of filenames into sed for replacement. For example:\n\n```\nrg foo --files-with-matches | xargs sed -i 's/foo/bar/g'\n```\n\nwill replace all instances of 'foo' with 'bar' in the files in which\nripgrep finds the foo pattern. The `-i` flag to sed indicates that you are\nediting files in place, and `s/foo/bar/g` says that you are performing a\n**s**ubstitution of the pattern `foo` for `bar`, and that you are doing this\nsubstitution **g**lobally (all occurrences of the pattern in each file).\n\nNote: the above command assumes that you are using GNU sed. If you are using\nBSD sed (the default on macOS and FreeBSD) then you must modify the above\ncommand to be the following:\n\n```\nrg foo --files-with-matches | xargs sed -i '' 's/foo/bar/g'\n```\n\nThe `-i` flag in BSD sed requires a file extension to be given to make backups\nfor all modified files. Specifying the empty string prevents file backups from\nbeing made.\n\nFinally, if any of your file paths contain whitespace in them, then you might\nneed to delimit your file paths with a NUL terminator. This requires telling\nripgrep to output NUL bytes between each path, and telling xargs to read paths\ndelimited by NUL bytes:\n\n```\nrg foo --files-with-matches -0 | xargs -0 sed -i 's/foo/bar/g'\n```\n\nTo learn more about sed, see the sed manual\n[here](https://www.gnu.org/software/sed/manual/sed.html).\n\nAdditionally, Facebook has a tool called\n[fastmod](https://github.com/facebookincubator/fastmod)\nthat uses some of the same libraries as ripgrep and might provide a more\nergonomic search-and-replace experience.\n\n\n<h3 name=\"license\">\nHow is ripgrep licensed?\n</h3>\n\nripgrep is dual licensed under the\n[Unlicense](https://unlicense.org/)\nand MIT licenses. Specifically, you may use ripgrep under the terms of either\nlicense.\n\nThe reason why ripgrep is dual licensed this way is two-fold:\n\n1. I, as ripgrep's author, would like to participate in a small bit of\n   ideological activism by promoting the Unlicense's goal: to disclaim\n   copyright monopoly interest.\n2. I, as ripgrep's author, would like as many people to use ripgrep as\n   possible. Since the Unlicense is not a proven or well known license, ripgrep\n   is also offered under the MIT license, which is ubiquitous and accepted by\n   almost everyone.\n\nMore specifically, ripgrep and all its dependencies are compatible with this\nlicensing choice. In particular, ripgrep's dependencies (direct and transitive)\nwill always be limited to permissive licenses. That is, ripgrep will never\ndepend on code that is not permissively licensed. This means rejecting any\ndependency that uses a copyleft license such as the GPL, LGPL, MPL or any of\nthe Creative Commons ShareAlike licenses. Whether the license is \"weak\"\ncopyleft or not does not matter; ripgrep will **not** depend on it.\n\n\n<h3 name=\"posix4ever\">\nCan ripgrep replace grep?\n</h3>\n\nYes and no.\n\nIf, upon hearing that \"ripgrep can replace grep,\" you *actually* hear, \"ripgrep\ncan be used in every instance grep can be used, in exactly the same way, for\nthe same use cases, with exactly the same bug-for-bug behavior,\" then no,\nripgrep trivially *cannot* replace grep. Moreover, ripgrep will *never* replace\ngrep.\n\nIf, upon hearing that \"ripgrep can replace grep,\" you *actually* hear, \"ripgrep\ncan replace grep in some cases and not in other use cases,\" then yes, that is\nindeed true!\n\nLet's go over some of those use cases in favor of ripgrep. Some of these may\nnot apply to you. That's OK. There may be other use cases not listed here that\ndo apply to you. That's OK too.\n\n(For all claims related to performance in the following words, see my\n[blog post](https://blog.burntsushi.net/ripgrep/)\nintroducing ripgrep.)\n\n* Are you frequently searching a repository of code? If so, ripgrep might be a\n  good choice since there's likely a good chunk of your repository that you\n  don't want to search. grep, can, of course, be made to filter files using\n  recursive search, and if you don't mind writing out the requisite `--exclude`\n  rules or writing wrapper scripts, then grep might be sufficient. (I'm not\n  kidding, I myself did this with grep for almost a decade before writing\n  ripgrep.) But if you instead enjoy having a search tool respect your\n  `.gitignore`, then ripgrep might be perfect for you!\n* Are you frequently searching non-ASCII text that is UTF-8 encoded? One of\n  ripgrep's key features is that it can handle Unicode features in your\n  patterns in a way that tends to be faster than GNU grep. Unicode features\n  in ripgrep are enabled by default; there is no need to configure your locale\n  settings to use ripgrep properly because ripgrep doesn't respect your locale\n  settings.\n* Do you need to search UTF-16 files and you don't want to bother explicitly\n  transcoding them? Great. ripgrep does this for you automatically. No need\n  to enable it.\n* Do you need to search a large directory of large files? ripgrep uses\n  parallelism by default, which tends to make it faster than a standard\n  `grep -r` search. However, if you're OK writing the occasional\n  `find ./ -print0 | xargs -P8 -0 grep` command, then maybe grep is good\n  enough.\n\nHere are some cases where you might *not* want to use ripgrep. The same caveats\nfor the previous section apply.\n\n* Are you writing portable shell scripts intended to work in a variety of\n  environments? Great, probably not a good idea to use ripgrep! ripgrep has\n  nowhere near the ubiquity of grep, so if you do use ripgrep, you might need\n  to futz with the installation process more than you would with grep.\n* Do you care about POSIX compatibility? If so, then you can't use ripgrep\n  because it never was, isn't and never will be POSIX compatible.\n* Do you hate tools that try to do something smart? If so, ripgrep is all about\n  being smart, so you might prefer to just stick with grep.\n* Is there a particular feature of grep you rely on that ripgrep either doesn't\n  have or never will have? If the former, file a bug report, maybe ripgrep can\n  do it! If the latter, well, then, just use grep.\n\n\n<h3 name=\"intentcountsforsomething\">\nWhat does the \"rip\" in ripgrep mean?\n</h3>\n\nWhen I first started writing ripgrep, I called it `rep`, intending it to be a\nshorter variant of `grep`. Soon after, I renamed it to `xrep` since `rep`\nwasn't obvious enough of a name for my taste. And also because adding `x` to\nanything always makes it better, right?\n\nBefore ripgrep's first public release, I decided that I didn't like `xrep`. I\nthought it was slightly awkward to type, and despite my previous praise of the\nletter `x`, I kind of thought it was pretty lame. Being someone who really\nlikes Rust, I wanted to call it \"rustgrep\" or maybe \"rgrep\" for short. But I\nthought that was just as lame, and maybe a little too in-your-face. But I\nwanted to continue using `r` so I could at least pretend Rust had something to\ndo with it.\n\nI spent a couple of days trying to think of very short words that began with\nthe letter `r` that were even somewhat related to the task of searching. I\ndon't remember how it popped into my head, but \"rip\" came up as something that\nmeant \"fast,\" as in, \"to rip through your text.\" The fact that RIP is also\nan initialism for \"Rest in Peace\" (as in, \"ripgrep kills grep\") never really\ndawned on me. Perhaps the coincidence is too striking to believe that, but\nI didn't realize it until someone explicitly pointed it out to me after the\ninitial public release. I admit that I found it mildly amusing, but if I had\nrealized it myself before the public release, I probably would have pressed on\nand chose a different name. Alas, renaming things after a release is hard, so I\ndecided to mush on.\n\nGiven the fact that\n[ripgrep never was, is or will be a 100% drop-in replacement for\ngrep](#posix4ever),\nripgrep is neither actually a \"grep killer\" nor was it ever intended to be. It\ncertainly does eat into some of its use cases, but that's nothing that other\ntools like ack or The Silver Searcher weren't already doing.\n\n\n<h3 name=\"donations\">\nHow can I donate to ripgrep or its maintainers?\n</h3>\n\nI welcome [sponsorship](https://github.com/sponsors/BurntSushi/).\n\nOr if you'd prefer, donating to a charitably organization that you like would\nalso be most welcome. My favorites are:\n\n* [The Internet Archive](https://archive.org/donate/)\n* [Rails Girls](https://railsgirlssummerofcode.org/)\n* [Wikipedia](https://wikimediafoundation.org/support/)\n"
        },
        {
          "name": "GUIDE.md",
          "type": "blob",
          "size": 39.7470703125,
          "content": "## User Guide\n\nThis guide is intended to give an elementary description of ripgrep and an\noverview of its capabilities. This guide assumes that ripgrep is\n[installed](README.md#installation)\nand that readers have passing familiarity with using command line tools. This\nalso assumes a Unix-like system, although most commands are probably easily\ntranslatable to any command line shell environment.\n\n\n### Table of Contents\n\n* [Basics](#basics)\n* [Recursive search](#recursive-search)\n* [Automatic filtering](#automatic-filtering)\n* [Manual filtering: globs](#manual-filtering-globs)\n* [Manual filtering: file types](#manual-filtering-file-types)\n* [Replacements](#replacements)\n* [Configuration file](#configuration-file)\n* [File encoding](#file-encoding)\n* [Binary data](#binary-data)\n* [Preprocessor](#preprocessor)\n* [Common options](#common-options)\n\n\n### Basics\n\nripgrep is a command line tool that searches your files for patterns that\nyou give it. ripgrep behaves as if reading each file line by line. If a line\nmatches the pattern provided to ripgrep, then that line will be printed. If a\nline does not match the pattern, then the line is not printed.\n\nThe best way to see how this works is with an example. To show an example, we\nneed something to search. Let's try searching ripgrep's source code. First\ngrab a ripgrep source archive from\nhttps://github.com/BurntSushi/ripgrep/archive/0.7.1.zip\nand extract it:\n\n```\n$ curl -LO https://github.com/BurntSushi/ripgrep/archive/0.7.1.zip\n$ unzip 0.7.1.zip\n$ cd ripgrep-0.7.1\n$ ls\nbenchsuite  grep       tests         Cargo.toml       LICENSE-MIT\nci          ignore     wincolor      CHANGELOG.md     README.md\ncomplete    pkg        appveyor.yml  compile          snapcraft.yaml\ndoc         src        build.rs      COPYING          UNLICENSE\nglobset     termcolor  Cargo.lock    HomebrewFormula\n```\n\nLet's try our first search by looking for all occurrences of the word `fast`\nin `README.md`:\n\n```\n$ rg fast README.md\n75:  faster than both. (N.B. It is not, strictly speaking, a \"drop-in\" replacement\n88:  color and full Unicode support. Unlike GNU grep, `ripgrep` stays fast while\n119:### Is it really faster than everything else?\n124:Summarizing, `ripgrep` is fast because:\n129:  optimizations to make searching very fast.\n```\n\n(**Note:** If you see an error message from ripgrep saying that it didn't\nsearch any files, then re-run ripgrep with the `--debug` flag. One likely cause\nof this is that you have a `*` rule in a `$HOME/.gitignore` file.)\n\nSo what happened here? ripgrep read the contents of `README.md`, and for each\nline that contained `fast`, ripgrep printed it to your terminal. ripgrep also\nincluded the line number for each line by default. If your terminal supports\ncolors, then your output might actually look something like this screenshot:\n\n[![A screenshot of a sample search ripgrep](https://burntsushi.net/stuff/ripgrep-guide-sample.png)](https://burntsushi.net/stuff/ripgrep-guide-sample.png)\n\nIn this example, we searched for something called a \"literal\" string. This\nmeans that our pattern was just some normal text that we asked ripgrep to\nfind. But ripgrep supports the ability to specify patterns via [regular\nexpressions](https://en.wikipedia.org/wiki/Regular_expression). As an example,\nwhat if we wanted to find all lines have a word that contains `fast` followed\nby some number of other letters?\n\n```\n$ rg 'fast\\w+' README.md\n75:  faster than both. (N.B. It is not, strictly speaking, a \"drop-in\" replacement\n119:### Is it really faster than everything else?\n```\n\nIn this example, we used the pattern `fast\\w+`. This pattern tells ripgrep to\nlook for any lines containing the letters `fast` followed by *one or more*\nword-like characters. Namely, `\\w` matches characters that compose words (like\n`a` and `L` but unlike `.` and ` `). The `+` after the `\\w` means, \"match the\nprevious pattern one or more times.\" This means that the word `fast` won't\nmatch because there are no word characters following the final `t`. But a word\nlike `faster` will. `faste` would also match!\n\nHere's a different variation on this same theme:\n\n```\n$ rg 'fast\\w*' README.md\n75:  faster than both. (N.B. It is not, strictly speaking, a \"drop-in\" replacement\n88:  color and full Unicode support. Unlike GNU grep, `ripgrep` stays fast while\n119:### Is it really faster than everything else?\n124:Summarizing, `ripgrep` is fast because:\n129:  optimizations to make searching very fast.\n```\n\nIn this case, we used `fast\\w*` for our pattern instead of `fast\\w+`. The `*`\nmeans that it should match *zero* or more times. In this case, ripgrep will\nprint the same lines as the pattern `fast`, but if your terminal supports\ncolors, you'll notice that `faster` will be highlighted instead of just the\n`fast` prefix.\n\nIt is beyond the scope of this guide to provide a full tutorial on regular\nexpressions, but ripgrep's specific syntax is documented here:\nhttps://docs.rs/regex/*/regex/#syntax\n\n\n### Recursive search\n\nIn the previous section, we showed how to use ripgrep to search a single file.\nIn this section, we'll show how to use ripgrep to search an entire directory\nof files. In fact, *recursively* searching your current working directory is\nthe default mode of operation for ripgrep, which means doing this is very\nsimple.\n\nUsing our unzipped archive of ripgrep source code, here's how to find all\nfunction definitions whose name is `write`:\n\n```\n$ rg 'fn write\\('\nsrc/printer.rs\n469:    fn write(&mut self, buf: &[u8]) {\n\ntermcolor/src/lib.rs\n227:    fn write(&mut self, b: &[u8]) -> io::Result<usize> {\n250:    fn write(&mut self, b: &[u8]) -> io::Result<usize> {\n428:    fn write(&mut self, b: &[u8]) -> io::Result<usize> { self.wtr.write(b) }\n441:    fn write(&mut self, b: &[u8]) -> io::Result<usize> { self.wtr.write(b) }\n454:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n511:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n848:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n915:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n949:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n1114:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n1348:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n1353:    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n```\n\n(**Note:** We escape the `(` here because `(` has special significance inside\nregular expressions. You could also use `rg -F 'fn write('` to achieve the\nsame thing, where `-F` interprets your pattern as a literal string instead of\na regular expression.)\n\nIn this example, we didn't specify a file at all. Instead, ripgrep defaulted\nto searching your current directory in the absence of a path. In general,\n`rg foo` is equivalent to `rg foo ./`.\n\nThis particular search showed us results in both the `src` and `termcolor`\ndirectories. The `src` directory is the core ripgrep code where as `termcolor`\nis a dependency of ripgrep (and is used by other tools). What if we only wanted\nto search core ripgrep code? Well, that's easy, just specify the directory you\nwant:\n\n```\n$ rg 'fn write\\(' src\nsrc/printer.rs\n469:    fn write(&mut self, buf: &[u8]) {\n```\n\nHere, ripgrep limited its search to the `src` directory. Another way of doing\nthis search would be to `cd` into the `src` directory and simply use `rg 'fn\nwrite\\('` again.\n\n\n### Automatic filtering\n\nAfter recursive search, ripgrep's most important feature is what it *doesn't*\nsearch. By default, when you search a directory, ripgrep will ignore all of\nthe following:\n\n1. Files and directories that match glob patterns in these three categories:\n      1. `.gitignore` globs (including global and repo-specific globs). This\n         includes `.gitignore` files in parent directories that are part of the\n         same `git` repository. (Unless the `--no-require-git` flag is given.)\n      2. `.ignore` globs, which take precedence over all gitignore globs\n         when there's a conflict. This includes `.ignore` files in parent\n         directories.\n      3. `.rgignore` globs, which take precedence over all `.ignore` globs\n         when there's a conflict. This includes `.rgignore` files in parent\n         directories.\n2. Hidden files and directories.\n3. Binary files. (ripgrep considers any file with a `NUL` byte to be binary.)\n4. Symbolic links aren't followed.\n\nAll of these things can be toggled using various flags provided by ripgrep:\n\n1. You can disable all ignore-related filtering with the `--no-ignore` flag.\n2. Hidden files and directories can be searched with the `--hidden` (`-.` for\nshort) flag.\n3. Binary files can be searched via the `--text` (`-a` for short) flag.\n   Be careful with this flag! Binary files may emit control characters to your\n   terminal, which might cause strange behavior.\n4. ripgrep can follow symlinks with the `--follow` (`-L` for short) flag.\n\nAs a special convenience, ripgrep also provides a flag called `--unrestricted`\n(`-u` for short). Repeated uses of this flag will cause ripgrep to disable\nmore and more of its filtering. That is, `-u` will disable `.gitignore`\nhandling, `-uu` will search hidden files and directories and `-uuu` will search\nbinary files. This is useful when you're using ripgrep and you aren't sure\nwhether its filtering is hiding results from you. Tacking on a couple `-u`\nflags is a quick way to find out. (Use the `--debug` flag if you're still\nperplexed, and if that doesn't help,\n[file an issue](https://github.com/BurntSushi/ripgrep/issues/new).)\n\nripgrep's `.gitignore` handling actually goes a bit beyond just `.gitignore`\nfiles. ripgrep will also respect repository specific rules found in\n`$GIT_DIR/info/exclude`, as well as any global ignore rules in your\n`core.excludesFile` (which is usually `$XDG_CONFIG_HOME/git/ignore` on\nUnix-like systems).\n\nSometimes you want to search files that are in your `.gitignore`, so it is\npossible to specify additional ignore rules or overrides in a `.ignore`\n(application agnostic) or `.rgignore` (ripgrep specific) file.\n\nFor example, let's say you have a `.gitignore` file that looks like this:\n\n```\nlog/\n```\n\nThis generally means that any `log` directory won't be tracked by `git`.\nHowever, perhaps it contains useful output that you'd like to include in your\nsearches, but you still don't want to track it in `git`. You can achieve this\nby creating a `.ignore` file in the same directory as the `.gitignore` file\nwith the following contents:\n\n```\n!log/\n```\n\nripgrep treats `.ignore` files with higher precedence than `.gitignore` files\n(and treats `.rgignore` files with higher precedence than `.ignore` files).\nThis means ripgrep will see the `!log/` whitelist rule first and search that\ndirectory.\n\nLike `.gitignore`, a `.ignore` file can be placed in any directory. Its rules\nwill be processed with respect to the directory it resides in, just like\n`.gitignore`.\n\nTo process `.gitignore` and `.ignore` files case insensitively, use the flag\n`--ignore-file-case-insensitive`. This is especially useful on case insensitive\nfile systems like those on Windows and macOS. Note though that this can come\nwith a significant performance penalty, and is therefore disabled by default.\n\nFor a more in depth description of how glob patterns in a `.gitignore` file\nare interpreted, please see `man gitignore`.\n\n\n### Manual filtering: globs\n\nIn the previous section, we talked about ripgrep's filtering that it does by\ndefault. It is \"automatic\" because it reacts to your environment. That is, it\nuses already existing `.gitignore` files to produce more relevant search\nresults.\n\nIn addition to automatic filtering, ripgrep also provides more manual or ad hoc\nfiltering. This comes in two varieties: additional glob patterns specified in\nyour ripgrep commands and file type filtering. This section covers glob\npatterns while the next section covers file type filtering.\n\nIn our ripgrep source code (see [Basics](#basics) for instructions on how to\nget a source archive to search), let's say we wanted to see which things depend\non `clap`, our argument parser.\n\nWe could do this:\n\n```\n$ rg clap\n[lots of results]\n```\n\nBut this shows us many things, and we're only interested in where we wrote\n`clap` as a dependency. Instead, we could limit ourselves to TOML files, which\nis how dependencies are communicated to Rust's build tool, Cargo:\n\n```\n$ rg clap -g '*.toml'\nCargo.toml\n35:clap = \"2.26\"\n51:clap = \"2.26\"\n```\n\nThe `-g '*.toml'` syntax says, \"make sure every file searched matches this\nglob pattern.\" Note that we put `'*.toml'` in single quotes to prevent our\nshell from expanding the `*`.\n\nIf we wanted, we could tell ripgrep to search anything *but* `*.toml` files:\n\n```\n$ rg clap -g '!*.toml'\n[lots of results]\n```\n\nThis will give you a lot of results again as above, but they won't include\nfiles ending with `.toml`. Note that the use of a `!` here to mean \"negation\"\nis a bit non-standard, but it was chosen to be consistent with how globs in\n`.gitignore` files are written. (Although, the meaning is reversed. In\n`.gitignore` files, a `!` prefix means whitelist, and on the command line, a\n`!` means blacklist.)\n\nGlobs are interpreted in exactly the same way as `.gitignore` patterns. That\nis, later globs will override earlier globs. For example, the following command\nwill search only `*.toml` files:\n\n```\n$ rg clap -g '!*.toml' -g '*.toml'\n```\n\nInterestingly, reversing the order of the globs in this case will match\nnothing, since the presence of at least one non-blacklist glob will institute a\nrequirement that every file searched must match at least one glob. In this\ncase, the blacklist glob takes precedence over the previous glob and prevents\nany file from being searched at all!\n\n\n### Manual filtering: file types\n\nOver time, you might notice that you use the same glob patterns over and over.\nFor example, you might find yourself doing a lot of searches where you only\nwant to see results for Rust files:\n\n```\n$ rg 'fn run' -g '*.rs'\n```\n\nInstead of writing out the glob every time, you can use ripgrep's support for\nfile types:\n\n```\n$ rg 'fn run' --type rust\n```\n\nor, more succinctly,\n\n```\n$ rg 'fn run' -trust\n```\n\nThe way the `--type` flag functions is simple. It acts as a name that is\nassigned to one or more globs that match the relevant files. This lets you\nwrite a single type that might encompass a broad range of file extensions. For\nexample, if you wanted to search C files, you'd have to check both C source\nfiles and C header files:\n\n```\n$ rg 'int main' -g '*.{c,h}'\n```\n\nor you could just use the C file type:\n\n```\n$ rg 'int main' -tc\n```\n\nJust as you can write blacklist globs, you can blacklist file types too:\n\n```\n$ rg clap --type-not rust\n```\n\nor, more succinctly,\n\n```\n$ rg clap -Trust\n```\n\nThat is, `-t` means \"include files of this type\" where as `-T` means \"exclude\nfiles of this type.\"\n\nTo see the globs that make up a type, run `rg --type-list`:\n\n```\n$ rg --type-list | rg '^make:'\nmake: *.mak, *.mk, GNUmakefile, Gnumakefile, Makefile, gnumakefile, makefile\n```\n\nBy default, ripgrep comes with a bunch of pre-defined types. Generally, these\ntypes correspond to well known public formats. But you can define your own\ntypes as well. For example, perhaps you frequently search \"web\" files, which\nconsist of JavaScript, HTML and CSS:\n\n```\n$ rg --type-add 'web:*.html' --type-add 'web:*.css' --type-add 'web:*.js' -tweb title\n```\n\nor, more succinctly,\n\n```\n$ rg --type-add 'web:*.{html,css,js}' -tweb title\n```\n\nThe above command defines a new type, `web`, corresponding to the glob\n`*.{html,css,js}`. It then applies the new filter with `-tweb` and searches for\nthe pattern `title`. If you ran\n\n```\n$ rg --type-add 'web:*.{html,css,js}' --type-list\n```\n\nThen you would see your `web` type show up in the list, even though it is not\npart of ripgrep's built-in types.\n\nIt is important to stress here that the `--type-add` flag only applies to the\ncurrent command. It does not add a new file type and save it somewhere in a\npersistent form. If you want a type to be available in every ripgrep command,\nthen you should either create a shell alias:\n\n```\nalias rg=\"rg --type-add 'web:*.{html,css,js}'\"\n```\n\nor add `--type-add=web:*.{html,css,js}` to your ripgrep configuration file.\n([Configuration files](#configuration-file) are covered in more detail later.)\n\n#### The special `all` file type\n\nA special option supported by the `--type` flag is `all`. `--type all` looks\nfor a match in any of the supported file types listed by `--type-list`,\nincluding those added on the command line using `--type-add`. It's equivalent\nto the command `rg --type agda --type asciidoc --type asm ...`, where `...`\nstands for a list of `--type` flags for the rest of the types in `--type-list`.\n\nAs an example, let's suppose you have a shell script in your current directory,\n`my-shell-script`, which includes a shell library, `my-shell-library.bash`.\nBoth `rg --type sh` and `rg --type all` would only search for matches in\n`my-shell-library.bash`, not `my-shell-script`, because the globs matched\nby the `sh` file type don't include files without an extension. On the\nother hand, `rg --type-not all` would search `my-shell-script` but not\n`my-shell-library.bash`.\n\n### Replacements\n\nripgrep provides a limited ability to modify its output by replacing matched\ntext with some other text. This is easiest to explain with an example. Remember\nwhen we searched for the word `fast` in ripgrep's README?\n\n```\n$ rg fast README.md\n75:  faster than both. (N.B. It is not, strictly speaking, a \"drop-in\" replacement\n88:  color and full Unicode support. Unlike GNU grep, `ripgrep` stays fast while\n119:### Is it really faster than everything else?\n124:Summarizing, `ripgrep` is fast because:\n129:  optimizations to make searching very fast.\n```\n\nWhat if we wanted to *replace* all occurrences of `fast` with `FAST`? That's\neasy with ripgrep's `--replace` flag:\n\n```\n$ rg fast README.md --replace FAST\n75:  FASTer than both. (N.B. It is not, strictly speaking, a \"drop-in\" replacement\n88:  color and full Unicode support. Unlike GNU grep, `ripgrep` stays FAST while\n119:### Is it really FASTer than everything else?\n124:Summarizing, `ripgrep` is FAST because:\n129:  optimizations to make searching very FAST.\n```\n\nor, more succinctly,\n\n```\n$ rg fast README.md -r FAST\n[snip]\n```\n\nIn essence, the `--replace` flag applies *only* to the matching portion of text\nin the output. If you instead wanted to replace an entire line of text, then\nyou need to include the entire line in your match. For example:\n\n```\n$ rg '^.*fast.*$' README.md -r FAST\n75:FAST\n88:FAST\n119:FAST\n124:FAST\n129:FAST\n```\n\nAlternatively, you can combine the `--only-matching` (or `-o` for short) with\nthe `--replace` flag to achieve the same result:\n\n```\n$ rg fast README.md --only-matching --replace FAST\n75:FAST\n88:FAST\n119:FAST\n124:FAST\n129:FAST\n```\n\nor, more succinctly,\n\n```\n$ rg fast README.md -or FAST\n[snip]\n```\n\nFinally, replacements can include capturing groups. For example, let's say\nwe wanted to find all occurrences of `fast` followed by another word and\njoin them together with a dash. The pattern we might use for that is\n`fast\\s+(\\w+)`, which matches `fast`, followed by any amount of whitespace,\nfollowed by any number of \"word\" characters. We put the `\\w+` in a \"capturing\ngroup\" (indicated by parentheses) so that we can reference it later in our\nreplacement string. For example:\n\n```\n$ rg 'fast\\s+(\\w+)' README.md -r 'fast-$1'\n88:  color and full Unicode support. Unlike GNU grep, `ripgrep` stays fast-while\n124:Summarizing, `ripgrep` is fast-because:\n```\n\nOur replacement string here, `fast-$1`, consists of `fast-` followed by the\ncontents of the capturing group at index `1`. (Capturing groups actually start\nat index 0, but the `0`th capturing group always corresponds to the entire\nmatch. The capturing group at index `1` always corresponds to the first\nexplicit capturing group found in the regex pattern.)\n\nCapturing groups can also be named, which is sometimes more convenient than\nusing the indices. For example, the following command is equivalent to the\nabove command:\n\n```\n$ rg 'fast\\s+(?P<word>\\w+)' README.md -r 'fast-$word'\n88:  color and full Unicode support. Unlike GNU grep, `ripgrep` stays fast-while\n124:Summarizing, `ripgrep` is fast-because:\n```\n\nIt is important to note that ripgrep **will never modify your files**. The\n`--replace` flag only controls ripgrep's output. (And there is no flag to let\nyou do a replacement in a file.)\n\n\n### Configuration file\n\nIt is possible that ripgrep's default options aren't suitable in every case.\nFor that reason, and because shell aliases aren't always convenient, ripgrep\nsupports configuration files.\n\nSetting up a configuration file is simple. ripgrep will not look in any\npredetermined directory for a config file automatically. Instead, you need to\nset the `RIPGREP_CONFIG_PATH` environment variable to the file path of your\nconfig file. Once the environment variable is set, open the file and just type\nin the flags you want set automatically. There are only two rules for\ndescribing the format of the config file:\n\n1. Every line is a shell argument, after trimming whitespace.\n2. Lines starting with `#` (optionally preceded by any amount of whitespace)\nare ignored.\n\nIn particular, there is no escaping. Each line is given to ripgrep as a single\ncommand line argument verbatim.\n\nHere's an example of a configuration file, which demonstrates some of the\nformatting peculiarities:\n\n```\n$ cat $HOME/.ripgreprc\n# Don't let ripgrep vomit really long lines to my terminal, and show a preview.\n--max-columns=150\n--max-columns-preview\n\n# Add my 'web' type.\n--type-add\nweb:*.{html,css,js}*\n\n# Search hidden files / directories (e.g. dotfiles) by default\n--hidden\n\n# Using glob patterns to include/exclude files or folders\n--glob=!.git/*\n\n# or\n--glob\n!.git/*\n\n# Set the colors.\n--colors=line:none\n--colors=line:style:bold\n\n# Because who cares about case!?\n--smart-case\n```\n\nWhen we use a flag that has a value, we either put the flag and the value on\nthe same line but delimited by an `=` sign (e.g., `--max-columns=150`), or we\nput the flag and the value on two different lines. This is because ripgrep's\nargument parser knows to treat the single argument `--max-columns=150` as a\nflag with a value, but if we had written `--max-columns 150` in our\nconfiguration file, then ripgrep's argument parser wouldn't know what to do\nwith it.\n\nPutting the flag and value on different lines is exactly equivalent and is a\nmatter of style.\n\nComments are encouraged so that you remember what the config is doing. Empty\nlines are OK too.\n\nSo let's say you're using the above configuration file, but while you're at a\nterminal, you really want to be able to see lines longer than 150 columns. What\ndo you do? Thankfully, all you need to do is pass `--max-columns 0` (or `-M0`\nfor short) on the command line, which will override your configuration file's\nsetting. This works because ripgrep's configuration file is *prepended* to the\nexplicit arguments you give it on the command line. Since flags given later\noverride flags given earlier, everything works as expected. This works for most\nother flags as well, and each flag's documentation states which other flags\noverride it.\n\nIf you're confused about what configuration file ripgrep is reading arguments\nfrom, then running ripgrep with the `--debug` flag should help clarify things.\nThe debug output should note what config file is being loaded and the arguments\nthat have been read from the configuration.\n\nFinally, if you want to make absolutely sure that ripgrep *isn't* reading a\nconfiguration file, then you can pass the `--no-config` flag, which will always\nprevent ripgrep from reading extraneous configuration from the environment,\nregardless of what other methods of configuration are added to ripgrep in the\nfuture.\n\n\n### File encoding\n\n[Text encoding](https://en.wikipedia.org/wiki/Character_encoding) is a complex\ntopic, but we can try to summarize its relevancy to ripgrep:\n\n* Files are generally just a bundle of bytes. There is no reliable way to know\n  their encoding.\n* Either the encoding of the pattern must match the encoding of the files being\n  searched, or a form of transcoding must be performed that converts either the\n  pattern or the file to the same encoding as the other.\n* ripgrep tends to work best on plain text files, and among plain text files,\n  the most popular encodings likely consist of ASCII, latin1 or UTF-8. As\n  a special exception, UTF-16 is prevalent in Windows environments\n\nIn light of the above, here is how ripgrep behaves when `--encoding auto` is\ngiven, which is the default:\n\n* All input is assumed to be ASCII compatible (which means every byte that\n  corresponds to an ASCII codepoint actually is an ASCII codepoint). This\n  includes ASCII itself, latin1 and UTF-8.\n* ripgrep works best with UTF-8. For example, ripgrep's regular expression\n  engine supports Unicode features. Namely, character classes like `\\w` will\n  match all word characters by Unicode's definition and `.` will match any\n  Unicode codepoint instead of any byte. These constructions assume UTF-8,\n  so they simply won't match when they come across bytes in a file that aren't\n  UTF-8.\n* To handle the UTF-16 case, ripgrep will do something called \"BOM sniffing\"\n  by default. That is, the first three bytes of a file will be read, and if\n  they correspond to a UTF-16 BOM, then ripgrep will transcode the contents of\n  the file from UTF-16 to UTF-8, and then execute the search on the transcoded\n  version of the file. (This incurs a performance penalty since transcoding\n  is needed in addition to regex searching.) If the file contains invalid\n  UTF-16, then the Unicode replacement codepoint is substituted in place of\n  invalid code units.\n* To handle other cases, ripgrep provides a `-E/--encoding` flag, which permits\n  you to specify an encoding from the\n  [Encoding Standard](https://encoding.spec.whatwg.org/#concept-encoding-get).\n  ripgrep will assume *all* files searched are the encoding specified (unless\n  the file has a BOM) and will perform a transcoding step just like in the\n  UTF-16 case described above.\n\nBy default, ripgrep will not require its input be valid UTF-8. That is, ripgrep\ncan and will search arbitrary bytes. The key here is that if you're searching\ncontent that isn't UTF-8, then the usefulness of your pattern will degrade. If\nyou're searching bytes that aren't ASCII compatible, then it's likely the\npattern won't find anything. With all that said, this mode of operation is\nimportant, because it lets you find ASCII or UTF-8 *within* files that are\notherwise arbitrary bytes.\n\nAs a special case, the `-E/--encoding` flag supports the value `none`, which\nwill completely disable all encoding related logic, including BOM sniffing.\nWhen `-E/--encoding` is set to `none`, ripgrep will search the raw bytes of\nthe underlying file with no transcoding step. For example, here's how you might\nsearch the raw UTF-16 encoding of the string `Шерлок`:\n\n```\n$ rg '(?-u)\\(\\x045\\x04@\\x04;\\x04>\\x04:\\x04' -E none -a some-utf16-file\n```\n\nOf course, that's just an example meant to show how one can drop down into\nraw bytes. Namely, the simpler command works as you might expect automatically:\n\n```\n$ rg 'Шерлок' some-utf16-file\n```\n\nFinally, it is possible to disable ripgrep's Unicode support from within the\nregular expression. For example, let's say you wanted `.` to match any byte\nrather than any Unicode codepoint. (You might want this while searching a\nbinary file, since `.` by default will not match invalid UTF-8.) You could do\nthis by disabling Unicode via a regular expression flag:\n\n```\n$ rg '(?-u:.)'\n```\n\nThis works for any part of the pattern. For example, the following will find\nany Unicode word character followed by any ASCII word character followed by\nanother Unicode word character:\n\n```\n$ rg '\\w(?-u:\\w)\\w'\n```\n\n\n### Binary data\n\nIn addition to skipping hidden files and files in your `.gitignore` by default,\nripgrep also attempts to skip binary files. ripgrep does this by default\nbecause binary files (like PDFs or images) are typically not things you want to\nsearch when searching for regex matches. Moreover, if content in a binary file\ndid match, then it's possible for undesirable binary data to be printed to your\nterminal and wreak havoc.\n\nUnfortunately, unlike skipping hidden files and respecting your `.gitignore`\nrules, a file cannot as easily be classified as binary. In order to figure out\nwhether a file is binary, the most effective heuristic that balances\ncorrectness with performance is to simply look for `NUL` bytes. At that point,\nthe determination is simple: a file is considered \"binary\" if and only if it\ncontains a `NUL` byte somewhere in its contents.\n\nThe issue is that while most binary files will have a `NUL` byte toward the\nbeginning of its contents, this is not necessarily true. The `NUL` byte might\nbe the very last byte in a large file, but that file is still considered\nbinary. While this leads to a fair amount of complexity inside ripgrep's\nimplementation, it also results in some unintuitive user experiences.\n\nAt a high level, ripgrep operates in three different modes with respect to\nbinary files:\n\n1. The default mode is to attempt to remove binary files from a search\n   completely. This is meant to mirror how ripgrep removes hidden files and\n   files in your `.gitignore` automatically. That is, as soon as a file is\n   detected as binary, searching stops. If a match was already printed (because\n   it was detected long before a `NUL` byte), then ripgrep will print a warning\n   message indicating that the search stopped prematurely. This default mode\n   **only applies to files searched by ripgrep as a result of recursive\n   directory traversal**, which is consistent with ripgrep's other automatic\n   filtering. For example, `rg foo .file` will search `.file` even though it\n   is hidden. Similarly, `rg foo binary-file` will search `binary-file` in\n   \"binary\" mode automatically.\n2. Binary mode is similar to the default mode, except it will not always\n   stop searching after it sees a `NUL` byte. Namely, in this mode, ripgrep\n   will continue searching a file that is known to be binary until the first\n   of two conditions is met: 1) the end of the file has been reached or 2) a\n   match is or has been seen. This means that in binary mode, if ripgrep\n   reports no matches, then there are no matches in the file. When a match does\n   occur, ripgrep prints a message similar to one it prints when in its default\n   mode indicating that the search has stopped prematurely. This mode can be\n   forcefully enabled for all files with the `--binary` flag. The purpose of\n   binary mode is to provide a way to discover matches in all files, but to\n   avoid having binary data dumped into your terminal.\n3. Text mode completely disables all binary detection and searches all files\n   as if they were text. This is useful when searching a file that is\n   predominantly text but contains a `NUL` byte, or if you are specifically\n   trying to search binary data. This mode can be enabled with the `-a/--text`\n   flag. Note that when using this mode on very large binary files, it is\n   possible for ripgrep to use a lot of memory.\n\nUnfortunately, there is one additional complexity in ripgrep that can make it\ndifficult to reason about binary files. That is, the way binary detection works\ndepends on the way that ripgrep searches your files. Specifically:\n\n* When ripgrep uses memory maps, then binary detection is only performed on the\n  first few kilobytes of the file in addition to every matching line.\n* When ripgrep doesn't use memory maps, then binary detection is performed on\n  all bytes searched.\n\nThis means that whether a file is detected as binary or not can change based\non the internal search strategy used by ripgrep. If you prefer to keep\nripgrep's binary file detection consistent, then you can disable memory maps\nvia the `--no-mmap` flag. (The cost will be a small performance regression when\nsearching very large files on some platforms.)\n\n\n### Preprocessor\n\nIn ripgrep, a preprocessor is any type of command that can be run to transform\nthe input of every file before ripgrep searches it. This makes it possible to\nsearch virtually any kind of content that can be automatically converted to\ntext without having to teach ripgrep how to read said content.\n\nOne common example is searching PDFs. PDFs are first and foremost meant to be\ndisplayed to users. But PDFs often have text streams in them that can be useful\nto search. In our case, we want to search Bruce Watson's excellent\ndissertation,\n[Taxonomies and Toolkits of Regular Language Algorithms](https://burntsushi.net/stuff/1995-watson.pdf).\nAfter downloading it, let's try searching it:\n\n```\n$ rg 'The Commentz-Walter algorithm' 1995-watson.pdf\n$\n```\n\nSurely, a dissertation on regular language algorithms would mention\nCommentz-Walter. Indeed it does, but our search isn't picking it up because\nPDFs are a binary format, and the text shown in the PDF may not be encoded as\nsimple contiguous UTF-8. Namely, even passing the `-a/--text` flag to ripgrep\nwill not make our search work.\n\nOne way to fix this is to convert the PDF to plain text first. This won't work\nwell for all PDFs, but does great in a lot of cases. (Note that the tool we\nuse, `pdftotext`, is part of the [poppler](https://poppler.freedesktop.org)\nPDF rendering library.)\n\n```\n$ pdftotext 1995-watson.pdf > 1995-watson.txt\n$ rg 'The Commentz-Walter algorithm' 1995-watson.txt\n316:The Commentz-Walter algorithms : : : : : : : : : : : : : : :\n7165:4.4 The Commentz-Walter algorithms\n10062:in input string S , we obtain the Boyer-Moore algorithm. The Commentz-Walter algorithm\n17218:The Commentz-Walter algorithm (and its variants) displayed more interesting behaviour,\n17249:Aho-Corasick algorithms are used extensively. The Commentz-Walter algorithms are used\n17297: The Commentz-Walter algorithms (CW). In all versions of the CW algorithms, a common program skeleton is used with di erent shift functions. The CW algorithms are\n```\n\nBut having to explicitly convert every file can be a pain, especially when you\nhave a directory full of PDF files. Instead, we can use ripgrep's preprocessor\nfeature to search the PDF. ripgrep's `--pre` flag works by taking a single\ncommand name and then executing that command for every file that it searches.\nripgrep passes the file path as the first and only argument to the command and\nalso sends the contents of the file to stdin. So let's write a simple shell\nscript that wraps `pdftotext` in a way that conforms to this interface:\n\n```\n$ cat preprocess\n#!/bin/sh\n\nexec pdftotext - -\n```\n\nWith `preprocess` in the same directory as `1995-watson.pdf`, we can now use it\nto search the PDF:\n\n```\n$ rg --pre ./preprocess 'The Commentz-Walter algorithm' 1995-watson.pdf\n316:The Commentz-Walter algorithms : : : : : : : : : : : : : : :\n7165:4.4 The Commentz-Walter algorithms\n10062:in input string S , we obtain the Boyer-Moore algorithm. The Commentz-Walter algorithm\n17218:The Commentz-Walter algorithm (and its variants) displayed more interesting behaviour,\n17249:Aho-Corasick algorithms are used extensively. The Commentz-Walter algorithms are used\n17297: The Commentz-Walter algorithms (CW). In all versions of the CW algorithms, a common program skeleton is used with di erent shift functions. The CW algorithms are\n```\n\nNote that `preprocess` must be resolvable to a command that ripgrep can read.\nThe simplest way to do this is to put your preprocessor command in a directory\nthat is in your `PATH` (or equivalent), or otherwise use an absolute path.\n\nAs a bonus, this turns out to be quite a bit faster than other specialized PDF\ngrepping tools:\n\n```\n$ time rg --pre ./preprocess 'The Commentz-Walter algorithm' 1995-watson.pdf -c\n6\n\nreal    0.697\nuser    0.684\nsys     0.007\nmaxmem  16 MB\nfaults  0\n\n$ time pdfgrep 'The Commentz-Walter algorithm' 1995-watson.pdf -c\n6\n\nreal    1.336\nuser    1.310\nsys     0.023\nmaxmem  16 MB\nfaults  0\n```\n\nIf you wind up needing to search a lot of PDFs, then ripgrep's parallelism can\nmake the speed difference even greater.\n\n#### A more robust preprocessor\n\nOne of the problems with the aforementioned preprocessor is that it will fail\nif you try to search a file that isn't a PDF:\n\n```\n$ echo foo > not-a-pdf\n$ rg --pre ./preprocess 'The Commentz-Walter algorithm' not-a-pdf\nnot-a-pdf: preprocessor command failed: '\"./preprocess\" \"not-a-pdf\"':\n-------------------------------------------------------------------------------\nSyntax Warning: May not be a PDF file (continuing anyway)\nSyntax Error: Couldn't find trailer dictionary\nSyntax Error: Couldn't find trailer dictionary\nSyntax Error: Couldn't read xref table\n```\n\nTo fix this, we can make our preprocessor script a bit more robust by only\nrunning `pdftotext` when we think the input is a non-empty PDF:\n\n```\n$ cat preprocessor\n#!/bin/sh\n\ncase \"$1\" in\n*.pdf)\n  # The -s flag ensures that the file is non-empty.\n  if [ -s \"$1\" ]; then\n    exec pdftotext - -\n  else\n    exec cat\n  fi\n  ;;\n*)\n  exec cat\n  ;;\nesac\n```\n\nWe can even extend our preprocessor to search other kinds of files. Sometimes\nwe don't always know the file type from the file name, so we can use the `file`\nutility to \"sniff\" the type of the file based on its contents:\n\n```\n$ cat processor\n#!/bin/sh\n\ncase \"$1\" in\n*.pdf)\n  # The -s flag ensures that the file is non-empty.\n  if [ -s \"$1\" ]; then\n    exec pdftotext - -\n  else\n    exec cat\n  fi\n  ;;\n*)\n  case $(file \"$1\") in\n  *Zstandard*)\n    exec pzstd -cdq\n    ;;\n  *)\n    exec cat\n    ;;\n  esac\n  ;;\nesac\n```\n\n#### Reducing preprocessor overhead\n\nThere is one more problem with the above approach: it requires running a\npreprocessor for every single file that ripgrep searches. If every file needs\na preprocessor, then this is OK. But if most don't, then this can substantially\nslow down searches because of the overhead of launching new processors. You\ncan avoid this by telling ripgrep to only invoke the preprocessor when the file\npath matches a glob. For example, consider the performance difference even when\nsearching a repository as small as ripgrep's:\n\n```\n$ time rg --pre pre-rg 'fn is_empty' -c\ncrates/globset/src/lib.rs:1\ncrates/matcher/src/lib.rs:2\ncrates/ignore/src/overrides.rs:1\ncrates/ignore/src/gitignore.rs:1\ncrates/ignore/src/types.rs:1\n\nreal    0.138\nuser    0.485\nsys     0.209\nmaxmem  7 MB\nfaults  0\n\n$ time rg --pre pre-rg --pre-glob '*.pdf' 'fn is_empty' -c\ncrates/globset/src/lib.rs:1\ncrates/ignore/src/types.rs:1\ncrates/ignore/src/gitignore.rs:1\ncrates/ignore/src/overrides.rs:1\ncrates/matcher/src/lib.rs:2\n\nreal    0.008\nuser    0.010\nsys     0.002\nmaxmem  7 MB\nfaults  0\n```\n\n\n### Common options\n\nripgrep has a lot of flags. Too many to keep in your head at once. This section\nis intended to give you a sampling of some of the most important and frequently\nused options that will likely impact how you use ripgrep on a regular basis.\n\n* `-h`: Show ripgrep's condensed help output.\n* `--help`: Show ripgrep's longer form help output. (Nearly what you'd find in\n  ripgrep's man page, so pipe it into a pager!)\n* `-i/--ignore-case`: When searching for a pattern, ignore case differences.\n  That is `rg -i fast` matches `fast`, `fASt`, `FAST`, etc.\n* `-S/--smart-case`: This is similar to `--ignore-case`, but disables itself\n  if the pattern contains any uppercase letters. Usually this flag is put into\n  alias or a config file.\n* `-F/--fixed-strings`: Disable regular expression matching and treat the pattern\n   as a literal string.\n* `-w/--word-regexp`: Require that all matches of the pattern be surrounded\n  by word boundaries. That is, given `pattern`, the `--word-regexp` flag will\n  cause ripgrep to behave as if `pattern` were actually `\\b(?:pattern)\\b`.\n* `-c/--count`: Report a count of total matched lines.\n* `--files`: Print the files that ripgrep *would* search, but don't actually\n  search them.\n* `-a/--text`: Search binary files as if they were plain text.\n* `-U/--multiline`: Permit matches to span multiple lines.\n* `-z/--search-zip`: Search compressed files (gzip, bzip2, lzma, xz, lz4,\n  brotli, zstd). This is disabled by default.\n* `-C/--context`: Show the lines surrounding a match.\n* `--sort path`: Force ripgrep to sort its output by file name. (This disables\n  parallelism, so it might be slower.)\n* `-L/--follow`: Follow symbolic links while recursively searching.\n* `-M/--max-columns`: Limit the length of lines printed by ripgrep.\n* `--debug`: Shows ripgrep's debug output. This is useful for understanding\n  why a particular file might be ignored from search, or what kinds of\n  configuration ripgrep is loading from the environment.\n"
        },
        {
          "name": "HomebrewFormula",
          "type": "blob",
          "size": 0.0078125,
          "content": "pkg/brew"
        },
        {
          "name": "LICENSE-MIT",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Andrew Gallant\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.5107421875,
          "content": "ripgrep (rg)\n------------\nripgrep is a line-oriented search tool that recursively searches the current\ndirectory for a regex pattern. By default, ripgrep will respect gitignore rules\nand automatically skip hidden files/directories and binary files. (To disable\nall automatic filtering by default, use `rg -uuu`.) ripgrep has first class\nsupport on Windows, macOS and Linux, with binary downloads available for [every\nrelease](https://github.com/BurntSushi/ripgrep/releases). ripgrep is similar to\nother popular search tools like The Silver Searcher, ack and grep.\n\n[![Build status](https://github.com/BurntSushi/ripgrep/workflows/ci/badge.svg)](https://github.com/BurntSushi/ripgrep/actions)\n[![Crates.io](https://img.shields.io/crates/v/ripgrep.svg)](https://crates.io/crates/ripgrep)\n[![Packaging status](https://repology.org/badge/tiny-repos/ripgrep.svg)](https://repology.org/project/ripgrep/badges)\n\nDual-licensed under MIT or the [UNLICENSE](https://unlicense.org).\n\n\n### CHANGELOG\n\nPlease see the [CHANGELOG](CHANGELOG.md) for a release history.\n\n### Documentation quick links\n\n* [Installation](#installation)\n* [User Guide](GUIDE.md)\n* [Frequently Asked Questions](FAQ.md)\n* [Regex syntax](https://docs.rs/regex/1/regex/#syntax)\n* [Configuration files](GUIDE.md#configuration-file)\n* [Shell completions](FAQ.md#complete)\n* [Building](#building)\n* [Translations](#translations)\n\n\n### Screenshot of search results\n\n[![A screenshot of a sample search with ripgrep](https://burntsushi.net/stuff/ripgrep1.png)](https://burntsushi.net/stuff/ripgrep1.png)\n\n\n### Quick examples comparing tools\n\nThis example searches the entire\n[Linux kernel source tree](https://github.com/BurntSushi/linux)\n(after running `make defconfig && make -j8`) for `[A-Z]+_SUSPEND`, where\nall matches must be words. Timings were collected on a system with an Intel\ni9-12900K 5.2 GHz.\n\nPlease remember that a single benchmark is never enough! See my\n[blog post on ripgrep](https://blog.burntsushi.net/ripgrep/)\nfor a very detailed comparison with more benchmarks and analysis.\n\n| Tool | Command | Line count | Time |\n| ---- | ------- | ---------- | ---- |\n| ripgrep (Unicode) | `rg -n -w '[A-Z]+_SUSPEND'` | 536 | **0.082s** (1.00x) |\n| [hypergrep](https://github.com/p-ranav/hypergrep) | `hgrep -n -w '[A-Z]+_SUSPEND'` | 536 | 0.167s (2.04x) |\n| [git grep](https://www.kernel.org/pub/software/scm/git/docs/git-grep.html) | `git grep -P -n -w '[A-Z]+_SUSPEND'` | 536 | 0.273s (3.34x) |\n| [The Silver Searcher](https://github.com/ggreer/the_silver_searcher) | `ag -w '[A-Z]+_SUSPEND'` | 534 | 0.443s (5.43x) |\n| [ugrep](https://github.com/Genivia/ugrep) | `ugrep -r --ignore-files --no-hidden -I -w '[A-Z]+_SUSPEND'` | 536 | 0.639s (7.82x) |\n| [git grep](https://www.kernel.org/pub/software/scm/git/docs/git-grep.html) | `LC_ALL=C git grep -E -n -w '[A-Z]+_SUSPEND'` | 536 | 0.727s (8.91x) |\n| [git grep (Unicode)](https://www.kernel.org/pub/software/scm/git/docs/git-grep.html) | `LC_ALL=en_US.UTF-8 git grep -E -n -w '[A-Z]+_SUSPEND'` | 536 | 2.670s (32.70x) |\n| [ack](https://github.com/beyondgrep/ack3) | `ack -w '[A-Z]+_SUSPEND'` | 2677 | 2.935s (35.94x) |\n\nHere's another benchmark on the same corpus as above that disregards gitignore\nfiles and searches with a whitelist instead. The corpus is the same as in the\nprevious benchmark, and the flags passed to each command ensure that they are\ndoing equivalent work:\n\n| Tool | Command | Line count | Time |\n| ---- | ------- | ---------- | ---- |\n| ripgrep | `rg -uuu -tc -n -w '[A-Z]+_SUSPEND'` | 447 | **0.063s** (1.00x) |\n| [ugrep](https://github.com/Genivia/ugrep) | `ugrep -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'` | 447 | 0.607s (9.62x) |\n| [GNU grep](https://www.gnu.org/software/grep/) | `grep -E -r -n --include='*.c' --include='*.h' -w '[A-Z]+_SUSPEND'` | 447 | 0.674s (10.69x) |\n\nNow we'll move to searching on single large file. Here is a straight-up\ncomparison between ripgrep, ugrep and GNU grep on a file cached in memory\n(~13GB, [`OpenSubtitles.raw.en.gz`](http://opus.nlpl.eu/download.php?f=OpenSubtitles/v2018/mono/OpenSubtitles.raw.en.gz), decompressed):\n\n| Tool | Command | Line count | Time |\n| ---- | ------- | ---------- | ---- |\n| ripgrep (Unicode) | `rg -w 'Sherlock [A-Z]\\w+'` | 7882 | **1.042s** (1.00x) |\n| [ugrep](https://github.com/Genivia/ugrep) | `ugrep -w 'Sherlock [A-Z]\\w+'` | 7882 | 1.339s (1.28x) |\n| [GNU grep (Unicode)](https://www.gnu.org/software/grep/) | `LC_ALL=en_US.UTF-8 egrep -w 'Sherlock [A-Z]\\w+'` | 7882 | 6.577s (6.31x) |\n\nIn the above benchmark, passing the `-n` flag (for showing line numbers)\nincreases the times to `1.664s` for ripgrep and `9.484s` for GNU grep. ugrep\ntimes are unaffected by the presence or absence of `-n`.\n\nBeware of performance cliffs though:\n\n| Tool | Command | Line count | Time |\n| ---- | ------- | ---------- | ---- |\n| ripgrep (Unicode) | `rg -w '[A-Z]\\w+ Sherlock [A-Z]\\w+'` | 485 | **1.053s** (1.00x) |\n| [GNU grep (Unicode)](https://www.gnu.org/software/grep/) | `LC_ALL=en_US.UTF-8 grep -E -w '[A-Z]\\w+ Sherlock [A-Z]\\w+'` | 485 | 6.234s (5.92x) |\n| [ugrep](https://github.com/Genivia/ugrep) | `ugrep -w '[A-Z]\\w+ Sherlock [A-Z]\\w+'` | 485 | 28.973s (27.51x) |\n\nAnd performance can drop precipitously across the board when searching big\nfiles for patterns without any opportunities for literal optimizations:\n\n| Tool | Command | Line count | Time |\n| ---- | ------- | ---------- | ---- |\n| ripgrep | `rg '[A-Za-z]{30}'` | 6749 | **15.569s** (1.00x) |\n| [ugrep](https://github.com/Genivia/ugrep) | `ugrep -E '[A-Za-z]{30}'` | 6749 | 21.857s (1.40x) |\n| [GNU grep](https://www.gnu.org/software/grep/) | `LC_ALL=C grep -E '[A-Za-z]{30}'` | 6749 | 32.409s (2.08x) |\n| [GNU grep (Unicode)](https://www.gnu.org/software/grep/) | `LC_ALL=en_US.UTF-8 grep -E '[A-Za-z]{30}'` | 6795 | 8m30s (32.74x) |\n\nFinally, high match counts also tend to both tank performance and smooth\nout the differences between tools (because performance is dominated by how\nquickly one can handle a match and not the algorithm used to detect the match,\ngenerally speaking):\n\n| Tool | Command | Line count | Time |\n| ---- | ------- | ---------- | ---- |\n| ripgrep | `rg the` | 83499915 | **6.948s** (1.00x) |\n| [ugrep](https://github.com/Genivia/ugrep) | `ugrep the` | 83499915 | 11.721s (1.69x) |\n| [GNU grep](https://www.gnu.org/software/grep/) | `LC_ALL=C grep the` | 83499915 | 15.217s (2.19x) |\n\n### Why should I use ripgrep?\n\n* It can replace many use cases served by other search tools\n  because it contains most of their features and is generally faster. (See\n  [the FAQ](FAQ.md#posix4ever) for more details on whether ripgrep can truly\n  replace grep.)\n* Like other tools specialized to code search, ripgrep defaults to\n  [recursive search](GUIDE.md#recursive-search) and does [automatic\n  filtering](GUIDE.md#automatic-filtering). Namely, ripgrep won't search files\n  ignored by your `.gitignore`/`.ignore`/`.rgignore` files, it won't search\n  hidden files and it won't search binary files. Automatic filtering can be\n  disabled with `rg -uuu`.\n* ripgrep can [search specific types of files](GUIDE.md#manual-filtering-file-types).\n  For example, `rg -tpy foo` limits your search to Python files and `rg -Tjs\n  foo` excludes JavaScript files from your search. ripgrep can be taught about\n  new file types with custom matching rules.\n* ripgrep supports many features found in `grep`, such as showing the context\n  of search results, searching multiple patterns, highlighting matches with\n  color and full Unicode support. Unlike GNU grep, ripgrep stays fast while\n  supporting Unicode (which is always on).\n* ripgrep has optional support for switching its regex engine to use PCRE2.\n  Among other things, this makes it possible to use look-around and\n  backreferences in your patterns, which are not supported in ripgrep's default\n  regex engine. PCRE2 support can be enabled with `-P/--pcre2` (use PCRE2\n  always) or `--auto-hybrid-regex` (use PCRE2 only if needed). An alternative\n  syntax is provided via the `--engine (default|pcre2|auto)` option.\n* ripgrep has [rudimentary support for replacements](GUIDE.md#replacements),\n  which permit rewriting output based on what was matched.\n* ripgrep supports [searching files in text encodings](GUIDE.md#file-encoding)\n  other than UTF-8, such as UTF-16, latin-1, GBK, EUC-JP, Shift_JIS and more.\n  (Some support for automatically detecting UTF-16 is provided. Other text\n  encodings must be specifically specified with the `-E/--encoding` flag.)\n* ripgrep supports searching files compressed in a common format (brotli,\n  bzip2, gzip, lz4, lzma, xz, or zstandard) with the `-z/--search-zip` flag.\n* ripgrep supports\n  [arbitrary input preprocessing filters](GUIDE.md#preprocessor)\n  which could be PDF text extraction, less supported decompression, decrypting,\n  automatic encoding detection and so on.\n* ripgrep can be configured via a\n  [configuration file](GUIDE.md#configuration-file).\n\nIn other words, use ripgrep if you like speed, filtering by default, fewer\nbugs and Unicode support.\n\n\n### Why shouldn't I use ripgrep?\n\nDespite initially not wanting to add every feature under the sun to ripgrep,\nover time, ripgrep has grown support for most features found in other file\nsearching tools. This includes searching for results spanning across multiple\nlines, and opt-in support for PCRE2, which provides look-around and\nbackreference support.\n\nAt this point, the primary reasons not to use ripgrep probably consist of one\nor more of the following:\n\n* You need a portable and ubiquitous tool. While ripgrep works on Windows,\n  macOS and Linux, it is not ubiquitous and it does not conform to any\n  standard such as POSIX. The best tool for this job is good old grep.\n* There still exists some other feature (or bug) not listed in this README that\n  you rely on that's in another tool that isn't in ripgrep.\n* There is a performance edge case where ripgrep doesn't do well where another\n  tool does do well. (Please file a bug report!)\n* ripgrep isn't possible to install on your machine or isn't available for your\n  platform. (Please file a bug report!)\n\n\n### Is it really faster than everything else?\n\nGenerally, yes. A large number of benchmarks with detailed analysis for each is\n[available on my blog](https://blog.burntsushi.net/ripgrep/).\n\nSummarizing, ripgrep is fast because:\n\n* It is built on top of\n  [Rust's regex engine](https://github.com/rust-lang/regex).\n  Rust's regex engine uses finite automata, SIMD and aggressive literal\n  optimizations to make searching very fast. (PCRE2 support can be opted into\n  with the `-P/--pcre2` flag.)\n* Rust's regex library maintains performance with full Unicode support by\n  building UTF-8 decoding directly into its deterministic finite automaton\n  engine.\n* It supports searching with either memory maps or by searching incrementally\n  with an intermediate buffer. The former is better for single files and the\n  latter is better for large directories. ripgrep chooses the best searching\n  strategy for you automatically.\n* Applies your ignore patterns in `.gitignore` files using a\n  [`RegexSet`](https://docs.rs/regex/1/regex/struct.RegexSet.html).\n  That means a single file path can be matched against multiple glob patterns\n  simultaneously.\n* It uses a lock-free parallel recursive directory iterator, courtesy of\n  [`crossbeam`](https://docs.rs/crossbeam) and\n  [`ignore`](https://docs.rs/ignore).\n\n\n### Feature comparison\n\nAndy Lester, author of [ack](https://beyondgrep.com/), has published an\nexcellent table comparing the features of ack, ag, git-grep, GNU grep and\nripgrep: https://beyondgrep.com/feature-comparison/\n\nNote that ripgrep has grown a few significant new features recently that\nare not yet present in Andy's table. This includes, but is not limited to,\nconfiguration files, passthru, support for searching compressed files,\nmultiline search and opt-in fancy regex support via PCRE2.\n\n\n### Playground\n\nIf you'd like to try ripgrep before installing, there's an unofficial\n[playground](https://codapi.org/ripgrep/) and an [interactive\ntutorial](https://codapi.org/try/ripgrep/).\n\nIf you have any questions about these, please open an issue in the [tutorial\nrepo](https://github.com/nalgeon/tryxinyminutes).\n\n\n### Installation\n\nThe binary name for ripgrep is `rg`.\n\n**[Archives of precompiled binaries for ripgrep are available for Windows,\nmacOS and Linux.](https://github.com/BurntSushi/ripgrep/releases)** Linux and\nWindows binaries are static executables. Users of platforms not explicitly\nmentioned below are advised to download one of these archives.\n\nIf you're a **macOS Homebrew** or a **Linuxbrew** user, then you can install\nripgrep from homebrew-core:\n\n```\n$ brew install ripgrep\n```\n\nIf you're a **MacPorts** user, then you can install ripgrep from the\n[official ports](https://www.macports.org/ports.php?by=name&substr=ripgrep):\n\n```\n$ sudo port install ripgrep\n```\n\nIf you're a **Windows Chocolatey** user, then you can install ripgrep from the\n[official repo](https://chocolatey.org/packages/ripgrep):\n\n```\n$ choco install ripgrep\n```\n\nIf you're a **Windows Scoop** user, then you can install ripgrep from the\n[official bucket](https://github.com/ScoopInstaller/Main/blob/master/bucket/ripgrep.json):\n\n```\n$ scoop install ripgrep\n```\n\nIf you're a **Windows Winget** user, then you can install ripgrep from the\n[winget-pkgs](https://github.com/microsoft/winget-pkgs/tree/master/manifests/b/BurntSushi/ripgrep)\nrepository:\n\n```\n$ winget install BurntSushi.ripgrep.MSVC\n```\n\nIf you're an **Arch Linux** user, then you can install ripgrep from the official repos:\n\n```\n$ sudo pacman -S ripgrep\n```\n\nIf you're a **Gentoo** user, you can install ripgrep from the\n[official repo](https://packages.gentoo.org/packages/sys-apps/ripgrep):\n\n```\n$ sudo emerge sys-apps/ripgrep\n```\n\nIf you're a **Fedora** user, you can install ripgrep from official\nrepositories.\n\n```\n$ sudo dnf install ripgrep\n```\n\nIf you're an **openSUSE** user, ripgrep is included in **openSUSE Tumbleweed**\nand **openSUSE Leap** since 15.1.\n\n```\n$ sudo zypper install ripgrep\n```\n\nIf you're a **RHEL/CentOS 7/8** user, you can install ripgrep from\n[copr](https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/):\n\n```\n$ sudo yum install -y yum-utils\n$ sudo yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo\n$ sudo yum install ripgrep\n```\n\nIf you're a **Nix** user, you can install ripgrep from\n[nixpkgs](https://github.com/NixOS/nixpkgs/blob/master/pkgs/tools/text/ripgrep/default.nix):\n\n```\n$ nix-env --install ripgrep\n```\n\nIf you're a **Flox** user, you can install ripgrep as follows:\n\n```\n$ flox install ripgrep\n```\n\nIf you're a **Guix** user, you can install ripgrep from the official\npackage collection:\n\n```\n$ guix install ripgrep\n```\n\nIf you're a **Debian** user (or a user of a Debian derivative like **Ubuntu**),\nthen ripgrep can be installed using a binary `.deb` file provided in each\n[ripgrep release](https://github.com/BurntSushi/ripgrep/releases).\n\n```\n$ curl -LO https://github.com/BurntSushi/ripgrep/releases/download/14.1.0/ripgrep_14.1.0-1_amd64.deb\n$ sudo dpkg -i ripgrep_14.1.0-1_amd64.deb\n```\n\nIf you run Debian stable, ripgrep is [officially maintained by\nDebian](https://tracker.debian.org/pkg/rust-ripgrep), although its version may\nbe older than the `deb` package available in the previous step.\n\n```\n$ sudo apt-get install ripgrep\n```\n\nIf you're an **Ubuntu Cosmic (18.10)** (or newer) user, ripgrep is\n[available](https://launchpad.net/ubuntu/+source/rust-ripgrep) using the same\npackaging as Debian:\n\n```\n$ sudo apt-get install ripgrep\n```\n\n(N.B. Various snaps for ripgrep on Ubuntu are also available, but none of them\nseem to work right and generate a number of very strange bug reports that I\ndon't know how to fix and don't have the time to fix. Therefore, it is no\nlonger a recommended installation option.)\n\nIf you're an **ALT** user, you can install ripgrep from the\n[official repo](https://packages.altlinux.org/en/search?name=ripgrep):\n\n```\n$ sudo apt-get install ripgrep\n```\n\nIf you're a **FreeBSD** user, then you can install ripgrep from the\n[official ports](https://www.freshports.org/textproc/ripgrep/):\n\n```\n$ sudo pkg install ripgrep\n```\n\nIf you're an **OpenBSD** user, then you can install ripgrep from the\n[official ports](https://openports.se/textproc/ripgrep):\n\n```\n$ doas pkg_add ripgrep\n```\n\nIf you're a **NetBSD** user, then you can install ripgrep from\n[pkgsrc](https://pkgsrc.se/textproc/ripgrep):\n\n```\n$ sudo pkgin install ripgrep\n```\n\nIf you're a **Haiku x86_64** user, then you can install ripgrep from the\n[official ports](https://github.com/haikuports/haikuports/tree/master/sys-apps/ripgrep):\n\n```\n$ sudo pkgman install ripgrep\n```\n\nIf you're a **Haiku x86_gcc2** user, then you can install ripgrep from the\nsame port as Haiku x86_64 using the x86 secondary architecture build:\n\n```\n$ sudo pkgman install ripgrep_x86\n```\n\nIf you're a **Void Linux** user, then you can install ripgrep from the\n[official repository](https://voidlinux.org/packages/?arch=x86_64&q=ripgrep):\n\n```\n$ sudo xbps-install -Syv ripgrep\n```\n\nIf you're a **Rust programmer**, ripgrep can be installed with `cargo`.\n\n* Note that the minimum supported version of Rust for ripgrep is **1.72.0**,\n  although ripgrep may work with older versions.\n* Note that the binary may be bigger than expected because it contains debug\n  symbols. This is intentional. To remove debug symbols and therefore reduce\n  the file size, run `strip` on the binary.\n\n```\n$ cargo install ripgrep\n```\n\nAlternatively, one can use [`cargo\nbinstall`](https://github.com/cargo-bins/cargo-binstall) to install a ripgrep\nbinary directly from GitHub:\n\n```\n$ cargo binstall ripgrep\n```\n\n\n### Building\n\nripgrep is written in Rust, so you'll need to grab a\n[Rust installation](https://www.rust-lang.org/) in order to compile it.\nripgrep compiles with Rust 1.72.0 (stable) or newer. In general, ripgrep tracks\nthe latest stable release of the Rust compiler.\n\nTo build ripgrep:\n\n```\n$ git clone https://github.com/BurntSushi/ripgrep\n$ cd ripgrep\n$ cargo build --release\n$ ./target/release/rg --version\n0.1.3\n```\n\n**NOTE:** In the past, ripgrep supported a `simd-accel` Cargo feature when\nusing a Rust nightly compiler. This only benefited UTF-16 transcoding.\nSince it required unstable features, this build mode was prone to breakage.\nBecause of that, support for it has been removed. If you want SIMD\noptimizations for UTF-16 transcoding, then you'll have to petition the\n[`encoding_rs`](https://github.com/hsivonen/encoding_rs) project to use stable\nAPIs.\n\nFinally, optional PCRE2 support can be built with ripgrep by enabling the\n`pcre2` feature:\n\n```\n$ cargo build --release --features 'pcre2'\n```\n\nEnabling the PCRE2 feature works with a stable Rust compiler and will\nattempt to automatically find and link with your system's PCRE2 library via\n`pkg-config`. If one doesn't exist, then ripgrep will build PCRE2 from source\nusing your system's C compiler and then statically link it into the final\nexecutable. Static linking can be forced even when there is an available PCRE2\nsystem library by either building ripgrep with the MUSL target or by setting\n`PCRE2_SYS_STATIC=1`.\n\nripgrep can be built with the MUSL target on Linux by first installing the MUSL\nlibrary on your system (consult your friendly neighborhood package manager).\nThen you just need to add MUSL support to your Rust toolchain and rebuild\nripgrep, which yields a fully static executable:\n\n```\n$ rustup target add x86_64-unknown-linux-musl\n$ cargo build --release --target x86_64-unknown-linux-musl\n```\n\nApplying the `--features` flag from above works as expected. If you want to\nbuild a static executable with MUSL and with PCRE2, then you will need to have\n`musl-gcc` installed, which might be in a separate package from the actual\nMUSL library, depending on your Linux distribution.\n\n\n### Running tests\n\nripgrep is relatively well-tested, including both unit tests and integration\ntests. To run the full test suite, use:\n\n```\n$ cargo test --all\n```\n\nfrom the repository root.\n\n\n### Related tools\n\n* [delta](https://github.com/dandavison/delta) is a syntax highlighting\npager that supports the `rg --json` output format. So all you need to do to\nmake it work is `rg --json pattern | delta`. See [delta's manual section on\ngrep](https://dandavison.github.io/delta/grep.html) for more details.\n\n\n### Vulnerability reporting\n\nFor reporting a security vulnerability, please\n[contact Andrew Gallant](https://blog.burntsushi.net/about/).\nThe contact page has my email address and PGP public key if you wish to send an\nencrypted message.\n\n\n### Translations\n\nThe following is a list of known translations of ripgrep's documentation. These\nare unofficially maintained and may not be up to date.\n\n* [Chinese](https://github.com/chinanf-boy/ripgrep-zh#%E6%9B%B4%E6%96%B0-)\n* [Spanish](https://github.com/UltiRequiem/traducciones/tree/master/ripgrep)\n"
        },
        {
          "name": "RELEASE-CHECKLIST.md",
          "type": "blob",
          "size": 2.916015625,
          "content": "# Release Checklist\n\n* Ensure local `master` is up to date with respect to `origin/master`.\n* Run `cargo update` and review dependency updates. Commit updated\n  `Cargo.lock`.\n* Run `cargo outdated` and review semver incompatible updates. Unless there is\n  a strong motivation otherwise, review and update every dependency. Also\n  run `--aggressive`, but don't update to crates that are still in beta.\n* Update date in `crates/core/flags/doc/template.rg.1`.\n* Review changes for every crate in `crates` since the last ripgrep release.\n  If the set of changes is non-empty, issue a new release for that crate. Check\n  crates in the following order. After updating a crate, ensure minimal\n  versions are updated as appropriate in dependents. If an update is required,\n  run `cargo-up --no-push crates/{CRATE}/Cargo.toml`.\n    * crates/globset\n    * crates/ignore\n    * crates/cli\n    * crates/matcher\n    * crates/regex\n    * crates/pcre2\n    * crates/searcher\n    * crates/printer\n    * crates/grep (bump minimal versions as necessary)\n    * crates/core (do **not** bump version, but update dependencies as needed)\n* Update the CHANGELOG as appropriate.\n* Edit the `Cargo.toml` to set the new ripgrep version. Run\n  `cargo update -p ripgrep` so that the `Cargo.lock` is updated. Commit the\n  changes and create a new signed tag. Alternatively, use\n  `cargo-up --no-push --no-release Cargo.toml {VERSION}` to automate this.\n* Run `cargo package` and ensure it succeeds.\n* Push changes to GitHub, NOT including the tag. (But do not publish a new\n  version of ripgrep to crates.io yet.)\n* Once CI for `master` finishes successfully, push the version tag. (Trying to\n  do this in one step seems to result in GitHub Actions not seeing the tag\n  push and thus not running the release workflow.)\n* Wait for CI to finish creating the release. If the release build fails, then\n  delete the tag from GitHub, make fixes, re-tag, delete the release and push.\n* Copy the relevant section of the CHANGELOG to the tagged release notes.\n  Include this blurb describing what ripgrep is:\n  > In case you haven't heard of it before, ripgrep is a line-oriented search\n  > tool that recursively searches the current directory for a regex pattern.\n  > By default, ripgrep will respect gitignore rules and automatically skip\n  > hidden files/directories and binary files.\n* Run `git checkout {VERSION} && ci/build-and-publish-m2 {VERSION}` on a macOS\n  system with Apple silicon.\n* Run `cargo publish`.\n* Run `ci/sha256-releases {VERSION} >> pkg/brew/ripgrep-bin.rb`. Then edit\n  `pkg/brew/ripgrep-bin.rb` to update the version number and sha256 hashes.\n  Remove extraneous stuff added by `ci/sha256-releases`. Commit changes.\n* Add TBD section to the top of the CHANGELOG:\n  ```\n  TBD\n  ===\n  Unreleased changes. Release notes have not yet been written.\n  ```\n\nNote that [`cargo-up` can be found in BurntSushi's dotfiles][dotfiles].\n\n[dotfiles]: https://github.com/BurntSushi/dotfiles/blob/master/bin/cargo-up\n"
        },
        {
          "name": "UNLICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n"
        },
        {
          "name": "benchsuite",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.rs",
          "type": "blob",
          "size": 1.7431640625,
          "content": "fn main() {\n    set_git_revision_hash();\n    set_windows_exe_options();\n}\n\n/// Embed a Windows manifest and set some linker options.\n///\n/// The main reason for this is to enable long path support on Windows. This\n/// still, I believe, requires enabling long path support in the registry. But\n/// if that's enabled, then this will let ripgrep use C:\\... style paths that\n/// are longer than 260 characters.\nfn set_windows_exe_options() {\n    static MANIFEST: &str = \"pkg/windows/Manifest.xml\";\n\n    let Ok(target_os) = std::env::var(\"CARGO_CFG_TARGET_OS\") else { return };\n    let Ok(target_env) = std::env::var(\"CARGO_CFG_TARGET_ENV\") else { return };\n    if !(target_os == \"windows\" && target_env == \"msvc\") {\n        return;\n    }\n\n    let Ok(mut manifest) = std::env::current_dir() else { return };\n    manifest.push(MANIFEST);\n    let Some(manifest) = manifest.to_str() else { return };\n\n    println!(\"cargo:rerun-if-changed={}\", MANIFEST);\n    // Embed the Windows application manifest file.\n    println!(\"cargo:rustc-link-arg-bin=rg=/MANIFEST:EMBED\");\n    println!(\"cargo:rustc-link-arg-bin=rg=/MANIFESTINPUT:{manifest}\");\n    // Turn linker warnings into errors. Helps debugging, otherwise the\n    // warnings get squashed (I believe).\n    println!(\"cargo:rustc-link-arg-bin=rg=/WX\");\n}\n\n/// Make the current git hash available to the build as the environment\n/// variable `RIPGREP_BUILD_GIT_HASH`.\nfn set_git_revision_hash() {\n    use std::process::Command;\n\n    let args = &[\"rev-parse\", \"--short=10\", \"HEAD\"];\n    let Ok(output) = Command::new(\"git\").args(args).output() else { return };\n    let rev = String::from_utf8_lossy(&output.stdout).trim().to_string();\n    if rev.is_empty() {\n        return;\n    }\n    println!(\"cargo:rustc-env=RIPGREP_BUILD_GIT_HASH={}\", rev);\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "crates",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "rustfmt.toml",
          "type": "blob",
          "size": 0.04296875,
          "content": "max_width = 79\nuse_small_heuristics = \"max\"\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}