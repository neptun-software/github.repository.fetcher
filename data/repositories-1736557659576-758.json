{
  "metadata": {
    "timestamp": 1736557659576,
    "page": 758,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "facebook/folly",
      "stars": 28666,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".buckconfig",
          "type": "blob",
          "size": 0.14,
          "content": "[cells]\ngh_facebook_folly = .\nshim_DISABLED = shim\n\n[cell_aliases]\nroot = gh_facebook_folly\n\n[oss]\ninternal_cell = fbcode\nproject_dirs = folly\n"
        },
        {
          "name": ".buckconfig.d",
          "type": "tree",
          "content": null
        },
        {
          "name": ".buckroot",
          "type": "blob",
          "size": 0,
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6,
          "content": "*.o\n*.lo\n*.la\n.dirstamp\nMakefile\nMakefile.in\n.libs\n.deps\nstamp-h1\nfolly-config.h\n_configs.sed\naclocal.m4\nautom4te.cache\nbuild-aux\nlibtool\nfolly/test/gtest\nfolly/folly-config.h\nfolly/**/test/*_benchmark\nfolly/**/test/*.log\nfolly/**/test/*_test\nfolly/**/test/*_test_using_jemalloc\nfolly/**/test/*.trs\nfolly/config.*\nfolly/configure\nfolly/logging/example/logging_example\nfolly/libfolly.pc\nfolly/m4/libtool.m4\nfolly/m4/ltoptions.m4\nfolly/m4/ltsugar.m4\nfolly/m4/ltversion.m4\nfolly/m4/lt~obsolete.m4\nfolly/generate_fingerprint_tables\nfolly/FingerprintTables.cpp\n_build\n# Ignore all files generated by Buck2\nbuck-out/\n"
        },
        {
          "name": ".projectid",
          "type": "blob",
          "size": 0.01,
          "content": "folly\n"
        },
        {
          "name": "BUCK",
          "type": "blob",
          "size": 0.62,
          "content": "load(\"@fbcode_macros//build_defs:native_rules.bzl\", \"buck_genrule\")\n\noncall(\"fbcode_entropy_wardens_folly\")\n\nbuck_genrule(\n    name = \"folly-config.h\",\n    srcs = {file: file for file in glob([\n               \"CMake/*\",\n               \"build/fbcode_builder/CMake/*\",\n           ])} |\n           {\"CMakeLists.txt\": \"CMakeListsForBuck2.txt\"},\n    out = \"folly-config.h\",\n    cmd = \"cmake . && mv folly/folly-config.h $OUT\",\n    default_target_platform = \"prelude//platforms:default\",\n    labels = [\n        \"third-party:fedora:cmake\",\n        \"third-party:homebrew:cmake\",\n        \"third-party:ubuntu:cmake\",\n    ],\n    remote = False,\n)\n"
        },
        {
          "name": "CMake",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 47.51,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.0.2 FATAL_ERROR)\n# We use the GoogleTest module if it is available (only in CMake 3.9+)\n# It requires CMP0054 and CMP0057 to be enabled.\nif (POLICY CMP0054)\n  cmake_policy(SET CMP0054 NEW)\nendif()\nif (POLICY CMP0057)\n  cmake_policy(SET CMP0057 NEW)\nendif()\n\n# CMP0075 Include file check macros honor CMAKE_REQUIRED_LIBRARIES\nif(POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW)\nendif()\n\n# includes\nset(CMAKE_MODULE_PATH\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CMake\"\n  # for in-fbsource builds\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../opensource/fbcode_builder/CMake\"\n  # For shipit-transformed builds\n  \"${CMAKE_CURRENT_SOURCE_DIR}/build/fbcode_builder/CMake\"\n  ${CMAKE_MODULE_PATH})\n\n# package information\nset(PACKAGE_NAME      \"folly\")\nif (NOT DEFINED PACKAGE_VERSION)\n  set(PACKAGE_VERSION   \"0.58.0-dev\")\nendif()\nset(PACKAGE_STRING    \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\nset(PACKAGE_TARNAME   \"${PACKAGE_NAME}-${PACKAGE_VERSION}\")\nset(PACKAGE_BUGREPORT \"https://github.com/facebook/folly/issues\")\n\n# 150+ tests in the root folder anyone? No? I didn't think so.\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nproject(${PACKAGE_NAME} CXX C ASM)\n\nset(INCLUDE_INSTALL_DIR include CACHE STRING\n    \"The subdirectory where header files should be installed\")\nset(LIB_INSTALL_DIR lib CACHE STRING\n    \"The subdirectory where libraries should be installed\")\nset(BIN_INSTALL_DIR bin CACHE STRING\n    \"The subdirectory where binaries should be installed\")\nset(CMAKE_INSTALL_DIR lib/cmake/folly CACHE STRING\n    \"The subdirectory where CMake package config files should be installed\")\n\noption(BUILD_SHARED_LIBS\n  \"If enabled, build folly as a shared library.  \\\n  This is generally discouraged, since folly does not commit to having \\\n  a stable ABI.\"\n  OFF\n)\n# Mark BUILD_SHARED_LIBS as an \"advanced\" option, since enabling it\n# is generally discouraged.\nmark_as_advanced(BUILD_SHARED_LIBS)\nset(FOLLY_SUPPORT_SHARED_LIBRARY \"${BUILD_SHARED_LIBS}\")\n\ninclude(FBBuildOptions)\nfb_activate_static_library_option()\n\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  message(STATUS \"setting C++ standard to C++${CMAKE_CXX_STANDARD}\")\nendif()\n\nif(NOT DEFINED IS_X86_64_ARCH AND ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"x86_64|AMD64\")\n  set(IS_X86_64_ARCH TRUE)\nelse()\n  set(IS_X86_64_ARCH FALSE)\nendif()\n\nif(NOT DEFINED IS_AARCH64_ARCH AND ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"aarch64\")\n  set(IS_AARCH64_ARCH TRUE)\nelse()\n  set(IS_AARCH64_ARCH FALSE)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  # Check target architecture\n  if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    message(FATAL_ERROR \"Folly requires a 64bit target architecture.\")\n  endif()\n\n  if (MSVC_VERSION LESS 1900)\n    message(\n      FATAL_ERROR\n      \"This build script only supports building Folly on 64-bit Windows with \"\n      \"at least Visual Studio 2017. \"\n      \"MSVC version '${MSVC_VERSION}' is not supported.\"\n    )\n  endif()\nendif()\n\nset(TOP_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(FOLLY_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/folly\")\nset(\n  FOLLY_DIR_PREFIXES\n  \"${CMAKE_CURRENT_SOURCE_DIR}:${CMAKE_CURRENT_BINARY_DIR}\"\n)\n# https://gitlab.kitware.com/cmake/cmake/-/issues/18580#note_1405108\nstring(REGEX REPLACE \"(.)\" \"\\\\\\\\\\\\1\" FOLLY_DIR_REGEX_ESCAPED \"${FOLLY_DIR}\")\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_THREAD_PREFER_PTHREAD ON)\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\nset(FOLLY_HAVE_PTHREAD \"${CMAKE_USE_PTHREADS_INIT}\")\nlist(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)\nlist(APPEND FOLLY_LINK_LIBRARIES Threads::Threads)\n\nif(MSVC)\n  include(FollyCompilerMSVC)\nelse()\n  include(FollyCompilerUnix)\nendif()\ninclude(FollyFunctions)\n\ninclude(folly-deps) # Find the required packages\ninclude(FollyConfigChecks)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/folly-config.h.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/folly/folly-config.h\n)\n\n# Define FOLLY_XLOG_STRIP_PREFIXES when compiling our sources so that\n# folly/logging will automatically choose the correct log category names,\n# using only the relative portion of the source file name inside the\n# folly repository.\nset_property(\n  DIRECTORY\n  ${CMAKE_CURRENT_SOURCE_DIR}\n  APPEND\n  PROPERTY\n  COMPILE_DEFINITIONS\n  \"FOLLY_XLOG_STRIP_PREFIXES=\\\"${CMAKE_SOURCE_DIR}:${CMAKE_BINARY_DIR}\\\"\"\n)\n\n# We currently build the main libfolly library by finding all sources\n# and header files.  We then exclude specific files below.\n#\n# In the future it would perhaps be nicer to explicitly list the files we want\n# to include, and to move the source lists in to separate per-subdirectory\n# CMakeLists.txt files.\nauto_sources(files \"*.cpp\" \"RECURSE\" \"${FOLLY_DIR}\")\nauto_sources(hfiles \"*.h\" \"RECURSE\" \"${FOLLY_DIR}\")\n\n# Exclude tests, benchmarks, and other standalone utility executables from the\n# library sources.  Test sources are listed separately below.\nREMOVE_MATCHES_FROM_LISTS(files hfiles\n  MATCHES\n    \"^${FOLLY_DIR_REGEX_ESCAPED}/build/\"\n    \"^${FOLLY_DIR_REGEX_ESCAPED}/docs/examples/\"\n    \"^${FOLLY_DIR_REGEX_ESCAPED}/logging/example/\"\n    \"^${FOLLY_DIR_REGEX_ESCAPED}/(.*/)?test/\"\n    \"^${FOLLY_DIR_REGEX_ESCAPED}/(.*/)?tool/\"\n    \"^${FOLLY_DIR_REGEX_ESCAPED}/facebook/\"\n    \"Benchmark.cpp$\"\n    \"Test.cpp$\"\n)\n\n# Exclude exception tracer, which is necessary to statically link libstdc++\nif (${FOLLY_NO_EXCEPTION_TRACER})\n  REMOVE_MATCHES_FROM_LISTS(files hfiles\n    MATCHES\n      \"^${FOLLY_DIR_REGEX_ESCAPED}/debugging/exception_tracer/\"\n  )\nendif()\n\nlist(REMOVE_ITEM files\n  ${FOLLY_DIR}/python/error.cpp\n  ${FOLLY_DIR}/python/executor.cpp\n  ${FOLLY_DIR}/python/fibers.cpp\n  ${FOLLY_DIR}/python/GILAwareManualExecutor.cpp\n  ${FOLLY_DIR}/python/iobuf.cpp\n  ${FOLLY_DIR}/python/iobuf_ext.cpp\n  ${FOLLY_DIR}/python/ProactorExecutor.cpp\n)\nlist(REMOVE_ITEM hfiles\n  ${FOLLY_DIR}/python/fibers.h\n  ${FOLLY_DIR}/python/GILAwareManualExecutor.h\n  ${FOLLY_DIR}/python/iobuf_ext.h\n  ${FOLLY_DIR}/python/ProactorExecutor.h\n)\n\n# Explicitly include utility library code from inside\n# test subdirs\nlist(APPEND files\n  ${FOLLY_DIR}/io/async/test/ScopedBoundPort.cpp\n  ${FOLLY_DIR}/io/async/test/SocketPair.cpp\n  ${FOLLY_DIR}/io/async/test/TimeUtil.cpp\n)\nlist(APPEND hfiles\n  ${FOLLY_DIR}/container/test/F14TestUtil.h\n  ${FOLLY_DIR}/container/test/TrackingTypes.h\n  ${FOLLY_DIR}/io/async/test/AsyncSSLSocketTest.h\n  ${FOLLY_DIR}/io/async/test/AsyncSocketTest.h\n  ${FOLLY_DIR}/io/async/test/AsyncSocketTest2.h\n  ${FOLLY_DIR}/io/async/test/BlockingSocket.h\n  ${FOLLY_DIR}/io/async/test/CallbackStateEnum.h\n  ${FOLLY_DIR}/io/async/test/ConnCallback.h\n  ${FOLLY_DIR}/io/async/test/MockAsyncSocket.h\n  ${FOLLY_DIR}/io/async/test/MockAsyncServerSocket.h\n  ${FOLLY_DIR}/io/async/test/MockAsyncSSLSocket.h\n  ${FOLLY_DIR}/io/async/test/MockAsyncTransport.h\n  ${FOLLY_DIR}/io/async/test/MockAsyncUDPSocket.h\n  ${FOLLY_DIR}/io/async/test/MockTimeoutManager.h\n  ${FOLLY_DIR}/io/async/test/ScopedBoundPort.h\n  ${FOLLY_DIR}/io/async/test/SocketPair.h\n  ${FOLLY_DIR}/io/async/test/TFOUtil.h\n  ${FOLLY_DIR}/io/async/test/TestSSLServer.h\n  ${FOLLY_DIR}/io/async/test/TimeUtil.h\n  ${FOLLY_DIR}/io/async/test/UndelayedDestruction.h\n  ${FOLLY_DIR}/io/async/test/Util.h\n  ${FOLLY_DIR}/synchronization/test/Semaphore.h\n  ${FOLLY_DIR}/test/DeterministicSchedule.h\n  ${FOLLY_DIR}/test/TestUtils.h\n)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  check_cxx_compiler_flag(-fcoroutines COMPILER_HAS_F_COROUTINES)\n  if (COMPILER_HAS_F_COROUTINES)\n    message(\n      STATUS\n      \"GCC has support for C++ coroutines, setting flag for Folly build.\"\n    )\n    add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fcoroutines>)\n  else()\n    message(\n      STATUS\n      \"GCC does not have support for C++ coroutines, \"\n      \"disabling Folly coroutine support.\"\n    )\n  endif()\nendif()\n\n# base64 SIMD files compilation\nif (NOT(${IS_X86_64_ARCH}))\n  message(\n    STATUS\n    \"arch ${CMAKE_LIBRARY_ARCHITECTURE} does not match x86_64, \"\n    \"skipping building SSE4.2 version of base64\"\n  )\n  list(REMOVE_ITEM files ${FOLLY_DIR}/detail/base64_detail/Base64_SSE4_2.cpp)\nelse()\n  message(\n    STATUS\n    \"arch ${CMAKE_LIBRARY_ARCHITECTURE} matches x86_64, \"\n    \"building SSE4.2 version of base64\"\n  )\n  # MSVC does not have a way to enable just sse4.2, only avx.\n  # If we don't pass the flag, everything will still work but no warnings\n  if (NOT CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\")\n    set_source_files_properties(\n      ${FOLLY_DIR}/detail/base64_detail/Base64_SSE4_2.cpp\n      PROPERTIES\n      COMPILE_FLAGS\n        -msse4.2\n    )\n  endif()\nendif()\n\nif (${LIBSODIUM_FOUND})\n  if (NOT(${IS_X86_64_ARCH}))\n    message(\n      STATUS\n      \"arch ${CMAKE_LIBRARY_ARCHITECTURE} does not match x86_64, \"\n      \"skipping setting SSE2/AVX2 compile flags for LtHash SIMD code\"\n    )\n  else()\n    message(\n      STATUS\n      \"arch ${CMAKE_LIBRARY_ARCHITECTURE} matches x86_64, \"\n      \"setting SSE2/AVX2 compile flags for LtHash SIMD code\"\n    )\n    set_source_files_properties(\n      ${FOLLY_DIR}/crypto/detail/MathOperation_AVX2.cpp\n      PROPERTIES\n      COMPILE_FLAGS\n      -mavx -mavx2 -msse2\n    )\n    set_source_files_properties(\n      ${FOLLY_DIR}/crypto/detail/MathOperation_Simple.cpp\n      PROPERTIES\n      COMPILE_FLAGS\n      -mno-avx -mno-avx2 -mno-sse2\n    )\n    set_source_files_properties(\n      ${FOLLY_DIR}/crypto/detail/MathOperation_SSE2.cpp\n      PROPERTIES\n      COMPILE_FLAGS\n      -mno-avx -mno-avx2 -msse2\n    )\n  endif()\nelse()\n  list(REMOVE_ITEM files\n    ${FOLLY_DIR}/crypto/Blake2xb.cpp\n    ${FOLLY_DIR}/crypto/detail/MathOperation_AVX2.cpp\n    ${FOLLY_DIR}/crypto/detail/MathOperation_Simple.cpp\n    ${FOLLY_DIR}/crypto/detail/MathOperation_SSE2.cpp\n    ${FOLLY_DIR}/crypto/LtHash.cpp\n  )\n  list(REMOVE_ITEM hfiles\n    ${FOLLY_DIR}/crypto/Blake2xb.h\n    ${FOLLY_DIR}/crypto/detail/LtHashInternal.h\n    ${FOLLY_DIR}/crypto/LtHash-inl.h\n    ${FOLLY_DIR}/crypto/LtHash.h\n  )\nendif()\nif (NOT ${LIBGFLAGS_FOUND})\n  list(REMOVE_ITEM files\n    ${FOLLY_DIR}/cli/NestedCommandLineApp.cpp\n    ${FOLLY_DIR}/cli/ProgramOptions.cpp\n  )\n  list(REMOVE_ITEM hfiles\n    ${FOLLY_DIR}/cli/NestedCommandLineApp.h\n    ${FOLLY_DIR}/cli/ProgramOptions.h\n  )\nendif()\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  list(REMOVE_ITEM files\n    ${FOLLY_DIR}/Subprocess.cpp\n  )\nendif()\n\nset(PCLMUL_FILES\n  ${FOLLY_DIR}/external/fast-crc32/avx512_crc32c_v8s3x4.cpp\n  ${FOLLY_DIR}/external/fast-crc32/sse_crc32c_v8s3x3.cpp\n  ${FOLLY_DIR}/hash/detail/ChecksumDetail.cpp\n  ${FOLLY_DIR}/hash/detail/Crc32CombineDetail.cpp\n  ${FOLLY_DIR}/hash/detail/Crc32cDetail.cpp\n)\ncheck_cxx_compiler_flag(-mpclmul COMPILER_HAS_M_PCLMUL)\nif (COMPILER_HAS_M_PCLMUL)\n  message(\n    STATUS\n    \"compiler has flag pclmul, setting compile flag for ${PCLMUL_FILES}\"\n  )\n  set_source_files_properties(\n    ${PCLMUL_FILES}\n    PROPERTIES\n    COMPILE_OPTIONS\n    -mpclmul\n  )\nelse()\n  message(\n    STATUS\n    \"compiler does not have flag pclmul, skipping setting compile flags for ${PCLMUL_FILES}\"\n  )\nendif()\n\nif (IS_X86_64_ARCH AND NOT CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  message(\n    STATUS\n    \"arch ${CMAKE_LIBRARY_ARCHITECTURE} matches x86_64, \"\n    \"setting AVX512 compile flags for crc32c SIMD code\"\n  )\n  set_property(\n    SOURCE\n    ${FOLLY_DIR}/external/fast-crc32/avx512_crc32c_v8s3x4.cpp\n    APPEND PROPERTY COMPILE_OPTIONS\n    \"-mavx512f\" \"-mavx512vl\"\n  )\nelse()\n  # Windows doesn't nead the extra flags.\n  message(\n    STATUS\n    \"arch ${CMAKE_LIBRARY_ARCHITECTURE} does not match x86_64, \"\n    \"skipping setting AVX512 compile flags for crc32c SIMD code\"\n  )\nendif()\n\nlist(APPEND folly_base_files\n  ${files} ${hfiles}\n)\n\nif (IS_X86_64_ARCH AND NOT MSVC)\n  set_property(\n    SOURCE\n    ${FOLLY_DIR}/memcpy.S\n    APPEND PROPERTY COMPILE_OPTIONS \"-x\" \"assembler-with-cpp\"\n  )\n  list(APPEND folly_base_files\n    ${FOLLY_DIR}/memcpy.S\n  )\nendif()\n\nset(ARM_AOR_ASM_FILES\n  ${FOLLY_DIR}/external/aor/memcpy-advsimd.S\n  ${FOLLY_DIR}/external/aor/memcpy-armv8.S\n  ${FOLLY_DIR}/external/aor/memcpy_sve.S\n  ${FOLLY_DIR}/external/aor/memset-advsimd.S\n  ${FOLLY_DIR}/external/aor/memcpy-mops.S\n  ${FOLLY_DIR}/external/aor/memmove-mops.S\n  ${FOLLY_DIR}/external/aor/memset-mops.S\n)\nif (IS_AARCH64_ARCH)\n  foreach (AOR_FILE IN LISTS ARM_AOR_ASM_FILES)\n    set_property(\n      SOURCE\n      ${AOR_FILE}\n      APPEND PROPERTY COMPILE_OPTIONS \"-x\" \"assembler-with-cpp\"\n    )\n    list(APPEND folly_base_files\n      ${AOR_FILE}\n    )\n  endforeach()\nendif()\n\nadd_library(folly_base OBJECT\n  ${folly_base_files}\n  ${CMAKE_CURRENT_BINARY_DIR}/folly/folly-config.h\n)\nif (BUILD_SHARED_LIBS)\n  set_property(TARGET folly_base PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif()\nauto_source_group(folly ${FOLLY_DIR} ${files} ${hfiles})\napply_folly_compile_options_to_target(folly_base)\n# Add the generated files to the correct source group.\nsource_group(\"folly\" FILES ${CMAKE_CURRENT_BINARY_DIR}/folly/folly-config.h)\n\n# Generate pkg-config variables from folly_deps before we add our own\n# build/install-time include directory generator expressions\ninclude(GenPkgConfig)\ngen_pkgconfig_vars(FOLLY_PKGCONFIG folly_deps)\n\ntarget_include_directories(folly_deps\n  BEFORE\n  INTERFACE\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n)\ntarget_include_directories(folly_deps\n  INTERFACE\n    $<INSTALL_INTERFACE:include>\n)\n\ntarget_include_directories(folly_base\n  PUBLIC\n    $<TARGET_PROPERTY:folly_deps,INTERFACE_INCLUDE_DIRECTORIES>\n)\ntarget_compile_definitions(folly_base\n  PUBLIC\n    $<TARGET_PROPERTY:folly_deps,INTERFACE_COMPILE_DEFINITIONS>\n)\n\nset(FOLLY_INSTALL_TARGETS folly folly_deps)\n\noption(PYTHON_EXTENSIONS\n  \"Build Python Bindings for Folly, requires Cython and (BUILD_SHARED_LIBS=ON)\"\n  OFF\n)\n\nadd_library(folly\n  $<TARGET_OBJECTS:folly_base>\n)\nset_property(TARGET folly PROPERTY VERSION ${PACKAGE_VERSION})\napply_folly_compile_options_to_target(folly)\ntarget_compile_features(folly INTERFACE cxx_generic_lambdas)\n\ntarget_link_libraries(folly PUBLIC folly_deps)\n\n# Test utilities exported for use by downstream projects\nadd_library(folly_test_util\n  ${FOLLY_DIR}/test/DeterministicSchedule.cpp\n  ${FOLLY_DIR}/json/JsonTestUtil.cpp\n)\ntarget_compile_definitions(folly_test_util PUBLIC\n  FOLLY_CERTS_DIR=\"${FOLLY_DIR}/io/async/test/certs\"\n)\nset_property(TARGET folly_test_util PROPERTY VERSION ${PACKAGE_VERSION})\ntarget_link_libraries(folly_test_util\n  PUBLIC\n    ${BOOST_LIBRARIES}\n    folly\n    ${LIBGMOCK_LIBRARIES}\n)\napply_folly_compile_options_to_target(folly_test_util)\nlist(APPEND FOLLY_INSTALL_TARGETS folly_test_util)\n\ninstall(TARGETS ${FOLLY_INSTALL_TARGETS}\n  EXPORT folly\n  RUNTIME DESTINATION bin\n  LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n  ARCHIVE DESTINATION ${LIB_INSTALL_DIR})\nauto_install_files(folly ${FOLLY_DIR}\n  ${hfiles}\n)\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/folly/folly-config.h\n  DESTINATION ${INCLUDE_INSTALL_DIR}/folly\n  COMPONENT dev\n)\n\n# Generate the folly-config.cmake file for installation so that\n# downstream projects that use on folly can easily depend on it in their CMake\n# files using \"find_package(folly CONFIG)\"\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n  CMake/folly-config.cmake.in\n  folly-config.cmake\n  INSTALL_DESTINATION ${CMAKE_INSTALL_DIR}\n  PATH_VARS\n    INCLUDE_INSTALL_DIR\n    CMAKE_INSTALL_DIR\n)\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/folly-config.cmake\n  DESTINATION ${CMAKE_INSTALL_DIR}\n  COMPONENT dev\n)\ninstall(\n  EXPORT folly\n  DESTINATION ${CMAKE_INSTALL_DIR}\n  NAMESPACE Folly::\n  FILE folly-targets.cmake\n  COMPONENT dev\n)\n\n# Generate a pkg-config file so that downstream projects that don't use\n# CMake can depend on folly using pkg-config.\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/libfolly.pc.in\n  ${CMAKE_CURRENT_BINARY_DIR}/libfolly.pc.gen\n  @ONLY\n)\n\n# Specify target to allow resolving generator expressions requiring\n# a target for CMake >=3.19. See #1414.\n# VERSION_GREATER_EQUAL isn't available before CMake 3.7.\nif(NOT CMAKE_VERSION VERSION_LESS 3.19)\n  set(target_arg TARGET folly_deps)\nendif()\n\nfile(\n  GENERATE\n  OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/libfolly.pc\n  INPUT ${CMAKE_CURRENT_BINARY_DIR}/libfolly.pc.gen\n  ${target_arg}\n)\ninstall(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/libfolly.pc\n  DESTINATION ${LIB_INSTALL_DIR}/pkgconfig\n  COMPONENT dev\n)\n\noption(BUILD_TESTS \"If enabled, compile the tests.\" OFF)\noption(BUILD_BENCHMARKS \"If enabled, compile the benchmarks.\" OFF)\noption(BUILD_BROKEN_TESTS \"If enabled, compile tests that are known to be broken.\" OFF)\noption(BUILD_HANGING_TESTS \"If enabled, compile tests that are known to hang.\" OFF)\noption(BUILD_SLOW_TESTS \"If enabled, compile tests that take a while to run in debug mode.\" OFF)\nif (BUILD_TESTS OR BUILD_BENCHMARKS)\n  option(USE_CMAKE_GOOGLE_TEST_INTEGRATION \"If enabled, use the google test integration included in CMake.\" ON)\n  find_package(GMock MODULE REQUIRED)\n  find_package(GTest MODULE REQUIRED)\n  if (USE_CMAKE_GOOGLE_TEST_INTEGRATION)\n    include(GoogleTest OPTIONAL RESULT_VARIABLE HAVE_CMAKE_GTEST)\n    enable_testing()\n  else()\n    set(HAVE_CMAKE_GTEST OFF)\n  endif()\n\n  # The ThreadLocalTest code uses a helper shared library for one of its tests.\n  # This can only be built if folly itself was built as a shared library.\n  if (BUILD_SHARED_LIBS)\n    add_library(thread_local_test_lib MODULE\n      ${FOLLY_DIR}/test/ThreadLocalTestLib.cpp\n    )\n    set_target_properties(thread_local_test_lib PROPERTIES PREFIX \"\")\n    apply_folly_compile_options_to_target(thread_local_test_lib)\n    target_link_libraries(thread_local_test_lib PUBLIC folly)\n    target_include_directories(\n      thread_local_test_lib\n      PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n  endif()\n\n  add_library(folly_test_support\n    ${FOLLY_DIR}/test/common/TestMain.cpp\n    ${FOLLY_DIR}/test/FBVectorTestUtil.cpp\n    ${FOLLY_DIR}/test/DeterministicSchedule.cpp\n    ${FOLLY_DIR}/test/DeterministicSchedule.h\n    ${FOLLY_DIR}/test/SingletonTestStructs.cpp\n    ${FOLLY_DIR}/test/SocketAddressTestHelper.cpp\n    ${FOLLY_DIR}/test/SocketAddressTestHelper.h\n    ${FOLLY_DIR}/compression/test/CodingTestUtils.cpp\n    ${FOLLY_DIR}/container/test/F14TestUtil.h\n    ${FOLLY_DIR}/container/test/TrackingTypes.h\n    ${FOLLY_DIR}/futures/test/TestExecutor.cpp\n    ${FOLLY_DIR}/futures/test/TestExecutor.h\n    ${FOLLY_DIR}/io/async/test/BlockingSocket.h\n    ${FOLLY_DIR}/io/async/test/CallbackStateEnum.h\n    ${FOLLY_DIR}/io/async/test/ConnCallback.h\n    ${FOLLY_DIR}/io/async/test/MockAsyncServerSocket.h\n    ${FOLLY_DIR}/io/async/test/MockAsyncSocket.h\n    ${FOLLY_DIR}/io/async/test/MockAsyncSSLSocket.h\n    ${FOLLY_DIR}/io/async/test/MockAsyncTransport.h\n    ${FOLLY_DIR}/io/async/test/MockAsyncUDPSocket.h\n    ${FOLLY_DIR}/io/async/test/MockTimeoutManager.h\n    ${FOLLY_DIR}/io/async/test/ScopedBoundPort.cpp\n    ${FOLLY_DIR}/io/async/test/ScopedBoundPort.h\n    ${FOLLY_DIR}/io/async/test/SocketPair.cpp\n    ${FOLLY_DIR}/io/async/test/SocketPair.h\n    ${FOLLY_DIR}/io/async/test/SSLUtil.cpp\n    ${FOLLY_DIR}/io/async/test/SSLUtil.h\n    ${FOLLY_DIR}/io/async/test/TFOUtil.cpp\n    ${FOLLY_DIR}/io/async/test/TFOUtil.h\n    ${FOLLY_DIR}/io/async/test/TestSSLServer.cpp\n    ${FOLLY_DIR}/io/async/test/TestSSLServer.h\n    ${FOLLY_DIR}/io/async/test/TimeUtil.cpp\n    ${FOLLY_DIR}/io/async/test/TimeUtil.h\n    ${FOLLY_DIR}/io/async/test/UndelayedDestruction.h\n    ${FOLLY_DIR}/io/async/test/Util.h\n    ${FOLLY_DIR}/logging/test/ConfigHelpers.cpp\n    ${FOLLY_DIR}/logging/test/ConfigHelpers.h\n    ${FOLLY_DIR}/logging/test/TestLogHandler.cpp\n    ${FOLLY_DIR}/logging/test/TestLogHandler.h\n  )\n  target_compile_definitions(folly_test_support\n    PUBLIC\n      ${LIBGMOCK_DEFINES}\n  )\n  target_include_directories(folly_test_support\n    SYSTEM\n    PUBLIC\n      ${LIBGMOCK_INCLUDE_DIR}\n      ${GTEST_INCLUDE_DIRS}\n  )\n  target_link_libraries(folly_test_support\n    PUBLIC\n      ${BOOST_LIBRARIES}\n      follybenchmark\n      folly\n      ${LIBGMOCK_LIBRARIES}\n      ${GLOG_LIBRARY}\n  )\n  apply_folly_compile_options_to_target(folly_test_support)\n\n  folly_define_tests(\n    DIRECTORY algorithm/simd/detail/test/\n      TEST algorithm_simd_detail_simd_any_of_test SOURCES SimdAnyOfTest.cpp\n      TEST algorithm_simd_detail_simd_for_each_test SOURCES SimdForEachTest.cpp\n      TEST algorithm_simd_detail_simd_traits_test SOURCES TraitsTest.cpp\n      TEST algorithm_simd_detail_unroll_utils_test SOURCES UnrollUtilsTest.cpp\n\n    DIRECTORY algorithm/simd/test/\n      TEST algorithm_simd_contains_test SOURCES ContainsTest.cpp\n      TEST algorithm_simd_find_fixed_test SOURCES FindFixedTest.cpp\n      TEST algorithm_simd_movemask_test SOURCES MovemaskTest.cpp\n\n    DIRECTORY chrono/test/\n      TEST chrono_conv_test WINDOWS_DISABLED\n        SOURCES ConvTest.cpp\n\n    DIRECTORY compression/test/\n      TEST compression_compression_test SLOW SOURCES CompressionTest.cpp\n      TEST compression_quotient_multiset_test SOURCES QuotientMultiSetTest.cpp\n      TEST compression_select64_test SOURCES Select64Test.cpp\n\n    DIRECTORY compression/elias_fano/test/\n      TEST compression_alias_fano_bit_vector_coding_test\n        SOURCES BitVectorCodingTest.cpp\n      TEST compression_alias_fano_elias_fano_test\n        SOURCES EliasFanoCodingTest.cpp\n\n    DIRECTORY container/test/\n      TEST container_access_test SOURCES AccessTest.cpp\n      TEST container_array_test SOURCES ArrayTest.cpp\n      BENCHMARK container_bit_iterator_bench SOURCES BitIteratorBench.cpp\n      TEST container_bit_iterator_test SOURCES BitIteratorTest.cpp\n      TEST container_enumerate_test SOURCES EnumerateTest.cpp\n      BENCHMARK container_evicting_cache_map_bench\n        SOURCES EvictingCacheMapBench.cpp\n      TEST container_evicting_cache_map_test SOURCES EvictingCacheMapTest.cpp\n      TEST container_f14_fwd_test SOURCES F14FwdTest.cpp\n      TEST container_f14_map_test SOURCES F14MapTest.cpp\n      TEST container_f14_set_test SOURCES F14SetTest.cpp\n      BENCHMARK container_fbvector_benchmark\n        SOURCES FBVectorBenchmark.cpp\n        HEADERS FBVectorBenchmarks.cpp.h\n      TEST container_fbvector_test SOURCES FBVectorTest.cpp\n      BENCHMARK container_foreach_benchmark SOURCES ForeachBenchmark.cpp\n      TEST container_foreach_test SOURCES ForeachTest.cpp\n      TEST container_heap_vector_types_test SOURCES heap_vector_types_test.cpp\n      TEST container_map_util_test WINDOWS_DISABLED SOURCES MapUtilTest.cpp\n      TEST container_merge_test SOURCES MergeTest.cpp\n      TEST container_regex_match_cache_test SOURCES RegexMatchCacheTest.cpp\n      TEST container_small_vector_test WINDOWS_DISABLED\n        SOURCES small_vector_test.cpp\n      TEST container_sorted_vector_types_test SOURCES sorted_vector_test.cpp\n      TEST container_span_test SOURCES span_test.cpp\n      BENCHMARK container_sparse_byte_set_benchmark\n        SOURCES SparseByteSetBenchmark.cpp\n      TEST container_sparse_byte_set_test SOURCES SparseByteSetTest.cpp\n      TEST container_util_test SOURCES UtilTest.cpp\n\n    DIRECTORY concurrency/container/test/\n      TEST concurrency_container_lock_free_ring_buffer_test\n        SOURCES LockFreeRingBufferTest.cpp\n\n    DIRECTORY concurrency/test/\n      TEST concurrency_atomic_shared_ptr_test SOURCES AtomicSharedPtrTest.cpp\n      TEST concurrency_cache_locality_test WINDOWS_DISABLED\n        SOURCES CacheLocalityTest.cpp\n      TEST concurrency_core_cached_shared_ptr_test\n        SOURCES CoreCachedSharedPtrTest.cpp\n      BENCHMARK concurrency_concurrent_hash_map_bench WINDOWS_DISABLED\n        SOURCES ConcurrentHashMapBench.cpp\n      TEST concurrency_concurrent_hash_map_test WINDOWS_DISABLED\n        SOURCES ConcurrentHashMapTest.cpp\n      TEST concurrency_dynamic_bounded_queue_test WINDOWS_DISABLED\n        SOURCES DynamicBoundedQueueTest.cpp\n      TEST concurrency_priority_unbounded_queue_set_test\n        SOURCES PriorityUnboundedQueueSetTest.cpp\n      BENCHMARK concurrency_thread_cached_synchronized_bench\n        SOURCES ThreadCachedSynchronizedBench.cpp\n      TEST concurrency_thread_cached_synchronized_test\n        SOURCES ThreadCachedSynchronizedTest.cpp\n      TEST concurrency_unbounded_queue_test SOURCES UnboundedQueueTest.cpp\n\n    DIRECTORY detail/test/\n      TEST detail_simple_simd_string_utils_test\n        SOURCES SimpleSimdStringUtilsTest.cpp\n      TEST detail_split_string_simd_test WINDOWS_DISABLED\n        SOURCES SplitStringSimdTest.cpp\n      TEST detail_static_singleton_manager_test\n        SOURCES StaticSingletonManagerTest.cpp\n      TEST detail_type_list_test SOURCES TypeListTest.cpp\n\n    DIRECTORY detail/base64_detail/tests/\n      TEST detail_base64_detail_test WINDOWS_DISABLED\n      SOURCES\n        Base64AgainstScalarTest.cpp\n        Base64PlatformTest.cpp\n        Base64SpecialCasesTest.cpp\n\n    DIRECTORY executors/test/\n      TEST executors_async_helpers_test SOURCES AsyncTest.cpp\n      TEST executors_codel_test WINDOWS_DISABLED SOURCES CodelTest.cpp\n      BENCHMARK executors_edf_thread_pool_executor_benchmark\n        SOURCES EDFThreadPoolExecutorBenchmark.cpp\n      TEST executors_executor_test SOURCES ExecutorTest.cpp\n      TEST executors_fiber_io_executor_test SOURCES FiberIOExecutorTest.cpp\n      # FunctionSchedulerTest has a lot of timing-dependent checks,\n      # and tends to fail on heavily loaded systems.\n      TEST executors_function_scheduler_test BROKEN\n        SOURCES FunctionSchedulerTest.cpp\n      TEST executors_global_executor_test SOURCES GlobalExecutorTest.cpp\n      TEST executors_serial_executor_test SOURCES SerialExecutorTest.cpp\n      # Fails in ThreadPoolExecutorTest.RequestContext:719 data2 != nullptr\n      TEST executors_thread_pool_executor_test BROKEN WINDOWS_DISABLED\n        SOURCES ThreadPoolExecutorTest.cpp\n      TEST executors_threaded_executor_test SOURCES ThreadedExecutorTest.cpp\n      TEST executors_timed_drivable_executor_test\n        SOURCES TimedDrivableExecutorTest.cpp\n\n    DIRECTORY executors/task_queue/test/\n      TEST executors_task_queue_priority_unbounded_blocking_queue_test\n        SOURCES PriorityUnboundedBlockingQueueTest.cpp\n      BENCHMARK executors_task_queue_unbounded_blocking_queue_bench\n        SOURCES UnboundedBlockingQueueBench.cpp\n      TEST executors_task_queue_unbounded_blocking_queue_test\n        SOURCES UnboundedBlockingQueueTest.cpp\n\n    #DIRECTORY experimental/test/\n      #TEST nested_command_line_app_test SOURCES NestedCommandLineAppTest.cpp\n      #TEST program_options_test SOURCES ProgramOptionsTest.cpp\n      # Depends on liburcu\n      #TEST read_mostly_shared_ptr_test SOURCES ReadMostlySharedPtrTest.cpp\n      #TEST ref_count_test SOURCES RefCountTest.cpp\n\n    #DIRECTORY experimental/io/test/\n\n    DIRECTORY external/farmhash/test/\n      TEST external_farmhash_farmhash_test SOURCES farmhash_test.cpp\n\n    DIRECTORY logging/test/\n      TEST logging_async_file_writer_test WINDOWS_DISABLED\n        SOURCES AsyncFileWriterTest.cpp\n      TEST logging_autotimer_test SOURCES AutoTimerTest.cpp\n      TEST logging_config_parser_test SOURCES ConfigParserTest.cpp\n      TEST logging_config_update_test SOURCES ConfigUpdateTest.cpp\n      TEST logging_file_handler_factory_test WINDOWS_DISABLED\n        SOURCES FileHandlerFactoryTest.cpp\n      TEST logging_glog_formatter_test SOURCES GlogFormatterTest.cpp\n      TEST logging_immediate_file_writer_test\n        SOURCES ImmediateFileWriterTest.cpp\n      TEST logging_log_category_test SOURCES LogCategoryTest.cpp\n      TEST logging_logger_db_test SOURCES LoggerDBTest.cpp\n      TEST logging_logger_test WINDOWS_DISABLED SOURCES LoggerTest.cpp\n      TEST logging_log_level_test SOURCES LogLevelTest.cpp\n      TEST logging_log_message_test SOURCES LogMessageTest.cpp\n      TEST logging_log_name_test SOURCES LogNameTest.cpp\n      TEST logging_log_stream_test SOURCES LogStreamTest.cpp\n      TEST logging_rate_limiter_test SOURCES RateLimiterTest.cpp\n      TEST logging_standard_log_handler_test SOURCES StandardLogHandlerTest.cpp\n      TEST logging_xlog_test WINDOWS_DISABLED\n        HEADERS\n          XlogHeader1.h\n          XlogHeader2.h\n        SOURCES\n          XlogFile1.cpp\n          XlogFile2.cpp\n          XlogTest.cpp\n\n    DIRECTORY fibers/test/\n      # FiberManager swapWithException fails with segfault\n      BENCHMARK fibers_fibers_benchmark WINDOWS_DISABLED\n        SOURCES FibersBenchmark.cpp\n      TEST fibers_fibers_test BROKEN SOURCES FibersTest.cpp\n\n    DIRECTORY functional/test/\n      TEST functional_apply_tuple_test WINDOWS_DISABLED\n        SOURCES ApplyTupleTest.cpp\n      TEST functional_invoke_test WINDOWS_DISABLED\n        SOURCES InvokeTest.cpp\n      TEST functional_partial_test SOURCES PartialTest.cpp\n      TEST functional_protocol_test SOURCES protocol_test.cpp\n      TEST functional_traits_test SOURCES traits_test.cpp\n\n    DIRECTORY futures/test/\n      TEST futures_barrier_test SOURCES BarrierTest.cpp\n      TEST futures_callback_lifetime_test SOURCES CallbackLifetimeTest.cpp\n      TEST futures_collect_test SOURCES CollectTest.cpp\n      TEST futures_context_test SOURCES ContextTest.cpp\n      TEST futures_core_test SOURCES CoreTest.cpp\n      TEST futures_ensure_test SOURCES EnsureTest.cpp\n      TEST futures_filter_test SOURCES FilterTest.cpp\n      TEST futures_future_splitter_test SOURCES FutureSplitterTest.cpp\n      BENCHMARK futures_benchmark WINDOWS_DISABLED\n        SOURCES Benchmark.cpp\n      TEST futures_future_test WINDOWS_DISABLED\n        SOURCES FutureTest.cpp\n      TEST futures_header_compile_test SOURCES HeaderCompileTest.cpp\n      TEST futures_interrupt_test SOURCES InterruptTest.cpp\n      TEST futures_map_test SOURCES MapTest.cpp\n      TEST futures_non_copyable_lambda_test SOURCES NonCopyableLambdaTest.cpp\n      TEST futures_poll_test SOURCES PollTest.cpp\n      TEST futures_promise_test SOURCES PromiseTest.cpp\n      TEST futures_reduce_test SOURCES ReduceTest.cpp\n      TEST futures_retrying_test SOURCES RetryingTest.cpp\n      TEST futures_self_destruct_test SOURCES SelfDestructTest.cpp\n      TEST futures_shared_promise_test SOURCES SharedPromiseTest.cpp\n      TEST futures_test_executor_test SOURCES TestExecutorTest.cpp\n      TEST futures_then_compile_test\n        HEADERS\n          ThenCompileTest.h\n        SOURCES\n          ThenCompileTest.cpp\n      TEST futures_then_test SOURCES ThenTest.cpp\n      TEST futures_timekeeper_test WINDOWS_DISABLED SOURCES TimekeeperTest.cpp\n      TEST futures_times_test SOURCES TimesTest.cpp\n      TEST futures_unwrap_test SOURCES UnwrapTest.cpp\n      TEST futures_via_test SOURCES ViaTest.cpp\n      TEST futures_wait_test SOURCES WaitTest.cpp\n      TEST futures_when_test SOURCES WhenTest.cpp\n      TEST futures_while_do_test SOURCES WhileDoTest.cpp\n      TEST futures_will_equal_test SOURCES WillEqualTest.cpp\n      TEST futures_window_test WINDOWS_DISABLED\n        SOURCES WindowTest.cpp\n\n    DIRECTORY gen/test/\n      # MSVC bug can't resolve initializer_list constructor properly\n      TEST gen_base_test WINDOWS_DISABLED SOURCES BaseTest.cpp\n      TEST gen_combine_test SOURCES CombineTest.cpp\n      BENCHMARK gen_parallel_map_benchmark SOURCES ParallelMapBenchmark.cpp\n      TEST gen_parallel_map_test SOURCES ParallelMapTest.cpp\n      BENCHMARK gen_parallel_benchmark SOURCES ParallelBenchmark.cpp\n      TEST gen_parallel_test SOURCES ParallelTest.cpp\n\n    DIRECTORY hash/test/\n      BENCHMARK hash_checksum_benchmark SOURCES ChecksumBenchmark.cpp\n      # builds, but tests fail on MSVC cmake build\n      TEST hash_checksum_test WINDOWS_DISABLED\n        SOURCES ChecksumTest.cpp\n      TEST hash_farm_hash_test SOURCES FarmHashTest.cpp\n      BENCHMARK hash_hash_benchmark WINDOWS_DISABLED\n        SOURCES HashBenchmark.cpp\n      TEST hash_hash_test WINDOWS_DISABLED\n        SOURCES HashTest.cpp\n      TEST hash_spooky_hash_v1_test SOURCES SpookyHashV1Test.cpp\n      TEST hash_spooky_hash_v2_test SOURCES SpookyHashV2Test.cpp\n      TEST hash_traits_test SOURCES traits_test.cpp\n\n    DIRECTORY io/test/\n      TEST io_fs_util_test SOURCES FsUtilTest.cpp\n      TEST io_iobuf_test WINDOWS_DISABLED SOURCES IOBufTest.cpp\n      TEST io_iobuf_cursor_test SOURCES IOBufCursorTest.cpp\n      TEST io_iobuf_queue_test SOURCES IOBufQueueTest.cpp\n      TEST io_record_io_test WINDOWS_DISABLED SOURCES RecordIOTest.cpp\n      TEST io_shutdown_socket_set_test HANGING\n        SOURCES ShutdownSocketSetTest.cpp\n      TEST io_socket_option_value_test HANGING\n        SOURCES SocketOptionValueTest.cpp\n\n    DIRECTORY io/async/test/\n      # A number of tests in the async_test binary are unfortunately flaky.\n      # When run under Travis CI a number of the tests also hang (it looks\n      # like they do not get expected socket accept events, causing them\n      # to never break out of their event loops).\n      TEST io_async_async_test BROKEN\n        CONTENT_DIR certs/\n        HEADERS\n          AsyncSocketTest.h\n          AsyncSSLSocketTest.h\n        SOURCES\n          AsyncPipeTest.cpp\n          AsyncSocketExceptionTest.cpp\n          AsyncSocketTest.cpp\n          AsyncSocketTest2.cpp\n          AsyncSSLSocketTest.cpp\n          AsyncSSLSocketTest2.cpp\n          AsyncSSLSocketWriteTest.cpp\n          AsyncTransportTest.cpp\n      # This is disabled because it depends on things that don't exist\n      # on Windows.\n      # TODO: Refactor EventHandlerTest to not use eventfd so it can work on Mac OS X.\n      #TEST io_async_event_handler_test WINDOWS_DISABLED SOURCES EventHandlerTest.cpp\n      TEST io_async_async_timeout_test SOURCES AsyncTimeoutTest.cpp\n      TEST io_async_async_udp_socket_test APPLE_DISABLED WINDOWS_DISABLED\n        SOURCES AsyncUDPSocketTest.cpp\n      TEST io_async_delayed_destruction_test SOURCES DelayedDestructionTest.cpp\n      TEST io_async_delayed_destruction_base_test\n        SOURCES DelayedDestructionBaseTest.cpp\n      TEST io_async_destructor_check_test SOURCES DestructorCheckTest.cpp\n      # Fails with gtest macro error\n      TEST io_async_event_base_test BROKEN SOURCES EventBaseTest.cpp\n      TEST io_async_event_base_local_test WINDOWS_DISABLED\n        SOURCES EventBaseLocalTest.cpp\n      TEST io_async_hh_wheel_timer_test SOURCES HHWheelTimerTest.cpp\n      TEST io_async_hh_wheel_timer_slow_tests SLOW\n        SOURCES HHWheelTimerSlowTests.cpp\n      TEST io_async_notification_queue_test WINDOWS_DISABLED\n        SOURCES NotificationQueueTest.cpp\n      BENCHMARK io_async_request_context_benchmark WINDOWS_DISABLED\n        SOURCES RequestContextBenchmark.cpp\n        HEADERS RequestContextHelper.h\n      TEST io_async_request_context_test WINDOWS_DISABLED\n        SOURCES RequestContextTest.cpp\n      TEST io_async_scoped_event_base_thread_test WINDOWS_DISABLED\n        SOURCES ScopedEventBaseThreadTest.cpp\n      TEST io_async_ssl_session_test\n        CONTENT_DIR certs/\n        SOURCES SSLSessionTest.cpp\n      TEST io_async_write_chain_async_transport_wrapper_test\n        SOURCES WriteChainAsyncTransportWrapperTest.cpp\n\n    DIRECTORY io/async/ssl/test/\n      TEST io_async_ssl_ssl_errors_test SOURCES SSLErrorsTest.cpp\n\n    DIRECTORY lang/test/\n      TEST lang_align_test SOURCES AlignTest.cpp\n      TEST lang_aligned_test SOURCES AlignedTest.cpp\n      TEST lang_badge_test SOURCES BadgeTest.cpp\n      TEST lang_bits_class_test SOURCES BitsClassTest.cpp\n      TEST lang_bits_test SOURCES BitsTest.cpp\n      TEST lang_c_string_test SOURCES CStringTest.cpp\n      TEST lang_cast_test SOURCES CastTest.cpp\n      TEST lang_checked_math_test SOURCES CheckedMathTest.cpp\n      TEST lang_exception_test SOURCES ExceptionTest.cpp\n      TEST lang_extern_test SOURCES ExternTest.cpp\n      TEST lang_ordering_test SOURCES OrderingTest.cpp\n      TEST lang_pretty_test SOURCES PrettyTest.cpp\n      TEST lang_propagate_const_test SOURCES PropagateConstTest.cpp\n      TEST lang_r_value_reference_wrapper_test WINDOWS_DISABLED\n        SOURCES RValueReferenceWrapperTest.cpp\n      TEST lang_safe_assert_test SOURCES SafeAssertTest.cpp\n      BENCHMARK lang_to_ascii_benchmark SOURCES ToAsciiBench.cpp\n      TEST lang_to_ascii_test SOURCES ToAsciiTest.cpp\n      TEST lang_type_info_test SOURCES TypeInfoTest.cpp\n\n    DIRECTORY memory/test/\n      TEST memory_arena_test WINDOWS_DISABLED SOURCES ArenaTest.cpp\n      TEST memory_reentrant_allocator_test WINDOWS_DISABLED\n        SOURCES ReentrantAllocatorTest.cpp\n      TEST memory_thread_cached_arena_test WINDOWS_DISABLED\n        SOURCES ThreadCachedArenaTest.cpp\n      TEST memory_mallctl_helper_test SOURCES MallctlHelperTest.cpp\n      TEST memory_uninitialized_memory_hacks_test\n        SOURCES UninitializedMemoryHacksTest.cpp\n\n    DIRECTORY net/detail/test/\n      TEST net_detail_socket_file_descriptor_map_test\n        SOURCES SocketFileDescriptorMapTest.cpp\n\n    DIRECTORY portability/test/\n      TEST portability_constexpr_test SOURCES ConstexprTest.cpp\n      TEST portability_filesystem_test SOURCES FilesystemTest.cpp\n      TEST portability_libgen_test SOURCES LibgenTest.cpp\n      TEST portability_openssl_portability_test\n        SOURCES OpenSSLPortabilityTest.cpp\n      TEST portability_pthread_test SOURCES PThreadTest.cpp\n      TEST portability_time_test WINDOWS_DISABLED\n        SOURCES TimeTest.cpp\n\n    DIRECTORY ssl/test/\n      TEST ssl_openssl_hash_test SOURCES OpenSSLHashTest.cpp\n\n    DIRECTORY stats/test/\n      TEST stats_buffered_stat_test SOURCES BufferedStatTest.cpp\n      BENCHMARK stats_digest_builder_benchmark\n        SOURCES DigestBuilderBenchmark.cpp\n      TEST stats_digest_builder_test SOURCES DigestBuilderTest.cpp\n      BENCHMARK stats_histogram_benchmark SOURCES HistogramBenchmark.cpp\n      TEST stats_histogram_test SOURCES HistogramTest.cpp\n      BENCHMARK stats_quantile_histogram_benchmark\n        SOURCES QuantileHistogramBenchmark.cpp\n      TEST stats_quantile_estimator_test SOURCES QuantileEstimatorTest.cpp\n      TEST stats_sliding_window_test SOURCES SlidingWindowTest.cpp\n      BENCHMARK stats_tdigest_benchmark SOURCES TDigestBenchmark.cpp\n      TEST stats_tdigest_test SOURCES TDigestTest.cpp\n      TEST stats_timeseries_histogram_test SOURCES TimeseriesHistogramTest.cpp\n      TEST stats_timeseries_test SOURCES TimeSeriesTest.cpp\n\n    DIRECTORY synchronization/test/\n      TEST synchronization_atomic_util_test SOURCES AtomicUtilTest.cpp\n      TEST synchronization_atomic_struct_test SOURCES AtomicStructTest.cpp\n      BENCHMARK synchronization_baton_benchmark SOURCES BatonBenchmark.cpp\n      TEST synchronization_baton_test SOURCES BatonTest.cpp\n      TEST synchronization_call_once_test SOURCES CallOnceTest.cpp\n      TEST synchronization_event_count_test SOURCES EventCountTest.cpp\n      TEST synchronization_lifo_sem_test WINDOWS_DISABLED\n        SOURCES LifoSemTests.cpp\n      TEST synchronization_relaxed_atomic_test WINDOWS_DISABLED\n        SOURCES RelaxedAtomicTest.cpp\n      TEST synchronization_rw_spin_lock_test SOURCES RWSpinLockTest.cpp\n      TEST synchronization_semaphore_test WINDOWS_DISABLED\n        SOURCES SemaphoreTest.cpp\n      TEST synchronization_small_locks_test SOURCES SmallLocksTest.cpp\n\n    DIRECTORY synchronization/detail/test/\n      TEST synchronization_detail_hardware_test SOURCES HardwareTest.cpp\n\n    DIRECTORY system/test/\n      TEST system_at_fork_test WINDOWS_DISABLED SOURCES AtForkTest.cpp\n      TEST system_memory_mapping_test SOURCES MemoryMappingTest.cpp\n      TEST system_shell_test SOURCES ShellTest.cpp\n      #TEST system_subprocess_test SOURCES SubprocessTest.cpp\n      TEST system_thread_id_test SOURCES ThreadIdTest.cpp\n      TEST system_thread_name_test WINDOWS_DISABLED\n        SOURCES ThreadNameTest.cpp\n\n    DIRECTORY test/\n      TEST ahm_int_stress_test SOURCES AHMIntStressTest.cpp\n      TEST arena_smartptr_test SOURCES ArenaSmartPtrTest.cpp\n      BENCHMARK ascii_case_insensitive_benchmark\n        SOURCES AsciiCaseInsensitiveBenchmark.cpp\n      TEST ascii_check_test SOURCES AsciiCaseInsensitiveTest.cpp\n      TEST atomic_hash_array_test SOURCES AtomicHashArrayTest.cpp\n      TEST atomic_hash_map_test HANGING\n        SOURCES AtomicHashMapTest.cpp\n      TEST atomic_linked_list_test SOURCES AtomicLinkedListTest.cpp\n      TEST atomic_unordered_map_test SOURCES AtomicUnorderedMapTest.cpp\n      TEST base64_test SOURCES base64_test.cpp\n      TEST buffered_atomic_test SOURCES BufferedAtomicTest.cpp\n      TEST cancellation_token_test SOURCES CancellationTokenTest.cpp\n      TEST chrono_test SOURCES ChronoTest.cpp\n      TEST clock_gettime_wrappers_test SOURCES ClockGettimeWrappersTest.cpp\n      TEST concurrent_bit_set_test SOURCES ConcurrentBitSetTest.cpp\n      BENCHMARK concurrent_skip_list_benchmark\n        SOURCES ConcurrentSkipListBenchmark.cpp\n      TEST concurrent_skip_list_test SOURCES ConcurrentSkipListTest.cpp\n      # Builds but fails test on constexpr_exp_floating std::exp(471.L)\n      TEST constexpr_math_test WINDOWS_DISABLED\n        SOURCES ConstexprMathTest.cpp\n      TEST conv_test SOURCES ConvTest.cpp\n      TEST cpu_id_test SOURCES CpuIdTest.cpp\n      TEST demangle_test SOURCES DemangleTest.cpp\n      TEST deterministic_schedule_test SOURCES DeterministicScheduleTest.cpp\n      TEST discriminated_ptr_test SOURCES DiscriminatedPtrTest.cpp\n      TEST endian_test SOURCES EndianTest.cpp\n      TEST exception_string_test BROKEN SOURCES ExceptionStringTest.cpp\n      TEST exception_test SOURCES ExceptionTest.cpp\n      BENCHMARK exception_wrapper_benchmark WINDOWS_DISABLED\n        SOURCES ExceptionWrapperBenchmark.cpp\n      TEST exception_wrapper_test WINDOWS_DISABLED\n        SOURCES ExceptionWrapperTest.cpp\n      TEST expected_coroutines_test SOURCES ExpectedCoroutinesTest.cpp\n      TEST expected_test WINDOWS_DISABLED\n        SOURCES ExpectedTest.cpp\n      BENCHMARK fbstring_benchmark WINDOWS_DISABLED\n        SOURCES FBStringBenchmark.cpp\n        HEADERS FBStringTestBenchmarks.cpp.h\n      TEST fbstring_test WINDOWS_DISABLED SOURCES FBStringTest.cpp\n      TEST file_test SOURCES FileTest.cpp\n      # Open-source linux build can't handle running this.\n      #TEST file_lock_test SOURCES FileLockTest.cpp\n      TEST file_util_test SOURCES FileUtilTest.cpp\n      BENCHMARK fingerprint_benchmark SOURCES FingerprintBenchmark.cpp\n      TEST fingerprint_test SOURCES FingerprintTest.cpp\n      TEST fixed_string_test SOURCES FixedStringTest.cpp\n      TEST fmt_utility_test SOURCES FmtUtilityTest.cpp\n      TEST format_other_test SOURCES FormatOtherTest.cpp\n      BENCHMARK format_benchmark SOURCES FormatBenchmark.cpp\n      TEST format_test SOURCES FormatTest.cpp\n      TEST function_test BROKEN\n        SOURCES FunctionTest.cpp\n      BENCHMARK function_ref_benchmark SOURCES FunctionRefBenchmark.cpp\n      TEST function_ref_test SOURCES FunctionRefTest.cpp\n      TEST futex_test SOURCES FutexTest.cpp\n      TEST glog_test SOURCES GLogTest.cpp\n      TEST group_varint_test SOURCES GroupVarintTest.cpp\n      TEST group_varint_test_ssse3 SOURCES GroupVarintTest.cpp\n      TEST indestructible_test SOURCES IndestructibleTest.cpp\n      TEST indexed_mem_pool_test BROKEN\n        SOURCES IndexedMemPoolTest.cpp\n      TEST iterators_test SOURCES IteratorsTest.cpp\n      TEST lazy_test SOURCES LazyTest.cpp\n      TEST locks_test SOURCES SpinLockTest.cpp\n      TEST math_test SOURCES MathTest.cpp\n      TEST memcpy_test SOURCES MemcpyTest.cpp\n      TEST memory_idler_test SOURCES MemoryIdlerTest.cpp\n      TEST memory_test WINDOWS_DISABLED\n        SOURCES MemoryTest.cpp\n      TEST move_wrapper_test SOURCES MoveWrapperTest.cpp\n      TEST mpmc_pipeline_test SOURCES MPMCPipelineTest.cpp\n      TEST mpmc_queue_test SLOW\n        SOURCES MPMCQueueTest.cpp\n      TEST network_address_test HANGING\n        SOURCES\n          IPAddressTest.cpp\n          MacAddressTest.cpp\n          SocketAddressTest.cpp\n      TEST optional_coroutines_test SOURCES OptionalCoroutinesTest.cpp\n      TEST optional_test SOURCES OptionalTest.cpp\n      TEST packed_sync_ptr_test HANGING\n        SOURCES PackedSyncPtrTest.cpp\n      TEST padded_test SOURCES PaddedTest.cpp\n      #TEST poly_test SOURCES PolyTest.cpp\n      TEST portability_test SOURCES PortabilityTest.cpp\n      # Turns out this benchmark uses Linux only API for setting CPU affinity i.e. cpu_set_t.\n      BENCHMARK producer_consumer_queue_benchmark APPLE_DISABLED WINDOWS_DISABLED\n        SOURCES ProducerConsumerQueueBenchmark.cpp\n      TEST producer_consumer_queue_test SLOW\n        SOURCES ProducerConsumerQueueTest.cpp\n      BENCHMARK range_find_benchmark SOURCES RangeFindBenchmark.cpp\n      TEST random_test SOURCES RandomTest.cpp\n      TEST range_test SOURCES RangeTest.cpp\n      TEST replaceable_test WINDOWS_DISABLED SOURCES ReplaceableTest.cpp\n      TEST scope_guard_test WINDOWS_DISABLED SOURCES ScopeGuardTest.cpp\n      # Heavily dependent on drand and srand48\n      #TEST shared_mutex_test SOURCES SharedMutexTest.cpp\n      # SingletonTest requires Subprocess\n      #TEST singleton_test SOURCES SingletonTest.cpp\n      TEST singleton_double_registration_test BROKEN SOURCES\n        SingletonDoubleRegistration.cpp\n      TEST singleton_test_global SOURCES SingletonTestGlobal.cpp\n      TEST singleton_thread_local_test BROKEN SOURCES\n        SingletonThreadLocalTest.cpp\n        SingletonThreadLocalTestOverload.cpp\n      TEST spin_lock_test SOURCES SpinLockTest.cpp\n      BENCHMARK string_benchmark WINDOWS_DISABLED SOURCES StringBenchmark.cpp\n      TEST string_test WINDOWS_DISABLED SOURCES StringTest.cpp\n      BENCHMARK string_to_float_benchmark SOURCES StringToFloatBenchmark.cpp\n      BENCHMARK synchronized_benchmark WINDOWS_DISABLED\n        SOURCES SynchronizedBenchmark.cpp\n      TEST synchronized_test WINDOWS_DISABLED\n        SOURCES SynchronizedTest.cpp\n      TEST thread_cached_int_test WINDOWS_DISABLED\n        SOURCES ThreadCachedIntTest.cpp\n      TEST thread_local_test WINDOWS_DISABLED SOURCES ThreadLocalTest.cpp\n      TEST timeout_queue_test SOURCES TimeoutQueueTest.cpp\n      TEST token_bucket_test SOURCES TokenBucketTest.cpp\n      TEST traits_test SOURCES TraitsTest.cpp\n      TEST try_test WINDOWS_DISABLED SOURCES TryTest.cpp\n      TEST unicode_test SOURCES UnicodeTest.cpp\n      TEST unit_test SOURCES UnitTest.cpp\n      BENCHMARK uri_benchmark SOURCES UriBenchmark.cpp\n      TEST uri_test SOURCES UriTest.cpp\n      TEST utf8_string_test SOURCES UTF8StringTest.cpp\n      TEST utility_test SOURCES UtilityTest.cpp\n      TEST varint_test SOURCES VarintTest.cpp\n\n    DIRECTORY testing/test/\n      TEST testing_test_util_test SOURCES TestUtilTest.cpp\n\n    DIRECTORY tracing/test/\n      TEST static_tracepoint_section_test\n        SOURCES StaticTracepointSectionTest.cpp\n\n    DIRECTORY json/test/\n      TEST json_dynamic_converter_test SOURCES DynamicConverterTest.cpp\n      TEST json_dynamic_other_test SOURCES DynamicOtherTest.cpp\n      TEST json_dynamic_parser_test SOURCES DynamicParserTest.cpp\n      TEST json_dynamic_test SOURCES DynamicTest.cpp\n      # MSVC Preprocessor stringizing raw string literals bug\n      TEST json_json_test WINDOWS_DISABLED SOURCES JsonTest.cpp\n      BENCHMARK json_json_benchmark SOURCES JsonBenchmark.cpp\n      TEST json_json_other_test SOURCES JsonOtherTest.cpp\n      TEST json_json_patch_test SOURCES json_patch_test.cpp\n      TEST json_json_pointer_test SOURCES json_pointer_test.cpp\n      TEST json_json_schema_test SOURCES JSONSchemaTest.cpp\n  )\n\n  if (${LIBSODIUM_FOUND})\n    folly_define_tests(\n      DIRECTORY crypto/test/\n        TEST crypto_blake2xb_test SOURCES Blake2xbTest.cpp\n        TEST crypto_lt_hash_test SOURCES LtHashTest.cpp\n    )\n  endif()\n\n  if (${LIBAIO_FOUND})\n    folly_define_tests(\n      DIRECTORY io/async/test/\n        TEST io_async_async_io_test\n          SOURCES\n            AsyncIOTest.cpp\n            AsyncBaseTestLib.cpp\n            IoTestTempFileUtil.cpp\n    )\n  endif()\n\n  get_target_property(pic folly POSITION_INDEPENDENT_CODE)\n  if (pic)\n    add_library(singleton_thread_local_overload\n      SHARED ${FOLLY_DIR}/test/SingletonThreadLocalTestOverload.cpp)\n    apply_folly_compile_options_to_target(singleton_thread_local_overload)\n    set_target_properties(singleton_thread_local_overload PROPERTIES PREFIX \"\")\n    target_link_libraries(singleton_thread_local_overload PRIVATE folly)\n    folly_define_tests(\n      DIRECTORY test/\n        TEST singleton_thread_local_test SOURCES SingletonThreadLocalTest.cpp\n    )\n  endif()\nendif()\n\nadd_subdirectory(folly)\n"
        },
        {
          "name": "CMakeListsForBuck2.txt",
          "type": "blob",
          "size": 4.08,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ncmake_minimum_required(VERSION 3.0.2 FATAL_ERROR)\n# We use the GoogleTest module if it is available (only in CMake 3.9+)\n# It requires CMP0054 and CMP0057 to be enabled.\nif (POLICY CMP0054)\n  cmake_policy(SET CMP0054 NEW)\nendif()\nif (POLICY CMP0057)\n  cmake_policy(SET CMP0057 NEW)\nendif()\n\n# CMP0075 Include file check macros honor CMAKE_REQUIRED_LIBRARIES\nif(POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW)\nendif()\n\n# includes\nset(CMAKE_MODULE_PATH\n  \"${CMAKE_CURRENT_SOURCE_DIR}/CMake\"\n  # for in-fbsource builds\n  \"${CMAKE_CURRENT_SOURCE_DIR}/../opensource/fbcode_builder/CMake\"\n  # For shipit-transformed builds\n  \"${CMAKE_CURRENT_SOURCE_DIR}/build/fbcode_builder/CMake\"\n  ${CMAKE_MODULE_PATH})\n\n# package information\nset(PACKAGE_NAME      \"folly\")\nif (NOT DEFINED PACKAGE_VERSION)\n  set(PACKAGE_VERSION   \"0.58.0-dev\")\nendif()\nset(PACKAGE_STRING    \"${PACKAGE_NAME} ${PACKAGE_VERSION}\")\nset(PACKAGE_TARNAME   \"${PACKAGE_NAME}-${PACKAGE_VERSION}\")\nset(PACKAGE_BUGREPORT \"https://github.com/facebook/folly/issues\")\n\n# 150+ tests in the root folder anyone? No? I didn't think so.\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nproject(${PACKAGE_NAME} CXX C ASM)\n\nset(INCLUDE_INSTALL_DIR include CACHE STRING\n    \"The subdirectory where header files should be installed\")\nset(LIB_INSTALL_DIR lib CACHE STRING\n    \"The subdirectory where libraries should be installed\")\nset(BIN_INSTALL_DIR bin CACHE STRING\n    \"The subdirectory where binaries should be installed\")\nset(CMAKE_INSTALL_DIR lib/cmake/folly CACHE STRING\n    \"The subdirectory where CMake package config files should be installed\")\n\noption(BUILD_SHARED_LIBS\n  \"If enabled, build folly as a shared library.  \\\n  This is generally discouraged, since folly does not commit to having \\\n  a stable ABI.\"\n  OFF\n)\n# Mark BUILD_SHARED_LIBS as an \"advanced\" option, since enabling it\n# is generally discouraged.\nmark_as_advanced(BUILD_SHARED_LIBS)\nset(FOLLY_SUPPORT_SHARED_LIBRARY \"${BUILD_SHARED_LIBS}\")\n\ninclude(FBBuildOptions)\nfb_activate_static_library_option()\n\nif(NOT CMAKE_CXX_STANDARD)\n  set(CMAKE_CXX_STANDARD 17)\n  set(CMAKE_CXX_STANDARD_REQUIRED ON)\n  message(STATUS \"setting C++ standard to C++${CMAKE_CXX_STANDARD}\")\nendif()\n\nif(NOT DEFINED IS_X86_64_ARCH AND ${CMAKE_SYSTEM_PROCESSOR} MATCHES \"x86_64|AMD64\")\n  set(IS_X86_64_ARCH TRUE)\nelse()\n  set(IS_X86_64_ARCH FALSE)\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  # Check target architecture\n  if (NOT CMAKE_SIZEOF_VOID_P EQUAL 8)\n    message(FATAL_ERROR \"Folly requires a 64bit target architecture.\")\n  endif()\n\n  if (MSVC_VERSION LESS 1900)\n    message(\n      FATAL_ERROR\n      \"This build script only supports building Folly on 64-bit Windows with \"\n      \"at least Visual Studio 2017. \"\n      \"MSVC version '${MSVC_VERSION}' is not supported.\"\n    )\n  endif()\nendif()\n\nset(TOP_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(FOLLY_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/folly\")\nset(\n  FOLLY_DIR_PREFIXES\n  \"${CMAKE_CURRENT_SOURCE_DIR}:${CMAKE_CURRENT_BINARY_DIR}\"\n)\n\ninclude(GNUInstallDirs)\n\nset(CMAKE_THREAD_PREFER_PTHREAD ON)\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\nset(FOLLY_HAVE_PTHREAD \"${CMAKE_USE_PTHREADS_INIT}\")\nlist(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)\nlist(APPEND FOLLY_LINK_LIBRARIES Threads::Threads)\n\nif(MSVC)\n  include(FollyCompilerMSVC)\nelse()\n  include(FollyCompilerUnix)\nendif()\ninclude(FollyFunctions)\n\ninclude(folly-deps) # Find the required packages\ninclude(FollyConfigChecks)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/CMake/folly-config.h.cmake\n  ${CMAKE_CURRENT_BINARY_DIR}/folly/folly-config.h\n)\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.28,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.29,
          "content": "# Contributing to Folly\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Code of Conduct\nThe code of conduct is described in [`CODE_OF_CONDUCT.md`](CODE_OF_CONDUCT.md).\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `master`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to folly, you agree that your contributions will be licensed\nunder the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.08,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n\nFiles in folly/external/farmhash licensed as follows\n\n    Copyright (c) 2014 Google, Inc.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n"
        },
        {
          "name": "PACKAGE",
          "type": "blob",
          "size": 0.89,
          "content": "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nload(\"@shim//:cfg.bzl\", \"SHIM_ALIASES\", \"set_cfg_constructor\", \"get_shim_modifiers\")\nload(\"@prelude//cfg/modifier:set_cfg_modifiers.bzl\", \"set_cfg_modifiers\")\n\n# Activate cfg modifiers from CLI / PACKAGE / targets\nset_cfg_constructor(SHIM_ALIASES)\n\nmodifiers = get_shim_modifiers()\nset_cfg_modifiers(modifiers)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.75,
          "content": "Folly: Facebook Open-source Library\n===================================\n\n<a href=\"https://opensource.facebook.com/support-ukraine\">\n  <img src=\"https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB\" alt=\"Support Ukraine - Help Provide Humanitarian Aid to Ukraine.\" />\n</a>\n\n# What is `folly`?\n\n<img src=\"static/logo.svg\" alt=\"Logo Folly\" width=\"15%\" align=\"right\" />\n\nFolly (acronymed loosely after Facebook Open Source Library) is a\nlibrary of C++17 components designed with practicality and efficiency\nin mind. **Folly contains a variety of core library components used extensively\nat Facebook**. In particular, it's often a dependency of Facebook's other\nopen source C++ efforts and place where those projects can share code.\n\nIt complements (as opposed to competing against) offerings\nsuch as Boost and of course `std`. In fact, we embark on defining our\nown component only when something we need is either not available, or\ndoes not meet the needed performance profile. We endeavor to remove\nthings from folly if or when `std` or Boost obsoletes them.\n\nPerformance concerns permeate much of Folly, sometimes leading to\ndesigns that are more idiosyncratic than they would otherwise be (see\ne.g. `PackedSyncPtr.h`, `SmallLocks.h`). Good performance at large\nscale is a unifying theme in all of Folly.\n\n## Check it out in the intro video\n[![Explain Like I’m 5: Folly](https://img.youtube.com/vi/Wr_IfOICYSs/0.jpg)](https://www.youtube.com/watch?v=Wr_IfOICYSs)\n\n# Logical Design\n\nFolly is a collection of relatively independent components, some as\nsimple as a few symbols. There is no restriction on internal\ndependencies, meaning that a given folly module may use any other\nfolly components.\n\nAll symbols are defined in the top-level namespace `folly`, except of\ncourse macros. Macro names are ALL_UPPERCASE and should be prefixed\nwith `FOLLY_`. Namespace `folly` defines other internal namespaces\nsuch as `internal` or `detail`. User code should not depend on symbols\nin those namespaces.\n\n# Physical Design\n\nAt the top level Folly uses the classic \"stuttering\" scheme\n`folly/folly` used by Boost and others. The first directory serves as\nan installation root of the library (with possible versioning a la\n`folly-1.0/`), and the second is to distinguish the library when\nincluding files, e.g. `#include <folly/FBString.h>`.\n\nThe directory structure is flat (mimicking the namespace structure),\ni.e. we don't have an elaborate directory hierarchy (it is possible\nthis will change in future versions). The subdirectory `experimental`\ncontains files that are used inside folly and possibly at Facebook but\nnot considered stable enough for client use. Your code should not use\nfiles in `folly/experimental` lest it may break when you update Folly.\n\nThe `folly/folly/test` subdirectory includes the unittests for all\ncomponents, usually named `ComponentXyzTest.cpp` for each\n`ComponentXyz.*`. The `folly/folly/docs` directory contains\ndocumentation.\n\n# What's in it?\n\nBecause of folly's fairly flat structure, the best way to see what's in it\nis to look at the headers in [top level `folly/` directory](https://github.com/facebook/folly/tree/main/folly). You can also\ncheck the [`docs` folder](folly/docs) for documentation, starting with the\n[overview](folly/docs/Overview.md).\n\nFolly is published on GitHub at https://github.com/facebook/folly.\n\n# Build Notes\n\nBecause folly does not provide any ABI compatibility guarantees from commit to\ncommit, we generally recommend building folly as a static library.\n\nfolly supports gcc (5.1+), clang, or MSVC. It should run on Linux (x86-32,\nx86-64, and ARM), iOS, macOS, and Windows (x86-64). The CMake build is only\ntested on some of these platforms; at a minimum, we aim to support macOS and\nLinux (on the latest Ubuntu LTS release or newer.)\n\n## `getdeps.py`\n\nThis script is used by many of Meta's OSS tools.  It will download and build all of the necessary dependencies first, and will then invoke cmake etc to build folly.  This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.\n\nIt's written in python so you'll need python3.6 or later on your PATH.  It works on Linux, macOS and Windows.\n\nThe settings for folly's cmake build are held in its getdeps manifest `build/fbcode_builder/manifests/folly`, which you can edit locally if desired.\n\n### Dependencies\n\nIf on Linux or MacOS (with homebrew installed) you can install system dependencies to save building them:\n\n    # Clone the repo\n    git clone https://github.com/facebook/folly\n    # Install dependencies\n    cd folly\n    sudo ./build/fbcode_builder/getdeps.py install-system-deps --recursive\n\nIf you'd like to see the packages before installing them:\n\n    ./build/fbcode_builder/getdeps.py install-system-deps --dry-run --recursive\n\nOn other platforms or if on Linux and without system dependencies `getdeps.py` will mostly download and build them for you during the build step.\n\nSome of the dependencies `getdeps.py` uses and installs are:\n\n  * a version of boost compiled with C++14 support.\n  * googletest is required to build and run folly's tests.\n\n### Build\n\nThis script will download and build all of the necessary dependencies first,\nand will then invoke cmake etc to build folly.  This will help ensure that you build with relevant versions of all of the dependent libraries, taking into account what versions are installed locally on your system.\n\n`getdeps.py` currently requires python 3.6+ to be on your path.\n\n`getdeps.py` will invoke cmake etc.\n\n    # Clone the repo\n    git clone https://github.com/facebook/folly\n    cd folly\n    # Build, using system dependencies if available\n    python3 ./build/fbcode_builder/getdeps.py --allow-system-packages build\n\nIt puts output in its scratch area:\n\n  * `installed/folly/lib/libfolly.a`: Library\n\nYou can also specify a `--scratch-path` argument to control\nthe location of the scratch directory used for the build. You can find the default scratch install location from logs or with `python3 ./build/fbcode_builder/getdeps.py show-inst-dir`.\n\nThere are also\n`--install-dir` and `--install-prefix` arguments to provide some more\nfine-grained control of the installation directories. However, given that\nfolly provides no compatibility guarantees between commits we generally\nrecommend building and installing the libraries to a temporary location, and\nthen pointing your project's build at this temporary location, rather than\ninstalling folly in the traditional system installation directories. e.g., if you are building with CMake you can use the `CMAKE_PREFIX_PATH` variable to allow CMake to find folly in this temporary installation directory when\nbuilding your project.\n\nIf you want to invoke `cmake` again to iterate, there is a helpful `run_cmake.py` script output in the scratch build directory.  You can find the scratch build directory from logs or with `python3 ./build/fbcode_builder/getdeps.py show-build-dir`.\n\n### Run tests\n\nBy default `getdeps.py` will build the tests for folly. To run them:\n\n    cd folly\n    python3 ./build/fbcode_builder/getdeps.py --allow-system-packages test\n\n### `build.sh`/`build.bat` wrapper\n\n`build.sh` can be used on Linux and MacOS, on Windows use\nthe `build.bat` script instead. Its a wrapper around `getdeps.py`.\n\n## Build with cmake directly\n\nIf you don't want to let getdeps invoke cmake for you then by default, building the tests is disabled as part of the CMake `all` target.\nTo build the tests, specify `-DBUILD_TESTS=ON` to CMake at configure time.\n\nNB if you want to invoke `cmake` again to iterate on a `getdeps.py` build, there is a helpful `run_cmake.py` script output in the scratch-path build directory. You can find the scratch build directory from logs or with `python3 ./build/fbcode_builder/getdeps.py show-build-dir`.\n\nRunning tests with ctests also works if you cd to the build dir, e.g.\n`(cd $(python3 ./build/fbcode_builder/getdeps.py show-build-dir) && ctest)`\n\n### Finding dependencies in non-default locations\n\nIf you have boost, gtest, or other dependencies installed in a non-default\nlocation, you can use the `CMAKE_INCLUDE_PATH` and `CMAKE_LIBRARY_PATH`\nvariables to make CMAKE look also look for header files and libraries in\nnon-standard locations.  For example, to also search the directories\n`/alt/include/path1` and `/alt/include/path2` for header files and the\ndirectories `/alt/lib/path1` and `/alt/lib/path2` for libraries, you can invoke\n`cmake` as follows:\n\n```\ncmake \\\n  -DCMAKE_INCLUDE_PATH=/alt/include/path1:/alt/include/path2 \\\n  -DCMAKE_LIBRARY_PATH=/alt/lib/path1:/alt/lib/path2 ...\n```\n\n## Ubuntu LTS, CentOS Stream, Fedora\n\nUse the `getdeps.py` approach above. We test in CI on Ubuntu LTS, and occasionally on other distros.\n\nIf you find the set of system packages is not quite right for your chosen distro, you can specify distro version specific overrides in the dependency manifests (e.g. https://github.com/facebook/folly/blob/main/build/fbcode_builder/manifests/boost ). You could probably make it work on most recent Ubuntu/Debian or Fedora/Redhat derived distributions.\n\nAt time of writing (Dec 2021) there is a build break on GCC 11.x based systems in lang_badge_test.  If you don't need badge functionality you can work around by commenting it out from CMakeLists.txt (unfortunately fbthrift does need it)\n\n## Windows (Vcpkg)\n\nNote that many tests are disabled for folly Windows builds, you can see them in the log from the cmake configure step, or by looking for WINDOWS_DISABLED in `CMakeLists.txt`\n\nThat said, `getdeps.py` builds work on Windows and are tested in CI.\n\nIf you prefer, you can try Vcpkg. folly is available in [Vcpkg](https://github.com/Microsoft/vcpkg#vcpkg) and releases may be built via `vcpkg install folly:x64-windows`.\n\nYou may also use `vcpkg install folly:x64-windows --head` to build against `main`.\n\n## macOS\n\n`getdeps.py` builds work on macOS and are tested in CI, however if you prefer, you can try one of the macOS package managers\n\n### Homebrew\n\nfolly is available as a Formula and releases may be built via `brew install folly`.\n\nYou may also use `folly/build/bootstrap-osx-homebrew.sh` to build against `main`:\n\n```\n  ./folly/build/bootstrap-osx-homebrew.sh\n```\n\nThis will create a build directory `_build` in the top-level.\n\n### MacPorts\n\nInstall the required packages from MacPorts:\n\n```\n  sudo port install \\\n    boost \\\n    cmake \\\n    gflags \\\n    git \\\n    google-glog \\\n    libevent \\\n    libtool \\\n    lz4 \\\n    lzma \\\n    openssl \\\n    snappy \\\n    xz \\\n    zlib\n```\n\nDownload and install double-conversion:\n\n```\n  git clone https://github.com/google/double-conversion.git\n  cd double-conversion\n  cmake -DBUILD_SHARED_LIBS=ON .\n  make\n  sudo make install\n```\n\nDownload and install folly with the parameters listed below:\n\n```\n  git clone https://github.com/facebook/folly.git\n  cd folly\n  mkdir _build\n  cd _build\n  cmake ..\n  make\n  sudo make install\n```\n"
        },
        {
          "name": "buck2",
          "type": "blob",
          "size": 2.01,
          "content": "#!/usr/bin/env dotslash\n\n{\n  \"name\": \"buck2\",\n  \"platforms\": {\n    \"macos-aarch64\": {\n      \"size\": 26678080,\n      \"hash\": \"blake3\",\n      \"digest\": \"77a33acb816af93dc9a38d0bf26a1c0d044ede1d1e9bf80e68bd2c692e9b15b3\",\n      \"format\": \"zst\",\n      \"path\": \"buck2-aarch64-apple-darwin\",\n      \"providers\": [\n        {\n          \"url\": \"https://github.com/facebook/buck2/releases/download/2025-01-02/buck2-aarch64-apple-darwin.zst\"\n        }\n      ]\n    },\n    \"linux-aarch64\": {\n      \"size\": 28584872,\n      \"hash\": \"blake3\",\n      \"digest\": \"718ab212768932fa261284629b0c679639d06e7bff2d659f33eb1922121c4a9c\",\n      \"format\": \"zst\",\n      \"path\": \"buck2-aarch64-unknown-linux-musl\",\n      \"providers\": [\n        {\n          \"url\": \"https://github.com/facebook/buck2/releases/download/2025-01-02/buck2-aarch64-unknown-linux-musl.zst\"\n        }\n      ]\n    },\n    \"macos-x86_64\": {\n      \"size\": 28411693,\n      \"hash\": \"blake3\",\n      \"digest\": \"c70e6b0a7d35ada00dbb0a6af45c9032322c8d6bb5da9ade57813db8fec9cfd1\",\n      \"format\": \"zst\",\n      \"path\": \"buck2-x86_64-apple-darwin\",\n      \"providers\": [\n        {\n          \"url\": \"https://github.com/facebook/buck2/releases/download/2025-01-02/buck2-x86_64-apple-darwin.zst\"\n        }\n      ]\n    },\n    \"windows-x86_64\": {\n      \"size\": 23990882,\n      \"hash\": \"blake3\",\n      \"digest\": \"7dbef62c82d63a80c3a331b2455afce365c2a34c81a17533937f80989bc1f1dd\",\n      \"format\": \"zst\",\n      \"path\": \"buck2-x86_64-pc-windows-msvc.exe\",\n      \"providers\": [\n        {\n          \"url\": \"https://github.com/facebook/buck2/releases/download/2025-01-02/buck2-x86_64-pc-windows-msvc.exe.zst\"\n        }\n      ]\n    },\n    \"linux-x86_64\": {\n      \"size\": 30052738,\n      \"hash\": \"blake3\",\n      \"digest\": \"6a4e4f1e4c27fafa799fd64b258b00d405344e3e9e8fab0ab0cc88477bcf9947\",\n      \"format\": \"zst\",\n      \"path\": \"buck2-x86_64-unknown-linux-musl\",\n      \"providers\": [\n        {\n          \"url\": \"https://github.com/facebook/buck2/releases/download/2025-01-02/buck2-x86_64-unknown-linux-musl.zst\"\n        }\n      ]\n    }\n  }\n}\n"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.97,
          "content": "@REM Copyright (c) Meta Platforms, Inc. and affiliates.\n@REM\n@REM Licensed under the Apache License, Version 2.0 (the \"License\");\n@REM you may not use this file except in compliance with the License.\n@REM You may obtain a copy of the License at\n@REM\n@REM     http://www.apache.org/licenses/LICENSE-2.0\n@REM\n@REM Unless required by applicable law or agreed to in writing, software\n@REM distributed under the License is distributed on an \"AS IS\" BASIS,\n@REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@REM See the License for the specific language governing permissions and\n@REM limitations under the License.\n\n@echo off\nSETLOCAL\nif exist %~dp0\\..\\..\\opensource\\fbcode_builder\\getdeps.py (\n  set GETDEPS=%~dp0\\..\\..\\opensource\\fbcode_builder\\getdeps.py\n) else if exist %~dp0\\build\\fbcode_builder\\getdeps.py (\n  set GETDEPS=%~dp0\\build\\fbcode_builder\\getdeps.py\n) else (\n  echo \"error: unable to find getdeps.py\"\n  exit 1\n)\n\npython3.exe %GETDEPS% build folly %*\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.1,
          "content": "#!/bin/bash\n# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This script is just a simple wrapper around the\n# build/fbcode_builder/getdeps.py script.\n#\n# Feel free to invoke getdeps.py directly to have more control over the build.\n\nSCRIPT_DIR=$(dirname \"${BASH_SOURCE[0]}\")\nGETDEPS_PATHS=(\n    \"$SCRIPT_DIR/build/fbcode_builder/getdeps.py\"\n    \"$SCRIPT_DIR/../../opensource/fbcode_builder/getdeps.py\"\n)\nfor getdeps in \"${GETDEPS_PATHS[@]}\"; do\n    if [[ -x \"$getdeps\" ]]; then\n        exec \"$getdeps\" build folly \"$@\"\n    fi\ndone\necho \"Could not find getdeps.py\" >&2\nexit 1\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "folly",
          "type": "tree",
          "content": null
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}